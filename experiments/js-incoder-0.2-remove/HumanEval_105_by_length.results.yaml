name: HumanEval_105_by_length
language: js
results:
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  if(arr.length == 2){\n\
    \    return ['One', 'Two'];\n  }\n  if(arr.length == 3){\n    return ['One', 'Two',\
    \ 'Three'];\n  }\n  if(arr.length == 4){\n    return ['One', 'Two', 'Three', 'Four'];\n\
    \  }\n  if(arr.length == 5){\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n\
    \  }\n  if(arr.length == 6){\n    return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six'];\n  }\n  if(arr.length == 7){\n    return ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven'];\n  }\n  if(arr.length == 8){\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n  }\n  if(arr.length ==\
    \ 9){\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpnt_4f5zq.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnt_4f5zq.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  for(var i\
    \ = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >=\
    \ 1 && num <= 9){\n      result.push(names[num]);\n    }\n  }\n  \n  if(result.length\
    \ == 0){\n    return [];\n  }\n  \n  return result.reverse();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0b8bxjrn.js:17\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmp0b8bxjrn.js:17:19)\n\
    \    at test (/tmp/tmp0b8bxjrn.js:33:20)\n    at Object.<anonymous> (/tmp/tmp0b8bxjrn.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\t\tresult.push(by_name(arr[i]));\n\
    \t\t}\n\t}\n\treturn result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgddwbdp9.js:15\n\t\t\tresult.push(by_name(arr[i]));\n\t\t\t   \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpgddwbdp9.js:15:11)\n\
    \    at test (/tmp/tmpgddwbdp9.js:26:20)\n    at Object.<anonymous> (/tmp/tmpgddwbdp9.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(!arr.length) return [];\n  \n \
    \ var result = [];\n  var len = arr.length;\n  var min = 1;\n  var max = 9; \n\
    \  \n  for(var i = 0; i<len; i++){\n    var num = arr[i];\n    if(num < min ||\
    \ num > max) continue;\n    \n    var index = num - min;\n    result.push(names[index]);\n\
    \  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppdru687k.js:24\n    result.push(names[index]);\n              \
    \  ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmppdru687k.js:24:17)\n\
    \    at test (/tmp/tmppdru687k.js:35:20)\n    at Object.<anonymous> (/tmp/tmppdru687k.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var len = arr.length;\n  var min = 1;\n  var max = 9; \n  var mid;\n  while(min\
    \ <= max){\n    mid = Math.floor((min + max) / 2);\n    if(arr[mid] == mid){\n\
    \      result.push(names[mid]);\n      min = mid + 1;\n    }\n    else if(arr[mid]\
    \ > mid){\n      max = mid - 1;\n    }\n    else{\n      min = mid + 1;\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpis7ctg59.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpis7ctg59.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(by_name[arr[i]]);\n  \
    \  }\n  }\n  return result.length ? result.reverse() : [];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoivhlf7e.js:15\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpoivhlf7e.js:15:19)\n\
    \    at test (/tmp/tmpoivhlf7e.js:26:20)\n    at Object.<anonymous> (/tmp/tmpoivhlf7e.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(by_digit(num, arr));\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2t3r2n08.js:16\n      result.push(by_digit(num, arr));\n      \
    \       ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp2t3r2n08.js:16:14)\n\
    \    at test (/tmp/tmp2t3r2n08.js:27:20)\n    at Object.<anonymous> (/tmp/tmp2t3r2n08.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 0 && num < 10){\n      result.push(by_length_array[num]);\n    }\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptkbi0lk1.js:15\n      result.push(by_length_array[num]);\n    \
    \              ^\n\nReferenceError: by_length_array is not defined\n    at /tmp/tmptkbi0lk1.js:15:19\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmptkbi0lk1.js:13:7)\n\
    \    at test (/tmp/tmptkbi0lk1.js:26:20)\n    at Object.<anonymous> (/tmp/tmptkbi0lk1.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      arr.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4m7ycewt.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmp4m7ycewt.js:11:19)\n\
    \    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n\
    \    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n\
    \    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n\
    \    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n\
    \    at by_length (/tmp/tmp4m7ycewt.js:23:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  for(var i = 1; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n\
    \      result.push(by_name(arr[i]));\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph3h7c77x.js:21\n      result.push(by_name(arr[i]));\n         \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmph3h7c77x.js:21:14)\n\
    \    at test (/tmp/tmph3h7c77x.js:32:20)\n    at Object.<anonymous> (/tmp/tmph3h7c77x.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  if(arr.length == 2){\n\
    \    return ['One', 'Two'];\n  }\n  if(arr.length == 3){\n    return ['One', 'Two',\
    \ 'Three'];\n  }\n  if(arr.length == 4){\n    return ['One', 'Two', 'Three', 'Four'];\n\
    \  }\n  if(arr.length == 5){\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n\
    \  }\n  if(arr.length == 6){\n    return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six'];\n  }\n  if(arr.length == 7){\n    return ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven'];\n  }\n  if(arr.length == 8){\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n  }\n  if(arr.length ==\
    \ 9){\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp1shm536g.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1shm536g.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ for(var i = 0; i<arr.length; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(by_digit(num, i));\n    }\n  }\n  result = result.reverse();\n\
    \  for(var i = 0; i<result.length; i++){\n    result[i] = by_name(result[i]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnwdlaid3.js:22\n      result.push(by_digit(num, i));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpnwdlaid3.js:22:14)\n\
    \    at test (/tmp/tmpnwdlaid3.js:37:20)\n    at Object.<anonymous> (/tmp/tmpnwdlaid3.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      return result;\n\
    \    }\n    result.push(by_name(arr[i]));\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp757r8hm8.js:19\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp757r8hm8.js:19:12)\n\
    \    at test (/tmp/tmp757r8hm8.js:29:20)\n    at Object.<anonymous> (/tmp/tmp757r8hm8.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(by_digit(arr[i]));\n    }\n  }\n  return result.length ? result.reverse()\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpffoju6ki.js:15\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpffoju6ki.js:15:14)\n\
    \    at test (/tmp/tmpffoju6ki.js:26:20)\n    at Object.<anonymous> (/tmp/tmpffoju6ki.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(name[arr[i]]);\n    }\n  }\n  return result.length ? result : [];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8qgh7xd1.js:15\n      result.push(name[arr[i]]);\n            \
    \      ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmp8qgh7xd1.js:15:19)\n\
    \    at test (/tmp/tmp8qgh7xd1.js:26:20)\n    at Object.<anonymous> (/tmp/tmp8qgh7xd1.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tif(i<arr.length-1){\n\t\t\tif(arr[i]<arr[i+1]){\n\t\t\t\tresult.push(\"\
    One\");\n\t\t\t}else if(arr[i]>arr[i+1]){\n\t\t\t\tresult.push(\"Two\");\n\t\t\
    \t}else{\n\t\t\t\tresult.push(\"Three\");\n\t\t\t}\n\t\t}else{\n\t\t\tif(arr[i]<arr[i+1]){\n\
    \t\t\t\tresult.push(\"One\");\n\t\t\t}else if(arr[i]>arr[i+1]){\n\t\t\t\tresult.push(\"\
    Two\");\n\t\t\t}else{\n\t\t\t\tresult.push(\"Three\");\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Three',\n  'One',\n  'One',\n  'One',\n  'Two',\n  'One',\n  'Three'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp59jijp77.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp59jijp77.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \ 'Three',\n    'One', 'One',\n    'One', 'Two',\n    'One', 'Three'\n  ],\n \
    \ expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(by_digit(arr[i]));\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8ebuqotx.js:15\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp8ebuqotx.js:15:14)\n\
    \    at test (/tmp/tmp8ebuqotx.js:26:20)\n    at Object.<anonymous> (/tmp/tmp8ebuqotx.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>0 && arr[i]<10){\n      result.push(by_length_map[arr[i]]);\n \
    \   }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqefneo_x.js:15\n      result.push(by_length_map[arr[i]]);\n   \
    \               ^\n\nReferenceError: by_length_map is not defined\n    at by_length\
    \ (/tmp/tmpqefneo_x.js:15:19)\n    at test (/tmp/tmpqefneo_x.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpqefneo_x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(item){\n\
    \    if(item > 9){\n      result.push(by_length(arr.filter(function(item2){ return\
    \ item2 > 9; })));\n    }\n    result.push(item);\n  });\n  return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpw5ufegl2.js:27:10)\n    at Object.<anonymous> (/tmp/tmpw5ufegl2.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var len = arr.length;\n  for(var i = 1; i < len; i++){\n    if(arr[i] > arr[i\
    \ - 1]){\n      result.push(by_length(arr.slice(0, i)));\n      result.push(by_length(arr.slice(i)));\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  [\n\
    \    [\n      'One'\n    ],\n    [\n      [\n        'One'\n      ],\n      [\n\
    \        [],\n        [\n          'One'\n        ]\n      ],\n      [\n     \
    \   [\n          'One'\n        ],\n        []\n      ],\n      [\n        'One'\n\
    \      ]\n    ],\n    [\n      [\n        'One'\n      ],\n      [\n        'One'\n\
    \      ]\n    ],\n    [\n      [],\n      [\n        'One'\n      ]\n    ],\n\
    \    [\n      [\n        'One'\n      ],\n      [\n        [\n          'One'\n\
    \        ],\n        []\n      ],\n      [\n        [\n          'One'\n     ...\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpv6rlmuq1.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv6rlmuq1.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [],\n\
    \    [\n      [ 'One' ],\n      [ [ 'One' ], [ [], [ 'One' ] ], [ [ 'One' ], []\
    \ ], [ 'One' ] ],\n      [ [ 'One' ], [ 'One' ] ],\n      [ [], [ 'One' ] ],\n\
    \      [ [ 'One' ], [ [ 'One' ], [] ], [ [ 'One' ], [ 'One' ] ], [] ],\n     \
    \ [ 'One' ]\n    ],\n    [ [], [ 'One' ] ],\n    [ [ 'One' ], [ [], [ 'One' ]\
    \ ], [ [ 'One' ], [] ], [ 'One' ] ],\n    [ [], [ [ 'One' ], [ 'One' ] ], [ [],\
    \ [ 'One' ] ], [ 'One' ] ],\n    [ [], [ 'One' ] ],\n    [\n      [],\n      [\
    \ [ 'One' ], [ [ 'One' ], [] ], [ [ 'One' ], [ 'One' ] ], [] ],\n      [ [], [\
    \ 'One' ] ],\n      [ [ 'One' ], [] ],\n      [ [], [ [ 'One' ], [ 'One' ] ],\
    \ [ [], [ 'One' ] ], [ 'One' ] ],\n      []\n    ],\n    [ 'One' ]\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr.splice(i,1);\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu0hqhjf1.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpu0hqhjf1.js:11:19)\n\
    \    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n\
    \    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n\
    \    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n\
    \    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n\
    \    at by_length (/tmp/tmpu0hqhjf1.js:20:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(names[num - 1]);\n  }\n  return\
    \ result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd3gby21p.js:18\n    result.push(names[num - 1]);\n            \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpd3gby21p.js:18:17)\n\
    \    at test (/tmp/tmpd3gby21p.js:28:20)\n    at Object.<anonymous> (/tmp/tmpd3gby21p.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      result.push(by_length(arr.slice(i\
    \ + 1, len)));\n      result.push(by_length(arr.slice(0, i)));\n      continue;\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpqxmr92hl.js:31:10)\n    at Object.<anonymous> (/tmp/tmpqxmr92hl.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(by_length_num(num));\n  }\n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgkttiypx.js:18\n    result.push(by_length_num(num));\n        \
    \   ^\n\nReferenceError: by_length_num is not defined\n    at by_length (/tmp/tmpgkttiypx.js:18:12)\n\
    \    at test (/tmp/tmpgkttiypx.js:28:20)\n    at Object.<anonymous> (/tmp/tmpgkttiypx.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      arr.splice(i, 1);\n\
    \    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg4h4ipr8.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpg4h4ipr8.js:11:19)\n\
    \    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n\
    \    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n\
    \    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n\
    \    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n\
    \    at by_length (/tmp/tmpg4h4ipr8.js:21:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  if(arr.length == 2){\n\
    \    return ['One', 'Two'];\n  }\n  if(arr.length == 3){\n    return ['One', 'Two',\
    \ 'Three'];\n  }\n  if(arr.length == 4){\n    return ['One', 'Two', 'Three', 'Four'];\n\
    \  }\n  if(arr.length == 5){\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n\
    \  }\n  if(arr.length == 6){\n    return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six'];\n  }\n  if(arr.length == 7){\n    return ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven'];\n  }\n  if(arr.length == 8){\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n  }\n  if(arr.length ==\
    \ 9){\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmphym8r1ca.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmphym8r1ca.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i\
    \ = 0, len = arr.length; i < len; i++){\n        var num = arr[i];\n        if(num\
    \ < 1 || num > 9){\n            continue;\n        }\n        var name = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][num];\n        result.push(name);\n    }\n    return result.length ? result\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpcbdagr7a.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcbdagr7a.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(arr[i - 1]);\n    }\n  }\n  if(result.length){\n    result.sort();\n\
    \    for(var i = 0, len = result.length; i < len; i++){\n      result[i] = names[result[i]];\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyfesu1ub.js:21\n      result[i] = names[result[i]];\n         \
    \         ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpyfesu1ub.js:21:19)\n\
    \    at test (/tmp/tmpyfesu1ub.js:32:20)\n    at Object.<anonymous> (/tmp/tmpyfesu1ub.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 0 && num < 10){\n      result.push(by_length_map[num]);\n    }\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplqa4li4u.js:15\n      result.push(by_length_map[num]);\n      \
    \            ^\n\nReferenceError: by_length_map is not defined\n    at /tmp/tmplqa4li4u.js:15:19\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmplqa4li4u.js:13:7)\n\
    \    at test (/tmp/tmplqa4li4u.js:26:20)\n    at Object.<anonymous> (/tmp/tmplqa4li4u.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.unshift(names[num]);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnicray5_.js:18\n    result.unshift(names[num]);\n             \
    \      ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpnicray5_.js:18:20)\n\
    \    at test (/tmp/tmpnicray5_.js:28:20)\n    at Object.<anonymous> (/tmp/tmpnicray5_.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  for(var i = min; i <= max; i++){\n    result.push(by_length(arr.filter(function(e){return\
    \ e == i})));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo1z7hl66.js:22\n    result.push(by_length(arr.filter(function(e){return\
    \ e == i})));\n                              ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at Array.filter (<anonymous>)\n    at by_length (/tmp/tmpo1z7hl66.js:22:31)\n\
    \    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n\
    \    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n\
    \    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n\
    \    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n    at by_length (/tmp/tmpo1z7hl66.js:22:17)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tvar len = arr.length;\n\
    \tfor(var i = 0; i < len; i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\t\tresult.push(name[arr[i]]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkcn99prc.js:16\n\t\t\tresult.push(name[arr[i]]);\n\t\t\t      \
    \      ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmpkcn99prc.js:16:16)\n\
    \    at test (/tmp/tmpkcn99prc.js:27:20)\n    at Object.<anonymous> (/tmp/tmpkcn99prc.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tif(arr[i] > 9){\n\t\t\tresult.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \t\t\tbreak;\n\t\t}\n\t\tresult.push(arr[i]);\n\t}\n\tif(arr.length == 0){\n\t\
    \treturn [];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp0q_ex1el.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0q_ex1el.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      return result;\n    }\n    result.push(by_name(arr[i]));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvoxc9ufn.js:18\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpvoxc9ufn.js:18:12)\n\
    \    at test (/tmp/tmpvoxc9ufn.js:28:20)\n    at Object.<anonymous> (/tmp/tmpvoxc9ufn.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 0 && num < 10){\n      result.push(by_length_array[num]);\n    }\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9cdxh6a4.js:15\n      result.push(by_length_array[num]);\n    \
    \              ^\n\nReferenceError: by_length_array is not defined\n    at /tmp/tmp9cdxh6a4.js:15:19\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmp9cdxh6a4.js:13:7)\n\
    \    at test (/tmp/tmp9cdxh6a4.js:26:20)\n    at Object.<anonymous> (/tmp/tmp9cdxh6a4.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr[i-9]));\n    }\n    result.push(by_name(arr[i]));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkzam1w_u.js:17\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpkzam1w_u.js:17:12)\n\
    \    at test (/tmp/tmpkzam1w_u.js:27:20)\n    at Object.<anonymous> (/tmp/tmpkzam1w_u.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i = 0,\
    \ len = arr.length; i < len; i++){\n\t\tif(arr[i] > 9){\n\t\t\tresult.push(by_length(arr[i]\
    \ - 10));\n\t\t}else{\n\t\t\tresult.push(by_name(arr[i]));\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppmj1crxy.js:17\n\t\t\tresult.push(by_name(arr[i]));\n\t\t\t   \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmppmj1crxy.js:17:11)\n\
    \    at test (/tmp/tmppmj1crxy.js:28:20)\n    at Object.<anonymous> (/tmp/tmppmj1crxy.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var len = arr.length;\n  var min = 1;\n  var max = 9; \n  var mid = Math.floor((max\
    \ - min) / 2);\n  var mid2 = Math.floor((max - min) / 2);\n  var mid3 = Math.floor((max\
    \ - min) / 2);\n  for(var i=0; i<len; i++){\n    if(arr[i] >= min && arr[i] <=\
    \ max){\n      result.push(by_name(arr[i]));\n    }\n  }\n  for(var i=len-1; i>=0;\
    \ i--){\n    if(arr[i] >= min && arr[i] <= max){\n      result.push(by_name(arr[i]));\n\
    \    }\n  }\n  for(var i=len-1; i>=0; i--){\n    if(arr[i] >= min && arr[i] <=\
    \ max){\n      result.push(by_name(arr[i]));\n    }\n  }\n  for(var i=len-1; i>=0;\
    \ i--){\n    if(arr[i] >= min && arr[i] <= max){\n      result.push(by_name(arr[i]));\n\
    \    }\n  }\n  for(var i=len-1; i>=0; i--){\n    if(arr[i] >= min && arr[i] <=\
    \ max){\n      result.push(by_name(arr[i]));\n    }\n  }\n  for(var i=len-1; i>=0;\
    \ i--){\n    if(arr[i] >= min && arr[i] <= max){\n      result.push(by_name(arr[i]));\n\
    \    }\n  }\n  for(var i=len-1; i>=0; i--){\n    if(arr[i] >= min && arr[i] <=\
    \ max){\n      result.push(by_name(arr[i]));\n    }\n  }\n  for(var i=len-1; i>=0;\
    \ i--){\n    if(arr[i] >= min && arr[i] <= max){\n      result.push(by_name(arr[i]));\n\
    \    }\n  }\n  for(var i=len-1; i>=0; i--){\n    if(arr[i] >= min && arr[i] <=\
    \ max){\n      result.push(by_name(arr[i]));\n    }\n  }\n  for(var i=len-1; i>=0;\
    \ i--){\n    if(arr[i] >= min && arr[i] <= max){\n      result.push(by_name(arr[i]));\n\
    \    }\n  }\n  for(var i=len-1; i>=0; i--){\n    if(arr[i] >= min && arr[i] <=\
    \ max){\n      result.push(by_name(arr[i]));\n    }\n  }\n  for(var i=len-1; i>=0;\
    \ i--){\n    if(arr[i] >= min && arr[i] <= max){\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxifezgqr.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    var len =\
    \ arr.length;\n    var i;\n    var j;\n    for(i = 0; i < len; i++){\n       \
    \ for(j = i + 1; j < len; j++){\n            if(arr[i] > arr[j]){\n          \
    \      var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j]\
    \ = temp;\n            }\n        }\n    }\n    for(i = 0; i < len; i++){\n  \
    \      result.push(one[arr[i]]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjbfbs_ol.js:26\n        result.push(one[arr[i]]);\n           \
    \         ^\n\nReferenceError: one is not defined\n    at by_length (/tmp/tmpjbfbs_ol.js:26:21)\n\
    \    at test (/tmp/tmpjbfbs_ol.js:36:20)\n    at Object.<anonymous> (/tmp/tmpjbfbs_ol.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp27p0qgqq.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp27p0qgqq.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).concat(by_length(arr.slice(i+1)))));\n\
    \      arr.splice(i,1);\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_nlj1ieh.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmp_nlj1ieh.js:11:19)\n\
    \    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n\
    \    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n\
    \    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n\
    \    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n\
    \    at by_length (/tmp/tmp_nlj1ieh.js:20:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\t\n\tfor(var i\
    \ = 0, len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num < 1\
    \ || num > 9){\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tvar index = num - 1;\n\t\t\n\
    \t\tvar name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][num];\n\t\t\n\t\tresult.push(name);\n\t}\n\t\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmppn3_olnb.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmppn3_olnb.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>=1 && arr[i]<=9){\n      result.push(by_name[arr[i]]);\n    }\n\
    \  }\n  return result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp90alwqy6.js:15\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp90alwqy6.js:15:19)\n\
    \    at test (/tmp/tmp90alwqy6.js:26:20)\n    at Object.<anonymous> (/tmp/tmp90alwqy6.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(names[num]);\n    }\n  }\n  if(result.length){\n\
    \    result.reverse();\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfmwfcp4p.js:16\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpfmwfcp4p.js:16:19)\n\
    \    at test (/tmp/tmpfmwfcp4p.js:30:20)\n    at Object.<anonymous> (/tmp/tmpfmwfcp4p.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  for(var i = min; i <= max; i++){\n    result.push(by_digit(arr, i));\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9go668j0.js:22\n    result.push(by_digit(arr, i));\n          \
    \ ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp9go668j0.js:22:12)\n\
    \    at test (/tmp/tmp9go668j0.js:32:20)\n    at Object.<anonymous> (/tmp/tmp9go668j0.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(names[num]);\n    }\n  }\n  return result.length\
    \ ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd1q3xn1l.js:16\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpd1q3xn1l.js:16:19)\n\
    \    at test (/tmp/tmpd1q3xn1l.js:27:20)\n    at Object.<anonymous> (/tmp/tmpd1q3xn1l.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tif(arr[i] > 9){\n\t\t\tresult.push(by_length(arr.slice(0,i).reverse()));\n\
    \t\t\tbreak;\n\t\t}\n\t\tresult.push(arr[i]);\n\t}\n\treturn result.length ? result\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp_beaeobi.js:28:10)\n    at Object.<anonymous> (/tmp/tmp_beaeobi.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i\
    \ = 0, len = arr.length; i < len; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n\
    \            result.push(by_length_array[arr[i] - 1]);\n        }\n    }\n   \
    \ return result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2z34mys6.js:15\n            result.push(by_length_array[arr[i]\
    \ - 1]);\n                        ^\n\nReferenceError: by_length_array is not\
    \ defined\n    at by_length (/tmp/tmp2z34mys6.js:15:25)\n    at test (/tmp/tmp2z34mys6.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2z34mys6.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(!arr || arr.length === 0){\n  \
    \  return [];\n  }\n  var result = [];\n  for(var i = 0, len = arr.length; i <\
    \ len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(by_name[arr[i]]);\n\
    \    }\n  }\n  return result.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv_fl68jc.js:18\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpv_fl68jc.js:18:19)\n\
    \    at test (/tmp/tmpv_fl68jc.js:29:20)\n    at Object.<anonymous> (/tmp/tmpv_fl68jc.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i).reverse()));\n      arr.splice(i, 1);\n      i--;\n      len--;\n    }\n\
    \  }\n  if(arr.length){\n    result.push(by_length(arr));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppgbxf6yc.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmppgbxf6yc.js:11:19)\n\
    \    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n\
    \    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n\
    \    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n\
    \    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n\
    \    at by_length (/tmp/tmppgbxf6yc.js:22:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>=1 && arr[i]<=9){\n      result.push(by_name(arr[i]));\n    }\n\
    \  }\n  if(result.length==0){\n    return [];\n  }\n  if(result.length==1){\n\
    \    return result[0];\n  }\n  return result.reverse().join(\"\");\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7aws4ehf.js:15\n      result.push(by_name(arr[i]));\n         \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp7aws4ehf.js:15:14)\n\
    \    at test (/tmp/tmp7aws4ehf.js:32:20)\n    at Object.<anonymous> (/tmp/tmp7aws4ehf.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  for(var i = min; i <= max; i++){\n    result.push(by_digit(arr[i]));\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfikjr94j.js:22\n    result.push(by_digit(arr[i]));\n          \
    \ ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpfikjr94j.js:22:12)\n\
    \    at test (/tmp/tmpfikjr94j.js:32:20)\n    at Object.<anonymous> (/tmp/tmpfikjr94j.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i\
    \ = 0, len = arr.length; i < len; i++){\n        var num = arr[i];\n        if(num\
    \ < 1 || num > 9){\n            continue;\n        }\n        num = num - 1;\n\
    \        result.push(by_digit[num]);\n    }\n    if(result.length){\n        return\
    \ result.join('');\n    }\n    return [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzff28a23.js:19\n        result.push(by_digit[num]);\n         \
    \           ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpzff28a23.js:19:21)\n\
    \    at test (/tmp/tmpzff28a23.js:32:20)\n    at Object.<anonymous> (/tmp/tmpzff28a23.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      return result;\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp4lawt9hb.js:29:10)\n    at Object.<anonymous> (/tmp/tmp4lawt9hb.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i = 0,\
    \ len = arr.length; i < len; i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\t\t\
    result.push(name[arr[i]]);\n\t\t}\n\t}\n\treturn result.length ? result : [];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7z3cnu7j.js:15\n\t\t\tresult.push(name[arr[i]]);\n\t\t\t      \
    \      ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmp7z3cnu7j.js:15:16)\n\
    \    at test (/tmp/tmp7z3cnu7j.js:26:20)\n    at Object.<anonymous> (/tmp/tmp7z3cnu7j.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(by_digit(arr[i]));\n    }\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvcwukif5.js:15\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpvcwukif5.js:15:14)\n\
    \    at test (/tmp/tmpvcwukif5.js:26:20)\n    at Object.<anonymous> (/tmp/tmpvcwukif5.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 0 && num < 10){\n      result.push(by_length_map[num]);\n    }\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn_sh1nw4.js:15\n      result.push(by_length_map[num]);\n      \
    \            ^\n\nReferenceError: by_length_map is not defined\n    at /tmp/tmpn_sh1nw4.js:15:19\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpn_sh1nw4.js:13:7)\n\
    \    at test (/tmp/tmpn_sh1nw4.js:26:20)\n    at Object.<anonymous> (/tmp/tmpn_sh1nw4.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]<1 || arr[i]>9){\n      continue;\n    }\n    result.push(by_length(arr.slice(i+1)));\n\
    \  }\n  if(arr.length==0){\n    return [];\n  }\n  for(var i=0;i<arr.length;i++){\n\
    \    result.push(by_name(arr[i]));\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph3dpj4hg.js:23\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmph3dpj4hg.js:23:12)\n\
    \    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n\
    \    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n\
    \    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n\
    \    at by_length (/tmp/tmph3dpj4hg.js:17:17)\n    at test (/tmp/tmph3dpj4hg.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmph3dpj4hg.js:40:1)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(by_name(arr[i]));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnwl2lodw.js:18\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpnwl2lodw.js:18:12)\n\
    \    at test (/tmp/tmpnwl2lodw.js:28:20)\n    at Object.<anonymous> (/tmp/tmpnwl2lodw.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i = 0,\
    \ len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num < 1 || num\
    \ > 9){\n\t\t\tcontinue;\n\t\t}\n\t\tvar index = num - 1;\n\t\tvar name = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][num];\n\t\tresult.push(name);\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4omb2x1n.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4omb2x1n.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var len = arr.length;\n  var maxLen = 9;\n  var minLen = 1;\n  var maxIndex\
    \ = len-1;\n  var minIndex = 0;\n  while(maxIndex >= minIndex){\n    var mid =\
    \ (maxIndex + minIndex)/2;\n    if(arr[mid] < minLen){\n      minIndex = mid+1;\n\
    \    }\n    else if(arr[mid] > maxLen){\n      maxIndex = mid-1;\n    }\n    else{\n\
    \      result.push(arr[mid]);\n      maxIndex = mid-1;\n    }\n  }\n  if(minIndex\
    \ == 0){\n    result.push('One');\n  }\n  else if(minIndex == len-1){\n    result.push('Nine');\n\
    \  }\n  else{\n    result.push('One');\n    for(var i = minIndex; i < len; i++){\n\
    \      result.push(['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][arr[i]]);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined,\n  undefined,\n  'One'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp889oe054.js:57:10)\n    at Object.<anonymous> (/tmp/tmp889oe054.js:64:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined, undefined, 'One' ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.unshift(arr[i]);\n\
    \    }\n  }\n  if(result.length == 0){\n    return [];\n  }\n  if(result.length\
    \ == 1){\n    return [\"One\"];\n  }\n  if(result.length == 2){\n    return [\"\
    Two\", \"One\"];\n  }\n  if(result.length == 3){\n    return [\"Three\", \"Two\"\
    , \"One\"];\n  }\n  if(result.length == 4){\n    return [\"Four\", \"Three\",\
    \ \"Two\", \"One\"];\n  }\n  if(result.length == 5){\n    return [\"Five\", \"\
    Four\", \"Three\", \"Two\", \"One\"];\n  }\n  if(result.length == 6){\n    return\
    \ [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"];\n  }\n  if(result.length\
    \ == 7){\n    return [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"One\"];\n  }\n  if(result.length == 8){\n    return [\"Eight\", \"Seven\"\
    , \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"];\n  }\n  if(result.length\
    \ == 9){\n    return [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"One\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Eight',\n\
    \  'Seven',\n  'Six',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'One'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmppvsiy8r3.js:55:10)\n\
    \    at Object.<anonymous> (/tmp/tmppvsiy8r3.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Eight',\
    \ 'Seven',\n    'Six',   'Five',\n    'Four',  'Three',\n    'Two',   'One'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num < 1 || num > 9) return;\n    num = num - 1;\n    result.push(by_digit[num]);\n\
    \  });\n  return result.join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6pcxlv4m.js:16\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at /tmp/tmp6pcxlv4m.js:16:17\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmp6pcxlv4m.js:13:7)\n\
    \    at test (/tmp/tmp6pcxlv4m.js:26:20)\n    at Object.<anonymous> (/tmp/tmp6pcxlv4m.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i = 0,\
    \ len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num > 9){\n\t\
    \t\tnum = num - 10;\n\t\t}\n\t\tresult.push(nums[num]);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbyhn7b85.js:18\n\t\tresult.push(nums[num]);\n\t\t            ^\n\
    \nReferenceError: nums is not defined\n    at by_length (/tmp/tmpbyhn7b85.js:18:15)\n\
    \    at test (/tmp/tmpbyhn7b85.js:28:20)\n    at Object.<anonymous> (/tmp/tmpbyhn7b85.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(by_digit(arr[i]));\n    }\n  }\n  if(result.length){\n    result.reverse();\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc_8iwmkd.js:15\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpc_8iwmkd.js:15:14)\n\
    \    at test (/tmp/tmpc_8iwmkd.js:29:20)\n    at Object.<anonymous> (/tmp/tmpc_8iwmkd.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var min = 1;\n  var max = 9; \n  var len = arr.length;\n  for(var i = 0; i<len;\
    \ i++){\n    var num = arr[i];\n    if(num < min || num > max){\n      continue;\n\
    \    }\n    result.push(names[num]);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd0ivkqd2.js:27\n    result.push(names[num]);\n                ^\n\
    \nReferenceError: names is not defined\n    at by_length (/tmp/tmpd0ivkqd2.js:27:17)\n\
    \    at test (/tmp/tmpd0ivkqd2.js:37:20)\n    at Object.<anonymous> (/tmp/tmpd0ivkqd2.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n    }\n    else\
    \ if(arr[i] > 1){\n      result.push(by_length(arr.slice(0, i)));\n      result.push(by_length(arr.slice(i\
    \ + 1, len)));\n    }\n    else if(arr[i] === 1){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  [\n\
    \    [],\n    [\n      []\n    ],\n    [\n      [],\n      [\n        []\n   \
    \   ]\n    ],\n    [\n      [],\n      [\n        [],\n        [\n          [],\n\
    \          [\n            [],\n            []\n          ],\n          [\n   \
    \         [],\n            []\n          ],\n          []\n        ],\n      \
    \  [\n          [],\n          []\n        ],\n        [\n          [],\n    \
    \      []\n        ],\n        [\n          [],\n          [\n            [],\n\
    \            []\n          ],\n          [\n            [],\n            []\n\
    \  ...\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n \
    \ 'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp9b2mq3ja.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9b2mq3ja.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [],\n\
    \    [\n      [],\n      [ [] ],\n      [ [], [ [] ] ],\n      [\n        [],\n\
    \        [\n          [],\n          [ [], [Array], [Array], [] ],\n         \
    \ [ [], [] ],\n          [ [], [] ],\n          [ [], [Array], [Array], [] ],\n\
    \          []\n        ],\n        [ [], [] ],\n        [ [], [ [], [] ], [ [],\
    \ [] ], [] ],\n        [ [], [ [], [] ], [ [], [] ], [] ],\n        [ [], [] ],\n\
    \        [\n          [],\n          [ [], [Array], [Array], [] ],\n         \
    \ [ [], [] ],\n          [ [], [] ],\n          [ [], [Array], [Array], [] ],\n\
    \          []\n        ],\n        []\n      ],\n      [ [], [ [] ], [ [], [ []\
    \ ] ], [] ],\n      [\n        [],\n        [ [], [ [], [] ], [ [], [] ], [] ],\n\
    \        [ [], [] ],\n        [ [], [] ],\n        [ [], [ [], ["
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>=1 && arr[i]<=9){\n      result.push(by_name[arr[i]]);\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe33yqc2y.js:15\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpe33yqc2y.js:15:19)\n\
    \    at test (/tmp/tmpe33yqc2y.js:26:20)\n    at Object.<anonymous> (/tmp/tmpe33yqc2y.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      num = num - 1;\n    }\n    result.push(names[num]);\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp74g1ftnf.js:18\n    result.push(names[num]);\n                ^\n\
    \nReferenceError: names is not defined\n    at by_length (/tmp/tmp74g1ftnf.js:18:17)\n\
    \    at test (/tmp/tmp74g1ftnf.js:28:20)\n    at Object.<anonymous> (/tmp/tmp74g1ftnf.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(name[num - 1]);\n  }\n  return\
    \ result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp62ksuv7z.js:18\n    result.push(name[num - 1]);\n             \
    \   ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmp62ksuv7z.js:18:17)\n\
    \    at test (/tmp/tmp62ksuv7z.js:28:20)\n    at Object.<anonymous> (/tmp/tmp62ksuv7z.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr[i]\
    \ - 10));\n    }else{\n      result.push(by_name(arr[i]));\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpiafd986q.js:17\n      result.push(by_name(arr[i]));\n         \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpiafd986q.js:17:14)\n\
    \    at test (/tmp/tmpiafd986q.js:28:20)\n    at Object.<anonymous> (/tmp/tmpiafd986q.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(num);\n  }\n  if(result.length){\n\
    \    result.sort(function(a, b){\n      return a - b;\n    });\n    for(var i\
    \ = 0, len = result.length; i < len; i++){\n      result[i] = names[result[i]];\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe662asd9.js:25\n      result[i] = names[result[i]];\n         \
    \         ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpe662asd9.js:25:19)\n\
    \    at test (/tmp/tmpe662asd9.js:36:20)\n    at Object.<anonymous> (/tmp/tmpe662asd9.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(by_name[arr[i]]);\n  \
    \  }\n  }\n  if(result.length == 0){\n    return [];\n  }\n  if(result.length\
    \ == 1){\n    return result[0];\n  }\n  return result.sort().reverse().join(\"\
    \");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprvp1r97i.js:15\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmprvp1r97i.js:15:19)\n\
    \    at test (/tmp/tmprvp1r97i.js:32:20)\n    at Object.<anonymous> (/tmp/tmprvp1r97i.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  for(var i\
    \ = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n    \n    if(num\
    \ < 1 || num > 9){\n      continue;\n    }\n    \n    var index = num - 1;\n \
    \   \n    if(index >= 0 && index < 10){\n      result.push(\"One\");\n    }\n\
    \    else if(index >= 10 && index < 100){\n      result.push(\"Two\");\n    }\n\
    \    else if(index >= 100 && index < 1000){\n      result.push(\"Three\");\n \
    \   }\n    else if(index >= 1000 && index < 10000){\n      result.push(\"Four\"\
    );\n    }\n    else if(index >= 10000 && index < 100000){\n      result.push(\"\
    Five\");\n    }\n    else if(index >= 100000 && index < 1000000){\n      result.push(\"\
    Six\");\n    }\n    else if(index >= 1000000 && index < 10000000){\n      result.push(\"\
    Seven\");\n    }\n    else if(index >= 10000000 && index < 100000000){\n     \
    \ result.push(\"Eight\");\n    }\n    else if(index >= 100000000 && index < 1000000000){\n\
    \      result.push(\"Nine\");\n    }\n    else if(index >= 1000000000 && index\
    \ < 10000000000){\n      result.push(\"Ten\");\n    }\n    else if(index >= 10000000000\
    \ && index < 100000000000){\n      result.push(\"Eleven\");\n    }\n    else if(index\
    \ >= 100000000000 && index < 1000000000000){\n      result.push(\"Twelve\");\n\
    \    }\n    else if(index >= 1000000000000 && index < 10000000000000){\n     \
    \ result.push(\"Thirteen\");\n    }\n    else if(index >= 10000000000000 && index\
    \ < 100000000000000){\n      result.push(\"Fourteen\");\n    }\n    else if(index\
    \ >= 100000000000000 && index < 1000000000000000){\n      result.push(\"Fifteen\"\
    );\n    }\n    else if(index >= 1000000000000000 && index < 10000000000000000){\n\
    \      result.push(\"Sixteen\");\n    }\n    else if(index >= 10000000000000000\
    \ && index < 100000000000000000){\n      result.push(\"Seventeen\");\n    }\n\
    \    else if(index >= 100000000000000000 && index < 1000000000000000000){\n  \
    \    result.push(\"Eighteen\");\n    }\n    else if(index >= 1000000000000000000\
    \ && index < 10000000000000000000){\n      result.push(\"Nineteen\");\n    }\n\
    \    else if(index >= 10000000000000000000 && index < 100000000000000000000){\n\
    \      result.push(\"Twenty\");\n    }\n    else if(index >= 100000000000000000000\
    \ && index < 1000000000000000000\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxz6ka2w1.js:84\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(by_name[arr[i]]);\n  }\n  if(arr.length==0){\n\
    \    return [];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpumua1os1.js:18\n    result.push(by_name[arr[i]]);\n           \
    \     ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpumua1os1.js:18:17)\n\
    \    at test (/tmp/tmpumua1os1.js:31:20)\n    at Object.<anonymous> (/tmp/tmpumua1os1.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmphwh780i7.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmphwh780i7.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      return result;\n\
    \    }\n    result.push(by_name(arr[i]));\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps5sb0nmf.js:19\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmps5sb0nmf.js:19:12)\n\
    \    at test (/tmp/tmps5sb0nmf.js:29:20)\n    at Object.<anonymous> (/tmp/tmps5sb0nmf.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\t\n\tfor(var i\
    \ = 0, len = arr.length; i < len; i++){\n\t\tif(arr[i] > 9){\n\t\t\tresult.push(by_length(arr.slice(0,\
    \ i).concat(by_length(arr.slice(i+1)))));\n\t\t\tbreak;\n\t\t}\n\t\tresult.push(arr[i]);\n\
    \t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpce39z79g.js:30:10)\n    at Object.<anonymous> (/tmp/tmpce39z79g.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if(num>9){\n      num = num - 10;\n    }\n    result.push(by_digit[num]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprwh5b7lz.js:18\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmprwh5b7lz.js:18:17)\n\
    \    at test (/tmp/tmprwh5b7lz.js:28:20)\n    at Object.<anonymous> (/tmp/tmprwh5b7lz.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  var length = max - min + 1;\n  for(var i = min; i <= max; i++){\n    result.push(by_digit(arr,\
    \ i, length));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn9qaa99g.js:23\n    result.push(by_digit(arr, i, length));\n  \
    \         ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpn9qaa99g.js:23:12)\n\
    \    at test (/tmp/tmpn9qaa99g.js:33:20)\n    at Object.<anonymous> (/tmp/tmpn9qaa99g.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr.splice(0,i);\n    }\n  }\n  if(arr.length){\n    result.push(arr[0]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpi4jky17k.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi4jky17k.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      return result;\n    }\n    result.push(by_name(arr[i]));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpggwky3ee.js:18\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpggwky3ee.js:18:12)\n\
    \    at test (/tmp/tmpggwky3ee.js:28:20)\n    at Object.<anonymous> (/tmp/tmpggwky3ee.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var max = 0;\n  for(var i in arr){\n    if(arr[i] > max){\n      max = arr[i];\n\
    \    }\n  }\n  var ones = max/10;\n  var tens = max%10;\n  for(var i in arr){\n\
    \    if(arr[i] > ones && arr[i] < tens){\n      result.push(\"One\");\n    }\n\
    \    else if(arr[i] > tens && arr[i] < max){\n      result.push(\"Two\");\n  \
    \  }\n    else if(arr[i] > max && arr[i] < tens){\n      result.push(\"Three\"\
    );\n    }\n    else if(arr[i] > tens && arr[i] < ones){\n      result.push(\"\
    Four\");\n    }\n    else if(arr[i] > ones && arr[i] < max){\n      result.push(\"\
    Five\");\n    }\n    else if(arr[i] > max && arr[i] < ones){\n      result.push(\"\
    Six\");\n    }\n    else if(arr[i] > ones && arr[i] < tens){\n      result.push(\"\
    Seven\");\n    }\n    else if(arr[i] > tens && arr[i] < ones){\n      result.push(\"\
    Eight\");\n    }\n    else if(arr[i] > ones && arr[i] < max){\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpdcx7vrtr.js:64:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdcx7vrtr.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \ 'One',\n    'One', 'One',\n    'One', 'One',\n    'One'\n  ],\n  expected: [\n\
    \    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpk453hy4t.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk453hy4t.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).concat(by_length(arr.slice(i+1)))));\n\
    \    }else{\n      result.push(by_name(arr[i]));\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsaikugb2.js:17\n      result.push(by_name(arr[i]));\n         \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpsaikugb2.js:17:14)\n\
    \    at test (/tmp/tmpsaikugb2.js:28:20)\n    at Object.<anonymous> (/tmp/tmpsaikugb2.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length === 0){\n    return\
    \ [];\n  }\n  if(arr.length === 1){\n    return [\"One\"];\n  }\n  var result\
    \ = [];\n  var len = arr.length;\n  for(var i=0; i<len; i++){\n    if(arr[i] <\
    \ 1 || arr[i] > 9){\n      continue;\n    }\n    var index = arr[i] - 1;\n   \
    \ result.push(by_name[index]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7tp_ztgp.js:25\n    result.push(by_name[index]);\n            \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp7tp_ztgp.js:25:17)\n\
    \    at test (/tmp/tmp7tp_ztgp.js:35:20)\n    at Object.<anonymous> (/tmp/tmp7tp_ztgp.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(arr[i] + '-' + One[arr[i]]);\n    }\n  }\n  return result.length\
    \ ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpynz3gw7i.js:15\n      result.push(arr[i] + '-' + One[arr[i]]);\n\
    \                                 ^\n\nReferenceError: One is not defined\n  \
    \  at by_length (/tmp/tmpynz3gw7i.js:15:34)\n    at test (/tmp/tmpynz3gw7i.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpynz3gw7i.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp5m6vy70j.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5m6vy70j.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    var index = num - 1;\n    var name = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp51gxvadx.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp51gxvadx.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(by_digit(arr[i]));\n    }\n  }\n  return result.length ? result.reverse()\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp78osvorm.js:15\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp78osvorm.js:15:14)\n\
    \    at test (/tmp/tmp78osvorm.js:26:20)\n    at Object.<anonymous> (/tmp/tmp78osvorm.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      return result;\n\
    \    }\n    result.push(arr[i]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpue8ez7au.js:29:10)\n    at Object.<anonymous> (/tmp/tmpue8ez7au.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(!arr.length)\
    \ return result;\n  \n  for(var i = 0, len = arr.length; i < len; i++){\n    if(arr[i]\
    \ < 1 || arr[i] > 9) continue;\n    \n    var index = arr[i] - 1;\n    \n    if(index\
    \ >= 0 && index < result.length){\n      result[index] = result[index] + \" \"\
    \ + names[index];\n    }\n  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmp1ft_n_io.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ft_n_io.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    var num = arr[i];\n    if(num < 1 || num > 9){\n      continue;\n\
    \    }\n    var name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][num-1];\n    result.push(name);\n  }\n  if(result.length\
    \ == 0){\n    return [];\n  }\n  return result.reverse();\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp3zz3njue.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3zz3njue.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \    }\n    result.push(by_name(arr[i]));\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_7ymudii.js:17\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp_7ymudii.js:17:12)\n\
    \    at test (/tmp/tmp_7ymudii.js:27:20)\n    at Object.<anonymous> (/tmp/tmp_7ymudii.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length === 0){\n    return\
    \ [];\n  }\n  if(arr.length === 1){\n    return ['One'];\n  }\n  var result =\
    \ [];\n  var len = arr.length;\n  var min = Math.min.apply(Math, arr);\n  var\
    \ max = Math.max.apply(Math, arr);\n  var mid = Math.floor((min + max) / 2);\n\
    \  while(len--){\n    if(arr[len] > mid){\n      result.push(by_length(arr.slice(0,\
    \ len)));\n      break;\n    }\n    else if(arr[len] < mid){\n      result.push(by_length(arr.slice(len)));\n\
    \      break;\n    }\n    else{\n      result.push(by_length(arr.slice(0, len)));\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'One'\n\
    \  ]\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp0521ukbh.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0521ukbh.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'One'\
    \ ] ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    var num = arr[i];\n    if(num >= 1 && num <= 9){\n      result.push(by_name[num]);\n\
    \    }\n  }\n  return result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp48sdbfip.js:16\n      result.push(by_name[num]);\n            \
    \      ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp48sdbfip.js:16:19)\n\
    \    at test (/tmp/tmp48sdbfip.js:27:20)\n    at Object.<anonymous> (/tmp/tmp48sdbfip.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    num = num - 1;\n    var name = [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][num];\n    result.push(name);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp5dpcwkn0.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5dpcwkn0.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \  'One',\n    'One',  'Four',\n    'Five', 'Eight',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      arr.splice(i,1);\n      i--;\n    }\n  }\n  if(arr.length>0){\n    result.push(by_length(arr).join(''));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp99y3ug_2.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmp99y3ug_2.js:11:19)\n\
    \    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n\
    \    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n\
    \    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n\
    \    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n\
    \    at by_length (/tmp/tmp99y3ug_2.js:21:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 0 && num\
    \ < 9){\n      result.push(names[num]);\n    }\n  }\n  if(result.length){\n  \
    \  result.reverse();\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphzkla6gl.js:16\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmphzkla6gl.js:16:19)\n\
    \    at test (/tmp/tmphzkla6gl.js:30:20)\n    at Object.<anonymous> (/tmp/tmphzkla6gl.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(item){\n\
    \    if(item > 9){\n      result.push(by_length(arr.filter(function(item2){ return\
    \ item2 > 9; })));\n    }\n    result.push(item);\n  });\n  return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp9hrwkpft.js:27:10)\n    at Object.<anonymous> (/tmp/tmp9hrwkpft.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(item){\n\
    \    if(item > 9){\n      result.push(by_length(arr.filter(function(item2){ return\
    \ item2 > 9; })));\n    }\n    result.push(item);\n  });\n  return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp20wmcw4b.js:27:10)\n    at Object.<anonymous> (/tmp/tmp20wmcw4b.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      break;\n    }\n    result.push(by_name(arr[i]));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf0yb7sdf.js:18\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpf0yb7sdf.js:18:12)\n\
    \    at test (/tmp/tmpf0yb7sdf.js:28:20)\n    at Object.<anonymous> (/tmp/tmpf0yb7sdf.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if(num>9){\n      num = num - 10;\n    }\n    if(num<1){\n\
    \      num = 1;\n    }\n    result.push(by_digit[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpaar_34ly.js:21\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpaar_34ly.js:21:17)\n\
    \    at test (/tmp/tmpaar_34ly.js:31:20)\n    at Object.<anonymous> (/tmp/tmpaar_34ly.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  if(arr.length == 1){\n    return [\"\
    One\"];\n  }\n  \n  if(arr.length == 2){\n    return [\"One\", \"Two\"];\n  }\n\
    \  \n  if(arr.length == 3){\n    return [\"One\", \"Two\", \"Three\"];\n  }\n\
    \  \n  if(arr.length == 4){\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    ];\n  }\n  \n  if(arr.length == 5){\n    return [\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\"];\n  }\n  \n  if(arr.length == 6){\n    return [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  \n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  \n  if(arr.length == 8){\n    return [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  \n  if(arr.length\
    \ == 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n  }\n  \n  if(arr.length == 10){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"Ten\"];\n  }\n  \n  if(arr.length == 11){\n    return [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Eleven\"];\n  }\n  \n  if(arr.length == 12){\n    return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Eleven\", \"Twelve\"];\n  }\n  \n  if(arr.length == 13){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"];\n  }\n  \n  if(arr.length\
    \ == 14){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"\
    , \"Fourteen\"];\n  }\n  \n  if(arr.length == 15){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"\
    , \"Eleven\", \"Twel\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpglzc672x.js:75\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twel\n\
    \                                                                            \
    \                         ^^^^^\n\nSyntaxError: Invalid or unexpected token\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-1;\n    }\n  }\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  for(var i=0; i<arr.length; i++){\n    result.push(by_name(arr[i]));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjbx2fqz0.js:23\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpjbx2fqz0.js:23:12)\n\
    \    at test (/tmp/tmpjbx2fqz0.js:33:20)\n    at Object.<anonymous> (/tmp/tmpjbx2fqz0.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp5ps71fbn.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ps71fbn.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(arr[i - 1]);\n    }\n  }\n  if(result.length == 0){\n    return\
    \ [];\n  }\n  if(result.length == 1){\n    return result[0];\n  }\n  return result.reverse().map(function(x){\n\
    \    return names[x];\n  });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpubc_qe9d.js:25\n    return names[x];\n    ^\n\nReferenceError:\
    \ names is not defined\n    at /tmp/tmpubc_qe9d.js:25:5\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpubc_qe9d.js:24:27)\n    at test (/tmp/tmpubc_qe9d.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmpubc_qe9d.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>0 && arr[i]<10){\n      result.push(by_length_arr[arr[i]]);\n \
    \   }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplt436fo5.js:15\n      result.push(by_length_arr[arr[i]]);\n   \
    \               ^\n\nReferenceError: by_length_arr is not defined\n    at by_length\
    \ (/tmp/tmplt436fo5.js:15:19)\n    at test (/tmp/tmplt436fo5.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplt436fo5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 0 && num < 10){\n      result.push(by_length_array[num]);\n    }\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp07krh8xk.js:15\n      result.push(by_length_array[num]);\n    \
    \              ^\n\nReferenceError: by_length_array is not defined\n    at /tmp/tmp07krh8xk.js:15:19\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmp07krh8xk.js:13:7)\n\
    \    at test (/tmp/tmp07krh8xk.js:26:20)\n    at Object.<anonymous> (/tmp/tmp07krh8xk.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  for(var i\
    \ = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9\
    \ || num < 1){\n      continue;\n    }\n    result.push(num);\n  }\n  \n  if(result.length\
    \ == 0){\n    return [];\n  }\n  \n  for(var i = 0, len = result.length; i < len;\
    \ i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\n    var num = result[i];\n    \n    if(num == 0){\n      result.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  \n  for(var i = 0, len = result.length;\
    \ i < len; i++){\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe75ejh3d.js:139\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if(num>9){\n      num = num - 10;\n    }\n    result.push(by_digit[num]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpypg6mgs2.js:18\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpypg6mgs2.js:18:17)\n\
    \    at test (/tmp/tmpypg6mgs2.js:28:20)\n    at Object.<anonymous> (/tmp/tmpypg6mgs2.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  var len = max - min + 1;\n  for(var i = min; i <= max; i++){\n    result.push(by_digit(arr,\
    \ len-i, i));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps96j4lxi.js:23\n    result.push(by_digit(arr, len-i, i));\n   \
    \        ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmps96j4lxi.js:23:12)\n\
    \    at test (/tmp/tmps96j4lxi.js:33:20)\n    at Object.<anonymous> (/tmp/tmps96j4lxi.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tvar len = arr.length;\n\
    \tvar i;\n\tfor(i = 0; i < len; i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\
    \t\tresult.push(name[arr[i]]);\n\t\t}\n\t}\n\treturn result.length ? result :\
    \ [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0t2w2u43.js:17\n\t\t\tresult.push(name[arr[i]]);\n\t\t\t      \
    \      ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmp0t2w2u43.js:17:16)\n\
    \    at test (/tmp/tmp0t2w2u43.js:28:20)\n    at Object.<anonymous> (/tmp/tmp0t2w2u43.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(nums[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpp1nfvqko.js:18\n    result.push(nums[num]);\n                ^\n\
    \nReferenceError: nums is not defined\n    at by_length (/tmp/tmpp1nfvqko.js:18:17)\n\
    \    at test (/tmp/tmpp1nfvqko.js:28:20)\n    at Object.<anonymous> (/tmp/tmpp1nfvqko.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(names[arr[i]]);\n\
    \    }\n  }\n  if(result.length == 0){\n    return [];\n  }\n  if(result.length\
    \ == 1){\n    return result[0];\n  }\n  return result.reverse().join(\"\");\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph1n1kcv0.js:15\n      result.push(names[arr[i]]);\n           \
    \       ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmph1n1kcv0.js:15:19)\n\
    \    at test (/tmp/tmph1n1kcv0.js:32:20)\n    at Object.<anonymous> (/tmp/tmph1n1kcv0.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var len = arr.length;\n  var i = 0;\n  while(i < len){\n    var num = arr[i];\n\
    \    if(num < 1 || num > 9){\n      continue;\n    }\n    var index = num - 1;\n\
    \    var name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n    arr.splice(i,\
    \ 1);\n    len--;\n    i--;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    var digit = num.toString().charAt(0);\n \
    \   var name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][num];\n    result.push(name + digit);\n  }\n  return result.length\
    \ ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three2',\n\
    \  'Two1',\n  'Two1',\n  'Five4',\n  'Six5',\n  'Nine8',\n  'Three2',\n  'Four3'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpp0qobhvr.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp0qobhvr.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three2',\
    \ 'Two1',\n    'Two1',   'Five4',\n    'Six5',   'Nine8',\n    'Three2', 'Four3'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  for(var i = 0, len = arr.length; i <\
    \ len; i++){\n    var num = arr[i];\n    if(num > 9){\n      num = num - 10;\n\
    \    }\n    result.push(by_digit[num]);\n  }\n  \n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmporr50laa.js:23\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmporr50laa.js:23:17)\n\
    \    at test (/tmp/tmporr50laa.js:34:20)\n    at Object.<anonymous> (/tmp/tmporr50laa.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n      \
    \      result.push(by_digit(arr[i]));\n        }\n    }\n    if(result.length\
    \ == 0){\n        return [];\n    }\n    result.sort(function(a, b){\n       \
    \ return a - b;\n    });\n    for(var i = 0; i < result.length; i++){\n      \
    \  result[i] = by_name(result[i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu9a4hs5u.js:15\n            result.push(by_digit(arr[i]));\n  \
    \                 ^\n\nReferenceError: by_digit is not defined\n    at by_length\
    \ (/tmp/tmpu9a4hs5u.js:15:20)\n    at test (/tmp/tmpu9a4hs5u.js:35:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpu9a4hs5u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(by_name(arr[i]));\n  }\n  return\
    \ result.join('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpric9qyev.js:18\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpric9qyev.js:18:12)\n\
    \    at test (/tmp/tmpric9qyev.js:28:20)\n    at Object.<anonymous> (/tmp/tmpric9qyev.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(num);\n  }\n  if(result.length){\n\
    \    result.sort(function(a, b){\n      return a - b;\n    });\n    for(var i\
    \ = 0, len = result.length; i < len; i++){\n      result[i] = names[result[i]];\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5c6143w8.js:25\n      result[i] = names[result[i]];\n         \
    \         ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmp5c6143w8.js:25:19)\n\
    \    at test (/tmp/tmp5c6143w8.js:36:20)\n    at Object.<anonymous> (/tmp/tmp5c6143w8.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length === 0){\n    return\
    \ [];\n  }\n  if(arr.length === 1){\n    return arr[0];\n  }\n  var result = [];\n\
    \  var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  var length = max - min + 1;\n  for(var i = min; i <= max; i++){\n    result.push(by_length(arr.filter(function(num){\n\
    \      return num === i;\n    })));\n  }\n  if(min === max){\n    result.push(by_length(arr.filter(function(num){\n\
    \      return num === min;\n    })));\n  }\n  if(min === 1){\n    result.push(by_length(arr.filter(function(num){\n\
    \      return num === 1;\n    })));\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt06kb_ep.js:23\n    result.push(by_length(arr.filter(function(num){\n\
    \                              ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.filter (<anonymous>)\n    at by_length (/tmp/tmpt06kb_ep.js:23:31)\n\
    \    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n\
    \    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n\
    \    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n\
    \    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n    at by_length (/tmp/tmpt06kb_ep.js:23:17)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, len)));\n      arr.splice(i,\
    \ 1);\n      i--;\n      len--;\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuof6k5nl.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpuof6k5nl.js:11:19)\n\
    \    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n\
    \    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n\
    \    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n\
    \    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n\
    \    at by_length (/tmp/tmpuof6k5nl.js:23:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(i+1)));\n      arr.splice(i,1);\n\
    \      i--;\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxhcn7h6l.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpxhcn7h6l.js:11:19)\n\
    \    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n\
    \    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n\
    \    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n\
    \    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n\
    \    at by_length (/tmp/tmpxhcn7h6l.js:21:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(names[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0kmrwm47.js:18\n    result.push(names[num]);\n                ^\n\
    \nReferenceError: names is not defined\n    at by_length (/tmp/tmp0kmrwm47.js:18:17)\n\
    \    at test (/tmp/tmp0kmrwm47.js:28:20)\n    at Object.<anonymous> (/tmp/tmp0kmrwm47.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpi8w2xrma.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi8w2xrma.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  var result = [];\n \
    \ var min = 1;\n  var max = 9; \n  for(var i = 0; i<arr.length; i++){\n    if(arr[i]\
    \ < min || arr[i] > max){\n      continue;\n    }\n    result.push(name[arr[i]]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5taag_ef.js:25\n    result.push(name[arr[i]]);\n              \
    \  ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmp5taag_ef.js:25:17)\n\
    \    at test (/tmp/tmp5taag_ef.js:35:20)\n    at Object.<anonymous> (/tmp/tmp5taag_ef.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    num = num - 1;\n    var name = [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][num];\n    result.push(name);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpj5pwm0om.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj5pwm0om.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \  'One',\n    'One',  'Four',\n    'Five', 'Eight',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(by_num[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpja1o79qd.js:18\n    result.push(by_num[num]);\n               \
    \ ^\n\nReferenceError: by_num is not defined\n    at by_length (/tmp/tmpja1o79qd.js:18:17)\n\
    \    at test (/tmp/tmpja1o79qd.js:28:20)\n    at Object.<anonymous> (/tmp/tmpja1o79qd.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpa780e5j9.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa780e5j9.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length === 0){\n    return\
    \ [];\n  }\n  if(arr.length === 1){\n    return ['One'];\n  }\n  if(arr.length\
    \ === 2){\n    return ['One', 'Two'];\n  }\n  if(arr.length === 3){\n    return\
    \ ['One', 'Two', 'Three'];\n  }\n  if(arr.length === 4){\n    return ['One', 'Two',\
    \ 'Three', 'Four'];\n  }\n  if(arr.length === 5){\n    return ['One', 'Two', 'Three',\
    \ 'Four', 'Five'];\n  }\n  if(arr.length === 6){\n    return ['One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six'];\n  }\n  if(arr.length === 7){\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven'];\n  }\n  if(arr.length === 8){\n  \
    \  return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n\
    \  }\n  if(arr.length === 9){\n    return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp8skgzajc.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8skgzajc.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  for(var i\
    \ = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1\
    \ || num > 9){\n      continue;\n    }\n    \n    var index = num - 1;\n    result.push(names[index]);\n\
    \  }\n  \n  return result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq69r8i8q.js:21\n    result.push(names[index]);\n              \
    \  ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpq69r8i8q.js:21:17)\n\
    \    at test (/tmp/tmpq69r8i8q.js:32:20)\n    at Object.<anonymous> (/tmp/tmpq69r8i8q.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0;i<arr.length;i++){\n\
    \t\tif(arr[i] > 9){\n\t\t\tresult.push(by_length(arr.slice(0,i).reverse()).concat(arr.slice(i)));\n\
    \t\t}else{\n\t\t\tresult.push(arr[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpfkn19y75.js:28:10)\n    at Object.<anonymous> (/tmp/tmpfkn19y75.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i).concat(by_length(arr.slice(i + 1)))));\n      arr.splice(i, 1);\n      i--;\n\
    \      len--;\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_skqo8d0.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmp_skqo8d0.js:11:19)\n\
    \    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n\
    \    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n\
    \    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n\
    \    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n\
    \    at by_length (/tmp/tmp_skqo8d0.js:22:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  if(arr.length == 1){\n    return arr[0];\n\
    \  }\n  \n  if(arr.length == 2){\n    return arr[0] + \" \" + arr[1];\n  }\n \
    \ \n  if(arr.length == 3){\n    return arr[0] + \" \" + arr[1] + \" \" + arr[2];\n\
    \  }\n  \n  if(arr.length == 4){\n    return arr[0] + \" \" + arr[1] + \" \" +\
    \ arr[2] + \" \" + arr[3];\n  }\n  \n  if(arr.length == 5){\n    return arr[0]\
    \ + \" \" + arr[1] + \" \" + arr[2] + \" \" + arr[3] + \" \" + arr[4];\n  }\n\
    \  \n  if(arr.length == 6){\n    return arr[0] + \" \" + arr[1] + \" \" + arr[2]\
    \ + \" \" + arr[3] + \" \" + arr[4] + \" \" + arr[5];\n  }\n  \n  if(arr.length\
    \ == 7){\n    return arr[0] + \" \" + arr[1] + \" \" + arr[2] + \" \" + arr[3]\
    \ + \" \" + arr[4] + \" \" + arr[5] + \" \" + arr[6];\n  }\n  \n  if(arr.length\
    \ == 8){\n    return arr[0] + \" \" + arr[1] + \" \" + arr[2] + \" \" + arr[3]\
    \ + \" \" + arr[4] + \" \" + arr[5] + \" \" + arr[6] + \" \" + arr[7];\n  }\n\
    \  \n  if(arr.length == 9){\n    return arr[0] + \" \" + arr[1] + \" \" + arr[2]\
    \ + \" \" + arr[3] + \" \" + arr[4] + \" \" + arr[5] + \" \" + arr[6] + \" \"\
    \ + arr[7] + \" \" + arr[8];\n  }\n  \n  if(arr.length == 10){\n    return arr[0]\
    \ + \" \" + arr[1] + \" \" + arr[2] + \" \" + arr[3] + \" \" + arr[4] + \" \"\
    \ + arr[5] + \" \" + arr[6] + \" \" + arr[7] + \" \" + arr[8] + \" \" + arr[9];\n\
    \  }\n  \n  if(arr.length == 11){\n    return arr[0] + \" \" + arr[1] + \" \"\
    \ + arr[2] + \" \" + arr[3] + \" \" + arr[4] + \" \" + arr[5] + \" \" + arr[6]\
    \ + \" \" + arr[7] + \" \" + arr[8] + \" \" + arr[9] + \" \" + arr[10];\n  }\n\
    \  \n  if(arr.length == 12){\n    return arr[0] + \" \" + arr[1] + \" \" + arr[2]\
    \ + \" \" + arr[3] + \" \" + arr[4] + \" \" + arr[5] + \" \" + arr[6] + \" \"\
    \ + arr[7] + \" \" + arr[8] + \" \" + arr[9] + \" \" + arr[10] + \" \" + arr[11];\n\
    \  }\n  \n  if(arr.length == 13){\n    return arr[0] + \" \" + arr[1] + \" \"\
    \ + arr[2] + \" \" + arr[3] + \" \" + arr[4] + \" \" + arr[5] + \" \" + arr[6]\
    \ + \" \" + arr[7] + \" \" + arr[8] + \" \" + arr[9] + \" \" + arr[10] + \" \"\
    \ + arr[11] + \" \" + arr\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu2yq90uj.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(by_num[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc42r1lr3.js:18\n    result.push(by_num[num]);\n               \
    \ ^\n\nReferenceError: by_num is not defined\n    at by_length (/tmp/tmpc42r1lr3.js:18:17)\n\
    \    at test (/tmp/tmpc42r1lr3.js:28:20)\n    at Object.<anonymous> (/tmp/tmpc42r1lr3.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.unshift(by_length_map[num]);\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg78tc4hu.js:18\n    result.unshift(by_length_map[num]);\n     \
    \              ^\n\nReferenceError: by_length_map is not defined\n    at by_length\
    \ (/tmp/tmpg78tc4hu.js:18:20)\n    at test (/tmp/tmpg78tc4hu.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpg78tc4hu.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(by_name[arr[i]]);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe59giwgr.js:18\n    result.push(by_name[arr[i]]);\n           \
    \     ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpe59giwgr.js:18:17)\n\
    \    at test (/tmp/tmpe59giwgr.js:28:20)\n    at Object.<anonymous> (/tmp/tmpe59giwgr.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(item){\n\
    \    if(item > 9){\n      result.push(by_length(arr.filter(function(item2){ return\
    \ item2 > 9; })));\n    }\n    result.push(item);\n  });\n  return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpl49307w9.js:27:10)\n    at Object.<anonymous> (/tmp/tmpl49307w9.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      arr.splice(i,1);\n      i--;\n    }\n  }\n  if(arr.length>0){\n    result.push(by_length(arr).join(''));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpp1x7b8ka.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpp1x7b8ka.js:11:19)\n\
    \    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n\
    \    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n\
    \    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n\
    \    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n\
    \    at by_length (/tmp/tmpp1x7b8ka.js:21:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      arr[i] = arr[i]%10;\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr.slice(0,arr.length).reverse()).join(''));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw_txgd2c.js:20\n    result.push(by_length(arr.slice(0,arr.length).reverse()).join(''));\n\
    \                              ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.slice (<anonymous>)\n    at by_length (/tmp/tmpw_txgd2c.js:20:31)\n\
    \    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n\
    \    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n\
    \    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n\
    \    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n    at by_length (/tmp/tmpw_txgd2c.js:20:17)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  if(arr.length == 1){\n    return [\"\
    One\"];\n  }\n  \n  if(arr.length == 2){\n    return [\"One\", \"Two\"];\n  }\n\
    \  \n  if(arr.length == 3){\n    return [\"One\", \"Two\", \"Three\"];\n  }\n\
    \  \n  if(arr.length == 4){\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    ];\n  }\n  \n  if(arr.length == 5){\n    return [\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\"];\n  }\n  \n  if(arr.length == 6){\n    return [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  \n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  \n  if(arr.length == 8){\n    return [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  \n  if(arr.length\
    \ == 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n  }\n  \n  if(arr.length == 10){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"Ten\"];\n  }\n  \n  if(arr.length == 11){\n    return [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Eleven\"];\n  }\n  \n  if(arr.length == 12){\n    return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Eleven\", \"Twelve\"];\n  }\n  \n  if(arr.length == 13){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"];\n  }\n  \n  if(arr.length\
    \ == 14){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"\
    , \"Fourteen\"];\n  }\n  \n  if(arr.length == 15){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"\
    , \"Eleven\", \"T\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdwugypdi.js:75\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"T\n\
    \                                                                            \
    \                         ^^\n\nSyntaxError: Invalid or unexpected token\n   \
    \ at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpynesqmkn.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpynesqmkn.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(nums[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkxv63bt1.js:18\n    result.push(nums[num]);\n                ^\n\
    \nReferenceError: nums is not defined\n    at by_length (/tmp/tmpkxv63bt1.js:18:17)\n\
    \    at test (/tmp/tmpkxv63bt1.js:28:20)\n    at Object.<anonymous> (/tmp/tmpkxv63bt1.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(\"\
    \"));\n      arr.splice(i,1);\n    }\n  }\n  if(arr.length>0){\n    result.push(by_length(arr).join(\"\
    \"));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4v3ouinw.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmp4v3ouinw.js:11:19)\n\
    \    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n\
    \    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n\
    \    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n\
    \    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n\
    \    at by_length (/tmp/tmp4v3ouinw.js:20:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      arr.splice(i,1);\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr).join(''));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphuhxkgdg.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmphuhxkgdg.js:11:19)\n\
    \    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n\
    \    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n\
    \    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n\
    \    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n\
    \    at by_length (/tmp/tmphuhxkgdg.js:20:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i\
    \ = 0, len = arr.length; i < len; i++){\n        var num = arr[i];\n        if(num\
    \ >= 1 && num <= 9){\n            result.push(names[num]);\n        }\n    }\n\
    \    if(result.length == 0){\n        return [];\n    }\n    result.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    for(var i = 0, len = result.length;\
    \ i < len; i++){\n        result[i] = result[i].toString();\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl_k53ntb.js:16\n            result.push(names[num]);\n        \
    \                ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpl_k53ntb.js:16:25)\n\
    \    at test (/tmp/tmpl_k53ntb.js:36:20)\n    at Object.<anonymous> (/tmp/tmpl_k53ntb.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  var length = max - min + 1;\n  for(var i = min; i <= max; i++){\n    result.push(by_length(arr.filter(function(x){\n\
    \      return x >= i && x <= i;\n    })));\n  }\n  return result.map(function(x){\n\
    \    return x[x.length - 1];\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvpt73slu.js:24\n      return x >= i && x <= i;\n      ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at /tmp/tmpvpt73slu.js:24:7\n    at Array.filter\
    \ (<anonymous>)\n    at by_length (/tmp/tmpvpt73slu.js:23:31)\n    at by_length\
    \ (/tmp/tmpvpt73slu.js:23:17)\n    at by_length (/tmp/tmpvpt73slu.js:23:17)\n\
    \    at by_length (/tmp/tmpvpt73slu.js:23:17)\n    at by_length (/tmp/tmpvpt73slu.js:23:17)\n\
    \    at by_length (/tmp/tmpvpt73slu.js:23:17)\n    at by_length (/tmp/tmpvpt73slu.js:23:17)\n\
    \    at by_length (/tmp/tmpvpt73slu.js:23:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i = 0,\
    \ len = arr.length; i < len; i++){\n\t\tvar num = arr[i];\n\t\tif(num < 1 || num\
    \ > 9){\n\t\t\tcontinue;\n\t\t}\n\t\tvar index = num - 1;\n\t\tvar name = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][num];\n\t\tresult.push(name);\n\t}\n\treturn result.length ? result\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp9zgiz_73.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9zgiz_73.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 0 && num < 10){\n      result.push(by_length_reverse(num));\n  \
    \  }\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq736vc1w.js:15\n      result.push(by_length_reverse(num));\n  \
    \           ^\n\nReferenceError: by_length_reverse is not defined\n    at /tmp/tmpq736vc1w.js:15:14\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpq736vc1w.js:13:7)\n\
    \    at test (/tmp/tmpq736vc1w.js:26:20)\n    at Object.<anonymous> (/tmp/tmpq736vc1w.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i = 0,\
    \ len = arr.length; i < len; i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\t\t\
    result.push(by_name[arr[i]]);\n\t\t}\n\t}\n\treturn result.length ? result : [];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcrkt5dsg.js:15\n\t\t\tresult.push(by_name[arr[i]]);\n\t\t\t   \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpcrkt5dsg.js:15:16)\n\
    \    at test (/tmp/tmpcrkt5dsg.js:26:20)\n    at Object.<anonymous> (/tmp/tmpcrkt5dsg.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(by_name[arr[i]]);\n  }\n  if(arr.length){\n\
    \    result.push(by_length(arr.slice(0,arr.length).reverse()));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9hi5hmjp.js:18\n    result.push(by_name[arr[i]]);\n           \
    \     ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp9hi5hmjp.js:18:17)\n\
    \    at test (/tmp/tmp9hi5hmjp.js:31:20)\n    at Object.<anonymous> (/tmp/tmp9hi5hmjp.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if(num>0 && num<=9){\n      result.push(by_digit(num,\
    \ i));\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphw_bm_pb.js:16\n      result.push(by_digit(num, i));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmphw_bm_pb.js:16:14)\n\
    \    at test (/tmp/tmphw_bm_pb.js:27:20)\n    at Object.<anonymous> (/tmp/tmphw_bm_pb.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tif(arr[i] > 9){\n\t\t\tresult.push(by_length(arr.slice(0,i).reverse()));\n\
    \t\t\tbreak;\n\t\t}\n\t\tresult.push(by_name(arr[i]));\n\t}\n\treturn result.join('');\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjk86buke.js:18\n\t\tresult.push(by_name(arr[i]));\n\t\t       ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpjk86buke.js:18:10)\n\
    \    at test (/tmp/tmpjk86buke.js:28:20)\n    at Object.<anonymous> (/tmp/tmpjk86buke.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i=0;\
    \ i<arr.length; i++){\n        if(arr[i] > 9){\n            result.push(by_length(arr.slice(0,\
    \ i)));\n        }\n        else if(arr[i] < 1){\n            result.push(by_length(arr.slice(i+1,\
    \ arr.length)));\n        }\n        else{\n            result.push(by_name(arr[i]));\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj71i8173.js:21\n            result.push(by_name(arr[i]));\n   \
    \                ^\n\nReferenceError: by_name is not defined\n    at by_length\
    \ (/tmp/tmpj71i8173.js:21:20)\n    at test (/tmp/tmpj71i8173.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpj71i8173.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    var index = num - 1;\n    var name = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpunrsfx47.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpunrsfx47.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpgf1386_7.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgf1386_7.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(by_name[arr[i]]);\n  }\n  if(arr.length){\n\
    \    result.push(by_length(arr.slice(0,arr.length).reverse()));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxqnum9j7.js:18\n    result.push(by_name[arr[i]]);\n           \
    \     ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpxqnum9j7.js:18:17)\n\
    \    at test (/tmp/tmpxqnum9j7.js:31:20)\n    at Object.<anonymous> (/tmp/tmpxqnum9j7.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0;i<arr.length;i++){\n\
    \t\tif(arr[i]>9){\n\t\t\tresult.push(by_length(arr.slice(0,i).reverse()));\n\t\
    \t\tbreak;\n\t\t}\n\t\tresult.push(by_name(arr[i]));\n\t}\n\treturn result.join('');\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0uwpmkc6.js:18\n\t\tresult.push(by_name(arr[i]));\n\t\t       ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp0uwpmkc6.js:18:10)\n\
    \    at test (/tmp/tmp0uwpmkc6.js:28:20)\n    at Object.<anonymous> (/tmp/tmp0uwpmkc6.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.push(by_length(arr.slice(i)));\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      result.push(by_length(arr.slice(i).reverse()));\n      result.push(by_length(arr.slice(0,i)));\n\
    \      result.\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp14_1n3e5.js:55\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(by_length_map[num]);\n  }\n \
    \ return result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe2cc_7o6.js:18\n    result.push(by_length_map[num]);\n        \
    \        ^\n\nReferenceError: by_length_map is not defined\n    at by_length (/tmp/tmpe2cc_7o6.js:18:17)\n\
    \    at test (/tmp/tmpe2cc_7o6.js:28:20)\n    at Object.<anonymous> (/tmp/tmpe2cc_7o6.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    var index = num - 1;\n    var name = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][num];\n    result.push(name);\n  }\n  return result.length ? result\
    \ : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmppjlj6ltt.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmppjlj6ltt.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp253q4war.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp253q4war.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0, i).reverse()));\n\
    \      arr.splice(0, i);\n      arr.splice(i+1, 1);\n    }\n  }\n  if(arr.length){\n\
    \    result.push(by_length(arr));\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp52zu73_8.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmp52zu73_8.js:11:19)\n\
    \    at by_length (/tmp/tmp52zu73_8.js:21:17)\n    at by_length (/tmp/tmp52zu73_8.js:21:17)\n\
    \    at by_length (/tmp/tmp52zu73_8.js:21:17)\n    at by_length (/tmp/tmp52zu73_8.js:21:17)\n\
    \    at by_length (/tmp/tmp52zu73_8.js:21:17)\n    at by_length (/tmp/tmp52zu73_8.js:21:17)\n\
    \    at by_length (/tmp/tmp52zu73_8.js:21:17)\n    at by_length (/tmp/tmp52zu73_8.js:21:17)\n\
    \    at by_length (/tmp/tmp52zu73_8.js:21:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \  result.push(name[arr[i]]);\n    }\n  }\n  return result.length ? result : [];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpeo4qhdg6.js:15\n      result.push(name[arr[i]]);\n            \
    \      ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmpeo4qhdg6.js:15:19)\n\
    \    at test (/tmp/tmpeo4qhdg6.js:26:20)\n    at Object.<anonymous> (/tmp/tmpeo4qhdg6.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    for(var i\
    \ = 0, len = arr.length; i < len; i++){\n        var num = arr[i];\n        if(num\
    \ < 1 || num > 9){\n            continue;\n        }\n        var index = num\
    \ - 1;\n        var name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n        result.push(name);\n   \
    \ }\n    if(result.length){\n        return result.join(\" \");\n    }\n    return\
    \ \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Three Two Two\
    \ Five Six Nine Three Four'\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n\
    \  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test\
    \ (/tmp/tmpr_y03uu7.js:33:10)\n    at Object.<anonymous> (/tmp/tmpr_y03uu7.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Three Two\
    \ Two Five Six Nine Three Four',\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if(num>0 && num<=9){\n      result.push(by_digit(num,\
    \ i));\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu5e52sfg.js:16\n      result.push(by_digit(num, i));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpu5e52sfg.js:16:14)\n\
    \    at test (/tmp/tmpu5e52sfg.js:27:20)\n    at Object.<anonymous> (/tmp/tmpu5e52sfg.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i] + \"One\";\n    }\n  }\n  if(arr.length == 0){\n    return\
    \ [];\n  }\n  else if(arr.length == 1){\n    return arr[0];\n  }\n  else{\n  \
    \  return arr.slice(0,arr.length-1).reverse().concat(arr.slice(arr.length-1));\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  8,\n\
    \  5,\n  4,\n  1,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp8anhduv9.js:35:10)\n    at Object.<anonymous> (/tmp/tmp8anhduv9.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 8, 5, 4,\n    1, 1, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>=1 && arr[i]<=9){\n      result.push(by_name(arr[i]));\n    }\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdytwkkxh.js:15\n      result.push(by_name(arr[i]));\n         \
    \    ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpdytwkkxh.js:15:14)\n\
    \    at test (/tmp/tmpdytwkkxh.js:26:20)\n    at Object.<anonymous> (/tmp/tmpdytwkkxh.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if(num>9){\n      num = num - 10;\n    }\n    result.push(by_digit[num]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyffn4203.js:18\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpyffn4203.js:18:17)\n\
    \    at test (/tmp/tmpyffn4203.js:28:20)\n    at Object.<anonymous> (/tmp/tmpyffn4203.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(names[num]);\n    }\n  }\n  return result.length\
    \ ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgzxftlxa.js:16\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpgzxftlxa.js:16:19)\n\
    \    at test (/tmp/tmpgzxftlxa.js:27:20)\n    at Object.<anonymous> (/tmp/tmpgzxftlxa.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 9){\n      num = num - 10;\n    }\n    if(num < 1){\n      num =\
    \ 10;\n    }\n    result.push(by_digit[num]);\n  });\n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo3spr5yj.js:20\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at /tmp/tmpo3spr5yj.js:20:17\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpo3spr5yj.js:13:7)\n\
    \    at test (/tmp/tmpo3spr5yj.js:30:20)\n    at Object.<anonymous> (/tmp/tmpo3spr5yj.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tvar len = arr.length;\n\
    \tvar i;\n\t\n\tfor(i = 0; i < len; i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\
    \t\t\tresult.push(name[arr[i]]);\n\t\t}\n\t}\n\t\n\tif(result.length == 0){\n\t\
    \treturn [];\n\t}\n\t\n\treturn result.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprlbu0pe3.js:18\n\t\t\tresult.push(name[arr[i]]);\n\t\t\t      \
    \      ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmprlbu0pe3.js:18:16)\n\
    \    at test (/tmp/tmprlbu0pe3.js:34:20)\n    at Object.<anonymous> (/tmp/tmprlbu0pe3.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(i+1,arr.length)));\n\
    \      arr[i] = arr[i]-1;\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr.slice(i+1,arr.length)));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  []\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpl4slhkqs.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl4slhkqs.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [] ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  for(var i = 0, len = arr.length; i <\
    \ len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(by_digit(arr[i]));\n\
    \    }\n  }\n  \n  return result.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7nsaakjv.js:20\n      result.push(by_digit(arr[i]));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmp7nsaakjv.js:20:14)\n\
    \    at test (/tmp/tmp7nsaakjv.js:32:20)\n    at Object.<anonymous> (/tmp/tmp7nsaakjv.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 0 && num\
    \ < 9){\n      result.push(names[num]);\n    }\n  }\n  if(result.length == 0){\n\
    \    return [];\n  }\n  if(result.length == 1){\n    return result[0];\n  }\n\
    \  return result.reverse().join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjzufod9f.js:16\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpjzufod9f.js:16:19)\n\
    \    at test (/tmp/tmpjzufod9f.js:33:20)\n    at Object.<anonymous> (/tmp/tmpjzufod9f.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return ['One'];\n  }\n  if(arr.length == 2){\n\
    \    return ['One', 'Two'];\n  }\n  if(arr.length == 3){\n    return ['One', 'Two',\
    \ 'Three'];\n  }\n  if(arr.length == 4){\n    return ['One', 'Two', 'Three', 'Four'];\n\
    \  }\n  if(arr.length == 5){\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n\
    \  }\n  if(arr.length == 6){\n    return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six'];\n  }\n  if(arr.length == 7){\n    return ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven'];\n  }\n  if(arr.length == 8){\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n  }\n  if(arr.length ==\
    \ 9){\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpa0kp7f8o.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa0kp7f8o.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr.splice(i,1);\n    }\n  }\n  if(arr.length){\n    result.push(by_length(arr));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr25g4pmh.js:11\nfunction by_length(arr){\n                  ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at by_length (/tmp/tmpr25g4pmh.js:11:19)\n\
    \    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n\
    \    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n\
    \    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n\
    \    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n\
    \    at by_length (/tmp/tmpr25g4pmh.js:20:17)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(by_name[arr[i]]);\n  \
    \  }\n  }\n  if(result.length == 0){\n    return [];\n  }\n  else{\n    return\
    \ result.join('');\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmmb3ayc5.js:15\n      result.push(by_name[arr[i]]);\n         \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpmmb3ayc5.js:15:19)\n\
    \    at test (/tmp/tmpmmb3ayc5.js:31:20)\n    at Object.<anonymous> (/tmp/tmpmmb3ayc5.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0; i<arr.length;\
    \ i++){\n\t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\t\tresult.push(by_length(arr.slice(i+1)));\n\
    \t\t}\n\t\telse{\n\t\t\tresult.push(arr[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    [\n\
    \      [\n        [\n          [\n            [\n              [\n           \
    \     []\n              ],\n              []\n            ],\n            [\n\
    \              []\n            ],\n            []\n          ],\n          [\n\
    \            [\n              []\n            ],\n            []\n          ],\n\
    \          [\n            []\n          ],\n          []\n        ],\n       \
    \ [\n          [\n            [\n              []\n            ],\n          \
    \  []\n          ],\n          [\n            []\n          ],\n         ...\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpc92b6lm2.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc92b6lm2.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [\n\
    \      [\n        [\n          [ [Array], [Array], [Array], [] ],\n          [\
    \ [Array], [Array], [] ],\n          [ [Array], [] ],\n          [ [] ],\n   \
    \       []\n        ],\n        [ [ [Array], [Array], [] ], [ [Array], [] ], [\
    \ [] ], [] ],\n        [ [ [Array], [] ], [ [] ], [] ],\n        [ [ [] ], []\
    \ ],\n        [ [] ],\n        []\n      ],\n      [\n        [ [ [Array], [Array],\
    \ [] ], [ [Array], [] ], [ [] ], [] ],\n        [ [ [Array], [] ], [ [] ], []\
    \ ],\n        [ [ [] ], [] ],\n        [ [] ],\n        []\n      ],\n      [\
    \ [ [ [Array], [] ], [ [] ], [] ], [ [ [] ], [] ], [ [] ], [] ],\n      [ [ [\
    \ [] ], [] ], [ [] ], [] ],\n      [ [ [] ], [] ],\n      [ [] ],\n      []\n\
    \    ],\n    [\n      [\n        [ [ [Array], [Array], [] ], [ [Array],"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(num);\n    }\n  }\n  if(result.length){\n    result.sort(function(a,\
    \ b){\n      return b - a;\n    });\n    for(var i = 0, len = result.length; i\
    \ < len; i++){\n      result[i] = names[result[i]];\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw0vw23fr.js:24\n      result[i] = names[result[i]];\n         \
    \         ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpw0vw23fr.js:24:19)\n\
    \    at test (/tmp/tmpw0vw23fr.js:35:20)\n    at Object.<anonymous> (/tmp/tmpw0vw23fr.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n\tvar result = [];\n\tfor(var i=0;i<arr.length;i++){\n\
    \t\tif(arr[i] >= 1 && arr[i] <= 9){\n\t\t\tresult.push(by_name[arr[i]]);\n\t\t\
    }\n\t}\n\treturn result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprqbgzu_o.js:15\n\t\t\tresult.push(by_name[arr[i]]);\n\t\t\t   \
    \         ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmprqbgzu_o.js:15:16)\n\
    \    at test (/tmp/tmprqbgzu_o.js:26:20)\n    at Object.<anonymous> (/tmp/tmprqbgzu_o.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(num);\n  }\n  if(result.length){\n\
    \    result.sort(function(a, b){\n      return a - b;\n    });\n    for(var i\
    \ = 0, len = result.length; i < len; i++){\n      result[i] = names[result[i]];\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi1l501el.js:25\n      result[i] = names[result[i]];\n         \
    \         ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpi1l501el.js:25:19)\n\
    \    at test (/tmp/tmpi1l501el.js:36:20)\n    at Object.<anonymous> (/tmp/tmpi1l501el.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(arr[i]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpngvn9u0k.js:28:10)\n    at Object.<anonymous> (/tmp/tmpngvn9u0k.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpq824rd8i.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq824rd8i.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num < 1 || num\
    \ > 9){\n      continue;\n    }\n    result.push(by_length_num(num));\n  }\n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfcozp1o9.js:18\n    result.push(by_length_num(num));\n        \
    \   ^\n\nReferenceError: by_length_num is not defined\n    at by_length (/tmp/tmpfcozp1o9.js:18:12)\n\
    \    at test (/tmp/tmpfcozp1o9.js:28:20)\n    at Object.<anonymous> (/tmp/tmpfcozp1o9.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math, arr);\n\
    \  var length = max - min + 1;\n  for(var i = min; i <= max; i++){\n    result.push(by_length(arr.filter(function(x){\n\
    \      return x >= i && x <= i;\n    })));\n  }\n  result.push(by_length(arr.filter(function(x){\n\
    \    return x > max && x < max;\n  })));\n  result.push(by_length(arr.filter(function(x){\n\
    \    return x < min;\n  })));\n  result.push(by_length(arr.filter(function(x){\n\
    \    return x > min;\n  })));\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppz363alr.js:23\n    result.push(by_length(arr.filter(function(x){\n\
    \                              ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.filter (<anonymous>)\n    at by_length (/tmp/tmppz363alr.js:23:31)\n\
    \    at by_length (/tmp/tmppz363alr.js:23:17)\n    at by_length (/tmp/tmppz363alr.js:23:17)\n\
    \    at by_length (/tmp/tmppz363alr.js:23:17)\n    at by_length (/tmp/tmppz363alr.js:23:17)\n\
    \    at by_length (/tmp/tmppz363alr.js:23:17)\n    at by_length (/tmp/tmppz363alr.js:23:17)\n\
    \    at by_length (/tmp/tmppz363alr.js:23:17)\n    at by_length (/tmp/tmppz363alr.js:23:17)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  var result = [];\n\
    \  var min = 1;\n  var max = 9; \n  for(var i = 0; i<arr.length; i++){\n    if(arr[i]\
    \ < min){\n      min = arr[i];\n    }\n    if(arr[i] > max){\n      max = arr[i];\n\
    \    }\n  }\n  for(var i = 0; i<arr.length; i++){\n    if(arr[i] < min){\n   \
    \   result.push(\"One\");\n    }\n    if(arr[i] > max){\n      result.push(\"\
    Nine\");\n    }\n    if(arr[i] == min){\n      result.push(\"One\");\n    }\n\
    \    if(arr[i] == max){\n      result.push(\"Nine\");\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpy8f83n1s.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy8f83n1s.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'One', 'One'\
    \ ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two', \
    \  'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>9){\n      result.push(by_length(arr.slice(0,i).reverse()));\n\
    \      arr[i] = arr[i]-10;\n    }\n    result.push(arr[i]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp4xm5ouy_.js:28:10)\n    at Object.<anonymous> (/tmp/tmp4xm5ouy_.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  if(arr.length == 1){\n    return [\"\
    One\"];\n  }\n  \n  if(arr.length == 2){\n    return [\"One\", \"Two\"];\n  }\n\
    \  \n  if(arr.length == 3){\n    return [\"One\", \"Two\", \"Three\"];\n  }\n\
    \  \n  if(arr.length == 4){\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    ];\n  }\n  \n  if(arr.length == 5){\n    return [\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\"];\n  }\n  \n  if(arr.length == 6){\n    return [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  \n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  \n  if(arr.length == 8){\n    return [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  \n  if(arr.length\
    \ == 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n  }\n  \n  if(arr.length == 10){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"Ten\"];\n  }\n  \n  if(arr.length == 11){\n    return [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Eleven\"];\n  }\n  \n  if(arr.length == 12){\n    return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , \"Ten\", \"Eleven\", \"Twelve\"];\n  }\n  \n  if(arr.length == 13){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"];\n  }\n  \n  if(arr.length\
    \ == 14){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"\
    , \"Fourteen\"];\n  }\n  \n  if(arr.length == 15){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"\
    , \"Eleven\", \"Twel\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoxwz_wo5.js:75\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twel\n\
    \                                                                            \
    \                         ^^^^^\n\nSyntaxError: Invalid or unexpected token\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  \n  if(arr.length\
    \ == 0){\n    return result;\n  }\n  \n  if(arr.length == 1){\n    return arr[0];\n\
    \  }\n  \n  var min = Math.min.apply(Math, arr);\n  var max = Math.max.apply(Math,\
    \ arr);\n  \n  if(min == max){\n    return arr[0];\n  }\n  \n  if(min == 1 ||\
    \ max == 9){\n    return arr;\n  }\n  \n  var length = max - min + 1;\n  \n  for(var\
    \ i = 0; i <= length; i++){\n    var index = min + i;\n    result.push(by_length(arr.slice(index,\
    \ index + 1)));\n  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpvepm_zvt.js:48:10)\n    at Object.<anonymous> (/tmp/tmpvepm_zvt.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n    var result = [];\n    var len =\
    \ arr.length;\n    var i;\n    for(i = 0; i < len; i++){\n        if(arr[i] >\
    \ 9){\n            result.push(by_length(arr[i] - 10));\n        }\n        else{\n\
    \            result.push(by_name(arr[i]));\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj3m5zwhs.js:20\n            result.push(by_name(arr[i]));\n   \
    \                ^\n\nReferenceError: by_name is not defined\n    at by_length\
    \ (/tmp/tmpj3m5zwhs.js:20:20)\n    at test (/tmp/tmpj3m5zwhs.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpj3m5zwhs.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(num){\n\
    \    if(num > 9){\n      num = num - 10;\n    }\n    result.push(by_digit[num]);\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvlb3tkz2.js:17\n    result.push(by_digit[num]);\n             \
    \   ^\n\nReferenceError: by_digit is not defined\n    at /tmp/tmpvlb3tkz2.js:17:17\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpvlb3tkz2.js:13:7)\n\
    \    at test (/tmp/tmpvlb3tkz2.js:27:20)\n    at Object.<anonymous> (/tmp/tmpvlb3tkz2.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,i).reverse()).join(''));\n\
    \      return result;\n    }\n    result.push(by_name(arr[i]));\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpamwu7epw.js:18\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpamwu7epw.js:18:12)\n\
    \    at test (/tmp/tmpamwu7epw.js:28:20)\n    at Object.<anonymous> (/tmp/tmpamwu7epw.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(nums[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8e0c9j27.js:18\n    result.push(nums[num]);\n                ^\n\
    \nReferenceError: nums is not defined\n    at by_length (/tmp/tmp8e0c9j27.js:18:17)\n\
    \    at test (/tmp/tmp8e0c9j27.js:28:20)\n    at Object.<anonymous> (/tmp/tmp8e0c9j27.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  if(arr.length == 0){\n    return [];\n\
    \  }\n  if(arr.length == 1){\n    return [\"One\"];\n  }\n  if(arr.length == 2){\n\
    \    return [\"One\", \"Two\"];\n  }\n  if(arr.length == 3){\n    return [\"One\"\
    , \"Two\", \"Three\"];\n  }\n  if(arr.length == 4){\n    return [\"One\", \"Two\"\
    , \"Three\", \"Four\"];\n  }\n  if(arr.length == 5){\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\"];\n  }\n  if(arr.length == 6){\n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"];\n  }\n  if(arr.length\
    \ == 7){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"];\n  }\n  if(arr.length == 8){\n    return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  }\n  if(arr.length ==\
    \ 9){\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpfhgwr1cq.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfhgwr1cq.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num >= 1 &&\
    \ num <= 9){\n      result.push(by_digit(num, i));\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnwb6bovk.js:16\n      result.push(by_digit(num, i));\n        \
    \     ^\n\nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpnwb6bovk.js:16:14)\n\
    \    at test (/tmp/tmpnwb6bovk.js:27:20)\n    at Object.<anonymous> (/tmp/tmpnwb6bovk.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0;\
    \ i < arr.length; i++){\n    if(arr[i] > 9){\n      result.push(by_length(arr.slice(0,\
    \ i)));\n      result.push(by_length(arr.slice(i + 1, arr.length)));\n      arr.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  if(arr.length === 0){\n    return [];\n  }\n\
    \  for(var i = 0; i < arr.length; i++){\n    result.push(by_name(arr[i]));\n \
    \ }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1s4zj8qh.js:25\n    result.push(by_name(arr[i]));\n           ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmp1s4zj8qh.js:25:12)\n\
    \    at test (/tmp/tmp1s4zj8qh.js:35:20)\n    at Object.<anonymous> (/tmp/tmp1s4zj8qh.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0,\
    \ len = arr.length; i < len; i++){\n    var num = arr[i];\n    if(num > 9){\n\
    \      num = num - 10;\n    }\n    result.push(names[num]);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuwctn1y_.js:18\n    result.push(names[num]);\n                ^\n\
    \nReferenceError: names is not defined\n    at by_length (/tmp/tmpuwctn1y_.js:18:17)\n\
    \    at test (/tmp/tmpuwctn1y_.js:28:20)\n    at Object.<anonymous> (/tmp/tmpuwctn1y_.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
    \ \n// ['One']\nfunction by_length(arr){\n  var result = [];\n  arr.forEach(function(item){\n\
    \    if(item > 9 || item < 1){\n      return;\n    }\n    result.push(by_length_helper(item));\n\
    \  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9fluffaz.js:17\n    result.push(by_length_helper(item));\n    \
    \       ^\n\nReferenceError: by_length_helper is not defined\n    at /tmp/tmp9fluffaz.js:17:12\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmp9fluffaz.js:13:7)\n\
    \    at test (/tmp/tmp9fluffaz.js:27:20)\n    at Object.<anonymous> (/tmp/tmp9fluffaz.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
