name: HumanEval_127_intersection
language: js
prompt: "//You are given two intervals,\n// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\nfunction intersection(interval1, interval2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1,\
  \ 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\"\
  );\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11,\
  \ 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n\
  \  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2,\
  \ -2], [-3, -2]),\"NO\");\n}\n\ntest();"
completions: ["    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n\
    \    let length = end - start;\n    let isPrime = true;\n    for(let i = 2; i\
    \ <= Math.sqrt(length); i++){\n        if(length % i === 0){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    return isPrime;\n}\n", " \
    \   let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 =\
    \ interval2[0];\n    let end2 = interval2[1];\n    let intersection = [];\n  \
    \  let intersectedInterval = [];\n    let intersectedIntervalLength = 0;\n   \
    \ for(let i = start1; i <= end1; i++){\n        for(let j = start2; j <= end2;\
    \ j++){\n            if(i == j){\n                intersection.push([i, j]);\n\
    \            }\n        }\n    }\n    for(let i = 0; i < intersection.length;\
    \ i++){\n        intersectedInterval.push(intersection[i][0]);\n        intersectedIntervalLength\
    \ += intersection[i][1] - intersection[i][0];\n    }\n    if(intersectedIntervalLength\
    \ == 0){\n        return \"NO\";\n    }\n    for(let i = 0; i < intersectedInterval.length;\
    \ i++){\n        if(intersectedInterval[i] % 2 == 0){\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    let arr1 = interval1.map(item\
    \ => item[0]);\n    let arr2 = interval2.map(item => item[0]);\n    let arr3 =\
    \ interval1.map(item => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n\
    \    let arr5 = arr1.filter(item => arr2.indexOf(item) == -1);\n    let arr6 =\
    \ arr2.filter(item => arr3.indexOf(item) == -1);\n    let arr7 = arr3.filter(item\
    \ => arr4.indexOf(item) == -1);\n    let arr8 = arr4.filter(item => arr5.indexOf(item)\
    \ == -1);\n    let arr9 = arr5.filter(item => arr6.indexOf(item) == -1);\n   \
    \ let arr10 = arr6.filter(item => arr7.indexOf(item) == -1);\n    let arr11 =\
    \ arr7.filter(item => arr8.indexOf(item) == -1);\n    let arr12 = arr8.filter(item\
    \ => arr9.indexOf(item) == -1);\n    let arr13 = arr9.filter(item => arr10.indexOf(item)\
    \ == -1);\n    let arr14 = arr10.filter(item => arr11.indexOf(item) == -1);\n\
    \    let arr15 = arr11.filter(item => arr12.indexOf(item) == -1);\n    let arr16\
    \ = arr12.filter(item => arr13.indexOf(item) == -1);\n    let arr17 = arr13.filter(item\
    \ => arr14.indexOf(item) == -1);\n    let arr18 = arr14.filter(item => arr15.indexOf(item)\
    \ == -1);\n    let arr19 = arr15.filter(item => arr16.indexOf(item) == -1);\n\
    \    let arr20 = arr16.filter(item => arr17.indexOf(item) == -1);\n    let arr21\
    \ = arr17.filter(item => arr18.indexOf(item) == -1);\n    let arr22 = arr18.filter(item\
    \ => arr19.indexOf(item) == -1);\n    let arr23 = arr19.filter(item => arr20.indexOf(item)\
    \ == -1);\n    let arr24 = arr20.filter(item => arr21.indexOf(item) == -1);\n\
    \    let arr25 = arr21.filter(item => arr22.indexOf(item) == -1);\n    let arr26\
    \ = arr22.filter(item => arr23.indexOf(item) == -1);\n    let arr27 = arr23.filter(item\
    \ => arr24.indexOf(item) == -1);\n    let arr28 = arr24.filter(item => arr25.indexOf(item)\
    \ == -1);\n    let arr29 = arr25.filter(item => arr26.indexOf(item) == -1);\n\
    \    let arr30 = arr26.filter(item => arr27.indexOf(item) == -1);\n    let arr31\
    \ = arr27.filter(item => arr28.indexOf(item) == -1);\n    let arr32 = arr28.filter(item\
    \ => arr29.indexOf(item) == -1);\n    let arr33 = arr29.filter(item => arr30.indexOf(item)\
    \ == -1);\n    let arr34 = arr30.filter(item => arr31.indexOf", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && interval1End >= intersectionStart\
    \ && interval2Start <= intersectionEnd && interval2End >= intersectionEnd){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    return\
    \ isPrime;\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    \n    if(start1 <= end2 && start2 <= end1){\n        let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n        let endIntersection = end1 < end2\
    \ ? end1 : end2;\n        let lengthIntersection = endIntersection - startIntersection;\n\
    \        let isPrime = lengthIntersection === 2;\n        \n        if(isPrime){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "   \
    \ var result = [];\n    var start1 = interval1[0];\n    var end1 = interval1[1];\n\
    \    var start2 = interval2[0];\n    var end2 = interval2[1];\n    var start3\
    \ = Math.min(start1, start2);\n    var end3 = Math.max(end1, end2);\n    var start4\
    \ = Math.min(start1, start2);\n    var end4 = Math.max(end1, end2);\n    for(var\
    \ i = start3; i <= end3; i++){\n        for(var j = start4; j <= end4; j++){\n\
    \            result.push([i, j]);\n        }\n    }\n    var intersectionLength\
    \ = result.length;\n    var isPrime = true;\n    for(var i = 2; i <= intersectionLength;\
    \ i++){\n        if(result[i][1] % i === 0){\n            isPrime = false;\n \
    \           break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n\
    }\n", "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    \n    if(length == 0){\n\
    \        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let i =\
    \ 2; i <= Math.sqrt(length); i++){\n        if(length % i == 0){\n           \
    \ isPrime = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ startIntersection = start1 < start2 ? start1 : start2;\n    let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n    let intersection = startIntersection < endIntersection\
    \ ? [startIntersection, endIntersection] : [startIntersection, endIntersection];\n\
    \    let length = intersection[1] - intersection[0];\n    if(length < 2){\n  \
    \      return \"NO\";\n    }\n    let prime = true;\n    for(let i = 2; i <= length;\
    \ i++){\n        if(!isPrime(length)){\n            prime = false;\n         \
    \   break;\n        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "  \
    \  let arr1 = interval1.map(x => x.start);\n    let arr2 = interval2.map(x =>\
    \ x.start);\n    let arr3 = interval1.map(x => x.end);\n    let arr4 = interval2.map(x\
    \ => x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n    let arr6\
    \ = arr3.filter(x => arr4.includes(x));\n    let arr7 = arr5.filter(x => arr6.includes(x));\n\
    \    let arr8 = arr7.filter(x => arr5.includes(x));\n    let arr9 = arr8.filter(x\
    \ => arr6.includes(x));\n    let arr10 = arr9.filter(x => arr7.includes(x));\n\
    \    let arr11 = arr10.filter(x => arr8.includes(x));\n    let arr12 = arr11.filter(x\
    \ => arr9.includes(x));\n    let arr13 = arr12.filter(x => arr10.includes(x));\n\
    \    let arr14 = arr13.filter(x => arr11.includes(x));\n    let arr15 = arr14.filter(x\
    \ => arr12.includes(x));\n    let arr16 = arr15.filter(x => arr13.includes(x));\n\
    \    let arr17 = arr16.filter(x => arr14.includes(x));\n    let arr18 = arr17.filter(x\
    \ => arr15.includes(x));\n    let arr19 = arr18.filter(x => arr16.includes(x));\n\
    \    let arr20 = arr19.filter(x => arr17.includes(x));\n    let arr21 = arr20.filter(x\
    \ => arr18.includes(x));\n    let arr22 = arr21.filter(x => arr19.includes(x));\n\
    \    let arr23 = arr22.filter(x => arr20.includes(x));\n    let arr24 = arr23.filter(x\
    \ => arr21.includes(x));\n    let arr25 = arr24.filter(x => arr22.includes(x));\n\
    \    let arr26 = arr25.filter(x => arr23.includes(x));\n    let arr27 = arr26.filter(x\
    \ => arr24.includes(x));\n    let arr28 = arr27.filter(x => arr25.includes(x));\n\
    \    let arr29 = arr28.filter(x => arr26.includes(x));\n    let arr30 = arr29.filter(x\
    \ => arr27.includes(x));\n    let arr31 = arr30.filter(x => arr28.includes(x));\n\
    \    let arr32 = arr31.filter(x => arr29.includes(x));\n    let arr33 = arr32.filter(x\
    \ => arr30.includes(x));\n    let arr34 = arr33.filter(x ", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersection\
    \ = [];\n    let intersectionLength = 0;\n    \n    for (let i = interval1Start;\
    \ i <= interval1End; i++){\n        for (let j = interval2Start; j <= interval2End;\
    \ j++){\n            if (i === j){\n                intersection.push(i);\n  \
    \              intersectionLength++;\n            }\n        }\n    }\n    \n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    \n   \
    \ if (intersectionLength === 1){\n        return \"YES\";\n    }\n    \n    if\
    \ (intersectionLength === 2){\n        if (intersection[0] === intersection[1]){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    \n    if (intersectionLength === 3){\n        if\
    \ (intersection[0] === intersection[1] && intersection[1] === intersection[2]){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    \n    if (intersectionLength === 4){\n        if\
    \ (intersection[0] === intersection[1] && intersection[1] === intersection[2]\
    \ && intersection[2] === intersection[3]){\n            return \"YES\";\n    \
    \    }\n        else{\n            return \"NO\";\n        }\n    }\n    \n  \
    \  if (intersectionLength === 5){\n        if (intersection[0] === intersection[1]\
    \ && intersection[1] === intersection[2] && intersection[2] === intersection[3]\
    \ && intersection[3] === intersection[4]){\n            return \"YES\";\n    \
    \    }\n        else{\n            return \"NO\";\n        }\n    }\n    \n  \
    \  if (intersectionLength === 6){\n        if (intersection[0] === intersection[1]\
    \ && intersection[1] === intersection[2] && intersection[2] === intersection[3]\
    \ && intersection[3] === intersection[4] && intersection[4] === intersection[5]){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    \n    if (intersectionLength === 7){\n        if\
    \ (intersection[0] === intersection[1] && intersection[1] === intersection[2]\
    \ && intersection[2] === intersection[3] && intersection[3] === intersection[4]\
    \ && intersection[4] === intersection[5] && intersection[5] === intersection[6]){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    \n    if (intersectionLength === 8){\n        if\
    \ (intersection[0] === intersection[1] && intersection[1] === intersection[2]\
    \ && intersection[2] === intersection[3] && intersection[3] === intersection[4]\
    \ && intersection[4] === intersection[5] && intersection[5] === intersection[6]\
    \ && intersection[6] === intersection[7]){\n            return \"YES\";\n    \
    \    }\n        else{\n            return \"NO\";\n        }\n    }\n    \n  \
    \  if (intersectionLength === 9){\n        if (intersection[0] === intersection[1]\
    \ && intersection[1] === intersection", "    let start1 = interval1[0];\n    let\
    \ end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n\
    \    let intersection = [];\n    let length1 = end1 - start1 + 1;\n    let length2\
    \ = end2 - start2 + 1;\n    let flag = false;\n    for(let i = start1; i <= end1;\
    \ i++){\n        for(let j = start2; j <= end2; j++){\n            if(i === j){\n\
    \                intersection.push([i, j]);\n            }\n        }\n    }\n\
    \    if(intersection.length === 0){\n        flag = false;\n    }\n    else if(intersection.length\
    \ === length1){\n        flag = true;\n    }\n    else if(intersection.length\
    \ === length2){\n        flag = false;\n    }\n    else{\n        flag = true;\n\
    \    }\n    return flag;\n}\n", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    let intersection = [];\n    \n    if(interval1Start\
    \ <= interval2Start){\n        intersection.push(interval1Start);\n        intersection.push(interval2Start);\n\
    \    }\n    \n    if(interval1End >= interval2End){\n        intersection.push(interval1End);\n\
    \        intersection.push(interval2End);\n    }\n    \n    let intersectionLength\
    \ = intersection.length;\n    \n    if(intersectionLength === 0){\n        return\
    \ \"NO\";\n    }\n    \n    let prime = true;\n    \n    for(let i = 0; i < intersectionLength;\
    \ i++){\n        if(intersection[i] % 2 === 0){\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    if(prime){\n        return \"\
    YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(!(i % interval1Start === 0 % interval2Start === 0)){\n           \
    \ isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n\
    }\n", "\tlet arr1 = interval1.map(item => item[0]);\n\tlet arr2 = interval2.map(item\
    \ => item[0]);\n\tlet arr3 = interval1.map(item => item[1]);\n\tlet arr4 = interval2.map(item\
    \ => item[1]);\n\tlet arr5 = arr1.filter(item => arr2.indexOf(item) > -1);\n\t\
    let arr6 = arr2.filter(item => arr3.indexOf(item) > -1);\n\tlet arr7 = arr5.filter(item\
    \ => arr4.indexOf(item) > -1);\n\tlet arr8 = arr6.filter(item => arr7.indexOf(item)\
    \ > -1);\n\tlet arr9 = arr3.filter(item => arr4.indexOf(item) > -1);\n\tlet arr10\
    \ = arr4.filter(item => arr7.indexOf(item) > -1);\n\tlet arr11 = arr5.filter(item\
    \ => arr8.indexOf(item) > -1);\n\tlet arr12 = arr6.filter(item => arr9.indexOf(item)\
    \ > -1);\n\tlet arr13 = arr3.filter(item => arr10.indexOf(item) > -1);\n\tlet\
    \ arr14 = arr4.filter(item => arr11.indexOf(item) > -1);\n\tlet arr15 = arr5.filter(item\
    \ => arr12.indexOf(item) > -1);\n\tlet arr16 = arr6.filter(item => arr13.indexOf(item)\
    \ > -1);\n\tlet arr17 = arr3.filter(item => arr14.indexOf(item) > -1);\n\tlet\
    \ arr18 = arr4.filter(item => arr15.indexOf(item) > -1);\n\tlet arr19 = arr5.filter(item\
    \ => arr16.indexOf(item) > -1);\n\tlet arr20 = arr6.filter(item => arr17.indexOf(item)\
    \ > -1);\n\tlet arr21 = arr3.filter(item => arr18.indexOf(item) > -1);\n\tlet\
    \ arr22 = arr4.filter(item => arr19.indexOf(item) > -1);\n\tlet arr23 = arr5.filter(item\
    \ => arr20.indexOf(item) > -1);\n\tlet arr24 = arr6.filter(item => arr21.indexOf(item)\
    \ > -1);\n\tlet arr25 = arr3.filter(item => arr22.indexOf(item) > -1);\n\tlet\
    \ arr26 = arr4.filter(item => arr23.indexOf(item) > -1);\n\tlet arr27 = arr5.filter(item\
    \ => arr24.indexOf(item) > -1);\n\tlet arr28 = arr6.filter(item => arr25.indexOf(item)\
    \ > -1);\n\tlet arr29 = arr3.filter(item => arr26.indexOf(item) > -1);\n\tlet\
    \ arr30 = arr4.filter(item => arr27.indexOf(item) > -1);\n\tlet arr31 = arr5.filter(item\
    \ => arr28.indexOf(item) > -1);\n\tlet arr32 = arr6.filter(item => arr29.indexOf",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n    if(start1LessEqualEnd2 && start2LessEqualEnd1){\n\
    \        return start1 + start2;\n    }\n    if(start1LessEqualEnd2){\n      \
    \  return start1;\n    }\n    if(start2LessEqualEnd1){\n        return start2;\n\
    \    }\n    return \"NO\";\n}\n", "    let arr1 = interval1.map(x => x.start);\n\
    \    let arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x =>\
    \ x.end);\n    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x\
    \ => arr2.includes(x));\n    let arr6 = arr2.filter(x => arr3.includes(x));\n\
    \    let arr7 = arr5.filter(x => arr6.includes(x));\n    let arr8 = arr3.filter(x\
    \ => arr4.includes(x));\n    let arr9 = arr4.filter(x => arr8.includes(x));\n\
    \    let arr10 = arr5.filter(x => arr9.includes(x));\n    let arr11 = arr6.filter(x\
    \ => arr10.includes(x));\n    let arr12 = arr3.filter(x => arr4.includes(x));\n\
    \    let arr13 = arr4.filter(x => arr8.includes(x));\n    let arr14 = arr5.filter(x\
    \ => arr9.includes(x));\n    let arr15 = arr6.filter(x => arr10.includes(x));\n\
    \    let arr16 = arr3.filter(x => arr4.includes(x));\n    let arr17 = arr4.filter(x\
    \ => arr8.includes(x));\n    let arr18 = arr5.filter(x => arr9.includes(x));\n\
    \    let arr19 = arr6.filter(x => arr10.includes(x));\n    let arr20 = arr3.filter(x\
    \ => arr4.includes(x));\n    let arr21 = arr4.filter(x => arr8.includes(x));\n\
    \    let arr22 = arr5.filter(x => arr9.includes(x));\n    let arr23 = arr6.filter(x\
    \ => arr10.includes(x));\n    let arr24 = arr3.filter(x => arr4.includes(x));\n\
    \    let arr25 = arr4.filter(x => arr8.includes(x));\n    let arr26 = arr5.filter(x\
    \ => arr9.includes(x));\n    let arr27 = arr6.filter(x => arr10.includes(x));\n\
    \    let arr28 = arr3.filter(x => arr4.includes(x));\n    let arr29 = arr4.filter(x\
    \ => arr8.includes(x));\n    let arr30 = arr5.filter(x => arr9.includes(x));\n\
    \    let arr31 = arr6.filter(x => arr10.includes(x));\n    let arr32 = arr3.filter(x\
    \ => arr4.includes(x));\n    let arr33 = arr4.filter(x => arr8.includes(x));\n\
    \    let arr34 = arr5.filter(x ", "    let result = [];\n    interval1.forEach((item,\
    \ index) => {\n        interval2.forEach((item2, index2) => {\n            if(item\
    \ >= item2){\n                result.push(item);\n            }\n        });\n\
    \    });\n    if(result.length == 0){\n        return \"NO\";\n    }\n    if(result.length\
    \ == 1){\n        return \"YES\";\n    }\n    let prime = true;\n    for(let i\
    \ = 0; i < result.length; i++){\n        if(result[i] % 2 == 0){\n           \
    \ prime = false;\n            break;\n        }\n    }\n    if(prime){\n     \
    \   return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start1 = interval1[0];\n\
    \    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 =\
    \ interval2[1];\n    let intersection = [];\n    let intersectionLength = 0;\n\
    \    for(let i = start1; i <= end1; i++){\n        for(let j = start2; j <= end2;\
    \ j++){\n            if(i == j){\n                intersection.push(i);\n    \
    \            intersectionLength++;\n            }\n        }\n    }\n    if(intersectionLength\
    \ == 0){\n        return \"NO\";\n    }\n    if(intersectionLength == 1){\n  \
    \      return \"YES\";\n    }\n    if(intersectionLength == 2){\n        if(intersection[0]\
    \ == intersection[1]){\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if(intersectionLength > 2){\n        return \"NO\";\n  \
    \  }\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 <= start2 && start2 <= end1;\n    let endIntersection\
    \ = start1 <= end2 && end2 <= end1;\n    let intersectionLength = startIntersection\
    \ ? end1 - start1 : end2 - start2;\n    let isPrime = intersectionLength === 2\
    \ || intersectionLength % 2 === 0;\n    return isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 < start2 ? start1 : start2;\n    let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n    let intersectionLength = endIntersection -\
    \ startIntersection;\n    let isPrime = intersectionLength === 2;\n    return\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "\tlet start1 = interval1[0];\n\tlet end1\
    \ = interval1[1];\n\tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\t\
    let intersection = [];\n\tlet startIntersection = -1;\n\tlet endIntersection =\
    \ -1;\n\tlet isIntersect = false;\n\tfor(let i = start1; i <= end1; i++){\n\t\t\
    for(let j = start2; j <= end2; j++){\n\t\t\tif(i === j){\n\t\t\t\tisIntersect\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isIntersect){\n\t\t\tintersection.push(i);\n\
    \t\t\tisIntersect = false;\n\t\t}\n\t}\n\tif(isIntersect){\n\t\treturn \"NO\"\
    ;\n\t}\n\tlet prime = true;\n\tfor(let i = 0; i < intersection.length; i++){\n\
    \t\tif(intersection[i] % 1 !== 0){\n\t\t\tprime = false;\n\t\t}\n\t}\n\treturn\
    \ prime;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if(intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if(intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for(let i = 2; i <= intersectionLength;\
    \ i++){\n        if(intersectionStart % i === 0){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    if(isPrime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    for (let i = intersectionStart;\
    \ i <= intersectionEnd; i++){\n        if (interval1Start <= i && i <= interval1End){\n\
    \            return \"YES\";\n        }\n        if (interval2Start <= i && i\
    \ <= interval2End){\n            return \"YES\";\n        }\n    }\n    return\
    \ \"NO\";\n}\n", "    let arr1 = interval1.map(x => x.start);\n    let arr2 =\
    \ interval2.map(x => x.start);\n    let arr3 = interval1.map(x => x.end);\n  \
    \  let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n\
    \    let arr6 = arr2.filter(x => arr3.includes(x));\n    let arr7 = arr5.filter(x\
    \ => arr4.includes(x));\n    let arr8 = arr6.filter(x => arr7.includes(x));\n\
    \    let arr9 = arr8.filter(x => arr1.includes(x));\n    let arr10 = arr9.filter(x\
    \ => arr2.includes(x));\n    let arr11 = arr10.filter(x => arr3.includes(x));\n\
    \    let arr12 = arr11.filter(x => arr4.includes(x));\n    let arr13 = arr12.filter(x\
    \ => arr5.includes(x));\n    let arr14 = arr13.filter(x => arr6.includes(x));\n\
    \    let arr15 = arr14.filter(x => arr7.includes(x));\n    let arr16 = arr15.filter(x\
    \ => arr8.includes(x));\n    let arr17 = arr16.filter(x => arr9.includes(x));\n\
    \    let arr18 = arr17.filter(x => arr10.includes(x));\n    let arr19 = arr18.filter(x\
    \ => arr11.includes(x));\n    let arr20 = arr19.filter(x => arr12.includes(x));\n\
    \    let arr21 = arr20.filter(x => arr13.includes(x));\n    let arr22 = arr21.filter(x\
    \ => arr14.includes(x));\n    let arr23 = arr22.filter(x => arr15.includes(x));\n\
    \    let arr24 = arr23.filter(x => arr16.includes(x));\n    let arr25 = arr24.filter(x\
    \ => arr17.includes(x));\n    let arr26 = arr25.filter(x => arr18.includes(x));\n\
    \    let arr27 = arr26.filter(x => arr19.includes(x));\n    let arr28 = arr27.filter(x\
    \ => arr20.includes(x));\n    let arr29 = arr28.filter(x => arr21.includes(x));\n\
    \    let arr30 = arr29.filter(x => arr22.includes(x));\n    let arr31 = arr30.filter(x\
    \ => arr23.includes(x));\n    let arr32 = arr31.filter(x => arr24.includes(x));\n\
    \    let arr33 = arr32.filter(x => arr25.includes(x));\n    let arr34 = arr33.filter(x ",
  "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    \n    if(length == 0){\n\
    \        return \"NO\";\n    }\n    \n    let prime = true;\n    for(let i = 2;\
    \ i <= Math.sqrt(length); i++){\n        if(length % i == 0){\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime ? \"\
    YES\" : \"NO\";\n}\n", "    let arr1 = interval1.map(x => x.start);\n    let arr2\
    \ = interval2.map(x => x.start);\n    let arr3 = interval1.map(x => x.end);\n\
    \    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n\
    \    let arr6 = arr3.filter(x => arr4.includes(x));\n    let arr7 = arr5.filter(x\
    \ => arr6.includes(x));\n    let arr8 = arr7.filter(x => arr5.includes(x));\n\
    \    let arr9 = arr8.filter(x => arr7.includes(x));\n    let arr10 = arr9.filter(x\
    \ => arr8.includes(x));\n    let arr11 = arr10.filter(x => arr9.includes(x));\n\
    \    let arr12 = arr11.filter(x => arr10.includes(x));\n    let arr13 = arr12.filter(x\
    \ => arr11.includes(x));\n    let arr14 = arr13.filter(x => arr12.includes(x));\n\
    \    let arr15 = arr14.filter(x => arr13.includes(x));\n    let arr16 = arr15.filter(x\
    \ => arr14.includes(x));\n    let arr17 = arr16.filter(x => arr15.includes(x));\n\
    \    let arr18 = arr17.filter(x => arr16.includes(x));\n    let arr19 = arr18.filter(x\
    \ => arr17.includes(x));\n    let arr20 = arr19.filter(x => arr18.includes(x));\n\
    \    let arr21 = arr20.filter(x => arr19.includes(x));\n    let arr22 = arr21.filter(x\
    \ => arr20.includes(x));\n    let arr23 = arr22.filter(x => arr21.includes(x));\n\
    \    let arr24 = arr23.filter(x => arr22.includes(x));\n    let arr25 = arr24.filter(x\
    \ => arr23.includes(x));\n    let arr26 = arr25.filter(x => arr24.includes(x));\n\
    \    let arr27 = arr26.filter(x => arr25.includes(x));\n    let arr28 = arr27.filter(x\
    \ => arr26.includes(x));\n    let arr29 = arr28.filter(x => arr27.includes(x));\n\
    \    let arr30 = arr29.filter(x => arr28.includes(x));\n    let arr31 = arr30.filter(x\
    \ => arr29.includes(x));\n    let arr32 = arr31.filter(x => arr30.includes(x));\n\
    \    let arr33 = arr32.filter(x => arr31.includes(x));\n    let arr34 = arr33.filter(x ",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n   \
    \ let length = end - start;\n    if(length < 2){\n        return \"NO\";\n   \
    \ }\n    let prime = true;\n    for(let i = 2; i <= length; i++){\n        if(length\
    \ % i === 0){\n            prime = false;\n            break;\n        }\n   \
    \ }\n    if(prime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
  "    let arr1 = interval1.map(x => x.start);\n    let arr2 = interval2.map(x =>\
    \ x.start);\n    let arr3 = interval1.map(x => x.end);\n    let arr4 = interval2.map(x\
    \ => x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n    let arr6\
    \ = arr3.filter(x => arr4.includes(x));\n    let arr7 = arr5.filter(x => arr6.includes(x));\n\
    \    let arr8 = arr7.filter(x => arr1.includes(x));\n    let arr9 = arr8.filter(x\
    \ => arr3.includes(x));\n    let arr10 = arr9.filter(x => arr5.includes(x));\n\
    \    let arr11 = arr10.filter(x => arr7.includes(x));\n    let arr12 = arr11.filter(x\
    \ => arr8.includes(x));\n    let arr13 = arr12.filter(x => arr9.includes(x));\n\
    \    let arr14 = arr13.filter(x => arr10.includes(x));\n    let arr15 = arr14.filter(x\
    \ => arr11.includes(x));\n    let arr16 = arr15.filter(x => arr12.includes(x));\n\
    \    let arr17 = arr16.filter(x => arr13.includes(x));\n    let arr18 = arr17.filter(x\
    \ => arr14.includes(x));\n    let arr19 = arr18.filter(x => arr15.includes(x));\n\
    \    let arr20 = arr19.filter(x => arr16.includes(x));\n    let arr21 = arr20.filter(x\
    \ => arr17.includes(x));\n    let arr22 = arr21.filter(x => arr18.includes(x));\n\
    \    let arr23 = arr22.filter(x => arr19.includes(x));\n    let arr24 = arr23.filter(x\
    \ => arr20.includes(x));\n    let arr25 = arr24.filter(x => arr21.includes(x));\n\
    \    let arr26 = arr25.filter(x => arr22.includes(x));\n    let arr27 = arr26.filter(x\
    \ => arr23.includes(x));\n    let arr28 = arr27.filter(x => arr24.includes(x));\n\
    \    let arr29 = arr28.filter(x => arr25.includes(x));\n    let arr30 = arr29.filter(x\
    \ => arr26.includes(x));\n    let arr31 = arr30.filter(x => arr27.includes(x));\n\
    \    let arr32 = arr31.filter(x => arr28.includes(x));\n    let arr33 = arr32.filter(x\
    \ => arr29.includes(x));\n    let arr34 = arr33.filter(x ", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    if (isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2\
    \ = interval2[0];\n    let end2 = interval2[1];\n    let length = end1 - start1\
    \ + end2 - start2;\n    if(length < 0){\n        return \"NO\";\n    }\n    let\
    \ prime = true;\n    for(let i = 2; i <= length; i++){\n        if(start1 + i\
    \ !== end1 && start2 + i !== end2){\n            prime = false;\n            break;\n\
    \        }\n    }\n    if(prime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    for (let\
    \ i = intersectionStart; i <= intersectionEnd; i++){\n        if (interval1Start\
    \ <= i && i <= interval1End){\n            return \"YES\";\n        }\n      \
    \  if (interval2Start <= i && i <= interval2End){\n            return \"YES\"\
    ;\n        }\n    }\n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart\
    \ % i === 0 && intersectionEnd % i === 0){\n            isPrime = false;\n   \
    \         break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for\
    \ (let i = 2; i <= intersectionLength; i++) {\n        if (intersectionStart %\
    \ i === 0) {\n            isPrimeNumber = false;\n            break;\n       \
    \ }\n    }\n    return isPrimeNumber;\n}\n", "    let result = [];\n    let interval1Length\
    \ = interval1[1] - interval1[0];\n    let interval2Length = interval2[1] - interval2[0];\n\
    \    let intersectionLength = interval1Length + interval2Length;\n    for(let\
    \ i = interval1[0]; i < interval1[1]; i++){\n        for(let j = interval2[0];\
    \ j < interval2[1]; j++){\n            if(i != j && j >= i && j - i <= intersectionLength){\n\
    \                result.push([i, j]);\n            }\n        }\n    }\n    if(result.length\
    \ == 0){\n        return \"NO\";\n    }\n    if(result.length == 1){\n       \
    \ return \"YES\";\n    }\n    let result = result.sort((a,b) => a[1] - b[1]);\n\
    \    let resultLength = result[1] - result[0];\n    if(resultLength == 1){\n \
    \       return \"YES\";\n    }\n    if(resultLength == 2){\n        return \"\
    NO\";\n    }\n    if(resultLength > 2){\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\n", "\tlet arr1 = interval1.map(x => x.start);\n\tlet arr2 = interval2.map(x\
    \ => x.start);\n\tlet arr3 = interval1.map(x => x.end);\n\tlet arr4 = interval2.map(x\
    \ => x.end);\n\tlet arr5 = arr1.filter(x => arr2.includes(x));\n\tlet arr6 = arr3.filter(x\
    \ => arr4.includes(x));\n\tlet arr7 = arr5.filter(x => arr6.includes(x));\n\t\
    let arr8 = arr7.filter(x => arr5.includes(x));\n\tlet arr9 = arr8.filter(x =>\
    \ arr7.includes(x));\n\tlet arr10 = arr9.filter(x => arr8.includes(x));\n\tlet\
    \ arr11 = arr10.filter(x => arr9.includes(x));\n\tlet arr12 = arr11.filter(x =>\
    \ arr10.includes(x));\n\tlet arr13 = arr12.filter(x => arr11.includes(x));\n\t\
    let arr14 = arr13.filter(x => arr12.includes(x));\n\tlet arr15 = arr14.filter(x\
    \ => arr13.includes(x));\n\tlet arr16 = arr15.filter(x => arr14.includes(x));\n\
    \tlet arr17 = arr16.filter(x => arr15.includes(x));\n\tlet arr18 = arr17.filter(x\
    \ => arr16.includes(x));\n\tlet arr19 = arr18.filter(x => arr17.includes(x));\n\
    \tlet arr20 = arr19.filter(x => arr18.includes(x));\n\tlet arr21 = arr20.filter(x\
    \ => arr19.includes(x));\n\tlet arr22 = arr21.filter(x => arr20.includes(x));\n\
    \tlet arr23 = arr22.filter(x => arr21.includes(x));\n\tlet arr24 = arr23.filter(x\
    \ => arr22.includes(x));\n\tlet arr25 = arr24.filter(x => arr23.includes(x));\n\
    \tlet arr26 = arr25.filter(x => arr24.includes(x));\n\tlet arr27 = arr26.filter(x\
    \ => arr25.includes(x));\n\tlet arr28 = arr27.filter(x => arr26.includes(x));\n\
    \tlet arr29 = arr28.filter(x => arr27.includes(x));\n\tlet arr30 = arr29.filter(x\
    \ => arr28.includes(x));\n\tlet arr31 = arr30.filter(x => arr29.includes(x));\n\
    \tlet arr32 = arr31.filter(x ", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if(intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for\
    \ (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart %\
    \ i === 0 && intersectionEnd % i === 0){\n            isPrimeNumber = false;\n\
    \            break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "\tlet\
    \ start1 = interval1[0];\n\tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\
    \tlet end2 = interval2[1];\n\tlet length = end1 - start1;\n\tlet length2 = end2\
    \ - start2;\n\tlet intersection = length * length2;\n\tlet isPrime = true;\n\t\
    for(let i = 2; i <= intersection; i++){\n\t\tif(i % 2 === 0){\n\t\t\tif(i !==\
    \ intersection){\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(!(i %\
    \ interval1Start === 0 % interval2Start === 0)){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    return isPrime;\n}\n", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    let endIntersection = end1 < end2\
    \ ? end1 : end2;\n    let intersectionLength = endIntersection - startIntersection;\n\
    \    \n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength; i++)\
    \ {\n        if (startIntersection + i !== endIntersection) {\n            if\
    \ (startIntersection + i % 2 === endIntersection - i % 2) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n    }\n    \n  \
    \  return isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 <=\
    \ end2;\n    let start2LessOrEqualEnd1 = start2 <= end1;\n    if(start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1){\n        let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1 <= end2 && start2 <= end1;\n        if(start1LessOrEqualEnd2AndStart2LessOrEqualEnd1){\n\
    \            let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2;\n            if(start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2){\n\
    \                return \"YES\";\n            }\n        }\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.max(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let prime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (intersectionStart % i === 0){\n            prime = false;\n\
    \        }\n    }\n    if (prime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 < start2 ? start1 : start2;\n    let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n    let intersectionLength = endIntersection -\
    \ startIntersection;\n    let isPrime = intersectionLength === 2 ? true : false;\n\
    \    return isPrime;\n}\n", "    var result = [];\n    for(var i = 0; i<interval1.length;\
    \ i++){\n        result.push(interval1[i]>=interval2[i]? interval1[i]: interval2[i]);\n\
    \    }\n    return result.length>0? result: false;\n}\n", "    let arr1 = interval1.map(item\
    \ => item[0]);\n    let arr2 = interval2.map(item => item[0]);\n    let arr3 =\
    \ interval1.map(item => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n\
    \    let arr5 = arr1.filter(item => arr2.indexOf(item) > -1);\n    let arr6 =\
    \ arr2.filter(item => arr3.indexOf(item) > -1);\n    let arr7 = arr5.filter(item\
    \ => arr4.indexOf(item) > -1);\n    let arr8 = arr6.filter(item => arr7.indexOf(item)\
    \ > -1);\n    let arr9 = arr8.filter(item => arr3.indexOf(item) > -1);\n    let\
    \ arr10 = arr9.filter(item => arr4.indexOf(item) > -1);\n    let arr11 = arr10.filter(item\
    \ => arr7.indexOf(item) > -1);\n    let arr12 = arr11.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr13 = arr12.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr14 = arr13.filter(item => arr8.indexOf(item) > -1);\n    let arr15 =\
    \ arr14.filter(item => arr9.indexOf(item) > -1);\n    let arr16 = arr15.filter(item\
    \ => arr10.indexOf(item) > -1);\n    let arr17 = arr16.filter(item => arr11.indexOf(item)\
    \ > -1);\n    let arr18 = arr17.filter(item => arr12.indexOf(item) > -1);\n  \
    \  let arr19 = arr18.filter(item => arr13.indexOf(item) > -1);\n    let arr20\
    \ = arr19.filter(item => arr14.indexOf(item) > -1);\n    let arr21 = arr20.filter(item\
    \ => arr15.indexOf(item) > -1);\n    let arr22 = arr21.filter(item => arr16.indexOf(item)\
    \ > -1);\n    let arr23 = arr22.filter(item => arr17.indexOf(item) > -1);\n  \
    \  let arr24 = arr23.filter(item => arr18.indexOf(item) > -1);\n    let arr25\
    \ = arr24.filter(item => arr19.indexOf(item) > -1);\n    let arr26 = arr25.filter(item\
    \ => arr20.indexOf(item) > -1);\n    let arr27 = arr26.filter(item => arr21.indexOf(item)\
    \ > -1);\n    let arr28 = arr27.filter(item => arr22.indexOf(item) > -1);\n  \
    \  let arr29 = arr28.filter(item => arr23.indexOf(item) > -1);\n    let arr30\
    \ = arr29.filter(item => arr24.indexOf(item) > -1);\n    let arr31 = arr30.filter(item\
    \ => arr25.indexOf(item) > -1);\n    let arr32 = arr31.filter(item => arr26.indexOf(item)\
    \ > -1);\n    let arr33 = arr32.filter(item => arr27.indexOf(item) > -1);\n  \
    \  let arr34 = arr33.filter(item => arr28.indexOf", "    let interval1Start =\
    \ interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(!(i % interval1Start === 0 % interval2Start === 0)){\n           \
    \ isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n\
    }\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  return isPrime;\n}\n", "\tlet start = Math.min(interval1[0], interval2[0]);\n\
    \tlet end = Math.max(interval1[1], interval2[1]);\n\tlet intersection = [];\n\t\
    for(let i = start; i <= end; i++){\n\t\tlet count = 0;\n\t\tfor(let j = 0; j <\
    \ interval1.length; j++){\n\t\t\tif(interval1[j] <= i && i <= interval2[j]){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == interval1.length){\n\t\t\tintersection.push(i);\n\
    \t\t}\n\t}\n\tif(intersection.length == 0){\n\t\treturn \"NO\";\n\t}\n\tlet prime\
    \ = true;\n\tfor(let i = 0; i < intersection.length; i++){\n\t\tif(prime){\n\t\
    \t\tprime = primeCheck(intersection[i]);\n\t\t}\n\t}\n\treturn prime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start + i === interval2Start\
    \ || interval1End + i === interval2End){\n            isPrime = false;\n     \
    \       break;\n        }\n    }\n    return isPrime;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = interval1Start <= interval2End && interval2Start <= interval1End;\n\
    \    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersection = [];\n    let intersectionLength\
    \ = 0;\n    \n    for(let i = interval1Start; i <= interval1End; i++){\n     \
    \   for(let j = interval2Start; j <= interval2End; j++){\n            if(i ==\
    \ j){\n                intersection.push([i, j]);\n                intersectionLength++;\n\
    \            }\n        }\n    }\n    \n    if(intersectionLength == 0){\n   \
    \     return \"NO\";\n    }\n    \n    for(let i = 0; i < intersection.length;\
    \ i++){\n        if(intersection[i][0] >= intersection[i][1]){\n            return\
    \ \"NO\";\n        }\n    }\n    \n    if(intersectionLength == 1){\n        return\
    \ \"YES\";\n    }\n    \n    if(intersectionLength > 1){\n        return \"NO\"\
    ;\n    }\n    \n    return \"YES\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrimeNumber\
    \ = false;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(intersectionStart\
    \ % i === 0 && intersectionEnd % i === 0){\n            isPrimeNumber = true;\n\
    \            break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "    let\
    \ result = [];\n    for(let i = 0; i < interval1.length; i++){\n        for(let\
    \ j = 0; j < interval2.length; j++){\n            if(interval1[i] <= interval2[j]){\n\
    \                result.push(interval1[i]);\n                break;\n        \
    \    }\n        }\n    }\n    return result.length == 0 ? \"NO\" : \"YES\";\n\
    }\n", "\tlet interval1Start = interval1[0];\n\tlet interval1End = interval1[1];\n\
    \tlet interval2Start = interval2[0];\n\tlet interval2End = interval2[1];\n\tlet\
    \ intersectionStart = Math.min(interval1Start, interval2Start);\n\tlet intersectionEnd\
    \ = Math.max(interval1End, interval2End);\n\tlet intersectionLength = intersectionEnd\
    \ - intersectionStart;\n\tlet isPrime = true;\n\tfor(let i = 2; i <= intersectionLength;\
    \ i++){\n\t\tif(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\t\
    \t\tisPrime = false;\n\t\t}\n\t}\n\treturn isPrime;\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ count = 0;\n    for(let i = start; i <= end; i++){\n        if(interval1[0]\
    \ >= interval2[0] && interval1[1] <= interval2[1]){\n            count++;\n  \
    \      }\n    }\n    if(count === 0){\n        return \"NO\";\n    }\n    if(count\
    \ === 1){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let\
    \ [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    let endIntersection = end1 < end2\
    \ ? end1 : end2;\n    let startIntersectionEnd = startIntersection < endIntersection\
    \ ? startIntersection : endIntersection;\n    let endIntersectionStart = startIntersection\
    \ < endIntersection ? endIntersection : startIntersection;\n    let startIntersectionLength\
    \ = startIntersectionEnd - startIntersection;\n    let endIntersectionLength =\
    \ endIntersectionStart - endIntersection;\n    let isPrime = true;\n    for (let\
    \ i = startIntersectionLength; i <= endIntersectionLength; i++) {\n        if\
    \ (startIntersectionEnd % i === 0) {\n            startIntersectionEnd += i;\n\
    \        }\n        if (endIntersectionStart % i === 0) {\n            endIntersectionStart\
    \ += i;\n        }\n    }\n    if (startIntersectionLength === endIntersectionLength)\
    \ {\n        isPrime = false;\n    }\n    return isPrime;\n}\n", "    let result\
    \ = [];\n    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let interval1Length = interval1End - interval1Start;\n    let interval2Length\
    \ = interval2End - interval2Start;\n    let interval1Intersection = interval1Start\
    \ + interval1Length;\n    let interval2Intersection = interval2Start + interval2Length;\n\
    \    let intersectionLength = interval1Intersection - interval2Intersection;\n\
    \    let isPrime = true;\n    for(let i = interval1Start; i <= interval1End; i++){\n\
    \        for(let j = interval2Start; j <= interval2End; j++){\n            if(i\
    \ != j){\n                let currentIntersection = i + j;\n                if(currentIntersection\
    \ == intersectionLength){\n                    isPrime = false;\n            \
    \        break;\n                }\n            }\n        }\n    }\n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    if (length == 0) return \"NO\";\n    let prime =\
    \ true;\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length\
    \ % i == 0) {\n            prime = false;\n            break;\n        }\n   \
    \ }\n    return prime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let startIntersection = start1 <= start2\
    \ && start2 <= end1;\n    let endIntersection = start1 <= end2 && end2 <= end1;\n\
    \    if(startIntersection && endIntersection){\n        if(start1 <= start2 &&\
    \ end2 <= end1){\n            return \"YES\";\n        }\n        else if(start2\
    \ <= start1 && end1 <= end2){\n            return \"YES\";\n        }\n      \
    \  else{\n            return \"NO\";\n        }\n    }\n    else{\n        return\
    \ \"NO\";\n    }\n}\n", "    let start1 = interval1[0];\n    let end1 = interval1[1];\n\
    \    let start2 = interval2[0];\n    let end2 = interval2[1];\n    let length\
    \ = end1 - start1 + end2 - start2;\n    let prime = true;\n    for(let i = 2;\
    \ i <= length; i++){\n        if(start1 + i == end1 || start2 + i == end2){\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let arr1 = interval1.map(item\
    \ => item[0]);\n    let arr2 = interval2.map(item => item[0]);\n    let arr3 =\
    \ interval1.map(item => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n\
    \    let arr5 = arr1.filter(item => arr2.indexOf(item) > -1);\n    let arr6 =\
    \ arr3.filter(item => arr4.indexOf(item) > -1);\n    let arr7 = arr5.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr8 = arr7.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr9 = arr8.filter(item => arr6.indexOf(item) > -1);\n    let\
    \ arr10 = arr9.filter(item => arr5.indexOf(item) > -1);\n    let arr11 = arr10.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr12 = arr11.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr13 = arr12.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr14 = arr13.filter(item => arr5.indexOf(item) > -1);\n    let arr15 =\
    \ arr14.filter(item => arr6.indexOf(item) > -1);\n    let arr16 = arr15.filter(item\
    \ => arr5.indexOf(item) > -1);\n    let arr17 = arr16.filter(item => arr6.indexOf(item)\
    \ > -1);\n    let arr18 = arr17.filter(item => arr5.indexOf(item) > -1);\n   \
    \ let arr19 = arr18.filter(item => arr6.indexOf(item) > -1);\n    let arr20 =\
    \ arr19.filter(item => arr5.indexOf(item) > -1);\n    let arr21 = arr20.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr22 = arr21.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr23 = arr22.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr24 = arr23.filter(item => arr5.indexOf(item) > -1);\n    let arr25 =\
    \ arr24.filter(item => arr6.indexOf(item) > -1);\n    let arr26 = arr25.filter(item\
    \ => arr5.indexOf(item) > -1);\n    let arr27 = arr26.filter(item => arr6.indexOf(item)\
    \ > -1);\n    let arr28 = arr27.filter(item => arr5.indexOf(item) > -1);\n   \
    \ let arr29 = arr28.filter(item => arr6.indexOf(item) > -1);\n    let arr30 =\
    \ arr29.filter(item => arr5.indexOf(item) > -1);\n    let arr31 = arr30.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr32 = arr31.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr33 = arr32.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr34 = arr33.filter(item => arr5.indexOf", "    let result = [];\n    let\
    \ start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n\
    \    let end2 = interval2[1];\n    let startIntersection = start1;\n    let endIntersection\
    \ = end1;\n    let startIntersection2 = start2;\n    let endIntersection2 = end2;\n\
    \    let startIntersection3 = start1;\n    let endIntersection3 = end1;\n    let\
    \ startIntersection4 = start2;\n    let endIntersection4 = end2;\n    let startIntersection5\
    \ = start1;\n    let endIntersection5 = end1;\n    let startIntersection6 = start2;\n\
    \    let endIntersection6 = end2;\n    let startIntersection7 = start1;\n    let\
    \ endIntersection7 = end1;\n    let startIntersection8 = start2;\n    let endIntersection8\
    \ = end2;\n    let startIntersection9 = start1;\n    let endIntersection9 = end1;\n\
    \    let startIntersection10 = start2;\n    let endIntersection10 = end2;\n  \
    \  let startIntersection11 = start1;\n    let endIntersection11 = end1;\n    let\
    \ startIntersection12 = start2;\n    let endIntersection12 = end2;\n    let startIntersection13\
    \ = start1;\n    let endIntersection13 = end1;\n    let startIntersection14 =\
    \ start2;\n    let endIntersection14 = end2;\n    let startIntersection15 = start1;\n\
    \    let endIntersection15 = end1;\n    let startIntersection16 = start2;\n  \
    \  let endIntersection16 = end2;\n    let startIntersection17 = start1;\n    let\
    \ endIntersection17 = end1;\n    let startIntersection18 = start2;\n    let endIntersection18\
    \ = end2;\n    let startIntersection19 = start1;\n    let endIntersection19 =\
    \ end1;\n    let startIntersection20 = start2;\n    let endIntersection20 = end2;\n\
    \    let startIntersection21 = start1;\n    let endIntersection21 = end1;\n  \
    \  let startIntersection22 = start2;\n    let endIntersection22 = end2;\n    let\
    \ startIntersection23 = start1;\n    let endIntersection23 = end1;\n    let startIntersection24\
    \ = start2;\n    let endIntersection24 = end2;\n    let startIntersection25 =\
    \ start1;\n    let endIntersection25 = end1;\n    let startIntersection26 = start2;\n\
    \    let endIntersection26 = end2;\n    let startIntersection27 = start1;\n  \
    \  let endIntersection27 = end1;\n    let startIntersection28 = start2;\n    let\
    \ endIntersection28 = end2;\n", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if(intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "\tlet start = Math.min(interval1[0],\
    \ interval2[0]);\n\tlet end = Math.max(interval1[1], interval2[1]);\n\tlet intersection\
    \ = [];\n\tlet i = 0;\n\twhile(i < interval1.length && i < interval2.length){\n\
    \t\tif(interval1[i] < interval2[i]){\n\t\t\tintersection.push(interval1[i]);\n\
    \t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tintersection.push(interval2[i]);\n\t\t\ti++;\n\
    \t\t}\n\t}\n\tif(interval1.length < interval2.length){\n\t\twhile(i < interval1.length){\n\
    \t\t\tintersection.push(interval1[i]);\n\t\t\ti++;\n\t\t}\n\t}\n\telse{\n\t\t\
    while(i < interval2.length){\n\t\t\tintersection.push(interval2[i]);\n\t\t\ti++;\n\
    \t\t}\n\t}\n\tlet length = intersection.length;\n\tlet prime = false;\n\tif(length\
    \ == 2){\n\t\tif(intersection[0] == intersection[1]){\n\t\t\tprime = true;\n\t\
    \t}\n\t\telse{\n\t\t\tprime = false;\n\t\t}\n\t}\n\telse{\n\t\tprime = true;\n\
    \t}\n\treturn prime;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++) {\n        if (intersectionStart % i !==\
    \ 0 || intersectionEnd % i !== 0) {\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    let count = 0;\n    for(let\
    \ i = start; i <= end; i++){\n        if(start1 <= i && i <= end1){\n        \
    \    count++;\n        }\n        if(start2 <= i && i <= end2){\n            count++;\n\
    \        }\n    }\n    if(count === 0){\n        return \"NO\";\n    }\n    if(count\
    \ === 1){\n        return \"YES\";\n    }\n    if(count === 2){\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ count = 0;\n    for(let i = start; i <= end; i++){\n        if(interval1[0]\
    \ >= i && interval2[1] >= i){\n            count++;\n        }\n    }\n    if(count\
    \ === 0){\n        return \"NO\";\n    }\n    for(let i = start; i <= end; i++){\n\
    \        if(interval1[0] >= i && interval2[1] >= i){\n            count--;\n \
    \       }\n    }\n    if(count === 0){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let startIntersection = start1 <= end2 && start2 <= end1;\n\
    \    let endIntersection = start1 <= end2 && end2 <= start1;\n    if(startIntersection\
    \ && endIntersection){\n        let startIntersectionEnd = start1 <= end2 ? start2\
    \ : start1;\n        let endIntersectionStart = start1 <= end2 ? end2 : end1;\n\
    \        let intersectionLength = endIntersectionStart - startIntersectionEnd;\n\
    \        if(intersectionLength === 1){\n            return \"YES\";\n        }else{\n\
    \            return \"NO\";\n        }\n    }else{\n        return \"NO\";\n \
    \   }\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    \n    if(start1 > end2){\n        let temp = start2;\n\
    \        start2 = end2;\n        end2 = temp;\n    }\n    \n    if(start2 > end1){\n\
    \        let temp = start1;\n        start1 = end1;\n        end1 = temp;\n  \
    \  }\n    \n    if(start1 < start2){\n        let temp = start1;\n        start1\
    \ = start2;\n        start2 = temp;\n    }\n    \n    if(end1 < end2){\n     \
    \   let temp = end1;\n        end1 = end2;\n        end2 = temp;\n    }\n    \n\
    \    let startIntersection = start1;\n    let endIntersection = end1;\n    \n\
    \    while(startIntersection < endIntersection){\n        if(startIntersection\
    \ + 1 < endIntersection){\n            if(interval1[0] < interval2[1] && interval2[0]\
    \ < interval1[1]){\n                startIntersection++;\n            }\n    \
    \    }\n        else if(startIntersection + 1 > endIntersection){\n          \
    \  if(interval1[0] > interval2[1] && interval2[0] > interval1[1]){\n         \
    \       endIntersection--;\n            }\n        }\n        else{\n        \
    \    if(interval1[0] < interval2[1] && interval2[0] < interval1[1]){\n       \
    \         startIntersection++;\n            }\n            if(interval1[0] > interval2[1]\
    \ && interval2[0] > interval1[1]){\n                endIntersection--;\n     \
    \       }\n        }\n    }\n    \n    if(startIntersection === endIntersection){\n\
    \        return \"NO\";\n    }\n    \n    let lengthIntersection = endIntersection\
    \ - startIntersection;\n    \n    if(lengthIntersection === 1){\n        return\
    \ \"YES\";\n    }\n    \n    if(lengthIntersection === 2){\n        if(interval1[0]\
    \ === interval2[0]){\n            return \"YES\";\n        }\n        else{\n\
    \            return \"NO\";\n        }\n    }\n    \n    if(lengthIntersection\
    \ % 2 === 0){\n        return \"NO\";\n    }\n    \n    return \"YES\";\n}\n",
  "    let result = [];\n    let start1 = interval1[0];\n    let end1 = interval1[1];\n\
    \    let start2 = interval2[0];\n    let end2 = interval2[1];\n    let startIntersection\
    \ = start1;\n    let endIntersection = end1;\n    let startIntersection2 = start2;\n\
    \    let endIntersection2 = end2;\n    while(startIntersection < endIntersection\
    \ && startIntersection2 < endIntersection2){\n        if(startIntersection < startIntersection2){\n\
    \            startIntersection += 1;\n        }else if(startIntersection2 < startIntersection){\n\
    \            startIntersection2 += 1;\n        }else{\n            startIntersection2\
    \ += 1;\n            startIntersection += 1;\n        }\n        endIntersection\
    \ += 1;\n        endIntersection2 += 1;\n    }\n    if(startIntersection < endIntersection){\n\
    \        result.push(startIntersection);\n        result.push(endIntersection);\n\
    \    }else if(startIntersection2 < endIntersection2){\n        result.push(startIntersection2);\n\
    \        result.push(endIntersection2);\n    }\n    if(result.length == 2){\n\
    \        if(result[0] == result[1]){\n            return \"YES\";\n        }else{\n\
    \            return \"NO\";\n        }\n    }else{\n        return \"NO\";\n \
    \   }\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = ", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    let endIntersection = end1 < end2\
    \ ? end1 : end2;\n    let intersectionLength = endIntersection - startIntersection;\n\
    \    let isPrime = intersectionLength === 2;\n    return isPrime ? \"YES\" : \"\
    NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = interval1Start <=\
    \ interval2End && interval2Start <= interval1End;\n    return isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n  \
    \  let end = Math.max(interval1[1], interval2[1]);\n    let intersection = [];\n\
    \    for(let i = start; i <= end; i++){\n        intersection.push(i);\n    }\n\
    \    let length = intersection.length;\n    if(length == 0){\n        return \"\
    NO\";\n    }\n    for(let i = 0; i < length; i++){\n        if(intersection[i]\
    \ != start){\n            if(intersection[i] != end){\n                let temp\
    \ = intersection[i];\n                intersection[i] = intersection[length -\
    \ 1];\n                intersection[length - 1] = temp;\n            }\n     \
    \   }\n    }\n    let prime = true;\n    for(let i = 0; i < length; i++){\n  \
    \      if(intersection[i] != end){\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "\tlet start1 =\
    \ interval1[0];\n\tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\t\
    let end2 = interval2[1];\n\tlet intersection = [];\n\tlet length = 0;\n\tlet flag\
    \ = false;\n\tlet prime = true;\n\tlet prime_flag = false;\n\tlet prime_length\
    \ = 0;\n\tlet prime_start = 0;\n\tlet prime_end = 0;\n\tlet prime_start2 = 0;\n\
    \tlet prime_end2 = 0;\n\tlet prime_start3 = 0;\n\tlet prime_end3 = 0;\n\tlet prime_start4\
    \ = 0;\n\tlet prime_end4 = 0;\n\tlet prime_start5 = 0;\n\tlet prime_end5 = 0;\n\
    \tlet prime_start6 = 0;\n\tlet prime_end6 = 0;\n\tlet prime_start7 = 0;\n\tlet\
    \ prime_end7 = 0;\n\tlet prime_start8 = 0;\n\tlet prime_end8 = 0;\n\tlet prime_start9\
    \ = 0;\n\tlet prime_end9 = 0;\n\tlet prime_start10 = 0;\n\tlet prime_end10 = 0;\n\
    \tlet prime_start11 = 0;\n\tlet prime_end11 = 0;\n\tlet prime_start12 = 0;\n\t\
    let prime_end12 = 0;\n\tlet prime_start13 = 0;\n\tlet prime_end13 = 0;\n\tlet\
    \ prime_start14 = 0;\n\tlet prime_end14 = 0;\n\tlet prime_start15 = 0;\n\tlet\
    \ prime_end15 = 0;\n\tlet prime_start16 = 0;\n\tlet prime_end16 = 0;\n\tlet prime_start17\
    \ = 0;\n\tlet prime_end17 = 0;\n\tlet prime_start18 = 0;\n\tlet prime_end18 =\
    \ 0;\n\tlet prime_start19 = 0;\n\tlet prime_end19 = 0;\n\tlet prime_start20 =\
    \ 0;\n\tlet prime_end20 = 0;\n\tlet prime_start21 = 0;\n\tlet prime_end21 = 0;\n\
    \tlet prime_start22 = 0;\n\tlet prime_end22 = 0;\n\tlet prime_start23 = 0;\n\t\
    let prime_end23 = 0;\n\tlet prime_start24 = 0;\n\tlet prime_end24 = 0;\n\tlet\
    \ prime_start25 = 0;\n\tlet prime_end25 = 0;\n\tlet prime_start26 = 0;\n\tlet\
    \ prime_end26 = 0;\n\tlet prime_start27 = 0;\n\tlet prime_end27 = 0;\n\tlet prime_start28\
    \ = 0;\n\tlet prime_end28 = 0;\n\tlet prime_start29 = 0;\n", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    if(start1 <= end2\
    \ && start2 <= end1){\n        let startIntersection = start1 < start2 ? start1\
    \ : start2;\n        let endIntersection = start1 < start2 ? start2 : start1;\n\
    \        let lengthIntersection = endIntersection - startIntersection;\n     \
    \   if(lengthIntersection === 1){\n            return \"YES\";\n        }\n  \
    \      else{\n            return \"NO\";\n        }\n    }\n    else{\n      \
    \  return \"NO\";\n    }\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let intersection = [];\n\
    \    for(let i = start; i <= end; i++){\n        intersection.push(i);\n    }\n\
    \    let length = intersection.length;\n    if(length == 0){\n        return \"\
    NO\";\n    }\n    for(let i = 0; i < length; i++){\n        if(intersection[i]\
    \ != start && intersection[i] != end){\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n", "    let interval1Start = interval1[0];\n \
    \   let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    \n   \
    \ if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n    let\
    \ isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n       \
    \ if(intersectionStart % i === 0){\n            isPrime = false;\n           \
    \ break;\n        }\n    }\n    \n    if(isPrime){\n        return \"YES\";\n\
    \    }\n    \n    return \"NO\";\n}\n", "    var result = [];\n    var start1\
    \ = interval1[0];\n    var end1 = interval1[1];\n    var start2 = interval2[0];\n\
    \    var end2 = interval2[1];\n    \n    for(var i = start1; i <= end1; i++){\n\
    \        for(var j = start2; j <= end2; j++){\n            if(i != j){\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    \n    if(result.length\
    \ == 0){\n        return \"NO\";\n    }\n    \n    var length = result.length;\n\
    \    \n    for(var i = 1; i < length; i++){\n        if(result[i][0] == result[i-1][1]){\n\
    \            length--;\n        }\n    }\n    \n    if(length == 0){\n       \
    \ return \"NO\";\n    }\n    \n    for(var i = 1; i < length; i++){\n        if(result[i][1]\
    \ == result[i-1][0]){\n            length--;\n        }\n    }\n    \n    if(length\
    \ == 0){\n        return \"NO\";\n    }\n    \n    for(var i = 1; i < length;\
    \ i++){\n        if(result[i][0] < result[i-1][1] && result[i][1] > result[i-1][0]){\n\
    \            length--;\n        }\n    }\n    \n    if(length == 0){\n       \
    \ return \"NO\";\n    }\n    \n    for(var i = 1; i < length; i++){\n        if(result[i][1]\
    \ < result[i-1][0] && result[i][0] > result[i-1][1]){\n            length--;\n\
    \        }\n    }\n    \n    if(length == 0){\n        return \"NO\";\n    }\n\
    \    \n    for(var i = 1; i < length; i++){\n        if(result[i][0] < result[i-1][1]\
    \ && result[i][1] > result[i-1][0]){\n            length--;\n        }\n    }\n\
    \    \n    if(length == 0){\n        return \"NO\";\n    }\n    \n    for(var\
    \ i = 1; i < length; i++){\n        if(result[i][1] < result[i-1][0] && result[i][0]\
    \ > result[i-1][1]){\n            length--;\n        }\n    }\n    \n    if(length\
    \ == 0){\n        return \"NO\";\n    }\n    \n    for(var i = 1; i < length;\
    \ i++){\n        if(result[i][0] < result[i-1][1] && result[i][1] > result[i-1][0]){\n\
    \            length--;\n        }\n    }\n    \n    if(length == 0){\n       \
    \ return \"NO\";\n    }\n    \n    for(var i = 1; i < length; i++){\n        if(result[i][1]\
    \ < result[i-1][0] && result[i][0] > result[i-1][1]){\n            length--;\n\
    \        }\n    }\n    \n    if(length == 0){\n        return \"NO\";\n    }\n\
    \    \n    for(var i = 1; i < length; i++){\n        if(result[i][0] < result[i-1][1]\
    \ && result[i][1] > ", "    let start1 = interval1[0];\n    let end1 = interval1[1];\n\
    \    let start2 = interval2[0];\n    let end2 = interval2[1];\n    let result\
    \ = [];\n    let flag = false;\n    for(let i = start1; i <= end1; i++){\n   \
    \     for(let j = start2; j <= end2; j++){\n            if(i === j){\n       \
    \         result.push(i);\n                flag = true;\n            }\n     \
    \   }\n    }\n    if(flag){\n        if(result.length == 2){\n            if(result[0]\
    \ < result[1]){\n                return \"YES\";\n            }else{\n       \
    \         return \"NO\";\n            }\n        }else{\n            return \"\
    NO\";\n        }\n    }else{\n        return \"NO\";\n    }\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let start1 = interval1[0];\n\
    \    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 =\
    \ interval2[1];\n    let length = end1 - start1;\n    let length2 = end2 - start2;\n\
    \    if(length == 0 || length2 == 0){\n        return \"NO\";\n    }\n    let\
    \ isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length%i\
    \ == 0){\n            isPrime = false;\n            break;\n        }\n    }\n\
    \    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 =\
    \ interval2[0];\n    let end2 = interval2[1];\n    let length1 = end1 - start1;\n\
    \    let length2 = end2 - start2;\n    if(length1 > length2){\n        let temp\
    \ = start1;\n        start1 = start2;\n        start2 = temp;\n    }\n    if(start1\
    \ > end2){\n        let temp = end1;\n        end1 = end2;\n        end2 = temp;\n\
    \    }\n    let intersection = start1 + end2;\n    if(length1 === length2){\n\
    \        if(intersection === length1){\n            return \"YES\";\n        }else{\n\
    \            return \"NO\";\n        }\n    }else{\n        if(intersection ===\
    \ length2){\n            return \"NO\";\n        }else{\n            return \"\
    YES\";\n        }\n    }\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = (end -\
    \ start) + 1;\n    let prime = true;\n    for(let i = 2; i <= length; i++){\n\
    \        if(start % i === 0 && end % i === 0){\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(intersectionStart % i === 0){\n            isPrime = false;\n    \
    \        break;\n        }\n    }\n    \n    if(isPrime){\n        return \"YES\"\
    ;\n    }\n    \n    return \"NO\";\n}\n", "    var result = [];\n    var start1\
    \ = interval1[0];\n    var end1 = interval1[1];\n    var start2 = interval2[0];\n\
    \    var end2 = interval2[1];\n    for(var i = start1; i <= end1; i++){\n    \
    \    for(var j = start2; j <= end2; j++){\n            if(i === j){\n        \
    \        result.push([i,j]);\n            }\n        }\n    }\n    if(result.length\
    \ == 0){\n        return \"NO\";\n    }\n    var length = result.length;\n   \
    \ for(var k = 0; k < length; k++){\n        if(result[k][0] == result[k][1]){\n\
    \            length--;\n        }\n    }\n    if(length == 0){\n        return\
    \ \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "    let start1\
    \ = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n\
    \    let end2 = interval2[1];\n    let intersection = end1 - start2;\n    if(start1\
    \ < start2){\n        intersection = start2 - start1;\n    }\n    if(intersection\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersection; i++){\n        if(i % 2 === 0){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    if(isPrime){\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ count = 0;\n    for(let i = start; i <= end; i++){\n        if(interval1[0]\
    \ < interval2[1] && interval1[1] > interval2[0]){\n            count++;\n    \
    \    }\n    }\n    if(count % 2 === 0){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start + i !== interval2Start\
    \ || interval1End - i !== interval2End){\n            isPrime = false;\n     \
    \       break;\n        }\n    }\n    return isPrime;\n}\n", "    let arr1 = interval1.map(item\
    \ => item[0]);\n    let arr2 = interval2.map(item => item[0]);\n    let arr3 =\
    \ interval1.map(item => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n\
    \    let arr5 = arr1.filter(item => arr2.indexOf(item) > -1);\n    let arr6 =\
    \ arr2.filter(item => arr3.indexOf(item) > -1);\n    let arr7 = arr5.filter(item\
    \ => arr4.indexOf(item) > -1);\n    let arr8 = arr6.filter(item => arr7.indexOf(item)\
    \ > -1);\n    let arr9 = arr8.filter(item => arr3.indexOf(item) > -1);\n    let\
    \ arr10 = arr9.filter(item => arr4.indexOf(item) > -1);\n    let arr11 = arr10.filter(item\
    \ => arr7.indexOf(item) > -1);\n    let arr12 = arr11.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr13 = arr12.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr14 = arr13.filter(item => arr8.indexOf(item) > -1);\n    let arr15 =\
    \ arr14.filter(item => arr9.indexOf(item) > -1);\n    let arr16 = arr15.filter(item\
    \ => arr10.indexOf(item) > -1);\n    let arr17 = arr16.filter(item => arr11.indexOf(item)\
    \ > -1);\n    let arr18 = arr17.filter(item => arr12.indexOf(item) > -1);\n  \
    \  let arr19 = arr18.filter(item => arr13.indexOf(item) > -1);\n    let arr20\
    \ = arr19.filter(item => arr14.indexOf(item) > -1);\n    let arr21 = arr20.filter(item\
    \ => arr15.indexOf(item) > -1);\n    let arr22 = arr21.filter(item => arr16.indexOf(item)\
    \ > -1);\n    let arr23 = arr22.filter(item => arr17.indexOf(item) > -1);\n  \
    \  let arr24 = arr23.filter(item => arr18.indexOf(item) > -1);\n    let arr25\
    \ = arr24.filter(item => arr19.indexOf(item) > -1);\n    let arr26 = arr25.filter(item\
    \ => arr20.indexOf(item) > -1);\n    let arr27 = arr26.filter(item => arr21.indexOf(item)\
    \ > -1);\n    let arr28 = arr27.filter(item => arr22.indexOf(item) > -1);\n  \
    \  let arr29 = arr28.filter(item => arr23.indexOf(item) > -1);\n    let arr30\
    \ = arr29.filter(item => arr24.indexOf(item) > -1);\n    let arr31 = arr30.filter(item\
    \ => arr25.indexOf(item) > -1);\n    let arr32 = arr31.filter(item => arr26.indexOf(item)\
    \ > -1);\n    let arr33 = arr32.filter(item => arr27.indexOf(item) > -1);\n  \
    \  let arr34 = arr33.filter(item => arr28.indexOf", "    let start1 = interval1[0];\n\
    \    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 =\
    \ interval2[1];\n    let startIntersection = start1;\n    let endIntersection\
    \ = end1;\n    for(let i = start2; i <= end2; i++){\n        if(startIntersection\
    \ >= end2){\n            break;\n        }\n        if(startIntersection < i){\n\
    \            startIntersection = i;\n        }\n        if(endIntersection > i){\n\
    \            endIntersection = i;\n        }\n    }\n    if(startIntersection\
    \ === endIntersection){\n        return \"NO\";\n    }\n    let length = endIntersection\
    \ - startIntersection;\n    if(length < 2){\n        return \"NO\";\n    }\n \
    \   let isPrime = true;\n    for(let i = 2; i <= length; i++){\n        if(length\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "\tlet start = Math.min(interval1[0], interval2[0]);\n\tlet end = Math.max(interval1[1],\
    \ interval2[1]);\n\tlet length = end - start;\n\tlet isPrime = true;\n\tfor(let\
    \ i = 2; i <= Math.sqrt(length); i++){\n\t\tif(length % i === 0){\n\t\t\tisPrime\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    let isPrime = true;\n   \
    \ for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let arr1 = interval1.map(item\
    \ => item[0]);\n    let arr2 = interval2.map(item => item[0]);\n    let arr3 =\
    \ interval1.map(item => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n\
    \    let arr5 = arr1.filter(item => arr2.indexOf(item) > -1);\n    let arr6 =\
    \ arr3.filter(item => arr4.indexOf(item) > -1);\n    let arr7 = arr5.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr8 = arr7.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr9 = arr8.filter(item => arr6.indexOf(item) > -1);\n    let\
    \ arr10 = arr9.filter(item => arr5.indexOf(item) > -1);\n    let arr11 = arr10.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr12 = arr11.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr13 = arr12.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr14 = arr13.filter(item => arr5.indexOf(item) > -1);\n    let arr15 =\
    \ arr14.filter(item => arr6.indexOf(item) > -1);\n    let arr16 = arr15.filter(item\
    \ => arr5.indexOf(item) > -1);\n    let arr17 = arr16.filter(item => arr6.indexOf(item)\
    \ > -1);\n    let arr18 = arr17.filter(item => arr5.indexOf(item) > -1);\n   \
    \ let arr19 = arr18.filter(item => arr6.indexOf(item) > -1);\n    let arr20 =\
    \ arr19.filter(item => arr5.indexOf(item) > -1);\n    let arr21 = arr20.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr22 = arr21.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr23 = arr22.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr24 = arr23.filter(item => arr5.indexOf(item) > -1);\n    let arr25 =\
    \ arr24.filter(item => arr6.indexOf(item) > -1);\n    let arr26 = arr25.filter(item\
    \ => arr5.indexOf(item) > -1);\n    let arr27 = arr26.filter(item => arr6.indexOf(item)\
    \ > -1);\n    let arr28 = arr27.filter(item => arr5.indexOf(item) > -1);\n   \
    \ let arr29 = arr28.filter(item => arr6.indexOf(item) > -1);\n    let arr30 =\
    \ arr29.filter(item => arr5.indexOf(item) > -1);\n    let arr31 = arr30.filter(item\
    \ => arr6.indexOf(item) > -1);\n    let arr32 = arr31.filter(item => arr5.indexOf(item)\
    \ > -1);\n    let arr33 = arr32.filter(item => arr6.indexOf(item) > -1);\n   \
    \ let arr34 = arr33.filter(item => arr5.indexOf", "    let arr1 = interval1.map(x\
    \ => x.start);\n    let arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x\
    \ => x.end);\n    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x\
    \ => arr2.indexOf(x) > -1);\n    let arr6 = arr3.filter(x => arr4.indexOf(x) >\
    \ -1);\n    let arr7 = arr5.filter(x => arr6.indexOf(x) > -1);\n    let arr8 =\
    \ arr7.filter(x => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x)\
    \ > -1 && arr7.indexOf(x) > -1);\n    let arr9 = arr8.filter(x => arr1.indexOf(x)\
    \ > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x) > -1\
    \ && arr8.indexOf(x) > -1);\n    let arr10 = arr9.filter(x => arr1.indexOf(x)\
    \ > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x) > -1\
    \ && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1);\n    let arr11 = arr10.filter(x\
    \ => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x)\
    \ > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1 && arr10.indexOf(x) > -1);\n\
    \    let arr12 = arr11.filter(x => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1\
    \ && arr5.indexOf(x) > -1 && arr7.indexOf(x) > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x)\
    \ > -1 && arr10.indexOf(x) > -1 && arr11.indexOf(x) > -1);\n    let arr13 = arr12.filter(x\
    \ => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x)\
    \ > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1 && arr10.indexOf(x) > -1\
    \ && arr11.indexOf(x) > -1 && arr12.indexOf(x) > -1);\n    let arr14 = arr13.filter(x\
    \ => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x)\
    \ > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1 && arr10.indexOf(x) > -1\
    \ && arr11.indexOf(x) > -1 && arr12.indexOf(x) > -1 && arr13.indexOf(x) > -1);\n\
    \    let arr15 = arr14.filter(x => arr1.indexOf(x) > -1 && arr3.", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    if (isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if(isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(interval1Start <= interval2Start\
    \ && interval1End >= interval2End){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End){\n            if(interval1End <= intersectionEnd\
    \ && intersectionEnd <= interval1End){\n                return \"YES\";\n    \
    \        }\n        }\n    }\n    else if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval2End){\n        if(interval1End <= intersectionEnd\
    \ && intersectionEnd <= interval2End){\n            return \"YES\";\n        }\n\
    \    }\n    else if(interval1Start <= interval2Start && interval1End >= intersectionEnd){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval2End){\n\
    \            return \"YES\";\n        }\n    }\n    else if(interval1Start <=\
    \ intersectionStart && intersectionStart <= interval2End){\n        if(interval1End\
    \ <= intersectionEnd && intersectionEnd <= interval2End){\n            return\
    \ \"YES\";\n        }\n    }\n    else if(interval1Start <= interval2Start &&\
    \ interval1End >= intersectionEnd){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval2End){\n            return \"YES\";\n      \
    \  }\n    }\n    else if(interval1Start <= intersectionStart && intersectionStart\
    \ <= interval2End){\n        if(interval1End <= intersectionEnd && intersectionEnd\
    \ <= interval2End){\n            return \"YES\";\n        }\n    }\n    else if(interval1Start\
    \ <= interval2Start && interval1End >= intersectionEnd){\n        if(interval1Start\
    \ <= intersectionStart && intersectionStart <= interval2End){\n            return\
    \ \"YES\";\n        }\n    }\n    else if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval2End){\n        if(interval1End <= intersectionEnd\
    \ && intersectionEnd <= interval2End){\n            return \"YES\";\n        }\n\
    \    }\n    else if(interval1Start <= interval2Start && interval1End >= intersectionEnd){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval2End){\n\
    \            return \"YES\";\n        }\n    }\n    else if(interval1Start <=\
    \ intersectionStart && intersectionStart <= interval2End){\n        if(interval1End\
    \ <= intersectionEnd && intersectionEnd <= interval", "    let result = [];\n\
    \    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    for(let i = start; i <= end; i++){\n        result.push(i);\n\
    \    }\n    let length = result.length;\n    for(let i = 0; i < length; i++){\n\
    \        if(result[i] !== result[i+1]){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    let arr1 = interval1.map(item => item[0]);\n\
    \    let arr2 = interval2.map(item => item[0]);\n    let arr3 = interval1.map(item\
    \ => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n    let arr5 =\
    \ arr1.filter(item => arr2.indexOf(item) > -1);\n    let arr6 = arr3.filter(item\
    \ => arr4.indexOf(item) > -1);\n    let arr7 = arr5.filter(item => arr6.indexOf(item)\
    \ > -1);\n    let arr8 = arr7.filter(item => arr1.indexOf(item) > -1);\n    let\
    \ arr9 = arr8.filter(item => arr3.indexOf(item) > -1);\n    let arr10 = arr9.filter(item\
    \ => arr5.indexOf(item) > -1);\n    let arr11 = arr10.filter(item => arr7.indexOf(item)\
    \ > -1);\n    let arr12 = arr11.filter(item => arr8.indexOf(item) > -1);\n   \
    \ let arr13 = arr12.filter(item => arr9.indexOf(item) > -1);\n    let arr14 =\
    \ arr13.filter(item => arr10.indexOf(item) > -1);\n    let arr15 = arr14.filter(item\
    \ => arr11.indexOf(item) > -1);\n    let arr16 = arr15.filter(item => arr12.indexOf(item)\
    \ > -1);\n    let arr17 = arr16.filter(item => arr13.indexOf(item) > -1);\n  \
    \  let arr18 = arr17.filter(item => arr14.indexOf(item) > -1);\n    let arr19\
    \ = arr18.filter(item => arr15.indexOf(item) > -1);\n    let arr20 = arr19.filter(item\
    \ => arr16.indexOf(item) > -1);\n    let arr21 = arr20.filter(item => arr17.indexOf(item)\
    \ > -1);\n    let arr22 = arr21.filter(item => arr18.indexOf(item) > -1);\n  \
    \  let arr23 = arr22.filter(item => arr19.indexOf(item) > -1);\n    let arr24\
    \ = arr23.filter(item => arr20.indexOf(item) > -1);\n    let arr25 = arr24.filter(item\
    \ => arr21.indexOf(item) > -1);\n    let arr26 = arr25.filter(item => arr22.indexOf(item)\
    \ > -1);\n    let arr27 = arr26.filter(item => arr23.indexOf(item) > -1);\n  \
    \  let arr28 = arr27.filter(item => arr24.indexOf(item) > -1);\n    let arr29\
    \ = arr28.filter(item => arr25.indexOf(item) > -1);\n    let arr30 = arr29.filter(item\
    \ => arr26.indexOf(item) > -1);\n    let arr31 = arr30.filter(item => arr27.indexOf(item)\
    \ > -1);\n    let arr32 = arr31.filter(item => arr28.indexOf(item) > -1);\n  \
    \  let arr33 = arr32.filter(item => arr29.indexOf(item) > -1);\n    let arr34\
    \ = arr33.filter(item => arr30.indexOf", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n        if(length % i === 0){\n            isPrime = false;\n       \
    \     break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for\
    \ (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart %\
    \ i === 0 && intersectionEnd % i === 0){\n            isPrimeNumber = false;\n\
    \            break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "    let\
    \ interval1Start = interval1[0];\n    let interval1End = interval1[1];\n    let\
    \ interval2Start = interval2[0];\n    let interval2End = interval2[1];\n    let\
    \ intersectionStart = Math.min(interval1Start, interval2Start);\n    let intersectionEnd\
    \ = Math.max(interval1End, interval2End);\n    let intersectionLength = intersectionEnd\
    \ - intersectionStart;\n    if (intersectionLength === 0){\n        return \"\
    NO\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (intersectionStart % i === 0 && intersectionEnd % i === 0){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start1 = interval1[0];\n\
    \    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 =\
    \ interval2[1];\n    let result = [];\n    let flag = false;\n    for(let i =\
    \ start1; i <= end1; i++){\n        for(let j = start2; j <= end2; j++){\n   \
    \         if(i === j){\n                result.push(i);\n                flag\
    \ = true;\n            }\n        }\n    }\n    if(flag){\n        if(result.length\
    \ == 2){\n            if(result[0] === result[1]){\n                return \"\
    YES\";\n            }\n            return \"NO\";\n        }\n        return \"\
    NO\";\n    }\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let startIntersection = start1 < start2\
    \ ? start1 : start2;\n    let endIntersection = end1 < end2 ? end1 : end2;\n \
    \   let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength === 2 ? true : false;\n    return isPrime;\n}\n", "   \
    \ let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n \
    \   let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersection = [];\n    for(let i = interval1Start; i <= interval1End;\
    \ i++){\n        for(let j = interval2Start; j <= interval2End; j++){\n      \
    \      if(i == j){\n                intersection.push([i, j]);\n            }\n\
    \        }\n    }\n    if(intersection.length == 0){\n        return \"NO\";\n\
    \    }\n    let prime = true;\n    for(let i = 0; i < intersection.length; i++){\n\
    \        if(intersection[i][0] > intersection[i][1]){\n            prime = false;\n\
    \            break;\n        }\n    }\n    if(prime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1\n    let\
    \ [start2, end2] = interval2\n    let startIntersection = start1 < start2 ? start1\
    \ : start2\n    let endIntersection = end1 < end2 ? end1 : end2\n    let intersectionLength\
    \ = endIntersection - startIntersection\n    let isPrime = intersectionLength\
    \ > 1 && isPrime(intersectionLength)\n    return isPrime ? \"YES\" : \"NO\"\n\
    }\n", "    let arr1 = interval1.map(x => x.start);\n    let arr2 = interval2.map(x\
    \ => x.start);\n    let arr3 = interval1.map(x => x.end);\n    let arr4 = interval2.map(x\
    \ => x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n    let arr6\
    \ = arr3.filter(x => arr4.includes(x));\n    let arr7 = arr5.filter(x => arr6.includes(x));\n\
    \    let arr8 = arr7.filter(x => arr5.includes(x));\n    let arr9 = arr8.filter(x\
    \ => arr6.includes(x));\n    let arr10 = arr9.filter(x => arr7.includes(x));\n\
    \    let arr11 = arr10.filter(x => arr8.includes(x));\n    let arr12 = arr11.filter(x\
    \ => arr9.includes(x));\n    let arr13 = arr12.filter(x => arr10.includes(x));\n\
    \    let arr14 = arr13.filter(x => arr11.includes(x));\n    let arr15 = arr14.filter(x\
    \ => arr12.includes(x));\n    let arr16 = arr15.filter(x => arr13.includes(x));\n\
    \    let arr17 = arr16.filter(x => arr14.includes(x));\n    let arr18 = arr17.filter(x\
    \ => arr15.includes(x));\n    let arr19 = arr18.filter(x => arr16.includes(x));\n\
    \    let arr20 = arr19.filter(x => arr17.includes(x));\n    let arr21 = arr20.filter(x\
    \ => arr18.includes(x));\n    let arr22 = arr21.filter(x => arr19.includes(x));\n\
    \    let arr23 = arr22.filter(x => arr20.includes(x));\n    let arr24 = arr23.filter(x\
    \ => arr21.includes(x));\n    let arr25 = arr24.filter(x => arr22.includes(x));\n\
    \    let arr26 = arr25.filter(x => arr23.includes(x));\n    let arr27 = arr26.filter(x\
    \ => arr24.includes(x));\n    let arr28 = arr27.filter(x => arr25.includes(x));\n\
    \    let arr29 = arr28.filter(x => arr26.includes(x));\n    let arr30 = arr29.filter(x\
    \ => arr27.includes(x));\n    let arr31 = arr30.filter(x => arr28.includes(x));\n\
    \    let arr32 = arr31.filter(x => arr29.includes(x));\n    let arr33 = arr32.filter(x\
    \ => arr30.includes(x));\n    let arr34 = arr33.filter(x ", "\tlet start = Math.min(interval1[0],\
    \ interval2[0]);\n\tlet end = Math.max(interval1[1], interval2[1]);\n\tlet intersection\
    \ = [];\n\tfor(let i = start; i <= end; i++){\n\t\tif(interval1[0] >= interval2[0]\
    \ && interval1[1] <= interval2[1]){\n\t\t\tintersection.push(i);\n\t\t}\n\t}\n\
    \tif(intersection.length == 0){\n\t\treturn \"NO\";\n\t}\n\tlet isPrime = true;\n\
    \tfor(let i = 0; i < intersection.length; i++){\n\t\tlet prime = primeFactor(intersection[i]);\n\
    \t\tif(prime == 0){\n\t\t\tisPrime = false;\n\t\t}\n\t}\n\treturn isPrime ? \"\
    YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = interval1Start <=\
    \ interval2End && interval2Start <= interval1End;\n    if(isPrime){\n        return\
    \ \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2;\n    let start2LessOrEqualEnd1 = start2 <= end1;\n    let\
    \ start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 = start1LessOrEqualEnd2 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2 = start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqual", "    let arr1 = interval1.map(x => x.start);\n    let\
    \ arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x => x.end);\n\
    \    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n\
    \    let arr6 = arr3.filter(x => arr4.includes(x));\n    let arr7 = arr5.filter(x\
    \ => arr6.includes(x));\n    let arr8 = arr7.filter(x => arr5.includes(x));\n\
    \    let arr9 = arr8.filter(x => arr6.includes(x));\n    let arr10 = arr9.filter(x\
    \ => arr7.includes(x));\n    let arr11 = arr10.filter(x => arr8.includes(x));\n\
    \    let arr12 = arr11.filter(x => arr9.includes(x));\n    let arr13 = arr12.filter(x\
    \ => arr10.includes(x));\n    let arr14 = arr13.filter(x => arr11.includes(x));\n\
    \    let arr15 = arr14.filter(x => arr12.includes(x));\n    let arr16 = arr15.filter(x\
    \ => arr13.includes(x));\n    let arr17 = arr16.filter(x => arr14.includes(x));\n\
    \    let arr18 = arr17.filter(x => arr15.includes(x));\n    let arr19 = arr18.filter(x\
    \ => arr16.includes(x));\n    let arr20 = arr19.filter(x => arr17.includes(x));\n\
    \    let arr21 = arr20.filter(x => arr18.includes(x));\n    let arr22 = arr21.filter(x\
    \ => arr19.includes(x));\n    let arr23 = arr22.filter(x => arr20.includes(x));\n\
    \    let arr24 = arr23.filter(x => arr21.includes(x));\n    let arr25 = arr24.filter(x\
    \ => arr22.includes(x));\n    let arr26 = arr25.filter(x => arr23.includes(x));\n\
    \    let arr27 = arr26.filter(x => arr24.includes(x));\n    let arr28 = arr27.filter(x\
    \ => arr25.includes(x));\n    let arr29 = arr28.filter(x => arr26.includes(x));\n\
    \    let arr30 = arr29.filter(x => arr27.includes(x));\n    let arr31 = arr30.filter(x\
    \ => arr28.includes(x));\n    let arr32 = arr31.filter(x => arr29.includes(x));\n\
    \    let arr33 = arr32.filter(x => arr30.includes(x));\n    let arr34 = arr33.filter(x ",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = interval1Length ===\
    \ interval2Length && interval1Length > 1 && interval2Length > 1 && intersectionLength\
    \ === interval1Length && intersectionLength === interval2Length;\n    return isPrime;\n\
    }\n", "    let [start1, end1] = interval1\n    let [start2, end2] = interval2\n\
    \    let start1LessEqualEnd2 = start1 < end2\n    let start2LessEqualEnd1 = start2\
    \ < end1\n    let start1LessEqualEnd2AndStart2LessEqualEnd1 = start1 < end2 &&\
    \ start2 < end1\n    let start2LessEqualEnd1AndStart1LessEqualEnd2 = start2 <\
    \ end1 && start1 < end2\n    let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start1 < end2 && start2 < end1 && start1 < end2\n    let start2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1\
    \ = start2 < end1 && start1 < end2 && start2 < end1\n    let start2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start2 < end1 && start1 < end2 && start2 < end1 && start1 < end2\n    let\
    \ start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start1 < end2 && start2 < end1 && start1 < end2 && start2 < end1 && start1\
    \ < end2\n    let start2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start2 < end1 && start1 < end2 && start2 < end1 && start2 < end1 && start1\
    \ < end2 && start2 < end1\n    let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start1 < end2 && start2 < end1 && start1 < end2 && start2 < end1 && start2\
    \ < end1 && start2 < end1\n    let start2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start2 < end1 && start1 < end2 && start2 < end1 && start2 < end1 && start2\
    \ < end1 && start2 < end1\n    let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqual",
  "    var interval1Start = interval1[0];\n    var interval1End = interval1[1];\n\
    \    var interval2Start = interval2[0];\n    var interval2End = interval2[1];\n\
    \    var intersectionStart = Math.max(interval1Start, interval2Start);\n    var\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    var intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    var isPrime = true;\n    \n  \
    \  for (var i = 2; i <= intersectionLength; i++){\n        if (interval1Start\
    \ <= intersectionStart && intersectionStart <= interval1End && interval2Start\
    \ <= intersectionStart && intersectionStart <= interval2End && interval1End <=\
    \ intersectionEnd && intersectionEnd <= interval2End){\n            isPrime =\
    \ false;\n            break;\n        }\n    }\n    \n    if (isPrime){\n    \
    \    return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let arr1 = interval1.map(x\
    \ => x.start);\n    let arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x\
    \ => x.end);\n    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x\
    \ => arr2.indexOf(x) > -1);\n    let arr6 = arr3.filter(x => arr4.indexOf(x) >\
    \ -1);\n    let arr7 = arr5.filter(x => arr6.indexOf(x) > -1);\n    let arr8 =\
    \ arr7.filter(x => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x)\
    \ > -1 && arr7.indexOf(x) > -1);\n    let arr9 = arr8.filter(x => arr1.indexOf(x)\
    \ > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x) > -1\
    \ && arr8.indexOf(x) > -1);\n    let arr10 = arr9.filter(x => arr1.indexOf(x)\
    \ > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x) > -1\
    \ && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1);\n    let arr11 = arr10.filter(x\
    \ => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x)\
    \ > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1 && arr10.indexOf(x) > -1);\n\
    \    let arr12 = arr11.filter(x => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1\
    \ && arr5.indexOf(x) > -1 && arr7.indexOf(x) > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x)\
    \ > -1 && arr10.indexOf(x) > -1 && arr11.indexOf(x) > -1);\n    let arr13 = arr12.filter(x\
    \ => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x)\
    \ > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1 && arr10.indexOf(x) > -1\
    \ && arr11.indexOf(x) > -1 && arr12.indexOf(x) > -1);\n    let arr14 = arr13.filter(x\
    \ => arr1.indexOf(x) > -1 && arr3.indexOf(x) > -1 && arr5.indexOf(x) > -1 && arr7.indexOf(x)\
    \ > -1 && arr8.indexOf(x) > -1 && arr9.indexOf(x) > -1 && arr10.indexOf(x) > -1\
    \ && arr11.indexOf(x) > -1 && arr12.indexOf(x) > -1 && arr13.indexOf(x) > -1);\n\
    \    let arr15 = arr14.filter(x => arr1.indexOf(x) > -1 && arr3.", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    let length = end - start;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n \
    \       if(length % i === 0){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for (let i = 2; i <= intersectionLength; i++){\n\
    \        if (intersectionStart % i === 0 && intersectionEnd % i === 0){\n    \
    \        isPrimeNumber = false;\n            break;\n        }\n    }\n    return\
    \ isPrimeNumber;\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    let startIntersection = start1 <= end2 && start2 <=\
    \ end1;\n    let endIntersection = start1 <= end2 && end2 <= start1;\n    if(startIntersection\
    \ && endIntersection){\n        if(start1 <= end2 && start2 <= end1){\n      \
    \      return true;\n        }\n    }\n    return false;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(!(i % interval1Start === 0 && i % interval2Start === 0)){\n      \
    \      isPrime = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let start1\
    \ = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n\
    \    let end2 = interval2[1];\n    let intersection = [];\n    let intersectionLength\
    \ = 0;\n    for(let i = start1; i <= end1; i++){\n        for(let j = start2;\
    \ j <= end2; j++){\n            if(i === j){\n                intersection.push([i,\
    \ j]);\n                intersectionLength++;\n            }\n        }\n    }\n\
    \    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    else if(intersectionLength\
    \ === 1){\n        return \"YES\";\n    }\n    else{\n        let prime = true;\n\
    \        for(let i = 0; i < intersectionLength; i++){\n            if(intersection[i][0]\
    \ > intersection[i][1]){\n                prime = false;\n                break;\n\
    \            }\n        }\n        if(prime){\n            return \"YES\";\n \
    \       }\n        else{\n            return \"NO\";\n        }\n    }\n}\n",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start1LessEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessEqualEnd2 = start1 <=\
    \ end2 && start2 <= end1;\n    let start2LessEqualEnd1 = start2 <= end1 && start1\
    \ <= end2;\n    let start1LessEqualEnd2 = start1 <= end2 && start2 <= end1;\n\
    \    let start2LessEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessEqualEnd1 = start2 <=\
    \ end1 && start1 <= end2;\n    let start1LessEqualEnd2 = start1 <= end2 && start2\
    \ <= end1;\n    let start2LessEqualEnd1 = start2 <= end1 && start1 <= end2;\n\
    \    let start1LessEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessEqualEnd2 = start1 <=\
    \ end2 && start2 <= end1;\n    let start2LessEqualEnd1 = start2 <= end1 && start1\
    \ <= end2;\n    let start1LessEqualEnd2 = start1 <= end2 && start2 <= end1;\n\
    \    let start2LessEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessEqualEnd1 = start2 <=\
    \ end1 && start1 <= end2;\n    let start1LessEqualEnd2 = start1 <= end2 && start2\
    \ <= end1;\n    let start2LessEqualEnd1 = start2 <= end1 && start1 <= end2;\n\
    \    let start1LessEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessEqualEnd2 = start1 <=\
    \ end2 && start2 <= end1;\n    let start2LessEqualEnd1 = start2 <= end1 && start1\
    \ <= end2;\n    let start1LessEqualEnd2 = start1 <= end2 && start2 <= end1;\n\
    \    let start2LessEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessEqualEnd1 = start2 <=\
    \ end1 && start1 <= end2;\n    let start1LessEqualEnd2 = start1 <= end2 && start2\
    \ <= end1;\n    let ", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for\
    \ (let i = 2; i <= intersectionLength; i++) {\n        if (interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End) {\n            isPrimeNumber = false;\n   \
    \         break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "    let\
    \ [start1, end1] = interval1\n    let [start2, end2] = interval2\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2\n    let start2LessOrEqualEnd1 = start2 <= end1\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd1\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd2\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2\n \
    \   let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqual", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    \n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let\
    \ interval1Start = interval1[0];\n    let interval1End = interval1[1];\n    let\
    \ interval2Start = interval2[0];\n    let interval2End = interval2[1];\n    let\
    \ intersectionStart = Math.max(interval1Start, interval2Start);\n    let intersectionEnd\
    \ = Math.min(interval1End, interval2End);\n    let intersectionLength = intersectionEnd\
    \ - intersectionStart;\n    let isPrime = interval1Start <= interval2End && interval2Start\
    \ <= interval1End;\n    if(isPrime){\n        return \"YES\";\n    }\n    if(intersectionLength\
    \ === 1){\n        return \"NO\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(!(i % interval1Start === 0 || i % interval2Start === 0)){\n      \
    \      isPrime = false;\n            break;\n        }\n    }\n    \n    return\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n  \
    \  let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 <=\
    \ end2;\n    let start2LessOrEqualEnd1 = start2 <= end1;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd1;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1Less", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if(length < 2){\n        return \"NO\";\n    }\n    let prime = true;\n \
    \   for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let\
    \ [start2, end2] = interval2;\n    let startIntersection = start1 <= end2 && start2\
    \ <= end1;\n    let endIntersection = start1 <= end2 && start2 >= end1;\n    if(startIntersection\
    \ && endIntersection){\n        if(start1 <= end2 && start2 <= end1){\n      \
    \      return true;\n        }\n    }\n    return false;\n}\n", "    let [start1,\
    \ end1] = interval1\n    let [start2, end2] = interval2\n    let startIntersection\
    \ = start1 <= start2 && start2 <= end1\n    let endIntersection = start1 <= end2\
    \ && end2 <= end1\n    let intersectionLength = startIntersection ? Math.min(end1,\
    \ end2) - Math.max(start1, start2) : 0\n    let isPrime = intersectionLength ===\
    \ 0 || intersectionLength === 1 && (startIntersection || endIntersection)\n  \
    \  return isPrime ? \"YES\" : \"NO\"\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersection = [];\n    \n    if(interval1Start\
    \ <= interval2Start){\n        intersection.push(interval1Start);\n        intersection.push(interval2Start);\n\
    \        intersection.push(interval1End);\n        intersection.push(interval2End);\n\
    \    }\n    else if(interval1Start <= interval2End){\n        intersection.push(interval1Start);\n\
    \        intersection.push(interval2Start);\n        intersection.push(interval1End);\n\
    \        intersection.push(interval2End);\n    }\n    else if(interval1End <=\
    \ interval2Start){\n        intersection.push(interval1Start);\n        intersection.push(interval2Start);\n\
    \        intersection.push(interval1End);\n        intersection.push(interval2End);\n\
    \    }\n    else if(interval1End <= interval2End){\n        intersection.push(interval1Start);\n\
    \        intersection.push(interval2Start);\n        intersection.push(interval1End);\n\
    \        intersection.push(interval2End);\n    }\n    \n    let intersectionLength\
    \ = intersection.length;\n    \n    if(intersectionLength === 2){\n        if(intersection[0]\
    \ === intersection[1]){\n            return \"YES\";\n        }\n        else{\n\
    \            return \"NO\";\n        }\n    }\n    else if(intersectionLength\
    \ === 3){\n        if(intersection[0] === intersection[1] && intersection[1] ===\
    \ intersection[2]){\n            return \"YES\";\n        }\n        else{\n \
    \           return \"NO\";\n        }\n    }\n    else if(intersectionLength ===\
    \ 4){\n        if(intersection[0] === intersection[1] && intersection[1] === intersection[2]\
    \ && intersection[2] === intersection[3]){\n            return \"YES\";\n    \
    \    }\n        else{\n            return \"NO\";\n        }\n    }\n    else\
    \ if(intersectionLength === 5){\n        if(intersection[0] === intersection[1]\
    \ && intersection[1] === intersection[2] && intersection[2] === intersection[3]\
    \ && intersection[3] === intersection[4]){\n            return \"YES\";\n    \
    \    }\n        else{\n            return \"NO\";\n        }\n    }\n    else\
    \ if(intersectionLength === 6){\n        if(intersection[0] === intersection[1]\
    \ && intersection[1] === intersection[2] && intersection[2] === intersection[3]\
    \ && intersection[3] === intersection[4] && intersection[4] === intersection[5]){\n\
    \            return \"YES\";\n        }\n        else{\n            return \"\
    NO\";\n        }\n    }\n    else if(intersectionLength === 7){\n        if(intersection[0]\
    \ === intersection[1] && intersection[1] === intersection[2] && intersection[2]\
    \ === intersection[3] && intersection[3] === intersection[4] && intersection[4]\
    \ === intersection[5] && intersection[5] === ", "    var result = [];\n    var\
    \ start1 = interval1[0];\n    var end1 = interval1[1];\n    var start2 = interval2[0];\n\
    \    var end2 = interval2[1];\n    for(var i = start1; i <= end1; i++){\n    \
    \    for(var j = start2; j <= end2; j++){\n            if(i === j){\n        \
    \        result.push([i, j]);\n            }\n        }\n    }\n    if(result.length\
    \ == 0){\n        return \"NO\";\n    }\n    for(var i = 1; i < result.length;\
    \ i++){\n        if(result[i][0] > result[i-1][1]){\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n", "    let arr1 = interval1.map(x\
    \ => x.start);\n    let arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x\
    \ => x.end);\n    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x\
    \ => arr2.includes(x));\n    let arr6 = arr3.filter(x => arr4.includes(x));\n\
    \    let arr7 = arr5.filter(x => arr6.includes(x));\n    let arr8 = arr7.filter(x\
    \ => arr5.includes(x));\n    let arr9 = arr8.filter(x => arr7.includes(x));\n\
    \    let arr10 = arr9.filter(x => arr8.includes(x));\n    let arr11 = arr10.filter(x\
    \ => arr9.includes(x));\n    let arr12 = arr11.filter(x => arr10.includes(x));\n\
    \    let arr13 = arr12.filter(x => arr11.includes(x));\n    let arr14 = arr13.filter(x\
    \ => arr12.includes(x));\n    let arr15 = arr14.filter(x => arr13.includes(x));\n\
    \    let arr16 = arr15.filter(x => arr14.includes(x));\n    let arr17 = arr16.filter(x\
    \ => arr15.includes(x));\n    let arr18 = arr17.filter(x => arr16.includes(x));\n\
    \    let arr19 = arr18.filter(x => arr17.includes(x));\n    let arr20 = arr19.filter(x\
    \ => arr18.includes(x));\n    let arr21 = arr20.filter(x => arr19.includes(x));\n\
    \    let arr22 = arr21.filter(x => arr20.includes(x));\n    let arr23 = arr22.filter(x\
    \ => arr21.includes(x));\n    let arr24 = arr23.filter(x => arr22.includes(x));\n\
    \    let arr25 = arr24.filter(x => arr23.includes(x));\n    let arr26 = arr25.filter(x\
    \ => arr24.includes(x));\n    let arr27 = arr26.filter(x => arr25.includes(x));\n\
    \    let arr28 = arr27.filter(x => arr26.includes(x));\n    let arr29 = arr28.filter(x\
    \ => arr27.includes(x));\n    let arr30 = arr29.filter(x => arr28.includes(x));\n\
    \    let arr31 = arr30.filter(x => arr29.includes(x));\n    let arr32 = arr31.filter(x\
    \ => arr30.includes(x));\n    let arr33 = arr32.filter(x => arr31.includes(x));\n\
    \    let arr34 = arr33.filter(x ", "    let [start1, end1] = interval1;\n    let\
    \ [start2, end2] = interval2;\n    let startIntersection = start1 < start2 ? start1\
    \ : start2;\n    let endIntersection = end1 < end2 ? end1 : end2;\n    let startIntersectionEnd\
    \ = startIntersection < endIntersection ? startIntersection : endIntersection;\n\
    \    let endIntersectionStart = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    let startIntersectionLength = startIntersectionEnd\
    \ - startIntersection;\n    let endIntersectionLength = endIntersectionStart -\
    \ endIntersection;\n    let intersectionLength = startIntersectionLength > endIntersectionLength\
    \ ? startIntersectionLength : endIntersectionLength;\n    let isPrime = intersectionLength\
    \ === 2;\n    return isPrime;\n}\n", "    var interval1Start=interval1[0];\n \
    \   var interval1End=interval1[1];\n    var interval2Start=interval2[0];\n   \
    \ var interval2End=interval2[1];\n    var intersectionStart=interval1Start;\n\
    \    var intersectionEnd=interval1End;\n    var intersectionLength=0;\n    while(intersectionStart<=interval1End\
    \ && intersectionEnd<=interval2End){\n        if(interval1Start<=intersectionStart\
    \ && intersectionStart<=interval2End){\n            intersectionLength++;\n  \
    \          intersectionStart++;\n        }\n        else if(interval1End<=intersectionStart\
    \ && intersectionStart<=interval2End){\n            intersectionLength++;\n  \
    \          intersectionEnd++;\n        }\n        else if(interval1Start<=intersectionEnd\
    \ && intersectionEnd<=interval2End){\n            intersectionLength++;\n    \
    \        intersectionStart++;\n        }\n        else if(interval1End<=intersectionEnd\
    \ && intersectionEnd<=interval2End){\n            intersectionLength++;\n    \
    \        intersectionEnd++;\n        }\n    }\n    if(intersectionLength==0){\n\
    \        return \"NO\";\n    }\n    else if(intersectionLength==1){\n        return\
    \ \"YES\";\n    }\n    else if(intersectionLength==2){\n        if(interval1Start<=intersectionStart\
    \ && intersectionStart<=interval2End){\n            return \"YES\";\n        }\n\
    \        else if(interval1End<=intersectionStart && intersectionStart<=interval2End){\n\
    \            return \"YES\";\n        }\n        else if(interval1Start<=intersectionEnd\
    \ && intersectionEnd<=interval2End){\n            return \"YES\";\n        }\n\
    \        else if(interval1End<=intersectionEnd && intersectionEnd<=interval2End){\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n", "  \
    \  let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrimeNumber = false;\n    \
    \        break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(intersectionStart % i === 0 && intersectionEnd % i === 0){\n     \
    \       isPrimeNumber = false;\n            break;\n        }\n    }\n    return\
    \ isPrimeNumber;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start + i === intersectionStart\
    \ || interval2Start + i === intersectionStart){\n            continue;\n     \
    \   }\n        if(interval1Start + i === intersectionEnd || interval2Start + i\
    \ === intersectionEnd){\n            continue;\n        }\n        if(interval1Start\
    \ + i === interval1End || interval2Start + i === interval2End){\n            continue;\n\
    \        }\n        if(interval1Start + i === interval2Start || interval2Start\
    \ + i === interval2End){\n            continue;\n        }\n        if(interval1Start\
    \ + i === interval1Start || interval2Start + i === interval2Start){\n        \
    \    continue;\n        }\n        if(interval1Start + i === interval1End || interval2Start\
    \ + i === interval2End){\n            continue;\n        }\n        if(interval1Start\
    \ + i === interval2Start || interval2Start + i === interval2Start){\n        \
    \    continue;\n        }\n        if(interval1Start + i === interval1Start ||\
    \ interval2Start + i === interval2End){\n            continue;\n        }\n  \
    \      if(interval1Start + i === interval1End || interval2Start + i === interval2End){\n\
    \            continue;\n        }\n        if(interval1Start + i === interval2Start\
    \ || interval2Start + i === interval2End){\n            continue;\n        }\n\
    \        isPrimeNumber = false;\n    }\n    return isPrimeNumber;\n}\n", "   \
    \ let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let intersection = [];\n    for(let i = start; i <= end;\
    \ i++){\n        if(interval1[0] < interval2[0] && interval1[1] > interval2[1]){\n\
    \            intersection.push(i);\n        }\n        if(interval1[0] > interval2[0]\
    \ && interval1[1] < interval2[1]){\n            intersection.push(i);\n      \
    \  }\n        if(interval1[0] < interval2[0] && interval1[1] > interval2[1]){\n\
    \            intersection.push(i);\n        }\n    }\n    if(intersection.length\
    \ == 0){\n        return \"NO\";\n    }\n    if(intersection.length == 1){\n \
    \       return \"YES\";\n    }\n    if(intersection.length == 2){\n        if(intersection[0]\
    \ == intersection[1]){\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if(intersection.length % 2 == 0){\n        return \"NO\"\
    ;\n    }\n    return \"YES\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if(length < 2){\n        return \"NO\";\n    }\n    let prime = true;\n \
    \   for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n\
    \            prime = false;\n            break;\n        }\n    }\n    if(prime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    \n    if (start1 > end2)\
    \ return \"NO\";\n    if (start2 > end1) return \"NO\";\n    \n    let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    let endIntersection = end1 < end2\
    \ ? end1 : end2;\n    \n    let intersectionLength = endIntersection - startIntersection;\n\
    \    \n    if (intersectionLength === 2) return \"YES\";\n    if (intersectionLength\
    \ === 1) return \"NO\";\n    \n    let isPrime = true;\n    for (let i = 2; i\
    \ <= intersectionLength; i++) {\n        if (intersectionLength % i === 0) {\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    \n  \
    \  return isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let startIntersection = start1 < start2\
    \ ? start1 : start2;\n    let endIntersection = end1 < end2 ? end1 : end2;\n \
    \   let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength === 2;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", " \
    \   let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 =\
    \ interval2[0];\n    let end2 = interval2[1];\n    let startIntersection = start1;\n\
    \    let endIntersection = end1;\n    let startIntersection2 = start2;\n    let\
    \ endIntersection2 = end2;\n    let intersectionLength = 0;\n    let intersectionLength2\
    \ = 0;\n    while(startIntersection < endIntersection){\n        startIntersection\
    \ += 1;\n        endIntersection += 1;\n    }\n    while(startIntersection2 <\
    \ endIntersection2){\n        startIntersection2 += 1;\n        endIntersection2\
    \ += 1;\n    }\n    intersectionLength = startIntersection - endIntersection;\n\
    \    intersectionLength2 = startIntersection2 - endIntersection2;\n    if(intersectionLength\
    \ === 0 && intersectionLength2 === 0){\n        return \"NO\";\n    }\n    if(intersectionLength\
    \ === 0 && intersectionLength2 !== 0){\n        return \"YES\";\n    }\n    if(intersectionLength\
    \ !== 0 && intersectionLength2 === 0){\n        return \"NO\";\n    }\n    if(intersectionLength\
    \ !== 0 && intersectionLength2 !== 0){\n        if(intersectionLength % 2 ===\
    \ 0 && intersectionLength2 % 2 === 0){\n            return \"YES\";\n        }\n\
    \        if(intersectionLength % 2 !== 0 && intersectionLength2 % 2 !== 0){\n\
    \            return \"NO\";\n        }\n    }\n}\n", "    let interval1Start =\
    \ interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(intersectionStart % i === 0 && intersectionEnd % i === 0){\n     \
    \       isPrimeNumber = false;\n            break;\n        }\n    }\n    return\
    \ isPrimeNumber ? \"YES\" : \"NO\";\n}\n", "\tlet interval1Start = interval1[0];\n\
    \tlet interval1End = interval1[1];\n\tlet interval2Start = interval2[0];\n\tlet\
    \ interval2End = interval2[1];\n\tlet intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n\tlet intersectionEnd = Math.max(interval1End, interval2End);\n\
    \tlet intersectionLength = intersectionEnd - intersectionStart;\n\tlet isPrime\
    \ = true;\n\tfor(let i = 2; i <= intersectionLength; i++){\n\t\tif(interval1Start\
    \ <= intersectionStart && intersectionStart <= interval1End && interval2Start\
    \ <= intersectionEnd && intersectionEnd <= interval2End){\n\t\t\tisPrime = false;\n\
    \t\t}\n\t}\n\treturn isPrime;\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrimeNumber\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(interval1Start\
    \ <= intersectionStart && intersectionStart <= interval1End && interval2Start\
    \ <= intersectionEnd && intersectionEnd <= interval2End){\n            isPrimeNumber\
    \ = false;\n            break;\n        }\n    }\n    if(isPrimeNumber){\n   \
    \     return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let start1 = interval1[0];\n\
    \    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 =\
    \ interval2[1];\n    let length = end1 - start1;\n    let length2 = end2 - start2;\n\
    \    let result = [];\n    for(let i = start1; i <= end1; i++){\n        for(let\
    \ j = start2; j <= end2; j++){\n            if(i === j){\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    let prime = true;\n    for(let i\
    \ = 0; i < result.length; i++){\n        if(result[i][0] >= length){\n       \
    \     prime = false;\n            break;\n        }\n        if(result[i][1] >=\
    \ length2){\n            prime = false;\n            break;\n        }\n    }\n\
    \    if(prime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let result = [];\n    for(let i = 0; i < interval1.length; i++){\n       \
    \ for(let j = 0; j < interval2.length; j++){\n            if(interval1[i] <= interval2[j]){\n\
    \                result.push(interval1[i]);\n                result.push(interval2[j]);\n\
    \            }\n        }\n    }\n    if(result.length == 0){\n        return\
    \ \"NO\";\n    }\n    let prime = true;\n    for(let i = 0; i < result.length;\
    \ i++){\n        if(result[i] % 2 == 0){\n            prime = false;\n       \
    \     break;\n        }\n    }\n    if(prime){\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\n", "    let result = [];\n    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    for(let i = interval1Start; i <= interval1End;\
    \ i++){\n        for(let j = interval2Start; j <= interval2End; j++){\n      \
    \      if(i === j){\n                result.push([i, j]);\n            }\n   \
    \     }\n    }\n    if(result.length == 0){\n        return \"NO\";\n    }\n \
    \   let intersectionLength = result.length;\n    for(let i = 0; i < intersectionLength;\
    \ i++){\n        if(result[i][0] > result[i][1]){\n            intersectionLength--;\n\
    \        }\n    }\n    if(intersectionLength === 0){\n        return \"NO\";\n\
    \    }\n    let prime = true;\n    for(let i = 0; i < intersectionLength; i++){\n\
    \        if(result[i][0] % result[i][1] === 0){\n            prime = false;\n\
    \        }\n    }\n    if(prime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let startIntersection = start1 < start2 ? start1 : start2;\n\
    \    let endIntersection = end1 < end2 ? end1 : end2;\n    let intersectionLength\
    \ = endIntersection - startIntersection;\n    let isPrime = intersectionLength\
    \ === 2;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let result = [];\n\
    \    interval1.forEach((interval) => {\n        interval2.forEach((interval2)\
    \ => {\n            if (interval[0] >= interval2[0] && interval[0] <= interval2[1])\
    \ {\n                result.push(interval);\n            }\n        });\n    });\n\
    \    if (result.length > 0) {\n        let length = result.length;\n        for\
    \ (let i = 0; i < length; i++) {\n            if (result[i][0] >= result[i][1])\
    \ {\n                length--;\n            }\n        }\n        if (length ===\
    \ 0) {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }\n}\n", "    let start1\
    \ = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n\
    \    let end2 = interval2[1];\n    let intersection = [];\n    let isIntersect\
    \ = false;\n    for(let i = start1; i <= end1; i++){\n        for(let j = start2;\
    \ j <= end2; j++){\n            if(i == j){\n                isIntersect = true;\n\
    \                intersection.push(i);\n            }\n        }\n    }\n    if(isIntersect){\n\
    \        if(intersection.length == 2){\n            if(intersection[0] == intersection[1]){\n\
    \                return \"YES\";\n            }else{\n                return \"\
    NO\";\n            }\n        }else{\n            return \"NO\";\n        }\n\
    \    }else{\n        return \"NO\";\n    }\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    if (length < 2) return \"NO\";\n    let prime = true;\n\
    \    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i ===\
    \ 0) {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersection = [];\n    let intersectionLength\
    \ = 0;\n    for(let i = interval1Start; i <= interval1End; i++){\n        for(let\
    \ j = interval2Start; j <= interval2End; j++){\n            if(i == j){\n    \
    \            intersection.push(i);\n                intersectionLength++;\n  \
    \          }\n        }\n    }\n    if(intersectionLength == 0){\n        return\
    \ \"NO\";\n    }\n    else if(intersectionLength == 1){\n        return \"YES\"\
    ;\n    }\n    else{\n        let prime = true;\n        for(let i = 0; i < intersectionLength;\
    \ i++){\n            if(intersection[i] % 2 == 0){\n                prime = false;\n\
    \                break;\n            }\n        }\n        if(prime){\n      \
    \      return \"YES\";\n        }\n        else{\n            return \"NO\";\n\
    \        }\n    }\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (interval1Start === interval1End){\n  \
    \      if (interval2Start === interval2End){\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if (interval2Start === interval2End){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart === intersectionEnd){\n\
    \        return \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2;\
    \ i <= intersectionLength; i++){\n        if (intersectionStart % i === 0 && intersectionEnd\
    \ % i === 0){\n            isPrime = false;\n        }\n    }\n    if (isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.min(start1,\
    \ start2);\n    let end = Math.max(end1, end2);\n    let length = end - start;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n \
    \       if(length % i === 0){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let result = [];\n    let start1 = interval1[0];\n    let\
    \ end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n\
    \    for(let i = start1; i <= end1; i++){\n        for(let j = start2; j <= end2;\
    \ j++){\n            if(i === j){\n                result.push(i);\n         \
    \   }\n        }\n    }\n    if(result.length === 0){\n        return \"NO\";\n\
    \    }\n    for(let i = 0; i < result.length; i++){\n        if(result[i] % 2\
    \ === 0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }\n", "    let arr1 = interval1.map(item => item[0]);\n    let arr2 = interval2.map(item\
    \ => item[0]);\n    let arr3 = interval1.map(item => item[1]);\n    let arr4 =\
    \ interval2.map(item => item[1]);\n    let arr5 = arr1.filter(item => arr2.indexOf(item)\
    \ > -1);\n    let arr6 = arr2.filter(item => arr3.indexOf(item) > -1);\n    let\
    \ arr7 = arr5.filter(item => arr4.indexOf(item) > -1);\n    let arr8 = arr6.filter(item\
    \ => arr7.indexOf(item) > -1);\n    let arr9 = arr8.filter(item => arr1.indexOf(item)\
    \ > -1 && arr2.indexOf(item) > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item)\
    \ > -1 && arr5.indexOf(item) > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item)\
    \ > -1 && arr8.indexOf(item) > -1);\n    let arr10 = arr9.filter(item => arr1.indexOf(item)\
    \ > -1 && arr2.indexOf(item) > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item)\
    \ > -1 && arr5.indexOf(item) > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item)\
    \ > -1 && arr8.indexOf(item) > -1 && arr9.indexOf(item) > -1);\n    let arr11\
    \ = arr10.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item) > -1 &&\
    \ arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item) > -1\
    \ && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1 && arr9.indexOf(item) > -1 && arr10.indexOf(item) > -1);\n    let arr12\
    \ = arr11.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item) > -1 &&\
    \ arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item) > -1\
    \ && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1 && arr9.indexOf(item) > -1 && arr10.indexOf(item) > -1 && arr11.indexOf(item)\
    \ > -1);\n    let arr13 = arr12.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item)\
    \ > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item)\
    \ > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1 && arr9.indexOf(item) > -1 && arr10.indexOf(item) > -1 && arr11.indexOf(item)\
    \ > -1 && arr12.indexOf(item) > -1);\n    let arr14 = arr13.filter(item => arr1.indexOf(item)\
    \ > -1 && arr", "\tlet result = [];\n\tlet start1 = interval1[0];\n\tlet end1\
    \ = interval1[1];\n\tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\t\
    let startIntersection = start1;\n\tlet endIntersection = end1;\n\tlet startIntersection2\
    \ = start2;\n\tlet endIntersection2 = end2;\n\tlet startIntersection3 = start1;\n\
    \tlet endIntersection3 = end1;\n\tlet startIntersection4 = start2;\n\tlet endIntersection4\
    \ = end2;\n\tlet startIntersection5 = start1;\n\tlet endIntersection5 = end1;\n\
    \tlet startIntersection6 = start2;\n\tlet endIntersection6 = end2;\n\tlet startIntersection7\
    \ = start1;\n\tlet endIntersection7 = end1;\n\tlet startIntersection8 = start2;\n\
    \tlet endIntersection8 = end2;\n\tlet startIntersection9 = start1;\n\tlet endIntersection9\
    \ = end1;\n\tlet startIntersection10 = start2;\n\tlet endIntersection10 = end2;\n\
    \tlet startIntersection11 = start1;\n\tlet endIntersection11 = end1;\n\tlet startIntersection12\
    \ = start2;\n\tlet endIntersection12 = end2;\n\tlet startIntersection13 = start1;\n\
    \tlet endIntersection13 = end1;\n\tlet startIntersection14 = start2;\n\tlet endIntersection14\
    \ = end2;\n\tlet startIntersection15 = start1;\n\tlet endIntersection15 = end1;\n\
    \tlet startIntersection16 = start2;\n\tlet endIntersection16 = end2;\n\tlet startIntersection17\
    \ = start1;\n\tlet endIntersection17 = end1;\n\tlet startIntersection18 = start2;\n\
    \tlet endIntersection18 = end2;\n\tlet startIntersection19 = start1;\n\tlet endIntersection19\
    \ = end1;\n\tlet startIntersection20 = start2;\n\tlet endIntersection20 = end2;\n\
    \tlet startIntersection21 = start1;\n\tlet endIntersection21 = end1;\n\tlet startIntersection22\
    \ = start2;\n\tlet endIntersection22 = end2;\n\tlet startIntersection23 = start1;\n\
    \tlet endIntersection23 = end1;\n\tlet startIntersection24 = start2;\n\tlet endIntersection24\
    \ = end2;\n\tlet startIntersection25 = start1;\n\tlet endIntersection25 = end1;",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if(intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if(intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for(let i = 2; i <= intersectionLength;\
    \ i++){\n        if(!(i % interval1Start === 0 % interval2Start === 0)){\n   \
    \         isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(intersectionStart % i === 0 && intersectionEnd % i === 0){\n     \
    \       isPrimeNumber = false;\n            break;\n        }\n    }\n    return\
    \ isPrimeNumber;\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n \
    \   let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2\
    \ < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n \
    \   let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 <\
    \ end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n \
    \   let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2\
    \ < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n \
    \   let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 <\
    \ end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n \
    \   let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2\
    \ < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n \
    \   let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let ", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n        if(length % i === 0){\n            isPrime = false;\n       \
    \     break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n  \
    \  }\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let\
    \ [start2, end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 <= end2\
    \ && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1\
    \ <= end2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 = start1 <=\
    \ end2 && start2 <= end1 && start2 <= end1;\n    let start2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start2 <= end1 && start1 <= end2 && start1 <= end2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start1 <= end2;\n  \
    \  let start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2 =\
    \ start2 <= end1 && start1 <= end2 && start1 <= end2 && start1 <= end2;\n    let\
    \ start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start1 <= end2 && start1\
    \ <= end2;\n    let start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start2 <= end1 && start1 <= end2 && start1 <= end2 && start1 <= end2 && start1\
    \ <= end2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start1 <= end2 && start1\
    \ <= end2 && start1 <= end2;\n    let start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start2 <= end1 && start1 <= end2 && start1 <= end2 && start1 <= end2 && start1\
    \ <= end2 && start1 <= end2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start1 <= end2 && start1\
    \ <= end2 && start1 <= end2 && ", "    let interval1Start = interval1[0];\n  \
    \  let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(intersectionStart\
    \ % i === 0 && intersectionEnd % i === 0){\n            isPrime = false;\n   \
    \         break;\n        }\n    }\n    return isPrime;\n}\n", "    let arr1 =\
    \ interval1.map(x => x.start);\n    let arr2 = interval2.map(x => x.start);\n\
    \    let arr3 = interval1.map(x => x.end);\n    let arr4 = interval2.map(x =>\
    \ x.end);\n    let arr5 = arr1.filter(x => arr2.includes(x));\n    let arr6 =\
    \ arr3.filter(x => arr4.includes(x));\n    let arr7 = arr5.filter(x => arr6.includes(x));\n\
    \    let arr8 = arr7.filter(x => arr1.includes(x));\n    let arr9 = arr8.filter(x\
    \ => arr3.includes(x));\n    let arr10 = arr9.filter(x => arr5.includes(x));\n\
    \    let arr11 = arr10.filter(x => arr7.includes(x));\n    let arr12 = arr11.filter(x\
    \ => arr8.includes(x));\n    let arr13 = arr12.filter(x => arr9.includes(x));\n\
    \    let arr14 = arr13.filter(x => arr10.includes(x));\n    let arr15 = arr14.filter(x\
    \ => arr11.includes(x));\n    let arr16 = arr15.filter(x => arr12.includes(x));\n\
    \    let arr17 = arr16.filter(x => arr13.includes(x));\n    let arr18 = arr17.filter(x\
    \ => arr14.includes(x));\n    let arr19 = arr18.filter(x => arr15.includes(x));\n\
    \    let arr20 = arr19.filter(x => arr16.includes(x));\n    let arr21 = arr20.filter(x\
    \ => arr17.includes(x));\n    let arr22 = arr21.filter(x => arr18.includes(x));\n\
    \    let arr23 = arr22.filter(x => arr19.includes(x));\n    let arr24 = arr23.filter(x\
    \ => arr20.includes(x));\n    let arr25 = arr24.filter(x => arr21.includes(x));\n\
    \    let arr26 = arr25.filter(x => arr22.includes(x));\n    let arr27 = arr26.filter(x\
    \ => arr23.includes(x));\n    let arr28 = arr27.filter(x => arr24.includes(x));\n\
    \    let arr29 = arr28.filter(x => arr25.includes(x));\n    let arr30 = arr29.filter(x\
    \ => arr26.includes(x));\n    let arr31 = arr30.filter(x => arr27.includes(x));\n\
    \    let arr32 = arr31.filter(x => arr28.includes(x));\n    let arr33 = arr32.filter(x\
    \ => arr29.includes(x));\n    let arr34 = arr33.filter(x ", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    if (isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n\
    \    let length = end - start;\n    \n    if(length < 2) return \"NO\";\n    \n\
    \    let primes = [];\n    for(let i = 2; i <= Math.sqrt(length); i++){\n    \
    \    if(length % i === 0){\n            primes.push(i);\n        }\n    }\n  \
    \  \n    if(primes.includes(length)) return \"YES\";\n    else return \"NO\";\n\
    }\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = false;\n   \
    \ for (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart\
    \ % i === 0 && intersectionEnd % i === 0){\n            isPrimeNumber = true;\n\
    \            break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "    let\
    \ [start1, end1] = interval1\n    let [start2, end2] = interval2\n    let startIntersection\
    \ = start1 <= start2 && start2 <= end1\n    let endIntersection = start1 <= end2\
    \ && end2 <= end1\n    let lengthIntersection = endIntersection - startIntersection\n\
    \    if (lengthIntersection === 0){\n        return \"NO\"\n    }\n    let isPrime\
    \ = true\n    for (let i = 2; i <= lengthIntersection; i++){\n        if (lengthIntersection\
    \ % i === 0){\n            isPrime = false\n            break\n        }\n   \
    \ }\n    if (isPrime){\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    let startIntersection\
    \ = start1 <= start2 && start2 <= end1;\n    let endIntersection = start1 <= end2\
    \ && end2 <= end1;\n    let intersectionLength = startIntersection ? end1 - start1\
    \ : end2 - start2;\n    let isPrime = intersectionLength === 2 && isPrime(intersectionLength);\n\
    \    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let arr1 = interval1.map(item\
    \ => item[0]);\n    let arr2 = interval2.map(item => item[0]);\n    let arr3 =\
    \ interval1.map(item => item[1]);\n    let arr4 = interval2.map(item => item[1]);\n\
    \    let arr5 = arr1.filter(item => arr2.indexOf(item) > -1);\n    let arr6 =\
    \ arr2.filter(item => arr3.indexOf(item) > -1);\n    let arr7 = arr5.filter(item\
    \ => arr4.indexOf(item) > -1);\n    let arr8 = arr6.filter(item => arr7.indexOf(item)\
    \ > -1);\n    let arr9 = arr8.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item)\
    \ > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item)\
    \ > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1);\n    let arr10 = arr9.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item)\
    \ > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item)\
    \ > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1 && arr9.indexOf(item) > -1);\n    let arr11 = arr10.filter(item => arr1.indexOf(item)\
    \ > -1 && arr2.indexOf(item) > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item)\
    \ > -1 && arr5.indexOf(item) > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item)\
    \ > -1 && arr8.indexOf(item) > -1 && arr9.indexOf(item) > -1 && arr10.indexOf(item)\
    \ > -1);\n    let arr12 = arr11.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item)\
    \ > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item)\
    \ > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1 && arr9.indexOf(item) > -1 && arr10.indexOf(item) > -1 && arr11.indexOf(item)\
    \ > -1);\n    let arr13 = arr12.filter(item => arr1.indexOf(item) > -1 && arr2.indexOf(item)\
    \ > -1 && arr3.indexOf(item) > -1 && arr4.indexOf(item) > -1 && arr5.indexOf(item)\
    \ > -1 && arr6.indexOf(item) > -1 && arr7.indexOf(item) > -1 && arr8.indexOf(item)\
    \ > -1 && arr9.indexOf(item) > -1 && arr10.indexOf(item) > -1 && arr11.indexOf(item)\
    \ > -1 && arr12.indexOf(item) > -1);\n    let arr14 = arr13.filter(item => arr1.indexOf(item)\
    \ > -1 && arr", "    let [start1, end1] = interval1;\n    let [start2, end2] =\
    \ interval2;\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1,\
    \ end2);\n    let length = end - start;\n    \n    if (length == 0){\n       \
    \ return \"NO\";\n    }\n    \n    let prime = true;\n    for (let i = 2; i <=\
    \ Math.sqrt(length); i++){\n        if (length % i == 0){\n            prime =\
    \ false;\n            break;\n        }\n    }\n    \n    return prime ? \"YES\"\
    \ : \"NO\";\n}\n", "    var result = [];\n    var start = Math.min(interval1[0],\
    \ interval2[0]);\n    var end = Math.max(interval1[1], interval2[1]);\n    for(var\
    \ i = start; i <= end; i++){\n        result.push(i);\n    }\n    return result.length\
    \ == 2;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End =\
    \ interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.max(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 < start2 ? start1 : start2;\n    let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n    let intersectionLength = endIntersection -\
    \ startIntersection;\n    let isPrime = intersectionLength === 2;\n    return\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n  \
    \  let [start2, end2] = interval2;\n    let startIntersection = start1 <= start2\
    \ && start2 <= end1;\n    let endIntersection = start1 <= end2 && end2 <= end1;\n\
    \    if(startIntersection && endIntersection){\n        if(start1 <= start2 &&\
    \ start2 <= end1){\n            return true;\n        }else if(start2 <= start1\
    \ && start1 <= end2){\n            return true;\n        }else if(start1 <= end2\
    \ && end2 <= end1){\n            return true;\n        }else{\n            return\
    \ false;\n        }\n    }else{\n        return false;\n    }\n}\n", "    let\
    \ [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let start\
    \ = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n    let count\
    \ = 0;\n    for(let i = start; i <= end; i++){\n        if(interval1.includes(i)\
    \ && interval2.includes(i)){\n            count++;\n        }\n    }\n    if(count\
    \ === 0){\n        return \"NO\";\n    }\n    if(count === 1){\n        return\
    \ \"YES\";\n    }\n    let intersection = end - start;\n    if(intersection ===\
    \ 1){\n        return \"YES\";\n    }\n    if(intersection === 2){\n        return\
    \ \"NO\";\n    }\n    if(intersection === 3){\n        return \"YES\";\n    }\n\
    \    if(intersection === 4){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 5){\n        return \"YES\";\n    }\n    if(intersection === 6){\n     \
    \   return \"NO\";\n    }\n    if(intersection === 7){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 8){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 9){\n        return \"YES\";\n    }\n    if(intersection === 10){\n    \
    \    return \"NO\";\n    }\n    if(intersection === 11){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 12){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 13){\n        return \"YES\";\n    }\n    if(intersection === 14){\n   \
    \     return \"NO\";\n    }\n    if(intersection === 15){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 16){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 17){\n        return \"YES\";\n    }\n    if(intersection === 18){\n   \
    \     return \"NO\";\n    }\n    if(intersection === 19){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 20){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 21){\n        return \"YES\";\n    }\n    if(intersection === 22){\n   \
    \     return \"NO\";\n    }\n    if(intersection === 23){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 24){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 25){\n        return \"YES\";\n    }\n    if(intersection === 26){\n   \
    \     return \"NO\";\n    }\n    if(intersection === 27){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 28){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 29){\n        return \"YES\";\n    }\n    if(intersection === 30){\n   \
    \     return \"NO\";\n    }\n    if(intersection === 31){\n        return \"YES\"\
    ;\n    }\n    if(intersection === 32){\n        return \"NO\";\n    }\n    if(intersection\
    \ === 33){\n        return \"YES\";\n    }\n    if(intersection === 34){\n   \
    \     return \"NO\";\n    }\n    if(intersection === ", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(intersectionStart\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersection = [];\n    \n    for(let i = interval1Start; i <= interval1End;\
    \ i++){\n        for(let j = interval2Start; j <= interval2End; j++){\n      \
    \      if(i === j){\n                intersection.push([i, j]);\n            }\n\
    \        }\n    }\n    \n    if(intersection.length === 0){\n        return \"\
    NO\";\n    }\n    \n    let intersectionLength = intersection.length;\n    for(let\
    \ i = 0; i < intersectionLength; i++){\n        let intersectionStart = intersection[i][0];\n\
    \        let intersectionEnd = intersection[i][1];\n        let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n        \n        if(intersectionLength\
    \ === 1){\n            return \"YES\";\n        }\n    }\n    \n    return \"\
    NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start1LessOrEqualEnd2 = start1 <= end2;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1;\n    if(start1LessOrEqualEnd2 && start2LessOrEqualEnd1){\n\
    \        let start1LessOrEqualEnd = start1 <= end;\n        let start2LessOrEqualEnd\
    \ = start2 <= end;\n        if(start1LessOrEqualEnd && start2LessOrEqualEnd){\n\
    \            let start1LessOrEqualEnd2 = start1 <= end2;\n            let start2LessOrEqualEnd1\
    \ = start2 <= end1;\n            if(start1LessOrEqualEnd2 && start2LessOrEqualEnd1){\n\
    \                return \"YES\";\n            }\n        }\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (interval1Start <= intersectionStart && intersectionStart\
    \ <= interval1End && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let arr1 = interval1.map(x\
    \ => x.start);\n    let arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x\
    \ => x.end);\n    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x\
    \ => arr2.indexOf(x) == -1);\n    let arr6 = arr2.filter(x => arr3.indexOf(x)\
    \ == -1);\n    let arr7 = arr5.filter(x => arr4.indexOf(x) == -1);\n    let arr8\
    \ = arr6.filter(x => arr7.indexOf(x) == -1);\n    let arr9 = arr1.filter(x =>\
    \ arr3.indexOf(x) == -1);\n    let arr10 = arr2.filter(x => arr4.indexOf(x) ==\
    \ -1);\n    let arr11 = arr5.filter(x => arr7.indexOf(x) == -1);\n    let arr12\
    \ = arr6.filter(x => arr9.indexOf(x) == -1);\n    let arr13 = arr1.filter(x =>\
    \ arr4.indexOf(x) == -1);\n    let arr14 = arr2.filter(x => arr7.indexOf(x) ==\
    \ -1);\n    let arr15 = arr5.filter(x => arr9.indexOf(x) == -1);\n    let arr16\
    \ = arr6.filter(x => arr10.indexOf(x) == -1);\n    let arr17 = arr1.filter(x =>\
    \ arr3.indexOf(x) == -1);\n    let arr18 = arr2.filter(x => arr4.indexOf(x) ==\
    \ -1);\n    let arr19 = arr5.filter(x => arr6.indexOf(x) == -1);\n    let arr20\
    \ = arr6.filter(x => arr8.indexOf(x) == -1);\n    let arr21 = arr1.filter(x =>\
    \ arr4.indexOf(x) == -1);\n    let arr22 = arr2.filter(x => arr7.indexOf(x) ==\
    \ -1);\n    let arr23 = arr5.filter(x => arr9.indexOf(x) == -1);\n    let arr24\
    \ = arr6.filter(x => arr10.indexOf(x) == -1);\n    let arr25 = arr1.filter(x =>\
    \ arr3.indexOf(x) == -1);\n    let arr26 = arr2.filter(x => arr4.indexOf(x) ==\
    \ -1);\n    let arr27 = arr5.filter(x => arr6.indexOf(x) == -1);\n    let arr28\
    \ = arr6.filter(x => arr8.indexOf(x) == -1);\n    let arr29 = arr1.filter(x =>\
    \ arr3.indexOf(x) == -1);\n    let arr30 = arr2.filter(x => arr4.indexOf(x) ==\
    \ -1);\n    let arr31 = arr5.filter(x => arr6.indexOf(x) == -1);\n    let arr32\
    \ = arr6.filter(x => arr8.indexOf(x) == -1);\n    let arr33 = arr1.filter(x =>\
    \ arr3.indexOf(x) == -1);\n    let arr34 = arr2.filter(x ", "    let arr1 = interval1.map(x\
    \ => x.start);\n    let arr2 = interval2.map(x => x.start);\n    let arr3 = interval1.map(x\
    \ => x.end);\n    let arr4 = interval2.map(x => x.end);\n    let arr5 = arr1.filter(x\
    \ => arr2.includes(x));\n    let arr6 = arr3.filter(x => arr4.includes(x));\n\
    \    let arr7 = arr5.filter(x => arr6.includes(x));\n    let arr8 = arr7.filter(x\
    \ => arr5.includes(x));\n    let arr9 = arr8.filter(x => arr7.includes(x));\n\
    \    let arr10 = arr9.filter(x => arr8.includes(x));\n    let arr11 = arr10.filter(x\
    \ => arr9.includes(x));\n    let arr12 = arr11.filter(x => arr10.includes(x));\n\
    \    let arr13 = arr12.filter(x => arr11.includes(x));\n    let arr14 = arr13.filter(x\
    \ => arr12.includes(x));\n    let arr15 = arr14.filter(x => arr13.includes(x));\n\
    \    let arr16 = arr15.filter(x => arr14.includes(x));\n    let arr17 = arr16.filter(x\
    \ => arr15.includes(x));\n    let arr18 = arr17.filter(x => arr16.includes(x));\n\
    \    let arr19 = arr18.filter(x => arr17.includes(x));\n    let arr20 = arr19.filter(x\
    \ => arr18.includes(x));\n    let arr21 = arr20.filter(x => arr19.includes(x));\n\
    \    let arr22 = arr21.filter(x => arr20.includes(x));\n    let arr23 = arr22.filter(x\
    \ => arr21.includes(x));\n    let arr24 = arr23.filter(x => arr22.includes(x));\n\
    \    let arr25 = arr24.filter(x => arr23.includes(x));\n    let arr26 = arr25.filter(x\
    \ => arr24.includes(x));\n    let arr27 = arr26.filter(x => arr25.includes(x));\n\
    \    let arr28 = arr27.filter(x => arr26.includes(x));\n    let arr29 = arr28.filter(x\
    \ => arr27.includes(x));\n    let arr30 = arr29.filter(x => arr28.includes(x));\n\
    \    let arr31 = arr30.filter(x => arr29.includes(x));\n    let arr32 = arr31.filter(x\
    \ => arr30.includes(x));\n    let arr33 = arr32.filter(x => arr31.includes(x));\n\
    \    let arr34 = arr33.filter(x ", "    let interval1Start = interval1[0];\n \
    \   let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    if (interval1Start === interval1End){\n\
    \        return \"YES\";\n    }\n    if (interval2Start === interval2End){\n \
    \       return \"YES\";\n    }\n    if (intersectionStart === intersectionEnd){\n\
    \        return \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2;\
    \ i <= intersectionLength; i++){\n        if (intersectionStart % i === 0 && intersectionEnd\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    if (isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
