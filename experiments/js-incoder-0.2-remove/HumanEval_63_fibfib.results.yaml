name: HumanEval_63_fibfib
language: js
results:
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpudde13wv.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpudde13wv.js:8:5)\n\
    \    at fibfib (/tmp/tmpudde13wv.js:11:12)\n    at fibfib (/tmp/tmpudde13wv.js:11:12)\n\
    \    at fibfib (/tmp/tmpudde13wv.js:11:12)\n    at fibfib (/tmp/tmpudde13wv.js:11:12)\n\
    \    at fibfib (/tmp/tmpudde13wv.js:11:12)\n    at fibfib (/tmp/tmpudde13wv.js:11:12)\n\
    \    at fibfib (/tmp/tmpudde13wv.js:11:12)\n    at fibfib (/tmp/tmpudde13wv.js:11:12)\n\
    \    at fibfib (/tmp/tmpudde13wv.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp5txmkkjq.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5txmkkjq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5j7v6hgu.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp5j7v6hgu.js:8:2)\n    at fibfib\
    \ (/tmp/tmp5j7v6hgu.js:11:9)\n    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n    at\
    \ fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n\
    \    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n\
    \    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n\
    \    at fibfib (/tmp/tmp5j7v6hgu.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n==0){\n    return 0;\n  }\n  if (n==1){\n    return\
    \ 1;\n  }\n  if (n==2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpyo6v0mbq.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyo6v0mbq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n==0){\n    return 0;\n  }\n  if (n==1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw0s26w4h.js:8\n  if (n==0){\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at fibfib (/tmp/tmpw0s26w4h.js:8:3)\n    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n\
    \    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n\
    \    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n\
    \    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n\
    \    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n    at fibfib (/tmp/tmpw0s26w4h.js:14:10)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8cgu5ucg.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp8cgu5ucg.js:8:2)\n    at fibfib\
    \ (/tmp/tmp8cgu5ucg.js:11:9)\n    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n    at\
    \ fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n\
    \    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n\
    \    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n\
    \    at fibfib (/tmp/tmp8cgu5ucg.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr7upan44.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpr7upan44.js:8:2)\n    at fibfib\
    \ (/tmp/tmpr7upan44.js:11:9)\n    at fibfib (/tmp/tmpr7upan44.js:11:9)\n    at\
    \ fibfib (/tmp/tmpr7upan44.js:11:9)\n    at fibfib (/tmp/tmpr7upan44.js:11:9)\n\
    \    at fibfib (/tmp/tmpr7upan44.js:11:9)\n    at fibfib (/tmp/tmpr7upan44.js:11:9)\n\
    \    at fibfib (/tmp/tmpr7upan44.js:11:9)\n    at fibfib (/tmp/tmpr7upan44.js:11:9)\n\
    \    at fibfib (/tmp/tmpr7upan44.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkdaoghoj.js:8\n    if(n==0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpkdaoghoj.js:8:5)\n    at fibfib\
    \ (/tmp/tmpkdaoghoj.js:14:12)\n    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n   \
    \ at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n\
    \    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n\
    \    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n\
    \    at fibfib (/tmp/tmpkdaoghoj.js:14:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp1q1c_4ot.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1q1c_4ot.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  if (n == 2){\n\
    \    return 1\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj40hwy5m.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpj40hwy5m.js:8:3)\n    at fibfib\
    \ (/tmp/tmpj40hwy5m.js:14:10)\n    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n   \
    \ at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n\
    \    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n\
    \    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n\
    \    at fibfib (/tmp/tmpj40hwy5m.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1_3s8gw0.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp1_3s8gw0.js:8:5)\n\
    \    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n\
    \    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n\
    \    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n\
    \    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n\
    \    at fibfib (/tmp/tmp1_3s8gw0.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp1vnr_vpf.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1vnr_vpf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpuba43rin.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuba43rin.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n === 0){\n    return 0;\n  }\n  if (n === 1){\n  \
    \  return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj51_9upk.js:8\n  if (n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpj51_9upk.js:8:3)\n    at fibfib\
    \ (/tmp/tmpj51_9upk.js:14:10)\n    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n   \
    \ at fibfib (/tmp/tmpj51_9upk.js:14:10)\n    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n\
    \    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n\
    \    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n\
    \    at fibfib (/tmp/tmpj51_9upk.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpb6r81u55.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb6r81u55.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzrlgbekl.js:8\n  if(n==0){\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at fibfib (/tmp/tmpzrlgbekl.js:8:3)\n    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n\
    \    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n\
    \    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n\
    \    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n\
    \    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n    at fibfib (/tmp/tmpzrlgbekl.js:14:10)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<0){\n    return 0;\n  }\n  if(n==0){\n    return 0;\n\
    \  }\n  if(n==1){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpzmvz3lzj.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzmvz3lzj.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0;\n    }\n    if (n ==\
    \ 1){\n        return 0;\n    }\n    if (n == 2){\n        return 1;\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9mssclaq.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp9mssclaq.js:8:5)\n\
    \    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n\
    \    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n\
    \    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n\
    \    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n\
    \    at fibfib (/tmp/tmp9mssclaq.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8n49r2e6.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp8n49r2e6.js:8:5)\n\
    \    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n\
    \    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n\
    \    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n\
    \    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n\
    \    at fibfib (/tmp/tmp8n49r2e6.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n <= 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp8e9mdt3z.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e9mdt3z.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1fdlkxmd.js:8\n  if(n==0){\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at fibfib (/tmp/tmp1fdlkxmd.js:8:3)\n    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n\
    \    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n\
    \    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n\
    \    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n\
    \    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n    at fibfib (/tmp/tmp1fdlkxmd.js:14:10)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n==0){\n        return 0;\n    }\n    if (n==1){\n\
    \        return 0;\n    }\n    if (n==2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpokpiq05p.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpokpiq05p.js:8:2)\n    at fibfib\
    \ (/tmp/tmpokpiq05p.js:11:9)\n    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n    at\
    \ fibfib (/tmp/tmpokpiq05p.js:11:9)\n    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n\
    \    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n\
    \    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n\
    \    at fibfib (/tmp/tmpokpiq05p.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<0){\n\t\treturn -1;\n\t}\n\tif(n==0){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==1){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpng48br4w.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpng48br4w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n==0 || n==1){\n\t\treturn 0;\n\t}\n\telse if (n==2){\n\
    \t\treturn 1;\n\t}\n\telse {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvn9ywtx8.js:8\n  if(n==0){\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at fibfib (/tmp/tmpvn9ywtx8.js:8:3)\n    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n\
    \    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n\
    \    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n\
    \    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n\
    \    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n    at fibfib (/tmp/tmpvn9ywtx8.js:14:10)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  if (n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  else{\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp0fcg7vt_.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0fcg7vt_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy6g5lbcg.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpy6g5lbcg.js:8:3)\n    at fibfib\
    \ (/tmp/tmpy6g5lbcg.js:11:10)\n    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n   \
    \ at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n\
    \    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n\
    \    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n\
    \    at fibfib (/tmp/tmpy6g5lbcg.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n <= 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpveprj3mh.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpveprj3mh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6sc5fdns.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmp6sc5fdns.js:8:3)\n    at fibfib\
    \ (/tmp/tmp6sc5fdns.js:14:10)\n    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n   \
    \ at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n\
    \    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n\
    \    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n\
    \    at fibfib (/tmp/tmp6sc5fdns.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpq3dalxuj.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq3dalxuj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\telse{\n\t\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \t}\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpz3s17qlq.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz3s17qlq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpboz9akux.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpboz9akux.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0;\n  }\n  if (n ==\
    \ 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp4xkxrtcs.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4xkxrtcs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n==0){\n        return 0\n    }\n    if(n==1){\n \
    \       return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp992i6w50.js:8\n    if(n==0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmp992i6w50.js:8:5)\n    at fibfib\
    \ (/tmp/tmp992i6w50.js:14:12)\n    at fibfib (/tmp/tmp992i6w50.js:14:12)\n   \
    \ at fibfib (/tmp/tmp992i6w50.js:14:12)\n    at fibfib (/tmp/tmp992i6w50.js:14:12)\n\
    \    at fibfib (/tmp/tmp992i6w50.js:14:12)\n    at fibfib (/tmp/tmp992i6w50.js:14:12)\n\
    \    at fibfib (/tmp/tmp992i6w50.js:14:12)\n    at fibfib (/tmp/tmp992i6w50.js:14:12)\n\
    \    at fibfib (/tmp/tmp992i6w50.js:14:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfb_p4t80.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpfb_p4t80.js:8:3)\n    at fibfib\
    \ (/tmp/tmpfb_p4t80.js:14:10)\n    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n   \
    \ at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n\
    \    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n\
    \    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n\
    \    at fibfib (/tmp/tmpfb_p4t80.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcawynimb.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpcawynimb.js:8:5)\n\
    \    at fibfib (/tmp/tmpcawynimb.js:11:12)\n    at fibfib (/tmp/tmpcawynimb.js:11:12)\n\
    \    at fibfib (/tmp/tmpcawynimb.js:11:12)\n    at fibfib (/tmp/tmpcawynimb.js:11:12)\n\
    \    at fibfib (/tmp/tmpcawynimb.js:11:12)\n    at fibfib (/tmp/tmpcawynimb.js:11:12)\n\
    \    at fibfib (/tmp/tmpcawynimb.js:11:12)\n    at fibfib (/tmp/tmpcawynimb.js:11:12)\n\
    \    at fibfib (/tmp/tmpcawynimb.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpje6xzh93.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpje6xzh93.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\telse{\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp5x3zw3zk.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5x3zw3zk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpws_3zrjl.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpws_3zrjl.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return n;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp092wfs60.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp092wfs60.js:8:3)\n    at fibfib\
    \ (/tmp/tmp092wfs60.js:11:10)\n    at fibfib (/tmp/tmp092wfs60.js:11:10)\n   \
    \ at fibfib (/tmp/tmp092wfs60.js:11:10)\n    at fibfib (/tmp/tmp092wfs60.js:11:10)\n\
    \    at fibfib (/tmp/tmp092wfs60.js:11:10)\n    at fibfib (/tmp/tmp092wfs60.js:11:10)\n\
    \    at fibfib (/tmp/tmp092wfs60.js:11:10)\n    at fibfib (/tmp/tmp092wfs60.js:11:10)\n\
    \    at fibfib (/tmp/tmp092wfs60.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmplgg_f98w.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplgg_f98w.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmac7y3gt.js:8\n  if(n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpmac7y3gt.js:8:3)\n    at fibfib\
    \ (/tmp/tmpmac7y3gt.js:14:10)\n    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n   \
    \ at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n\
    \    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n\
    \    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n\
    \    at fibfib (/tmp/tmpmac7y3gt.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbje90q17.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpbje90q17.js:8:3)\n    at fibfib\
    \ (/tmp/tmpbje90q17.js:14:10)\n    at fibfib (/tmp/tmpbje90q17.js:14:10)\n   \
    \ at fibfib (/tmp/tmpbje90q17.js:14:10)\n    at fibfib (/tmp/tmpbje90q17.js:14:10)\n\
    \    at fibfib (/tmp/tmpbje90q17.js:14:10)\n    at fibfib (/tmp/tmpbje90q17.js:14:10)\n\
    \    at fibfib (/tmp/tmpbje90q17.js:14:10)\n    at fibfib (/tmp/tmpbje90q17.js:14:10)\n\
    \    at fibfib (/tmp/tmpbje90q17.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n === 0){\n\t\treturn 0;\n\t}\n\tif (n === 1){\n\t\t\
    return 0;\n\t}\n\tif (n === 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpk5n14v63.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk5n14v63.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqh4vnqew.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpqh4vnqew.js:8:5)\n\
    \    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n\
    \    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n\
    \    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n\
    \    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n\
    \    at fibfib (/tmp/tmpqh4vnqew.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n === 0){\n        return 0;\n    }\n    if (n ===\
    \ 1){\n        return 0;\n    }\n    if (n === 2){\n        return 1;\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<0){\n\t\treturn -1;\n\t}\n\tif(n==0){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==1){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp9ur7y_ks.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9ur7y_ks.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj747imzj.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj747imzj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n<=1){\n    return 0;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp0awmiw4k.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0awmiw4k.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpifotnfes.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpifotnfes.js:8:3)\n    at fibfib\
    \ (/tmp/tmpifotnfes.js:11:10)\n    at fibfib (/tmp/tmpifotnfes.js:11:10)\n   \
    \ at fibfib (/tmp/tmpifotnfes.js:11:10)\n    at fibfib (/tmp/tmpifotnfes.js:11:10)\n\
    \    at fibfib (/tmp/tmpifotnfes.js:11:10)\n    at fibfib (/tmp/tmpifotnfes.js:11:10)\n\
    \    at fibfib (/tmp/tmpifotnfes.js:11:10)\n    at fibfib (/tmp/tmpifotnfes.js:11:10)\n\
    \    at fibfib (/tmp/tmpifotnfes.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpvkapveum.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvkapveum.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsh7tq7lc.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpsh7tq7lc.js:8:3)\n    at fibfib\
    \ (/tmp/tmpsh7tq7lc.js:11:10)\n    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n   \
    \ at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n\
    \    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n\
    \    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n\
    \    at fibfib (/tmp/tmpsh7tq7lc.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n === 0){\n\t\treturn 0;\n\t}\n\tif (n === 1){\n\t\t\
    return 1;\n\t}\n\tif (n === 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp29idskpv.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp29idskpv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw2ur22v9.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpw2ur22v9.js:8:3)\n    at fibfib\
    \ (/tmp/tmpw2ur22v9.js:11:10)\n    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n   \
    \ at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n\
    \    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n\
    \    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n\
    \    at fibfib (/tmp/tmpw2ur22v9.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0;\n    }\n    if (n ==\
    \ 1){\n        return 0;\n    }\n    if (n == 2){\n        return 1;\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1)+fibfib(n-2);\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpqsk8uy5e.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqsk8uy5e.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\telse{\n\t\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4t1on8wr.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp4t1on8wr.js:8:2)\n    at fibfib\
    \ (/tmp/tmp4t1on8wr.js:12:10)\n    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n   \
    \ at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n\
    \    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n\
    \    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n\
    \    at fibfib (/tmp/tmp4t1on8wr.js:12:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0\n    }\n    if (n == 1){\n\
    \        return 0\n    }\n    if (n == 2){\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpv_wz41a9.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv_wz41a9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<0){\n    console.log(\"fibfib(\"+n+\") is undefined\"\
    );\n  }\n  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return 1;\n  }\n  if(n==2){\n\
    \    return 1;\n  }\n  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpmlgv_hgb.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmlgv_hgb.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpat78ztf2.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpat78ztf2.js:8:5)\n\
    \    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpat78ztf2.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpd3v79e8v.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd3v79e8v.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n === 0){\n    return 0;\n  }\n  if (n === 1){\n  \
    \  return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmlr_yk30.js:8\n  if (n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpmlr_yk30.js:8:3)\n    at fibfib\
    \ (/tmp/tmpmlr_yk30.js:14:10)\n    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n   \
    \ at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n\
    \    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n\
    \    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n\
    \    at fibfib (/tmp/tmpmlr_yk30.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n<=1){\n    return 0;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpa4667svt.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa4667svt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8mnk01_1.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp8mnk01_1.js:8:3)\n    at fibfib\
    \ (/tmp/tmp8mnk01_1.js:11:10)\n    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n   \
    \ at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n\
    \    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n\
    \    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n\
    \    at fibfib (/tmp/tmp8mnk01_1.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n < 0){\n    return -1;\n  }\n  if (n === 0){\n   \
    \ return 0;\n  }\n  if (n === 1){\n    return 1;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfakw6dn6.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfakw6dn6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n < 0){\n    return 0;\n  }\n  if (n == 0){\n    return\
    \ 0;\n  }\n  if (n == 1){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp6_i4roak.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6_i4roak.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_42x5448.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp_42x5448.js:8:3)\n    at fibfib\
    \ (/tmp/tmp_42x5448.js:11:10)\n    at fibfib (/tmp/tmp_42x5448.js:11:10)\n   \
    \ at fibfib (/tmp/tmp_42x5448.js:11:10)\n    at fibfib (/tmp/tmp_42x5448.js:11:10)\n\
    \    at fibfib (/tmp/tmp_42x5448.js:11:10)\n    at fibfib (/tmp/tmp_42x5448.js:11:10)\n\
    \    at fibfib (/tmp/tmp_42x5448.js:11:10)\n    at fibfib (/tmp/tmp_42x5448.js:11:10)\n\
    \    at fibfib (/tmp/tmp_42x5448.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n<=1){\n    return 0;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpk2icwppg.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk2icwppg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpu7hz00sv.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu7hz00sv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n==0){\n        return 0;\n    }\n    if (n==1){\n\
    \        return 0;\n    }\n    if (n==2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpq_7bo3hr.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq_7bo3hr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9nevfkpv.js:8\n  if(n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmp9nevfkpv.js:8:3)\n    at fibfib\
    \ (/tmp/tmp9nevfkpv.js:14:10)\n    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n   \
    \ at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n\
    \    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n\
    \    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n\
    \    at fibfib (/tmp/tmp9nevfkpv.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n === 0 || n === 1){\n    return n;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqd02u9ll.js:8\n  if (n === 0 || n === 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpqd02u9ll.js:8:3)\n    at fibfib\
    \ (/tmp/tmpqd02u9ll.js:11:10)\n    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n   \
    \ at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n\
    \    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n\
    \    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n\
    \    at fibfib (/tmp/tmpqd02u9ll.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0;\n    }\n    if (n ==\
    \ 1){\n        return 0;\n    }\n    if (n == 2){\n        return 1;\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\telse if (n\
    \ == 2){\n\t\treturn 1;\n\t}\n\telse{\n\t\treturn fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n==0){\n\t\treturn 0;\n\t}\n\tif (n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif (n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpsuqbyeli.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsuqbyeli.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpyysiei9x.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyysiei9x.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm5avb6jr.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpm5avb6jr.js:8:3)\n    at fibfib\
    \ (/tmp/tmpm5avb6jr.js:14:10)\n    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n   \
    \ at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n\
    \    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n\
    \    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n\
    \    at fibfib (/tmp/tmpm5avb6jr.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl2u_kcfk.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpl2u_kcfk.js:8:2)\n    at fibfib\
    \ (/tmp/tmpl2u_kcfk.js:11:9)\n    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n    at\
    \ fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n\
    \    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n\
    \    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n\
    \    at fibfib (/tmp/tmpl2u_kcfk.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0\n    }\n    if (n == 1){\n\
    \        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr865dpkl.js:8\n    if (n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpr865dpkl.js:8:5)\n    at fibfib\
    \ (/tmp/tmpr865dpkl.js:14:12)\n    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n   \
    \ at fibfib (/tmp/tmpr865dpkl.js:14:12)\n    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n\
    \    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n\
    \    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n\
    \    at fibfib (/tmp/tmpr865dpkl.js:14:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=0){\n    return 0;\n  }\n  if(n==1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp47kx9w_q.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp47kx9w_q.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n === 0){\n\t\treturn 0;\n\t}\n\tif (n === 1){\n\t\t\
    return 0;\n\t}\n\tif (n === 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2iuhmj9a.js:8\n  if(n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmp2iuhmj9a.js:8:3)\n    at fibfib\
    \ (/tmp/tmp2iuhmj9a.js:14:10)\n    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n   \
    \ at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n\
    \    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n\
    \    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n\
    \    at fibfib (/tmp/tmp2iuhmj9a.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn7h0atoa.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn7h0atoa.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphe9imjoi.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphe9imjoi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp8y_ixddb.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8y_ixddb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n<=1){\n    return 0;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphvk8nguf.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphvk8nguf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpx9wm4q4p.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx9wm4q4p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmps6vdcpue.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps6vdcpue.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpf8ydnstx.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf8ydnstx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0\n    }\n    if (n == 1){\n\
    \        return 1\n    }\n    if (n == 2){\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbhqiy3d7.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbhqiy3d7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n < 0){\n    throw 'fibfib() argument must be non-negative';\n\
    \  }\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "\n/tmp/tmpdbqbr80y.js:9\n    throw 'fibfib() argument must be non-negative';\n\
    \    ^\nfibfib() argument must be non-negative\n(Use `node --trace-uncaught ...`\
    \ to show where the exception was thrown)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return\
    \ 1;\n  }\n  if(n==2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpt2inxaaq.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt2inxaaq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp821b0fb0.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp821b0fb0.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpif2gaurl.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpif2gaurl.js:8:2)\n    at fibfib\
    \ (/tmp/tmpif2gaurl.js:11:9)\n    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n    at\
    \ fibfib (/tmp/tmpif2gaurl.js:11:9)\n    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n\
    \    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n\
    \    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n\
    \    at fibfib (/tmp/tmpif2gaurl.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoo5e01hh.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpoo5e01hh.js:8:3)\n    at fibfib\
    \ (/tmp/tmpoo5e01hh.js:14:10)\n    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n   \
    \ at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n\
    \    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n\
    \    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n\
    \    at fibfib (/tmp/tmpoo5e01hh.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0\n    }\n    if (n == 1){\n\
    \        return 0\n    }\n    if (n == 2){\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  else{\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmps8i_ug74.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps8i_ug74.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphbo1obvd.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmphbo1obvd.js:8:2)\n    at fibfib\
    \ (/tmp/tmphbo1obvd.js:11:9)\n    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n    at\
    \ fibfib (/tmp/tmphbo1obvd.js:11:9)\n    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n\
    \    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n\
    \    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n\
    \    at fibfib (/tmp/tmphbo1obvd.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\telse{\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp2jzgtj37.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2jzgtj37.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp4t8xr1_m.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4t8xr1_m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp3tp0rfce.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3tp0rfce.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n === 0 || n === 1){\n\t\treturn 0;\n\t}\n\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmor2vnw5.js:8\n\tif (n === 0 || n === 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpmor2vnw5.js:8:2)\n    at fibfib\
    \ (/tmp/tmpmor2vnw5.js:11:9)\n    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n    at\
    \ fibfib (/tmp/tmpmor2vnw5.js:11:9)\n    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n\
    \    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n\
    \    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n\
    \    at fibfib (/tmp/tmpmor2vnw5.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n==0){\n    return 0;\n  }\n  if(n==1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6_oi1skw.js:8\n  if(n==0){\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at fibfib (/tmp/tmp6_oi1skw.js:8:3)\n    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n    at fibfib (/tmp/tmp6_oi1skw.js:14:10)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0;\n  }\n  if (n ==\
    \ 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoc576jo9.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpoc576jo9.js:8:5)\n\
    \    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n\
    \    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n\
    \    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n\
    \    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n\
    \    at fibfib (/tmp/tmpoc576jo9.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n<=1){\n    return 0;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpt9r77z_f.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9r77z_f.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphecxgtlb.js:8\n    if(n==0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmphecxgtlb.js:8:5)\n    at fibfib\
    \ (/tmp/tmphecxgtlb.js:14:12)\n    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n   \
    \ at fibfib (/tmp/tmphecxgtlb.js:14:12)\n    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n\
    \    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n\
    \    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n\
    \    at fibfib (/tmp/tmphecxgtlb.js:14:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpkvmawd6v.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkvmawd6v.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp937aev7f.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp937aev7f.js:8:5)\n\
    \    at fibfib (/tmp/tmp937aev7f.js:11:12)\n    at fibfib (/tmp/tmp937aev7f.js:11:12)\n\
    \    at fibfib (/tmp/tmp937aev7f.js:11:12)\n    at fibfib (/tmp/tmp937aev7f.js:11:12)\n\
    \    at fibfib (/tmp/tmp937aev7f.js:11:12)\n    at fibfib (/tmp/tmp937aev7f.js:11:12)\n\
    \    at fibfib (/tmp/tmp937aev7f.js:11:12)\n    at fibfib (/tmp/tmp937aev7f.js:11:12)\n\
    \    at fibfib (/tmp/tmp937aev7f.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp54sdt_uc.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp54sdt_uc.js:8:5)\n\
    \    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n\
    \    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n\
    \    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n\
    \    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n\
    \    at fibfib (/tmp/tmp54sdt_uc.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0){\n    return 0;\n  }\n  if (n == 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfdxbhu3r.js:8\n  if (n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmpfdxbhu3r.js:8:3)\n    at fibfib\
    \ (/tmp/tmpfdxbhu3r.js:14:10)\n    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n   \
    \ at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n\
    \    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n\
    \    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n\
    \    at fibfib (/tmp/tmpfdxbhu3r.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpemtdg2ap.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpemtdg2ap.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdcp5r2zh.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpdcp5r2zh.js:8:5)\n\
    \    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n\
    \    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n\
    \    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n\
    \    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n\
    \    at fibfib (/tmp/tmpdcp5r2zh.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp4hmyjzt7.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4hmyjzt7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\telse if (n\
    \ == 2){\n\t\treturn 1;\n\t}\n\telse {\n\t\treturn fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpvfu7s7fr.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvfu7s7fr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjii3ih1y.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpjii3ih1y.js:8:5)\n\
    \    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n\
    \    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n\
    \    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n\
    \    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n\
    \    at fibfib (/tmp/tmpjii3ih1y.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return n;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpao77i_dt.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpao77i_dt.js:8:3)\n    at fibfib\
    \ (/tmp/tmpao77i_dt.js:11:10)\n    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n   \
    \ at fibfib (/tmp/tmpao77i_dt.js:11:10)\n    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n\
    \    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n\
    \    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n\
    \    at fibfib (/tmp/tmpao77i_dt.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpiwruw61m.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiwruw61m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n === 0){\n\t\treturn 0;\n\t}\n\tif (n === 1){\n\t\t\
    return 1;\n\t}\n\tif (n === 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp5hlvs03o.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5hlvs03o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7rwk2pfd.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp7rwk2pfd.js:8:5)\n\
    \    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n\
    \    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n\
    \    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n\
    \    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n\
    \    at fibfib (/tmp/tmp7rwk2pfd.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0){\n\t\treturn 0;\n\t}\n\tif (n == 1){\n\t\t\
    return 0;\n\t}\n\tif (n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpihqs5oxi.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpihqs5oxi.js:8:2)\n    at fibfib\
    \ (/tmp/tmpihqs5oxi.js:11:9)\n    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n    at\
    \ fibfib (/tmp/tmpihqs5oxi.js:11:9)\n    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n\
    \    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n\
    \    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n\
    \    at fibfib (/tmp/tmpihqs5oxi.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpdgqkbuxm.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdgqkbuxm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpi2uhc04u.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi2uhc04u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3vvhftw3.js:8\n\tif (n == 0 || n == 1){\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp3vvhftw3.js:8:2)\n    at fibfib\
    \ (/tmp/tmp3vvhftw3.js:11:9)\n    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n    at\
    \ fibfib (/tmp/tmp3vvhftw3.js:11:9)\n    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n\
    \    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n\
    \    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n\
    \    at fibfib (/tmp/tmp3vvhftw3.js:11:9)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp5opmjs2_.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5opmjs2_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  else{\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp75d6pywm.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp75d6pywm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n < 0){\n    return 0;\n  }\n  if (n === 0){\n    return\
    \ 0;\n  }\n  if (n === 1){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptcx7ri5d.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptcx7ri5d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return n;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2b1to2uq.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp2b1to2uq.js:8:3)\n    at fibfib\
    \ (/tmp/tmp2b1to2uq.js:11:10)\n    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n   \
    \ at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n\
    \    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n\
    \    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n\
    \    at fibfib (/tmp/tmp2b1to2uq.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmph7qymq06.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph7qymq06.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp66b9ty5l.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmp66b9ty5l.js:8:3)\n    at fibfib\
    \ (/tmp/tmp66b9ty5l.js:11:10)\n    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n   \
    \ at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n\
    \    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n\
    \    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n\
    \    at fibfib (/tmp/tmp66b9ty5l.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp222rzx6e.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp222rzx6e.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n < 0){\n    throw 'fibfib(n) called with negative\
    \ argument'\n  }\n  if (n === 0){\n    return 0;\n  }\n  if (n === 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "\n/tmp/tmpv32sa3vz.js:9\n    throw 'fibfib(n) called with negative argument'\n\
    \    ^\nfibfib(n) called with negative argument\n(Use `node --trace-uncaught ...`\
    \ to show where the exception was thrown)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_p82stgt.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_p82stgt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphu0i__78.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphu0i__78.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpehlphzkj.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpehlphzkj.js:8:3)\n    at fibfib\
    \ (/tmp/tmpehlphzkj.js:11:10)\n    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n   \
    \ at fibfib (/tmp/tmpehlphzkj.js:11:10)\n    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n\
    \    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n\
    \    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n\
    \    at fibfib (/tmp/tmpehlphzkj.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n === 0){\n    return 0;\n  }\n  if (n === 1){\n  \
    \  return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0n5wkidf.js:8\n  if (n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmp0n5wkidf.js:8:3)\n    at fibfib\
    \ (/tmp/tmp0n5wkidf.js:14:10)\n    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n   \
    \ at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n\
    \    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n\
    \    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n\
    \    at fibfib (/tmp/tmp0n5wkidf.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpmzq2pgx6.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmzq2pgx6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\telse{\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpcrc65oab.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcrc65oab.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0){\n        return 0\n    }\n    if (n == 1){\n\
    \        return 1\n    }\n    if (n == 2){\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmphqmffl9z.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphqmffl9z.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp59waqz39.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp59waqz39.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n <= 1){\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpy0_y_u82.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy0_y_u82.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n == 0 || n == 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuhyeozy_.js:8\n  if (n == 0 || n == 1){\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fibfib (/tmp/tmpuhyeozy_.js:8:3)\n    at fibfib\
    \ (/tmp/tmpuhyeozy_.js:11:10)\n    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n   \
    \ at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n\
    \    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n\
    \    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n\
    \    at fibfib (/tmp/tmpuhyeozy_.js:11:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpdeh_fqqy.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdeh_fqqy.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9g63_r34.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmp9g63_r34.js:8:5)\n\
    \    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n\
    \    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n\
    \    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n\
    \    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n\
    \    at fibfib (/tmp/tmp9g63_r34.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpdx3gvv4o.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdx3gvv4o.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6_hnjhe3.js:8\n  if(n === 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fibfib (/tmp/tmp6_hnjhe3.js:8:3)\n    at fibfib\
    \ (/tmp/tmp6_hnjhe3.js:14:10)\n    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n   \
    \ at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n\
    \    at fibfib (/tmp/tmp6_hnjhe3.js:14:10)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpe1j96cx_.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe1j96cx_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if (n<=1){\n    return 0;\n  }\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpwiysemu7.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwiysemu7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n===0){\n    return 0;\n  }\n  if(n===1){\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpa6aovjdw.js:8\n  if(n===0){\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at fibfib (/tmp/tmpa6aovjdw.js:8:3)\n    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n\
    \    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n\
    \    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n\
    \    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n\
    \    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n    at fibfib (/tmp/tmpa6aovjdw.js:14:10)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if (n == 0 || n == 1){\n        return 0;\n    }\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo51etkf2.js:8\n    if (n == 0 || n == 1){\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at fibfib (/tmp/tmpo51etkf2.js:8:5)\n\
    \    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n\
    \    at fibfib (/tmp/tmpo51etkf2.js:11:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpq8wfqii3.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq8wfqii3.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpz2qx98i1.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz2qx98i1.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpru_oq27v.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpru_oq27v.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n  if(n<=1){\n    return 0;\n  }\n  else{\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp6f4ws16z.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6f4ws16z.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif(n<=0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmpc30nt8q7.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc30nt8q7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    function fibfib(n){\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfw6y8bf1.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfw6y8bf1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
