---
name: HumanEval_78_hex_key
language: lua
prompt: "-- You have been tasked to write a function that receives \n-- a hexadecimal
  number as a string and counts the number of hexadecimal \n-- digits that are primes
  (prime number, or a prime, is a natural number \n-- greater than 1 that is not a
  product of two smaller natural numbers).\n-- Hexadecimal digits are 0, 1, 2, 3,
  4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n--
  So you have to determine a number of the following digits: 2, 3, 5, 7, \n-- B (=decimal
  11), D (=decimal 13).\n-- Note: you may assume the input is always correct or empty
  string, \n-- and symbols A,B,C,D,E,F are always uppercase.\n-- Examples:\n-- >>>
  hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n-- 2\n-- >>> hex_key('ABED1A33')\n--
  4\n-- >>> hex_key('123456789ABCDEF0')\n-- 6\n-- >>> hex_key('2020')\n-- 2\nlocal
  function hex_key(num)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = hex_key
      lu.assertEquals(candidate('AB'), 1)
      lu.assertEquals(candidate('1077E'), 2)
      lu.assertEquals(candidate('ABED1A33'), 4)
      lu.assertEquals(candidate('2020'), 2)
      lu.assertEquals(candidate('123456789ABCDEF0'), 6)
      lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex = {
          ['0'] = 0,
          ['1'] = 1,
          ['2'] = 2,
          ['3'] = 3,
          ['4'] = 4,
          ['5'] = 5,
          ['6'] = 6,
          ['7'] = 7,
          ['8'] = 8,
          ['9'] = 9,
          ['A'] = 10,
          ['B'] = 11,
          ['C'] = 12,
          ['D'] = 13,
          ['E'] = 14,
          ['F'] = 15,
      }
      local primes = {
          [2] = true,
          [3] = true,
          [5] = true,
          [7] = true,
          [11] = true,
          [13] = true,
      }
      local count = 0
      for i = 1, #num do
          if primes[hex[num:sub(i, i)]] then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex = {
      ['0'] = 0,
      ['1'] = 1,
      ['2'] = 2,
      ['3'] = 3,
      ['4'] = 4,
      ['5'] = 5,
      ['6'] = 6,
      ['7'] = 7,
      ['8'] = 8,
      ['9'] = 9,
      ['A'] = 10,
      ['B'] = 11,
      ['C'] = 12,
      ['D'] = 13,
      ['E'] = 14,
      ['F'] = 15
    }
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if hex[num:sub(i, i)] == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local count = 0
      for i = 1, #num do
          local digit = tonumber(num:sub(i, i), 16)
          for j = 1, #primes do
              if digit == primes[j] then
                  count = count + 1
                  break
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex = {
      ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5,
      ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11,
      ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15
    }
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if hex[num:sub(i, i)] == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_primes = {}
    for i = 1, #primes do
      hex_primes[string.format("%X", primes[i])] = true
    end
    local count = 0
    for i = 1, #num do
      if hex_primes[string.sub(num, i, i)] then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if tonumber(num:sub(i, i), 16) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      if table.indexof(primes, num:sub(i, i)) then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_primes = {}
    for i = 1, #primes do
      hex_primes[string.format("%X", primes[i])] = true
    end
    local count = 0
    for i = 1, #num do
      if hex_primes[string.sub(num, i, i)] then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == digits[primes[j]] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex = {
      ['0'] = 0,
      ['1'] = 1,
      ['2'] = 2,
      ['3'] = 3,
      ['4'] = 4,
      ['5'] = 5,
      ['6'] = 6,
      ['7'] = 7,
      ['8'] = 8,
      ['9'] = 9,
      ['A'] = 10,
      ['B'] = 11,
      ['C'] = 12,
      ['D'] = 13,
      ['E'] = 14,
      ['F'] = 15
    }
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if hex[num:sub(i, i)] == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local count = 0
      for i = 1, #num do
          local digit = tonumber(num:sub(i, i), 16)
          for _, prime in ipairs(primes) do
              if digit == prime then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_to_dec = {
      ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,
      ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15
    }
    local count = 0
    for i = 1, #num do
      local digit = hex_to_dec[num:sub(i, i)]
      for _, prime in ipairs(primes) do
        if digit == prime then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local count = 0
      local primes = {2, 3, 5, 7, 11, 13}
      for i = 1, #num do
          for j = 1, #primes do
              if tonumber(num:sub(i, i), 16) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {A = 10, B = 11, C = 12, D = 13, E = 14, F = 15}
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i)) or hex[num:sub(i, i)]
      for j = 1, #primes do
        if digit == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local t = {A=10, B=11, C=12, D=13, E=14, F=15}
    local sum = 0
    for i=1, #num do
      local n = tonumber(num:sub(i,i), 16) or t[num:sub(i,i)]
      if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 then
        sum = sum + 1
      end
    end
    return sum
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      if table.contains(primes, num:sub(i, i)) then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if hex[string.byte(num, i) - 55] == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local hex_to_dec = {
          ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,
          ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,
          ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15
      }
      local count = 0
      for i = 1, #num do
          local digit = hex_to_dec[num:sub(i, i)]
          for _, prime in ipairs(primes) do
              if digit == prime then
                  count = count + 1
                  break
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i), 16)
      for _, prime in ipairs(primes) do
        if digit == prime then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}
    local primes = {2,3,5,7,11,13}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex do
        if num:sub(i,i) == hex[j] then
          for k = 1, #primes do
            if j == primes[k] then
              count = count + 1
            end
          end
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local hex_primes = {}
      for i = 1, #primes do
          hex_primes[string.format('%X', primes[i])] = true
      end
      local count = 0
      for i = 1, #num do
          if hex_primes[string.sub(num, i, i)] then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i), 16)
      for _, prime in ipairs(primes) do
        if digit == prime then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #num do
      if num:sub(i, i) == '2' or num:sub(i, i) == '3' or num:sub(i, i) == '5' or num:sub(i, i) == '7' or num:sub(i, i) == 'B' or num:sub(i, i) == 'D' then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i), 16)
      for _, prime in ipairs(primes) do
        if digit == prime then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local count = 0
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local count = 0
      for i = 1, #num do
          local digit = tonumber(num:sub(i, i), 16)
          for j = 1, #primes do
              if digit == primes[j] then
                  count = count + 1
                  break
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_primes = {}
    for i = 1, #primes do
      hex_primes[string.format("%X", primes[i])] = true
    end
    local count = 0
    for i = 1, #num do
      if hex_primes[string.sub(num, i, i)] then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex do
        if num:sub(i, i) == hex[j] then
          for k = 1, #primes do
            if j == primes[k] then
              count = count + 1
            end
          end
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local count = 0
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {A = 10, B = 11, C = 12, D = 13, E = 14, F = 15}
    local count = 0
    for i = 1, #num do
      local n = tonumber(num:sub(i, i), 16)
      if n == nil then n = hex[num:sub(i, i)] end
      for j = 1, #primes do
        if n == primes[j] then count = count + 1 end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if tonumber(num:sub(i, i), 16) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex = {
      ['0'] = 0,
      ['1'] = 1,
      ['2'] = 2,
      ['3'] = 3,
      ['4'] = 4,
      ['5'] = 5,
      ['6'] = 6,
      ['7'] = 7,
      ['8'] = 8,
      ['9'] = 9,
      ['A'] = 10,
      ['B'] = 11,
      ['C'] = 12,
      ['D'] = 13,
      ['E'] = 14,
      ['F'] = 15
    }
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if hex[num:sub(i, i)] == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i), 16)
      if digit == 2 or digit == 3 or digit == 5 or digit == 7 or digit == 11 or digit == 13 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local hex_primes = {}
      for i = 1, #primes do
          table.insert(hex_primes, string.format("%X", primes[i]))
      end
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_primes = {}
    for i = 1, #primes do
      hex_primes[string.format("%X", primes[i])] = true
    end
    local count = 0
    for i = 1, #num do
      if hex_primes[string.sub(num, i, i)] then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex do
        if num:sub(i, i) == hex[j] then
          for k = 1, #primes do
            if j == primes[k] then
              count = count + 1
            end
          end
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {'A', 'B', 'C', 'D', 'E', 'F'}
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i), 16)
      if digit == nil then
        for j = 1, #hex do
          if num:sub(i, i) == hex[j] then
            digit = j + 9
          end
        end
      end
      for j = 1, #primes do
        if digit == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #num do
      local digit = num:sub(i, i)
      if digit == '2' or digit == '3' or digit == '5' or digit == '7' or digit == 'B' or digit == 'D' then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {
      ['2'] = true,
      ['3'] = true,
      ['5'] = true,
      ['7'] = true,
      ['B'] = true,
      ['D'] = true
    }
    local count = 0
    for i = 1, #num do
      if hex_primes[num:sub(i, i)] then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex do
        if num:sub(i, i) == hex[j] then
          for k = 1, #primes do
            if j == primes[k] then
              count = count + 1
            end
          end
        end
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      local digit = tonumber(num:sub(i, i), 16)
      for _, prime in ipairs(primes) do
        if digit == prime then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      if table.contains(primes, num:sub(i, i)) then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex do
        if num:sub(i, i) == hex[j] then
          for k = 1, #primes do
            if j == primes[k] then
              count = count + 1
            end
          end
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local hex_primes = {}
    for i = 1, #hex_digits do
      for j = 1, #primes do
        if hex_digits[i] == tostring(primes[j]) then
          table.insert(hex_primes, hex_digits[i])
        end
      end
    end
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
      local count = 0
      for i = 1, #num do
          for j = 1, #digits do
              if num:sub(i, i) == digits[j] then
                  for k = 1, #primes do
                      if j == primes[k] then
                          count = count + 1
                      end
                  end
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_digits do
              if num:sub(i, i) == hex_digits[j] then
                  for k = 1, #primes do
                      if j == primes[k] then
                          count = count + 1
                      end
                  end
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      if table.contains(primes, num:sub(i, i)) then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #hex_primes do
        if num:sub(i, i) == hex_primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex do
              if num:sub(i, i) == hex[j] then
                  for k = 1, #primes do
                      if j == primes[k] then
                          count = count + 1
                      end
                  end
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {2, 3, 5, 7, 11, 13}
    local hex_primes = {}
    for _, v in ipairs(primes) do
      hex_primes[string.format("%X", v)] = true
    end
    local count = 0
    for i = 1, #num do
      if hex_primes[string.sub(num, i, i)] then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local hex_primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #hex_primes do
              if num:sub(i, i) == hex_primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {2, 3, 5, 7, 11, 13}
      local hex = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if hex[string.byte(num, i) - 55] == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local hex = {
      ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5,
      ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11,
      ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15
    }
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for _, v in ipairs(primes) do
        if hex[num:sub(i, i)] == v then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
    local hex = {
      ['0'] = 0,
      ['1'] = 1,
      ['2'] = 2,
      ['3'] = 3,
      ['4'] = 4,
      ['5'] = 5,
      ['6'] = 6,
      ['7'] = 7,
      ['8'] = 8,
      ['9'] = 9,
      ['A'] = 10,
      ['B'] = 11,
      ['C'] = 12,
      ['D'] = 13,
      ['E'] = 14,
      ['F'] = 15
    }
    local primes = {2, 3, 5, 7, 11, 13}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if hex[num:sub(i, i)] == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local primes = {'2', '3', '5', '7', 'B', 'D'}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if num:sub(i, i) == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local primes = {'2', '3', '5', '7', 'B', 'D'}
    local count = 0
    for i = 1, #num do
      for j = 1, #primes do
        if num:sub(i, i) == primes[j] then
          count = count + 1
        end
      end
    end
    return count
  end
- |2-
      local hex_digits = {
          ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,
          ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,
          ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15
      }
      local primes = {2, 3, 5, 7, 11, 13}
      local count = 0
      for i = 1, #num do
          for j = 1, #primes do
              if hex_digits[num:sub(i, i)] == primes[j] then
                  count = count + 1
              end
          end
      end
      return count
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
