language: lua
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_even or\
    \ v < min_even then\n        min_even = v\n        min_even_idx = i\n      end\n\
    \    end\n  end\n  return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsl_zob8.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprsl_zob8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa59e0gs.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpaa59e0gs.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiukexfl.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpfiukexfl.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w1eg0p7.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp7w1eg0p7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ptoiso.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpr6ptoiso.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagpz45j6.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpagpz45j6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbivyivn.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpsbivyivn.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt2yt0y2.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpdt2yt0y2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv24zkib6.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpv24zkib6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = nil\n  local min_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min ==\
    \ nil or v < min then\n        min = v\n        min_index = i\n      end\n   \
    \ end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz3kbqd.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppoz3kbqd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min_value then\n      min_value = v\n      min_index = i\n    end\n\
    \  end\n  if min_value == math.huge then\n    return {}\n  end\n  return {min_value,\
    \ min_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xdw5g1d.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3xdw5g1d.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6r9yfn0.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpr6r9yfn0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wydiw4c.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6wydiw4c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for idx, val in ipairs(arr) do\n    if val % 2 == 0 and\
    \ val < min then\n      min = val\n      min_idx = idx\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpers29pqa.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpers29pqa.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n    local\
    \ min_idx = nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            if min == nil or v < min then\n                min = v\n        \
    \        min_idx = i\n            end\n        end\n    end\n    if min == nil\
    \ then\n        return {}\n    else\n        return {min, min_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nmyql8a.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2nmyql8a.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = nil\n  local\
    \ min_even_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if min_even == nil or v < min_even then\n        min_even = v\n        min_even_idx\
    \ = i\n      end\n    end\n  end\n  if min_even == nil then\n    return {}\n \
    \ else\n    return {min_even, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_7itfms.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpi_7itfms.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even then\n      min_even = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrjff5t9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcrjff5t9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even = math.huge\n\
    \  local smallest_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 and v < smallest_even then\n      smallest_even = v\n      smallest_even_index\
    \ = i\n    end\n  end\n  if smallest_even == math.huge then\n    return {}\n \
    \ end\n  return {smallest_even, smallest_even_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp7cntme.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplp7cntme.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wydiw4c.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6wydiw4c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = nil\n  local\
    \ min_even_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if min_even == nil or v < min_even then\n        min_even = v\n        min_even_idx\
    \ = i\n      end\n    end\n  end\n  if min_even == nil then\n    return {}\n \
    \ else\n    return {min_even, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_7itfms.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpi_7itfms.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = nil\n  local min_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min ==\
    \ nil or v < min then\n        min = v\n        min_index = i\n      end\n   \
    \ end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz3kbqd.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppoz3kbqd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wydiw4c.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6wydiw4c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_index =\
    \ math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min_even then\n      min_even, min_index = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc3h01ge.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxc3h01ge.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even = nil\n\
    \  local smallest_even_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 then\n      if smallest_even == nil or v < smallest_even then\n       \
    \ smallest_even = v\n        smallest_even_index = i\n      end\n    end\n  end\n\
    \  if smallest_even == nil then\n    return {}\n  else\n    return {smallest_even,\
    \ smallest_even_index}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcmany20.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprcmany20.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value, min_even_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_value then\n      min_even_value = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even_value == math.huge then\n    return {}\n  else\n\
    \    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgbh554k.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwgbh554k.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa59e0gs.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpaa59e0gs.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_val, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_val then\n      min_even_val = v\n      min_even_idx = i\n    end\n\
    \  end\n  return min_even_val == math.huge and {} or {min_even_val, min_even_idx}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwenp4dg.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplwenp4dg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest = math.huge\n\
    \    local smallest_index = math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < smallest then\n            smallest = v\n           \
    \ smallest_index = i\n        end\n    end\n    if smallest == math.huge then\n\
    \        return {}\n    end\n    return {smallest, smallest_index}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvixgpp6.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpzvixgpp6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value = math.huge\n\
    \    local min_even_index = math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even_value then\n            min_even_value = v\n\
    \            min_even_index = i\n        end\n    end\n    if min_even_value ==\
    \ math.huge then\n        return {}\n    end\n    return {min_even_value, min_even_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifrgz45e.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpifrgz45e.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, idx}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpguqa1948.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpguqa1948.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if smallest == nil or v < smallest then\n        smallest = v\n        smallest_idx\
    \ = i\n      end\n    end\n  end\n  if smallest == nil then\n    return {}\n \
    \ else\n    return {smallest, smallest_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l1di275.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5l1di275.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = nil\n  local min_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min ==\
    \ nil or v < min then\n        min = v\n        min_index = i\n      end\n   \
    \ end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz3kbqd.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppoz3kbqd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code here\n  local\
    \ smallest = {}\n  local smallest_index = {}\n  local smallest_value = {}\n  for\
    \ i,v in ipairs(arr) do\n    if v%2 == 0 then\n      smallest[#smallest+1] = v\n\
    \      smallest_index[#smallest_index+1] = i\n    end\n  end\n  if #smallest ==\
    \ 0 then\n    return {}\n  else\n    smallest_value = smallest[1]\n    smallest_index\
    \ = smallest_index[1]\n    for i,v in ipairs(smallest) do\n      if v < smallest_value\
    \ then\n        smallest_value = v\n        smallest_index = smallest_index[i]\n\
    \      end\n    end\n    return {smallest_value, smallest_index}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3h4n2zua.lua:45:\
    \ attempt to index a number value (local 'smallest_index')\nstack traceback:\n\
    \t/tmp/tmp3h4n2zua.lua:45: in local 'candidate'\n\t/tmp/tmp3h4n2zua.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value, min_even_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_value then\n      min_even_value = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even_value == math.huge then\n    return {}\n  else\n\
    \    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgbh554k.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwgbh554k.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    end\n    return {min, index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddc4f6go.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpddc4f6go.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_val = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even_val then\n      min_even_val = v\n      min_even_idx =\
    \ i\n    end\n  end\n  if min_even_val == math.huge then\n    return {}\n  else\n\
    \    return {min_even_val, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuurxfv_g.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpuurxfv_g.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest ~= nil then\n \
    \   return {smallest, smallest_index}\n  else\n    return {}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4q7yzhy.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpm4q7yzhy.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min, min_idx = v, i\n    end\n  end\n  return min == math.huge and {} or\
    \ {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yorma8o.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4yorma8o.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbitulzwe.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpbitulzwe.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local min_i = math.huge\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 and v < min then\n            min = v\n            min_i = i\n        end\n\
    \    end\n    if min == math.huge then\n        return {}\n    end\n    return\
    \ {min, min_i}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0gijgcy.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpt0gijgcy.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value\
    \ = math.huge\n    local smallest_even_value_index = math.huge\n    for i, v in\
    \ ipairs(arr) do\n        if v % 2 == 0 and v < smallest_even_value then\n   \
    \         smallest_even_value = v\n            smallest_even_value_index = i\n\
    \        end\n    end\n    if smallest_even_value == math.huge then\n        return\
    \ {}\n    end\n    return {smallest_even_value, smallest_even_value_index}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxxzziws.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpmxxzziws.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_i = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min, min_i = v, i\n    end\n  end\n  return min == math.huge and {} or\
    \ {min, min_i}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr54011vp.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpr54011vp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_index\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_even or\
    \ v < min_even then\n        min_even = v\n        min_even_index = i\n      end\n\
    \    end\n  end\n  return min_even and {min_even, min_even_index} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g9hjdx6.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4g9hjdx6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value, min_index\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_value\
    \ or v < min_value then\n        min_value = v\n        min_index = i\n      end\n\
    \    end\n  end\n  return min_value and {min_value, min_index} or {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmewsa256.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpmewsa256.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even_value =\
    \ math.huge\n  local smallest_even_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < smallest_even_value then\n      smallest_even_value\
    \ = v\n      smallest_even_index = i\n    end\n  end\n  if smallest_even_value\
    \ == math.huge then\n    return {}\n  end\n  return {smallest_even_value, smallest_even_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8snd6f1g.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp8snd6f1g.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = math.huge\n\
    \  local smallest_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < smallest then\n      smallest = v\n      smallest_index = i\n\
    \    end\n  end\n  if smallest == math.huge then\n    return {}\n  end\n  return\
    \ {smallest, smallest_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrzq8mbk.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwrzq8mbk.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposiigyp1.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmposiigyp1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = math.huge\n\
    \  local smallest_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < smallest then\n      smallest = v\n      smallest_index = i\n\
    \    end\n  end\n  if smallest == math.huge then\n    return {}\n  end\n  return\
    \ {smallest, smallest_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrzq8mbk.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwrzq8mbk.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min, min_idx = v, i\n    end\n  end\n  return min == math.huge and {} or\
    \ {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yorma8o.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4yorma8o.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_p8gf6v.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpc_p8gf6v.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ minIndex = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      minIndex = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, minIndex}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8xt61g.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpqs8xt61g.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa59e0gs.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpaa59e0gs.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn234zd8.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpnn234zd8.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = nil\n  local min_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min ==\
    \ nil or v < min then\n        min = v\n        min_index = i\n      end\n   \
    \ end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz3kbqd.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppoz3kbqd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value, min_even_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_value then\n      min_even_value = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even_value == math.huge then\n    return {}\n  else\n\
    \    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgbh554k.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwgbh554k.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = {nil, nil}\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if smallest[1] ==\
    \ nil or v < smallest[1] then\n        smallest = {v, i}\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwm1u_07.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpnwm1u_07.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even = math.huge\n\
    \  local smallest_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 and v < smallest_even then\n      smallest_even = v\n      smallest_even_index\
    \ = i\n    end\n  end\n  if smallest_even == math.huge then\n    return {}\n \
    \ end\n  return {smallest_even, smallest_even_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp7cntme.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplp7cntme.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposiigyp1.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmposiigyp1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min, min_idx = v, i\n    end\n  end\n  return min == math.huge and {} or\
    \ {min, min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yorma8o.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4yorma8o.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallestEven = nil\n\
    \  local smallestEvenIndex = nil\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 then\n      if smallestEven == nil or v < smallestEven then\n        smallestEven\
    \ = v\n        smallestEvenIndex = i\n      end\n    end\n  end\n  if smallestEven\
    \ == nil then\n    return {}\n  else\n    return {smallestEven, smallestEvenIndex}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11s5e_5m.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp11s5e_5m.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even = math.huge\n\
    \    local min_even_index = math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < min_even then\n            min_even = v\n           \
    \ min_even_index = i\n        end\n    end\n    if min_even == math.huge then\n\
    \        return {}\n    end\n    return {min_even, min_even_index}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvt47hil.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvvt47hil.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_p8gf6v.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpc_p8gf6v.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_val = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even_val then\n      min_even_val = v\n      min_even_idx =\
    \ i\n    end\n  end\n  if min_even_val == math.huge then\n    return {}\n  else\n\
    \    return {min_even_val, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuurxfv_g.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpuurxfv_g.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even = math.huge\n\
    \    local min_even_idx = math.huge\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 and v < min_even then\n            min_even = v\n            min_even_idx\
    \ = i\n        end\n    end\n    if min_even == math.huge then\n        return\
    \ {}\n    end\n    return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgyytho7.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpfgyytho7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = nil\n  local\
    \ min_even_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if min_even == nil or v < min_even then\n        min_even = v\n        min_even_idx\
    \ = i\n      end\n    end\n  end\n  if min_even == nil then\n    return {}\n \
    \ else\n    return {min_even, min_even_idx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_7itfms.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpi_7itfms.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = math.huge\n\
    \  local index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < smallest then\n      smallest = v\n      index = i\n    end\n  end\n  if\
    \ smallest == math.huge then\n    return {}\n  end\n  return {smallest, index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34204nje.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp34204nje.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = nil\n  local min_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min ==\
    \ nil or v < min then\n        min = v\n        min_index = i\n      end\n   \
    \ end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz3kbqd.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppoz3kbqd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if index == -1 then\n    return\
    \ {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fbnj4ek.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_fbnj4ek.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value, min_even_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_value then\n      min_even_value = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even_value == math.huge then\n    return {}\n  else\n\
    \    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgbh554k.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwgbh554k.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even = math.huge\n\
    \    local min_even_idx = math.huge\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 and v < min_even then\n            min_even = v\n            min_even_idx\
    \ = i\n        end\n    end\n    if min_even == math.huge then\n        return\
    \ {}\n    end\n    return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgyytho7.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpfgyytho7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      idx = i\n    end\n  end\n  if min == math.huge then\n  \
    \  return {}\n  end\n  return {min, idx}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxjv5f0t.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpbxjv5f0t.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even_value then\n      min_even_value = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptugsryqg.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptugsryqg.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
