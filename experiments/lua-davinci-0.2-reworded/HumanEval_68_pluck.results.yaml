name: HumanEval_68_pluck
language: lua
results:
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_even or\
    \ v < min_even then\n        min_even = v\n        min_even_idx = i\n      end\n\
    \    end\n  end\n  return {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsl_zob8.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprsl_zob8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa59e0gs.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpaa59e0gs.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiukexfl.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpfiukexfl.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w1eg0p7.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp7w1eg0p7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ptoiso.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpr6ptoiso.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagpz45j6.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpagpz45j6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbivyivn.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpsbivyivn.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt2yt0y2.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpdt2yt0y2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv24zkib6.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpv24zkib6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = nil\n  local min_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min ==\
    \ nil or v < min then\n        min = v\n        min_index = i\n      end\n   \
    \ end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz3kbqd.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppoz3kbqd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  end\n  return\
    \ {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlytnv4j.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlytnv4j.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min_value then\n      min_value = v\n      min_index = i\n    end\n\
    \  end\n  if min_value == math.huge then\n    return {}\n  end\n  return {min_value,\
    \ min_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xdw5g1d.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3xdw5g1d.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45l9_te.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj45l9_te.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallest_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallest_index = i\n      end\n    end\n  end\n  if smallest == nil then\n \
    \   return {}\n  else\n    return {smallest, smallest_index}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_0e_n_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5e_0e_n_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6r9yfn0.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpr6r9yfn0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      index = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  end\n  return {min, index}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk_rj2sr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvk_rj2sr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  end\n  return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4bukih9.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_4bukih9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wydiw4c.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6wydiw4c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_idx = math.huge\n  for idx, val in ipairs(arr) do\n    if val % 2 == 0 and\
    \ val < min then\n      min = val\n      min_idx = idx\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpers29pqa.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpers29pqa.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmz32o0z.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxmz32o0z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
