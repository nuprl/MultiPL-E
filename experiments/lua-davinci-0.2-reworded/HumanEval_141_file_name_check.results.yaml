name: HumanEval_141_file_name_check
language: lua
results:
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if not dot_index then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if #prefix == 0 or not prefix:match('^[a-zA-Z]')\
    \ then\n        return 'No'\n    end\n    if prefix:match('%d') and #prefix:match('%d')\
    \ > 3 then\n        return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~=\
    \ 'exe' and suffix ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42n70bro.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp42n70bro.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    if dot_index == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, string.len(prefix) do\n        local\
    \ c = string.sub(prefix, i, i)\n        if string.byte(c) >= string.byte('0')\
    \ and string.byte(c) <= string.byte('9') then\n            prefix_digit_count\
    \ = prefix_digit_count + 1\n        end\n    end\n    if prefix_digit_count >\
    \ 3 then\n        return 'No'\n    end\n    if string.byte(string.sub(prefix,\
    \ 1, 1)) < string.byte('a') or string.byte(string.sub(prefix, 1, 1)) > string.byte('z')\
    \ then\n        if string.byte(string.sub(prefix, 1, 1)) < string.byte('A') or\
    \ string.byte(string.sub(prefix, 1, 1)) > string.byte('Z') then\n            return\
    \ 'No'\n        end\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6ykj0kz.lua:49:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpp6ykj0kz.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local pre_dot = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local post_dot = string.sub(file_name, dot_pos + 1)\n \
    \   local digit_count = 0\n    for i = 1, string.len(pre_dot) do\n        if string.find('0123456789',\
    \ string.sub(pre_dot, i, i)) then\n            digit_count = digit_count + 1\n\
    \        end\n    end\n    if digit_count > 3 then\n        return 'No'\n    end\n\
    \    if string.find('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', string.sub(pre_dot,\
    \ 1, 1)) == nil then\n        return 'No'\n    end\n    if string.find(post_dot,\
    \ 'txt') == nil and string.find(post_dot, 'exe') == nil and string.find(post_dot,\
    \ 'dll') == nil then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8reuybg4.lua:41:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp8reuybg4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tacso1t.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2tacso1t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    for\
    \ i = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n         \
    \   dot_index = i\n            dot_count = dot_count + 1\n        end\n      \
    \  if file_name:sub(i, i):match('%d') then\n            digits = digits + 1\n\
    \        end\n    end\n    if dot_count ~= 1 then\n        return 'No'\n    end\n\
    \    if digits > 3 then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ dot_index - 1) == '' then\n        return 'No'\n    end\n    if not file_name:sub(1,\
    \ dot_index - 1):match('^[a-zA-Z]') then\n        return 'No'\n    end\n    extension\
    \ = file_name:sub(dot_index + 1, #file_name)\n    for i = 1, #valid_extensions\
    \ do\n        if extension == valid_extensions[i] then\n            return 'Yes'\n\
    \        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal count = 0\n\tlocal dot_count = 0\n\tlocal dot_index = 0\n\tlocal ext =\
    \ ''\n\tlocal ext_list = {'txt', 'exe', 'dll'}\n\tfor i = 1, #file_name do\n\t\
    \tif file_name:sub(i, i) == '.' then\n\t\t\tdot_count = dot_count + 1\n\t\t\t\
    dot_index = i\n\t\tend\n\t\tif file_name:sub(i, i):match('%d') then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\tif count > 3 then\n\t\treturn 'No'\n\tend\n\t\
    if dot_count ~= 1 then\n\t\treturn 'No'\n\tend\n\tif dot_index == 1 then\n\t\t\
    return 'No'\n\tend\n\tif not file_name:sub(1, 1):match('%a') then\n\t\treturn\
    \ 'No'\n\tend\n\text = file_name:sub(dot_index + 1, #file_name)\n\tfor i = 1,\
    \ #ext_list do\n\t\tif ext == ext_list[i] then\n\t\t\treturn 'Yes'\n\t\tend\n\t\
    end\n\treturn 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif c:match('%d') then\n\
    \            digits = digits + 1\n        elseif c:match('%a') then\n        \
    \    ext = file_name:sub(i)\n            break\n        end\n    end\n    if digits\
    \ > 3 or dot_count ~= 1 or ext == '' or not ext:match('^%.[a-zA-Z]') or not ext:match('^%.[a-zA-Z]%w+$')\
    \ or not ext:match('^%.[a-zA-Z]%w+%.[a-zA-Z]%w+$') then\n        return 'No'\n\
    \    end\n    if ext:match('^%.[a-zA-Z]%w+%.[a-zA-Z]%w+$') then\n        ext =\
    \ ext:sub(#ext - 2)\n    elseif ext:match('^%.[a-zA-Z]%w+$') then\n        ext\
    \ = ext:sub(#ext - 1)\n    end\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~=\
    \ 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l6nvl71.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5l6nvl71.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ dot_index_after = 0\n    local dot_index_before = 0\n    local dot_index_before_letter\
    \ = 0\n    local dot_index_after_letter = 0\n    local dot_index_after_letter_count\
    \ = 0\n    local dot_index_before_letter_count = 0\n    local dot_index_after_letter_count_txt\
    \ = 0\n    local dot_index_after_letter_count_exe = 0\n    local dot_index_after_letter_count_dll\
    \ = 0\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n\
    \            dot_count = dot_count + 1\n            dot_index = i\n        end\n\
    \        if file_name:sub(i, i) == '.' then\n            dot_index_after = i\n\
    \        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_before\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_before_letter\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_after_letter\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_after_letter_count\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_before_letter_count\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_after_letter_count_txt\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_after_letter_count_exe\
    \ = i\n        end\n        if file_name:sub(i, i) == '.' then\n            dot_index_after_letter_count_dll\
    \ = i\n        end\n        if file_name:sub(i, i) == '0' or file_name:sub(i,\
    \ i) ==\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc6j0uuvj.lua:61: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5qr5fnm.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpa5qr5fnm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local extension = ''\n   \
    \ local extension_valid = false\n    local extension_list = {'txt', 'exe', 'dll'}\n\
    \    local extension_index = 0\n    local extension_index_valid = false\n    local\
    \ extension_index_valid_count = 0\n    local extension_index_valid_count_max =\
    \ 0\n    local extension_index_valid_count_max_index = 0\n    local extension_index_valid_count_max_index_valid\
    \ = false\n    local extension_index_valid_count_max_index_valid_count = 0\n \
    \   local extension_index_valid_count_max_index_valid_count_max = 0\n    local\
    \ extension_index_valid_count_max_index_valid_count_max_index = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid\
    \ = false\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count\
    \ = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max\
    \ = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index\
    \ = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid\
    \ = false\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count\
    \ = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max\
    \ = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max_index\
    \ = 0\n    local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid\
    \ = false\n    local extension_index_valid_count_max_index_valid\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjrss3upe.lua:72: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if not dot_pos then\n  \
    \      return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.find(prefix,\
    \ '%d') or string.find(prefix, '%d%d%d') then\n        return 'No'\n    end\n\
    \    if not string.find(prefix, '^[a-zA-Z]') then\n        return 'No'\n    end\n\
    \    if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n       \
    \ return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_kdkpac.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpg_kdkpac.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, string.len(prefix) do\n        local\
    \ c = string.sub(prefix, i, i)\n        if c >= '0' and c <= '9' then\n      \
    \      prefix_digit_count = prefix_digit_count + 1\n        end\n    end\n   \
    \ if prefix_digit_count > 3 then\n        return 'No'\n    end\n    local c =\
    \ string.sub(prefix, 1, 1)\n    if not (c >= 'a' and c <= 'z' or c >= 'A' and\
    \ c <= 'Z') then\n        return 'No'\n    end\n    if suffix ~= 'txt' and suffix\
    \ ~= 'exe' and suffix ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nqnil9k.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0nqnil9k.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_pos = 0\n    local\
    \ ext_pos = 0\n    local ext = ''\n    local valid_ext = {'txt', 'exe', 'dll'}\n\
    \    local valid_ext_count = 0\n    local valid_ext_pos = 0\n    local valid_ext_flag\
    \ = false\n    local valid_ext_pos_flag = false\n    local valid_ext_count_flag\
    \ = false\n    local valid_ext_flag = false\n    local valid_ext_pos_flag = false\n\
    \    local valid_ext_count_flag = false\n    local valid_ext_flag = false\n  \
    \  local valid_ext_pos_flag = false\n    local valid_ext_count_flag = false\n\
    \    local valid_ext_flag = false\n    local valid_ext_pos_flag = false\n    local\
    \ valid_ext_count_flag = false\n    local valid_ext_flag = false\n    local valid_ext_pos_flag\
    \ = false\n    local valid_ext_count_flag = false\n    local valid_ext_flag =\
    \ false\n    local valid_ext_pos_flag = false\n    local valid_ext_count_flag\
    \ = false\n    local valid_ext_flag = false\n    local valid_ext_pos_flag = false\n\
    \    local valid_ext_count_flag = false\n    local valid_ext_flag = false\n  \
    \  local valid_ext_pos_flag = false\n    local valid_ext_count_flag = false\n\
    \    local valid_ext_flag = false\n    local valid_ext_pos_flag = false\n    local\
    \ valid_ext_count_flag = false\n    local valid_ext_flag = false\n    local valid_ext_pos_flag\
    \ = false\n    local valid_ext_count_flag = false\n    local valid_ext_flag =\
    \ false\n    local valid_ext_pos_flag = false\n    local valid_ext_count_flag\
    \ = false\n    local valid_ext_flag = false\n    local valid_ext_pos_flag = false\n\
    \    local valid_ext_count_flag = false\n    local valid_ext_flag = false\n  \
    \  local valid_ext_pos_flag = false\n    local valid_ext_count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx2_qgodh.lua:95: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = -1\n    local ext_pos = -1\n    local\
    \ ext = ''\n    local valid_ext = {'txt', 'exe', 'dll'}\n    local valid_ext_map\
    \ = {}\n    for i, v in ipairs(valid_ext) do\n        valid_ext_map[v] = true\n\
    \    end\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c == '.' then\n            if dot_pos ~= -1 then\n               \
    \ return 'No'\n            end\n            dot_pos = i\n        elseif c >= '0'\
    \ and c <= '9' then\n            digits = digits + 1\n            if digits >\
    \ 3 then\n                return 'No'\n            end\n        elseif i == 1\
    \ then\n            if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then\n\
    \                return 'No'\n            end\n        elseif i == dot_pos + 1\
    \ then\n            ext_pos = i\n        elseif i > dot_pos + 1 then\n       \
    \     ext = ext .. c\n        end\n    end\n    if dot_pos == -1 or ext_pos ==\
    \ -1 or not valid_ext_map[ext] then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnjlvzq0.lua:56:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpcnjlvzq0.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local num_digits = 0\n    local dot_found = false\n    local ext = ''\n \
    \   for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if\
    \ c == '.' then\n            dot_found = true\n        elseif c:match('%d') then\n\
    \            num_digits = num_digits + 1\n        elseif dot_found then\n    \
    \        ext = ext .. c\n        end\n    end\n    return (num_digits <= 3 and\
    \ dot_found and ext:match('^[a-zA-Z]') and ext:match('^txt$|^exe$|^dll$')) and\
    \ 'Yes' or 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70jmbgw5.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp70jmbgw5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr13lpdlm.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpr13lpdlm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local extension_valid = false\n    local valid_extensions\
    \ = {'txt', 'exe', 'dll'}\n    local valid_extensions_count = #valid_extensions\n\
    \    local valid_extensions_index = 1\n    local valid_extensions_current = ''\n\
    \    local valid_extensions_current_length = 0\n    local valid_extensions_current_index\
    \ = 1\n    local valid_extensions_current_char = ''\n    local valid_extensions_current_char_code\
    \ = 0\n    local valid_extensions_current_char_code_lower = 0\n    local valid_extensions_current_char_code_upper\
    \ = 0\n    local valid_extensions_current_char_code_lower_diff = 0\n    local\
    \ valid_extensions_current_char_code_upper_diff = 0\n    local valid_extensions_current_char_code_lower_diff_abs\
    \ = 0\n    local valid_extensions_current_char_code_upper_diff_abs = 0\n    local\
    \ valid_extensions_current_char_code_lower_diff_abs_min = 0\n    local valid_extensions_current_char_code_upper_diff_abs_min\
    \ = 0\n    local valid_extensions_current_char_code_lower_diff_abs_min_index =\
    \ 0\n    local valid_extensions_current_char_code_upper_diff_abs_min_index = 0\n\
    \    local valid_extensions_current_char_code_lower_diff_abs_min_index_char =\
    \ ''\n    local valid_extensions_current_char_code_upper_diff_abs_min_index_char\
    \ = ''\n    local valid_extensions_current_char_code_lower_diff_abs_min_index_char_code\
    \ = 0\n    local valid_extensions_current_char_code_upper_diff_abs_min_index_char_code\
    \ = 0\n    local valid_extensions_current_char_code_lower_diff_abs_min_index_char_code_lower\
    \ = 0\n    local valid_extensions_current_char_code\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpss57o9xr.lua:77: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = false\n    local ext = false\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c >= '0'\
    \ and c <= '9' then\n            digits = digits + 1\n        elseif c == '.'\
    \ then\n            dot = true\n        elseif c >= 'a' and c <= 'z' or c >= 'A'\
    \ and c <= 'Z' then\n            if dot then\n                if file_name:sub(i,\
    \ i + 2) == 'txt' or file_name:sub(i, i + 2) == 'exe' or file_name:sub(i, i +\
    \ 2) == 'dll' then\n                    ext = true\n                end\n    \
    \        end\n        end\n    end\n    if digits <= 3 and dot and ext then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey3_w0rb.lua:44:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpey3_w0rb.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        local char = file_name:sub(i,\
    \ i)\n        if char:match('%d') then\n            digits = digits + 1\n    \
    \    elseif char == '.' then\n            dot_count = dot_count + 1\n        \
    \    dot_index = i\n        end\n    end\n    if digits > 3 or dot_count ~= 1\
    \ or dot_index == 1 then\n        return 'No'\n    end\n    ext = file_name:sub(dot_index\
    \ + 1)\n    if ext == 'txt' or ext == 'exe' or ext == 'dll' then\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb9m1vkk.lua:44:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmppb9m1vkk.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name:match('^[a-zA-Z]+%.[a-zA-Z]+$') then\n        local before_dot\
    \ = file_name:match('^[a-zA-Z]+')\n        local after_dot = file_name:match('%.[a-zA-Z]+$')\n\
    \        if before_dot:match('%d') then\n            return 'No'\n        elseif\
    \ before_dot:match('%d%d%d') then\n            return 'No'\n        elseif after_dot\
    \ ~= '.txt' and after_dot ~= '.exe' and after_dot ~= '.dll' then\n           \
    \ return 'No'\n        else\n            return 'Yes'\n        end\n    else\n\
    \        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1zsoqn0.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpw1zsoqn0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if file_name:match('%d%d%d') then\n        return 'No'\n    end\n    if file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.txt$')\
    \ then\n        return 'Yes'\n    end\n    if file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.exe$')\
    \ then\n        return 'Yes'\n    end\n    if file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.dll$')\
    \ then\n        return 'Yes'\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3c9_gurd.lua:39:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp3c9_gurd.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    local prefix_digit_count\
    \ = 0\n    for i = 1, #prefix do\n        local c = string.sub(prefix, i, i)\n\
    \        if c >= '0' and c <= '9' then\n            prefix_digit_count = prefix_digit_count\
    \ + 1\n        end\n    end\n    if prefix_digit_count > 3 then\n        return\
    \ 'No'\n    end\n    if string.len(prefix) == 0 then\n        return 'No'\n  \
    \  end\n    local first_char = string.sub(prefix, 1, 1)\n    if (first_char <\
    \ 'a' or first_char > 'z') and (first_char < 'A' or first_char > 'Z') then\n \
    \       return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuxxcj4r.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnuxxcj4r.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = 0\n    local ext = ''\n    local name =\
    \ ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n  \
    \      if c == '.' then\n            dot = dot + 1\n        elseif c:match('%d')\
    \ then\n            digits = digits + 1\n        elseif dot == 0 then\n      \
    \      name = name .. c\n        else\n            ext = ext .. c\n        end\n\
    \    end\n    if dot ~= 1 or digits > 3 or name == '' or not name:match('^%a')\
    \ or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    else\n        return 'Yes'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1og1l3m.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpb1og1l3m.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local extension_check = false\n    local valid_extensions\
    \ = {'txt', 'exe', 'dll'}\n    local valid_extensions_count = 0\n    local valid_extensions_check\
    \ = false\n    local valid_extensions_index = 0\n    local valid_extensions_index_check\
    \ = false\n    local valid_extensions_index_count = 0\n    local valid_extensions_index_count_check\
    \ = false\n    local valid_extensions_index_count_check_check = false\n    local\
    \ valid_extensions_index_count_check_check_check = false\n    local valid_extensions_index_count_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check_check_check_check\
    \ = false\n    local valid_ext\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpysp29051.lua:74: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == '.' then\n            dot_index = i\n            dot_count = dot_count +\
    \ 1\n        end\n        if file_name:sub(i, i):match('%d') then\n          \
    \  count = count + 1\n        end\n    end\n    if dot_count ~= 1 then\n     \
    \   return 'No'\n    end\n    if count > 3 then\n        return 'No'\n    end\n\
    \    if file_name:sub(1, 1):match('%a') == nil then\n        return 'No'\n   \
    \ end\n    if file_name:sub(dot_index + 1, #file_name) == '' then\n        return\
    \ 'No'\n    end\n    extension = file_name:sub(dot_index + 1, #file_name)\n  \
    \  if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, string.len(prefix) do\n        local\
    \ c = string.sub(prefix, i, i)\n        if c >= '0' and c <= '9' then\n      \
    \      prefix_digit_count = prefix_digit_count + 1\n        end\n    end\n   \
    \ if prefix_digit_count > 3 then\n        return 'No'\n    end\n    local c =\
    \ string.sub(prefix, 1, 1)\n    if not (c >= 'a' and c <= 'z' or c >= 'A' and\
    \ c <= 'Z') then\n        return 'No'\n    end\n    if suffix ~= 'txt' and suffix\
    \ ~= 'exe' and suffix ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx88ozdt8.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpx88ozdt8.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local file_name_before_dot\
    \ = string.sub(file_name, 1, dot_index - 1)\n    local file_name_after_dot = string.sub(file_name,\
    \ dot_index + 1)\n    local file_name_before_dot_len = string.len(file_name_before_dot)\n\
    \    local file_name_after_dot_len = string.len(file_name_after_dot)\n    local\
    \ file_name_before_dot_first_char = string.sub(file_name_before_dot, 1, 1)\n \
    \   local file_name_before_dot_first_char_code = string.byte(file_name_before_dot_first_char)\n\
    \    local file_name_before_dot_first_char_is_letter = (file_name_before_dot_first_char_code\
    \ >= 65 and file_name_before_dot_first_char_code <= 90) or (file_name_before_dot_first_char_code\
    \ >= 97 and file_name_before_dot_first_char_code <= 122)\n    local file_name_before_dot_digit_count\
    \ = 0\n    for i = 1, file_name_before_dot_len do\n        local char = string.sub(file_name_before_dot,\
    \ i, i)\n        local char_code = string.byte(char)\n        if char_code >=\
    \ 48 and char_code <= 57 then\n            file_name_before_dot_digit_count =\
    \ file_name_before_dot_digit_count + 1\n        end\n    end\n    local file_name_after_dot_is_valid\
    \ = (file_name_after_dot == 'txt' or file_name_after_dot == 'exe' or file_name_after_dot\
    \ == 'dll')\n    return (file_name_before_dot_len > 0 and file_name_before_dot_first_char_is_letter\
    \ and file_name_before_dot_digit_count <= 3 and file_name_after_dot_len == 3 and\
    \ file_name_after_dot_is_valid) and 'Yes' or '\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl7djr5pr.lua:33: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ substring_before_dot = \"\"\n    local substring_after_dot = \"\"\n    local\
    \ valid_substring_after_dot = {'txt', 'exe', 'dll'}\n    local valid_substring_before_dot\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z'}\n    for i = 1, #file_name do\n        if string.find(file_name,\
    \ '%d') then\n            count = count + 1\n        end\n        if string.find(file_name,\
    \ '%.') then\n            dot_count = dot_count + 1\n            dot_index = i\n\
    \        end\n    end\n    if count > 3 or dot_count ~= 1 then\n        return\
    \ 'No'\n    end\n    substring_before_dot = string.sub(file_name, 1, dot_index\
    \ - 1)\n    substring_after_dot = string.sub(file_name, dot_index + 1, #file_name)\n\
    \    if #substring_before_dot == 0 then\n        return 'No'\n    end\n    for\
    \ i = 1, #valid_substring_before_dot do\n        if string.find(substring_before_dot,\
    \ valid_substring_before_dot[i]) then\n            for j = 1, #valid_substring_after_dot\
    \ do\n                if string.find(substring_after_dot, valid_substring_after_dot[j])\
    \ then\n                    return 'Yes'\n                end\n            end\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbppk7_ys.lua:80: 'end' expected (to close 'if' at line 41)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if dot_index == nil then\n   \
    \     return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if prefix:match('%d') ==\
    \ nil and prefix:match('^[a-zA-Z]') ~= nil and \n        (suffix == 'txt' or suffix\
    \ == 'exe' or suffix == 'dll') then\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_gv8me5.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2_gv8me5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if not dot_index then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if not prefix:match('^[a-zA-Z]')\
    \ then\n        return 'No'\n    end\n    if not suffix:match('^txt$') and not\
    \ suffix:match('^exe$') and not suffix:match('^dll$') then\n        return 'No'\n\
    \    end\n    local digit_count = 0\n    for i = 1, #prefix do\n        if prefix:sub(i,\
    \ i):match('^[0-9]$') then\n            digit_count = digit_count + 1\n      \
    \  end\n    end\n    if digit_count > 3 then\n        return 'No'\n    end\n \
    \   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqik6ria_.lua:43:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpqik6ria_.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = 0\n    local dot_count = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c >= '0' and c <= '9' then\n            digits = digits + 1\n    \
    \    elseif c == '.' then\n            dot_pos = i\n            dot_count = dot_count\
    \ + 1\n        end\n    end\n    if digits > 3 or dot_count ~= 1 then\n      \
    \  return 'No'\n    end\n    local name = file_name:sub(1, dot_pos - 1)\n    ext\
    \ = file_name:sub(dot_pos + 1)\n    if #name == 0 or name:sub(1, 1) < 'A' or name:sub(1,\
    \ 1) > 'z' then\n        return 'No'\n    end\n    if ext ~= 'txt' and ext ~=\
    \ 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqt92g1p.lua:52:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpxqt92g1p.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c:match('%d') then\n            digits = digits + 1\n       \
    \ elseif c == '.' then\n            dot_index = i\n            dot_count = dot_count\
    \ + 1\n        end\n    end\n    if digits > 3 or dot_count ~= 1 then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    extension = file_name:sub(dot_index + 1)\n    if #prefix == 0 or not prefix:match('^[a-zA-Z]')\
    \ then\n        return 'No'\n    end\n    if extension ~= 'txt' and extension\
    \ ~= 'exe' and extension ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extension = false\n    local valid_name = false\n    local valid_number\
    \ = false\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if count > 3 then\n        valid_number\
    \ = false\n    else\n        valid_number = true\n    end\n    if dot_count ==\
    \ 1 then\n        valid_name = true\n    else\n        valid_name = false\n  \
    \  end\n    for i = 1, #valid_extensions do\n        if file_name:sub(dot_index\
    \ + 1) == valid_extensions[i] then\n            valid_extension = true\n     \
    \   end\n    end\n    if valid_number and valid_name and valid_extension then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fazzv1p.lua:59:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp0fazzv1p.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = 0\n    local dot_count = 0\n    local\
    \ ext_pos = 0\n    local ext_len = 0\n    local ext_valid = false\n    local ext_valid_list\
    \ = {'txt', 'exe', 'dll'}\n    local ext_valid_list_len = #ext_valid_list\n  \
    \  local ext_valid_list_i = 0\n    local ext_valid_list_item = ''\n    local ext_valid_list_item_len\
    \ = 0\n    local ext_valid_list_item_i = 0\n    local ext_valid_list_item_char\
    \ = ''\n    local ext_valid_list_item_char_code = 0\n    local ext_valid_list_item_char_code_lower\
    \ = 0\n    local ext_valid_list_item_char_code_upper = 0\n    local ext_valid_list_item_char_code_lower_diff\
    \ = 0\n    local ext_valid_list_item_char_code_upper_diff = 0\n    local ext_valid_list_item_char_code_lower_diff_abs\
    \ = 0\n    local ext_valid_list_item_char_code_upper_diff_abs = 0\n    local ext_valid_list_item_char_code_lower_diff_abs_min\
    \ = 0\n    local ext_valid_list_item_char_code_upper_diff_abs_min = 0\n    local\
    \ ext_valid_list_item_char_code_lower_diff_abs_min_i = 0\n    local ext_valid_list_item_char_code_upper_diff_abs_min_i\
    \ = 0\n    local ext_valid_list_item_char_code_lower_diff_abs_min_char = ''\n\
    \    local ext_valid_list_item_char_code_upper_diff_abs_min_char = ''\n    local\
    \ ext_valid_list_item_char_code_lower_diff_abs_min_char_code = 0\n    local ext_valid_list_item_char_code_upper_diff_abs_min_char_code\
    \ = 0\n    local ext_valid_list_item_char_code_lower_diff_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx9hqfe10.lua:77: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ligrwxd.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3ligrwxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    local dot_index_2 = file_name:find('.',\
    \ dot_index + 1)\n    local before_dot = file_name:sub(1, dot_index - 1)\n   \
    \ local after_dot = file_name:sub(dot_index + 1)\n    local digits_count = 0\n\
    \    for i = 1, #before_dot do\n        if before_dot:sub(i, i):find('%d') then\n\
    \            digits_count = digits_count + 1\n        end\n    end\n    if digits_count\
    \ > 3 or dot_index_2 or not before_dot:sub(1, 1):find('%a') or not (after_dot\
    \ == 'txt' or after_dot == 'exe' or after_dot == 'dll') then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstmympaj.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpstmympaj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = false\n    local ext = false\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            if dot then\n                return 'No'\n            end\n\
    \            dot = true\n        elseif c:match('%d') then\n            digits\
    \ = digits + 1\n            if digits > 3 then\n                return 'No'\n\
    \            end\n        elseif c:match('%a') then\n            if dot then\n\
    \                if not ext then\n                    ext = true\n           \
    \     end\n            end\n        else\n            return 'No'\n        end\n\
    \    end\n    if not dot or not ext then\n        return 'No'\n    end\n    local\
    \ ext = file_name:match('%.(%a+)$')\n    if ext ~= 'txt' and ext ~= 'exe' and\
    \ ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4j5m2yo.lua:55:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpg4j5m2yo.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_pos = 0\n    local\
    \ ext = ''\n    local valid_ext = {'txt', 'exe', 'dll'}\n    for i = 1, #file_name\
    \ do\n        if file_name:sub(i, i) == '.' then\n            dot_count = dot_count\
    \ + 1\n            dot_pos = i\n        end\n        if file_name:sub(i, i):match('%d')\
    \ then\n            count = count + 1\n        end\n    end\n    if count > 3\
    \ then\n        return 'No'\n    end\n    if dot_count ~= 1 then\n        return\
    \ 'No'\n    end\n    if not file_name:sub(1, dot_pos - 1):match('^[a-zA-Z]') then\n\
    \        return 'No'\n    end\n    ext = file_name:sub(dot_pos + 1)\n    for i\
    \ = 1, #valid_ext do\n        if ext == valid_ext[i] then\n            return\
    \ 'Yes'\n        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5y769lh.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpe5y769lh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = 0\n    local ext = ''\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c >= '0' and c <= '9'\
    \ then\n            digits = digits + 1\n        elseif c == '.' then\n      \
    \      dot = dot + 1\n        elseif dot == 0 then\n            if not (c >= 'a'\
    \ and c <= 'z' or c >= 'A' and c <= 'Z') then\n                return 'No'\n \
    \           end\n        else\n            ext = ext .. c\n        end\n    end\n\
    \    if digits > 3 or dot ~= 1 or ext == '' or ext ~= 'txt' and ext ~= 'exe' and\
    \ ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporzly_o_.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmporzly_o_.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    local ext_len\
    \ = 0\n    local ext_valid = false\n    local ext_valid_list = {'txt', 'exe',\
    \ 'dll'}\n    local name = ''\n    local name_len = 0\n    local name_valid =\
    \ false\n    local valid = false\n    local valid_ext_list = {'txt', 'exe', 'dll'}\n\
    \    local valid_ext_list_len = 3\n    local valid_ext_len = 0\n    local valid_ext_len_max\
    \ = 3\n    local valid_ext_len_min = 3\n    local valid_name_len_max = 10\n  \
    \  local valid_name_len_min = 1\n    local valid_name_list = {'a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}\n\
    \    local valid_name_list_len = 52\n    local valid_name_list_len_max = 52\n\
    \    local valid_name_list_len_min = 1\n    local valid_name_list_len_range =\
    \ 52\n    local valid_name_list_range = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe8g4xtr0.lua:41: '}' expected (to close '{' at line 38) near\
    \ 'function'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extension = false\n    local valid_name = false\n    local valid_number\
    \ = false\n    local valid_dot = false\n    for i = 1, #file_name do\n       \
    \ if file_name:sub(i, i) == '.' then\n            dot_count = dot_count + 1\n\
    \            dot_index = i\n        end\n        if file_name:sub(i, i):match('%d')\
    \ then\n            count = count + 1\n        end\n    end\n    if count > 3\
    \ then\n        valid_number = false\n    else\n        valid_number = true\n\
    \    end\n    if dot_count == 1 then\n        valid_dot = true\n    else\n   \
    \     valid_dot = false\n    end\n    if file_name:sub(1, 1):match('%a') then\n\
    \        valid_name = true\n    else\n        valid_name = false\n    end\n  \
    \  for i = 1, #valid_extensions do\n        if file_name:sub(dot_index + 1, -1)\
    \ == valid_extensions[i] then\n            valid_extension = true\n        end\n\
    \    end\n    if valid_number and valid_dot and valid_name and valid_extension\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    if dot_index == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n    local digit_count\
    \ = 0\n    for i = 1, string.len(prefix) do\n        local c = string.sub(prefix,\
    \ i, i)\n        if c >= '0' and c <= '9' then\n            digit_count = digit_count\
    \ + 1\n        end\n    end\n    if digit_count > 3 then\n        return 'No'\n\
    \    end\n    if string.len(prefix) == 0 then\n        return 'No'\n    end\n\
    \    local c = string.sub(prefix, 1, 1)\n    if not (c >= 'a' and c <= 'z' or\
    \ c >= 'A' and c <= 'Z') then\n        return 'No'\n    end\n    if suffix ~=\
    \ 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n        return 'No'\n  \
    \  end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcpcmacp.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphcpcmacp.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    local ext_list = {'txt', 'exe', 'dll'}\n    local ext_valid =\
    \ false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n    local valid_name = false\n    local\
    \ valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n\
    \    local valid_name = false\n    local valid_digit = false\n    local valid_dot\
    \ = false\n    local valid_ext = false\n   \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2v04m9gb.lua:112: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib98zv4_.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpib98zv4_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = 0\n    local ext = ''\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c == '.' then\n      \
    \      dot = dot + 1\n        elseif c:match('%d') then\n            digits =\
    \ digits + 1\n        elseif c:match('%a') then\n            ext = file_name:sub(i)\n\
    \            break\n        end\n    end\n    if digits > 3 or dot ~= 1 or ext\
    \ == '' or not ext:match('^%.[a-zA-Z]') or not ext:match('^%.(txt|exe|dll)$')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedr3upx_.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpedr3upx_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local file_name_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,3}%.[a-zA-Z]{3}$'\n   \
    \ return file_name:match(file_name_pattern) and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrpalrlg.lua:23:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpyrpalrlg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_found = false\n    local ext = ''\n    for\
    \ i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c >=\
    \ '0' and c <= '9' then\n            digits = digits + 1\n        elseif c ==\
    \ '.' then\n            dot_found = true\n        elseif not dot_found then\n\
    \            if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then\n  \
    \              return 'No'\n            end\n        else\n            ext = ext\
    \ .. c\n        end\n    end\n    if digits > 3 or not dot_found or ext == ''\
    \ or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v9pv89m.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp4v9pv89m.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local counter = 0\n  local dot_counter = 0\n  local dot_index = 0\n  local\
    \ extension = ''\n  local valid_extensions = {'txt', 'exe', 'dll'}\n  local valid_extension\
    \ = false\n  local valid_name = false\n  local valid_number = false\n  local valid_dot\
    \ = false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local valid_extension = false\n\
    \  local valid_name = false\n  local valid_number = false\n  local valid_dot =\
    \ false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local valid_extension = false\n\
    \  local valid_name = false\n  local valid_number = false\n  local valid_dot =\
    \ false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local valid_extension = false\n\
    \  local valid_name = false\n  local valid_number = false\n  local valid_dot =\
    \ false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local valid_extension = false\n\
    \  local valid_name = false\n  local valid_number = false\n  local valid_dot =\
    \ false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local valid_extension = false\n\
    \  local valid_name = false\n  local valid_number = false\n  local valid_dot =\
    \ false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local valid_extension = false\n\
    \  local valid_name = false\n  local valid_number = false\n  local valid_dot =\
    \ false\n  local valid_extension = false\n  local valid_name = false\n  local\
    \ valid_number = false\n  local valid_dot = false\n  local\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpth09ieoa.lua:110: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    local ext = file_name:sub(dot_pos\
    \ + 1)\n    local ext_valid = ext == 'txt' or ext == 'exe' or ext == 'dll'\n \
    \   local digits_count = 0\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c >= '0' and c <= '9' then\n            digits_count = digits_count\
    \ + 1\n        end\n    end\n    local digits_valid = digits_count <= 3\n    local\
    \ name = file_name:sub(1, dot_pos - 1)\n    local name_valid = name:match('^[a-zA-Z]')\
    \ ~= nil\n    return (ext_valid and digits_valid and name_valid) and 'Yes' or\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp676_i1ya.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp676_i1ya.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    local ext_list\
    \ = {'txt', 'exe', 'dll'}\n    local valid_ext = false\n    for i = 1, #file_name\
    \ do\n        if file_name:sub(i, i) == '.' then\n            dot_count = dot_count\
    \ + 1\n        end\n        if file_name:sub(i, i):match('%d') then\n        \
    \    count = count + 1\n        end\n    end\n    if dot_count == 1 and count\
    \ <= 3 then\n        ext = file_name:sub(file_name:find('%.') + 1)\n        for\
    \ i = 1, #ext_list do\n            if ext == ext_list[i] then\n              \
    \  valid_ext = true\n            end\n        end\n        if valid_ext then\n\
    \            return 'Yes'\n        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mug7qss.lua:47:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp3mug7qss.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    local name = ''\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == '.' then\n            dot_count = dot_count + 1\n            dot_index\
    \ = i\n        end\n        if file_name:sub(i, i):match('%d') then\n        \
    \    count = count + 1\n        end\n    end\n    if dot_count ~= 1 then\n   \
    \     return 'No'\n    end\n    ext = file_name:sub(dot_index + 1)\n    name =\
    \ file_name:sub(1, dot_index - 1)\n    if count > 3 then\n        return 'No'\n\
    \    end\n    if not name:match('^[a-zA-Z]') then\n        return 'No'\n    end\n\
    \    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local extension = string.sub(file_name,\
    \ dot_index + 1)\n    local digits_count = 0\n    local is_valid = false\n   \
    \ for i = 1, string.len(file_name) do\n        local char = string.sub(file_name,\
    \ i, i)\n        if char == '.' then\n            if i == 1 or i == string.len(file_name)\
    \ then\n                return 'No'\n            end\n        elseif char >= '0'\
    \ and char <= '9' then\n            digits_count = digits_count + 1\n        end\n\
    \    end\n    if digits_count > 3 then\n        return 'No'\n    end\n    if extension\
    \ == 'txt' or extension == 'exe' or extension == 'dll' then\n        is_valid\
    \ = true\n    end\n    if is_valid then\n        return 'Yes'\n    else\n    \
    \    return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqutcm2pc.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpqutcm2pc.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.find(prefix,\
    \ '[0-9]') ~= nil then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[a-zA-Z]') == nil then\n        return 'No'\n    end\n    if string.find(suffix,\
    \ 'txt') == nil and string.find(suffix, 'exe') == nil and string.find(suffix,\
    \ 'dll') == nil then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_77gt7o3.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_77gt7o3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local prefix = string.sub(file_name,\
    \ 1, dot_index - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n\
    \    local prefix_is_valid = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')\n\
    \    local suffix_is_valid = string.match(suffix, '^txt$') or string.match(suffix,\
    \ '^exe$') or string.match(suffix, '^dll$')\n    local digits_count = 0\n    for\
    \ i = 1, #prefix do\n        if string.match(prefix, '%d') then\n            digits_count\
    \ = digits_count + 1\n        end\n    end\n    return (prefix_is_valid and suffix_is_valid\
    \ and digits_count <= 3) and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjngpgz9y.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpjngpgz9y.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local file_name_without_extension\
    \ = string.sub(file_name, 1, dot_index - 1)\n    local file_extension = string.sub(file_name,\
    \ dot_index + 1)\n    local number_of_digits = 0\n    for i = 1, #file_name_without_extension\
    \ do\n        if string.find(file_name_without_extension, '%d') then\n       \
    \     number_of_digits = number_of_digits + 1\n        end\n    end\n    if number_of_digits\
    \ > 3 then\n        return 'No'\n    end\n    if string.find(file_name_without_extension,\
    \ '%a') ~= 1 then\n        return 'No'\n    end\n    if file_extension ~= 'txt'\
    \ and file_extension ~= 'exe' and file_extension ~= 'dll' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39i1ybtt.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp39i1ybtt.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    if not dot_pos then\n        return\
    \ 'No'\n    end\n    local prefix = file_name:sub(1, dot_pos - 1)\n    local suffix\
    \ = file_name:sub(dot_pos + 1)\n    if not prefix:match('^[a-zA-Z]') then\n  \
    \      return 'No'\n    end\n    if prefix:match('%d') then\n        return 'No'\n\
    \    end\n    if prefix:match('%d%d%d') then\n        return 'No'\n    end\n \
    \   if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6hz5jxt.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpo6hz5jxt.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52kizpdi.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp52kizpdi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local ext = string.sub(file_name,\
    \ dot_pos + 1)\n    local name = string.sub(file_name, 1, dot_pos - 1)\n    local\
    \ digits = 0\n    for i = 1, string.len(name) do\n        local c = string.sub(name,\
    \ i, i)\n        if c >= '0' and c <= '9' then\n            digits = digits +\
    \ 1\n        end\n    end\n    if digits > 3 then\n        return 'No'\n    end\n\
    \    if string.sub(name, 1, 1) < 'A' or string.sub(name, 1, 1) > 'z' then\n  \
    \      return 'No'\n    end\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll'\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllo5hqzg.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpllo5hqzg.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = 0\n    local dot_count = 0\n    local\
    \ ext_pos = 0\n    local ext_len = 0\n    local ext_valid = false\n    local ext_valid_list\
    \ = {'txt', 'exe', 'dll'}\n    local ext_valid_list_len = #ext_valid_list\n  \
    \  local ext_valid_list_i = 1\n    local ext_valid_list_item = nil\n    local\
    \ ext_valid_list_item_len = 0\n    local ext_valid_list_item_i = 1\n    local\
    \ ext_valid_list_item_char = nil\n    local ext_valid_list_item_char_code = 0\n\
    \    local ext_valid_list_item_char_code_lower = 0\n    local ext_valid_list_item_char_code_upper\
    \ = 0\n    local ext_valid_list_item_char_code_lower_diff = 0\n    local ext_valid_list_item_char_code_upper_diff\
    \ = 0\n    local ext_valid_list_item_char_code_lower_diff_abs = 0\n    local ext_valid_list_item_char_code_upper_diff_abs\
    \ = 0\n    local ext_valid_list_item_char_code_lower_diff_abs_min = 0\n    local\
    \ ext_valid_list_item_char_code_upper_diff_abs_min = 0\n    local ext_valid_list_item_char_code_lower_diff_abs_min_char\
    \ = nil\n    local ext_valid_list_item_char_code_upper_diff_abs_min_char = nil\n\
    \    local ext_valid_list_item_char_code_lower_diff_abs_min_char_code = 0\n  \
    \  local ext_valid_list_item_char_code_upper_diff_abs_min_char_code = 0\n    local\
    \ ext_valid_list_item_char_code_lower_diff_abs_min_char_code_lower = 0\n    local\
    \ ext_valid_list_item_char_code_upper_diff_abs_min_char_code_upper = 0\n    local\
    \ ext_valid_list_item_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp09stnc63.lua:77: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == '.' then\n            dot_count = dot_count + 1\n            dot_index =\
    \ i\n        end\n        if file_name:sub(i, i):match('%d') then\n          \
    \  count = count + 1\n        end\n    end\n    if dot_count ~= 1 then\n     \
    \   return 'No'\n    end\n    if count > 3 then\n        return 'No'\n    end\n\
    \    extension = file_name:sub(dot_index + 1, #file_name)\n    if extension ~=\
    \ 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n        return 'No'\n\
    \    end\n    if file_name:sub(1, dot_index - 1):match('%a') == nil then\n   \
    \     return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sfugze9.lua:49:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp9sfugze9.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ ext_index = 0\n    local ext_count = 0\n    local ext_list = {'txt', 'exe',\
    \ 'dll'}\n    local ext_found = false\n    local ext_len = 0\n    local ext_str\
    \ = ''\n    local ext_str_len = 0\n    local ext_str_count = 0\n    local ext_str_valid\
    \ = false\n    local file_name_len = 0\n    local file_name_valid = false\n  \
    \  local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m\
    \ = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n  \
    \  local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v\
    \ = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n  \
    \  local aa = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n    local\
    \ ae = 0\n    local af = 0\n    local ag = 0\n    local ah = 0\n    local ai =\
    \ 0\n    local aj = 0\n    local ak = 0\n    local al = 0\n    local am = 0\n\
    \    local an = 0\n    local ao = 0\n    local ap = 0\n    local aq = 0\n    local\
    \ ar = 0\n    local as = 0\n    local at = 0\n    local au = 0\n    local av =\
    \ 0\n    local aw = 0\n    local ax = 0\n    local ay = 0\n    local az = 0\n\
    \    local ba = 0\n    local bb = 0\n    local bc = 0\n    local bd = 0\n    local\
    \ be = 0\n    local bf = 0\n    local bg = 0\n    local bh = 0\n    local bi =\
    \ 0\n    local bj = 0\n    local bk = 0\n    local bl = 0\n    local bm = 0\n\
    \    local bn = 0\n    local bo = 0\n    local bp = 0\n    local bq =\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpulo2dj50.lua:91: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == '.' then\n            dot_index = i\n            dot_count = dot_count +\
    \ 1\n        end\n        if file_name:sub(i, i):match('%d') then\n          \
    \  count = count + 1\n        end\n    end\n    if count > 3 or dot_count ~= 1\
    \ then\n        return 'No'\n    end\n    extension = file_name:sub(dot_index\
    \ + 1, #file_name)\n    if extension ~= 'txt' and extension ~= 'exe' and extension\
    \ ~= 'dll' then\n        return 'No'\n    end\n    if file_name:sub(1, dot_index\
    \ - 1):match('%a') then\n        return 'Yes'\n    end\n    return 'No'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55yrlg0k.lua:46:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp55yrlg0k.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot = 0\n    local ext = 0\n    for i = 1, #file_name\
    \ do\n        if file_name:sub(i, i) == '.' then\n            dot = i\n      \
    \  end\n        if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then\n\
    \            count = count + 1\n        end\n    end\n    if count > 3 then\n\
    \        return 'No'\n    end\n    if file_name:sub(1, 1) < 'A' or (file_name:sub(1,\
    \ 1) > 'Z' and file_name:sub(1, 1) < 'a') or file_name:sub(1, 1) > 'z' then\n\
    \        return 'No'\n    end\n    if file_name:sub(dot + 1, dot + 3) == 'txt'\
    \ then\n        ext = 1\n    elseif file_name:sub(dot + 1, dot + 3) == 'exe' then\n\
    \        ext = 1\n    elseif file_name:sub(dot + 1, dot + 3) == 'dll' then\n \
    \       ext = 1\n    end\n    if ext == 1 then\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppagecos7.lua:61:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmppagecos7.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjrp_w04.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxjrp_w04.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.find(prefix,\
    \ '[0-9]') ~= nil then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[a-zA-Z]') == nil then\n        return 'No'\n    end\n    if string.find(suffix,\
    \ 'txt') == nil and string.find(suffix, 'exe') == nil and string.find(suffix,\
    \ 'dll') == nil then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx9r5p3e.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwx9r5p3e.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local name = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local ext = string.sub(file_name, dot_pos + 1)\n    local\
    \ digits = 0\n    for i = 1, #name do\n        if string.find('0123456789', string.sub(name,\
    \ i, i)) then\n            digits = digits + 1\n        end\n    end\n    if digits\
    \ > 3 then\n        return 'No'\n    end\n    if string.find('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ string.sub(name, 1, 1)) == nil then\n        return 'No'\n    end\n    if ext\
    \ ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv174g39p.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpv174g39p.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = 0\n    local dot_count = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c >= '0' and c <= '9' then\n            digits = digits + 1\n    \
    \    elseif c == '.' then\n            dot_pos = i\n            dot_count = dot_count\
    \ + 1\n        end\n    end\n    if digits > 3 or dot_count ~= 1 then\n      \
    \  return 'No'\n    end\n    ext = file_name:sub(dot_pos + 1, #file_name)\n  \
    \  if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    local name = file_name:sub(1, dot_pos - 1)\n    if #name == 0 then\n\
    \        return 'No'\n    end\n    local c = name:sub(1, 1)\n    if (c < 'a' or\
    \ c > 'z') and (c < 'A' or c > 'Z') then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    local ext = file_name:sub(dot_pos\
    \ + 1)\n    local ext_list = {'txt', 'exe', 'dll'}\n    local ext_valid = false\n\
    \    for _, v in ipairs(ext_list) do\n        if v == ext then\n            ext_valid\
    \ = true\n            break\n        end\n    end\n    if not ext_valid then\n\
    \        return 'No'\n    end\n    local name = file_name:sub(1, dot_pos - 1)\n\
    \    local digit_count = 0\n    for i = 1, #name do\n        local c = name:sub(i,\
    \ i)\n        if c >= '0' and c <= '9' then\n            digit_count = digit_count\
    \ + 1\n        end\n    end\n    if digit_count > 3 then\n        return 'No'\n\
    \    end\n    if name:sub(1, 1) < 'A' or name:sub(1, 1) > 'z' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctglpnrq.lua:49:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpctglpnrq.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local name = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local ext = string.sub(file_name, dot_pos + 1)\n    local\
    \ num_digits = 0\n    for i = 1, #name do\n        local c = string.sub(name,\
    \ i, i)\n        if c >= '0' and c <= '9' then\n            num_digits = num_digits\
    \ + 1\n        end\n    end\n    if num_digits > 3 then\n        return 'No'\n\
    \    end\n    local first_letter = string.sub(name, 1, 1)\n    if not (first_letter\
    \ >= 'a' and first_letter <= 'z' or first_letter >= 'A' and first_letter <= 'Z')\
    \ then\n        return 'No'\n    end\n    if ext ~= 'txt' and ext ~= 'exe' and\
    \ ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm0bbabd.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpqm0bbabd.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal count = 0\n\tlocal dot_count = 0\n\tlocal dot_index = 0\n\tlocal extension\
    \ = ''\n\tlocal valid_extensions = {'txt', 'exe', 'dll'}\n\tlocal valid_extension\
    \ = false\n\tlocal valid_name = false\n\tlocal valid_count = false\n\tlocal valid_dot_count\
    \ = false\n\tlocal valid_extension_count = false\n\tlocal valid_extension_name\
    \ = false\n\tlocal valid_name_count = false\n\tlocal valid_name_name = false\n\
    \tlocal valid_name_dot = false\n\tlocal valid_name_extension = false\n\tlocal\
    \ valid_name_extension_count = false\n\tlocal valid_name_extension_name = false\n\
    \tlocal valid_name_extension_dot = false\n\tlocal valid_name_extension_extension\
    \ = false\n\tlocal valid_name_extension_extension_count = false\n\tlocal valid_name_extension_extension_name\
    \ = false\n\tlocal valid_name_extension_extension_dot = false\n\tlocal valid_name_extension_extension_extension\
    \ = false\n\tlocal valid_name_extension_extension_extension_count = false\n\t\
    local valid_name_extension_extension_extension_name = false\n\tlocal valid_name_extension_extension_extension_dot\
    \ = false\n\tlocal valid_name_extension_extension_extension_extension = false\n\
    \tlocal valid_name_extension_extension_extension_extension_count = false\n\tlocal\
    \ valid_name_extension_extension_extension_extension_name = false\n\tlocal valid_name_extension_extension_extension_extension_dot\
    \ = false\n\tlocal valid_name_extension_extension_extension_extension_extension\
    \ = false\n\tlocal valid_name_extension_extension_extension_extension_extension_count\
    \ = false\n\tlocal valid_name_extension_extension_extension_extension_extension_name\
    \ = false\n\tlocal valid_name_extension_extension_extension_extension_extension_dot\
    \ = false\n\tlocal valid_name_ext\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu6s2ho0x.lua:83: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if not dot_index then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if not prefix:match('^[a-zA-Z]')\
    \ then\n        return 'No'\n    end\n    if prefix:match('%d') then\n       \
    \ return 'No'\n    end\n    if prefix:match('%d%d%d') then\n        return 'No'\n\
    \    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjq4kioks.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpjq4kioks.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local extension = string.sub(file_name,\
    \ dot_index + 1)\n    local extension_valid = false\n    for _, v in ipairs({'txt',\
    \ 'exe', 'dll'}) do\n        if v == extension then\n            extension_valid\
    \ = true\n            break\n        end\n    end\n    if not extension_valid\
    \ then\n        return 'No'\n    end\n    local name = string.sub(file_name, 1,\
    \ dot_index - 1)\n    local digit_count = 0\n    for i = 1, #name do\n       \
    \ local c = string.sub(name, i, i)\n        if c >= '0' and c <= '9' then\n  \
    \          digit_count = digit_count + 1\n        end\n    end\n    if digit_count\
    \ > 3 then\n        return 'No'\n    end\n    if string.len(name) == 0 then\n\
    \        return 'No'\n    end\n    local first_char = string.sub(name, 1, 1)\n\
    \    if not (first_char >= 'a' and first_char <= 'z' or first_char >= 'A' and\
    \ first_char <= 'Z') then\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vejecco.lua:52:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp9vejecco.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local num_digits = 0\n    local dot_found = false\n    local dot_index =\
    \ 0\n    local extension = ''\n    local extension_valid = false\n    local valid_extensions\
    \ = {'txt', 'exe', 'dll'}\n    local valid_extensions_len = #valid_extensions\n\
    \    local valid_extensions_index = 1\n    local valid_extensions_current = ''\n\
    \    local valid_extensions_current_len = 0\n    local valid_extensions_current_index\
    \ = 1\n    local valid_extensions_current_char = ''\n    local valid_extensions_current_char_code\
    \ = 0\n    local file_name_len = #file_name\n    local file_name_index = 1\n \
    \   local file_name_char = ''\n    local file_name_char_code = 0\n    local file_name_char_code_is_digit\
    \ = false\n    local file_name_char_code_is_letter = false\n    local file_name_char_code_is_dot\
    \ = false\n    local file_name_char_code_is_valid = false\n    local file_name_char_code_is_valid_extension\
    \ = false\n    local file_name_char_code_is_valid_extension_current = false\n\
    \    local file_name_char_code_is_valid_extension_current_char = false\n    local\
    \ file_name_char_code_is_valid_extension_current_char_code = false\n    local\
    \ file_name_char_code_is_valid_extension_current_char_code_is_letter = false\n\
    \    local file_name_char_code_is_valid_extension_current_char_code_is_valid =\
    \ false\n    local file_name_char_code_is_valid_extension_current_char_code_is_valid_extension\
    \ = false\n    local file_name_char_code_is_valid_extension_current_char_code_is_valid_extension_current\
    \ = false\n    local file_name_char_code_is_valid_extension_current_char_code_is_valid_extension_current_char\
    \ = false\n    local file_name\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpik25f7ol.lua:79: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if dot_index == nil then\n   \
    \     return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if prefix:find('%d') ~=\
    \ nil then\n        return 'No'\n    end\n    if prefix:match('%d') ~= nil then\n\
    \        return 'No'\n    end\n    if prefix:match('%a') == nil then\n       \
    \ return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dp7c3cu.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7dp7c3cu.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local cnt = 0\n    local dot_pos = 0\n    local dot_cnt = 0\n    local ext\
    \ = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c >= '0' and c <= '9' then\n            cnt = cnt + 1\n        elseif\
    \ c == '.' then\n            dot_pos = i\n            dot_cnt = dot_cnt + 1\n\
    \        end\n    end\n    if cnt > 3 or dot_cnt ~= 1 then\n        return 'No'\n\
    \    end\n    local name = file_name:sub(1, dot_pos - 1)\n    if #name == 0 or\
    \ not (name:sub(1, 1) >= 'a' and name:sub(1, 1) <= 'z' or name:sub(1, 1) >= 'A'\
    \ and name:sub(1, 1) <= 'Z') then\n        return 'No'\n    end\n    ext = file_name:sub(dot_pos\
    \ + 1, #file_name)\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if not dot_pos then\n  \
    \      return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    local prefix_is_valid\
    \ = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')\n    local suffix_is_valid\
    \ = suffix == 'txt' or suffix == 'exe' or suffix == 'dll'\n    local digit_count\
    \ = string.gsub(prefix, '[^0-9]', '')\n    local digit_count_is_valid = #digit_count\
    \ <= 3\n    return (prefix_is_valid and suffix_is_valid and digit_count_is_valid)\
    \ and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuh7iucg.lua:32:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfuh7iucg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvbu_iw6.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnvbu_iw6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    if dot_index == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, string.len(prefix) do\n        local\
    \ c = string.sub(prefix, i, i)\n        if c >= '0' and c <= '9' then\n      \
    \      prefix_digit_count = prefix_digit_count + 1\n        end\n    end\n   \
    \ if prefix_digit_count > 3 then\n        return 'No'\n    end\n    local suffix_valid\
    \ = false\n    if suffix == 'txt' or suffix == 'exe' or suffix == 'dll' then\n\
    \        suffix_valid = true\n    end\n    if not suffix_valid then\n        return\
    \ 'No'\n    end\n    local prefix_first_letter = string.sub(prefix, 1, 1)\n  \
    \  if prefix_first_letter < 'a' or prefix_first_letter > 'z' then\n        if\
    \ prefix_first_letter < 'A' or prefix_first_letter > 'Z' then\n            return\
    \ 'No'\n        end\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcqazh1u.lua:54:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmplcqazh1u.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscjmrig_.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpscjmrig_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local extension = string.sub(file_name,\
    \ dot_index + 1)\n    local name = string.sub(file_name, 1, dot_index - 1)\n \
    \   local digits = string.match(name, '%d')\n    if digits == nil then\n     \
    \   digits = ''\n    end\n    if #digits > 3 then\n        return 'No'\n    end\n\
    \    if string.find(name, '%a') ~= 1 then\n        return 'No'\n    end\n    if\
    \ extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n    \
    \    return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fi8hj3v.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5fi8hj3v.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == '.' then\n            dot_count = dot_count + 1\n            dot_index =\
    \ i\n        end\n        if file_name:sub(i, i):match('%d') then\n          \
    \  count = count + 1\n        end\n    end\n    if count > 3 then\n        return\
    \ 'No'\n    end\n    if dot_count ~= 1 then\n        return 'No'\n    end\n  \
    \  if file_name:sub(1, dot_index - 1) == '' then\n        return 'No'\n    end\n\
    \    if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then\n        return\
    \ 'No'\n    end\n    extension = file_name:sub(dot_index + 1, #file_name)\n  \
    \  if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local file_name_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,2}%.[a-zA-Z]{3}$'\n   \
    \ if file_name:match(file_name_pattern) then\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnsmyxy_.lua:27:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpcnsmyxy_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local dot_pos = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c == '.' then\n            dot_count = dot_count + 1\n           \
    \ dot_pos = i\n        elseif c:match('%d') then\n            digits = digits\
    \ + 1\n        end\n    end\n    if dot_count ~= 1 then\n        return 'No'\n\
    \    end\n    local prefix = file_name:sub(1, dot_pos - 1)\n    if #prefix ==\
    \ 0 or not prefix:match('^[a-zA-Z]') then\n        return 'No'\n    end\n    ext\
    \ = file_name:sub(dot_pos + 1)\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~=\
    \ 'dll' then\n        return 'No'\n    end\n    if digits > 3 then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local num_digits = 0\n    local dot_found = false\n    local ext_found =\
    \ false\n    local ext_list = {'txt', 'exe', 'dll'}\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c == '.' then\n      \
    \      if dot_found then\n                return 'No'\n            end\n     \
    \       dot_found = true\n        elseif c:match('%d') then\n            num_digits\
    \ = num_digits + 1\n            if num_digits > 3 then\n                return\
    \ 'No'\n            end\n        elseif c:match('%a') then\n            if dot_found\
    \ then\n                if not ext_found then\n                    for _, ext\
    \ in ipairs(ext_list) do\n                        if file_name:sub(i, i + #ext\
    \ - 1) == ext then\n                            ext_found = true\n           \
    \                 break\n                        end\n                    end\n\
    \                end\n            end\n        else\n            return 'No'\n\
    \        end\n    end\n    if dot_found and ext_found then\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ithqt70.lua:58:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp4ithqt70.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if dot_count == 1 and count <= 3 then\n\
    \        ext = file_name:sub(dot_index + 1, #file_name)\n        if ext == 'txt'\
    \ or ext == 'exe' or ext == 'dll' then\n            return 'Yes'\n        end\n\
    \    end\n    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30exi1hj.lua:42:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp30exi1hj.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = \"\"\n    local\
    \ name = \"\"\n    for i = 1, #file_name do\n        if file_name:sub(i, i) ==\
    \ \".\" then\n            dot_count = dot_count + 1\n        end\n        if file_name:sub(i,\
    \ i) == \".\" or file_name:sub(i, i) == \"0\" or file_name:sub(i, i) == \"1\"\
    \ or file_name:sub(i, i) == \"2\" or file_name:sub(i, i) == \"3\" or file_name:sub(i,\
    \ i) == \"4\" or file_name:sub(i, i) == \"5\" or file_name:sub(i, i) == \"6\"\
    \ or file_name:sub(i, i) == \"7\" or file_name:sub(i, i) == \"8\" or file_name:sub(i,\
    \ i) == \"9\" then\n            count = count + 1\n        end\n    end\n    if\
    \ count > 3 then\n        return \"No\"\n    end\n    if dot_count ~= 1 then\n\
    \        return \"No\"\n    end\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == \".\" then\n            name = file_name:sub(1, i - 1)\n            ext\
    \ = file_name:sub(i + 1, #file_name)\n        end\n    end\n    if name == \"\"\
    \ then\n        return \"No\"\n    end\n    if name:sub(1, 1) ~= \"a\" and name:sub(1,\
    \ 1) ~= \"b\" and name:sub(1, 1) ~= \"c\" and name:sub(1, 1) ~= \"d\" and name:sub(1,\
    \ 1) ~= \"e\" and name:sub(1, 1) ~= \"f\" and name:sub(1, 1) ~= \"g\" and name:sub(1,\
    \ 1) ~= \"h\" and name:sub(1, 1) ~= \"i\" and name:sub(1, 1) ~= \"j\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprbxppro1.lua:44: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local sub_str_before_dot = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local sub_str_after_dot = string.sub(file_name, dot_pos\
    \ + 1)\n    if sub_str_before_dot == '' or string.match(sub_str_before_dot, '%d')\
    \ == nil then\n        return 'No'\n    end\n    if string.match(sub_str_before_dot,\
    \ '%d') ~= nil then\n        local digit_count = 0\n        for i = 1, #sub_str_before_dot\
    \ do\n            if string.sub(sub_str_before_dot, i, i) >= '0' and string.sub(sub_str_before_dot,\
    \ i, i) <= '9' then\n                digit_count = digit_count + 1\n         \
    \   end\n        end\n        if digit_count > 3 then\n            return 'No'\n\
    \        end\n    end\n    if sub_str_after_dot ~= 'txt' and sub_str_after_dot\
    \ ~= 'exe' and sub_str_after_dot ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p9ob29o.lua:45:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1p9ob29o.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaltqdup6.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpaltqdup6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extension = false\n    local valid_name = false\n    local valid_number\
    \ = false\n    local valid_dot = false\n    local valid_extension = false\n  \
    \  for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if\
    \ c >= '0' and c <= '9' then\n            count = count + 1\n        elseif c\
    \ == '.' then\n            dot_count = dot_count + 1\n            dot_index =\
    \ i\n        end\n    end\n    if count <= 3 then\n        valid_number = true\n\
    \    end\n    if dot_count == 1 then\n        valid_dot = true\n    end\n    if\
    \ valid_number and valid_dot then\n        local name = file_name:sub(1, dot_index\
    \ - 1)\n        local extension = file_name:sub(dot_index + 1, #file_name)\n \
    \       if #name > 0 and (name:sub(1, 1) >= 'a' and name:sub(1, 1) <= 'z' or name:sub(1,\
    \ 1) >= 'A' and name:sub(1, 1) <= 'Z') then\n            valid_name = true\n \
    \       end\n        for i = 1, #valid_extensions do\n            if extension\
    \ == valid_extensions[i] then\n                valid_extension = true\n      \
    \      end\n        end\n    end\n    if valid_name and valid_extension then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local ext_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_index = i\n        end\n        if file_name:sub(i, i)\
    \ >= '0' and file_name:sub(i, i) <= '9' then\n            count = count + 1\n\
    \        end\n    end\n    if count > 3 then\n        return 'No'\n    end\n \
    \   if dot_index == 0 then\n        return 'No'\n    end\n    if dot_index ==\
    \ 1 then\n        return 'No'\n    end\n    if file_name:sub(1, 1) < 'A' or file_name:sub(1,\
    \ 1) > 'z' then\n        return 'No'\n    end\n    if file_name:sub(1, 1) > 'Z'\
    \ and file_name:sub(1, 1) < 'a' then\n        return 'No'\n    end\n    ext_index\
    \ = dot_index + 1\n    ext = file_name:sub(ext_index, #file_name)\n    if ext\
    \ ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6sh3xhh.lua:69:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp_6sh3xhh.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if not dot_pos then\n  \
    \      return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_num_count = 0\n    for i = 1, string.len(prefix) do\n        local c\
    \ = string.sub(prefix, i, i)\n        if c >= '0' and c <= '9' then\n        \
    \    prefix_num_count = prefix_num_count + 1\n        end\n    end\n    if prefix_num_count\
    \ > 3 then\n        return 'No'\n    end\n    local suffix_valid = false\n   \
    \ for _, v in ipairs({'txt', 'exe', 'dll'}) do\n        if v == suffix then\n\
    \            suffix_valid = true\n            break\n        end\n    end\n  \
    \  if not suffix_valid then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3cokxkq.lua:51:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpc3cokxkq.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if not dot_index then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if not prefix:match('^[a-zA-Z][a-zA-Z0-9]*$')\
    \ then\n        return 'No'\n    end\n    if prefix:match('%d%d%d') then\n   \
    \     return 'No'\n    end\n    if not suffix:match('^txt$') and not suffix:match('^exe$')\
    \ and not suffix:match('^dll$') then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkodur01i.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkodur01i.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local ext = string.sub(file_name,\
    \ dot_pos + 1)\n    local ext_list = {'txt', 'exe', 'dll'}\n    local ext_valid\
    \ = false\n    for _, v in ipairs(ext_list) do\n        if v == ext then\n   \
    \         ext_valid = true\n            break\n        end\n    end\n    local\
    \ digits = 0\n    for i = 1, string.len(file_name) do\n        local c = string.sub(file_name,\
    \ i, i)\n        if c >= '0' and c <= '9' then\n            digits = digits +\
    \ 1\n        end\n    end\n    local first_char = string.sub(file_name, 1, 1)\n\
    \    local first_char_valid = (first_char >= 'a' and first_char <= 'z') or (first_char\
    \ >= 'A' and first_char <= 'Z')\n    return (digits <= 3 and dot_pos and ext_valid\
    \ and first_char_valid) and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nt5ps1_.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_nt5ps1_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab7bjjwu.lua:23:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpab7bjjwu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c >= '0'\
    \ and c <= '9' then\n            digits = digits + 1\n        elseif c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif dot_count == 0 then\n\
    \            if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then\n  \
    \              return 'No'\n            end\n        else\n            ext = ext\
    \ .. c\n        end\n    end\n    if digits > 3 or dot_count ~= 1 or ext ~= 'txt'\
    \ and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvefztt87.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpvefztt87.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if count > 3 or dot_count ~= 1 then\n\
    \        return 'No'\n    end\n    if file_name:sub(1, 1):match('%a') == nil then\n\
    \        return 'No'\n    end\n    ext = file_name:sub(dot_index + 1, #file_name)\n\
    \    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local prefix = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n   \
    \ local digits = string.match(prefix, '%d+')\n    if digits == nil or string.len(digits)\
    \ > 3 then\n        return 'No'\n    end\n    if string.match(prefix, '^[a-zA-Z]')\
    \ == nil then\n        return 'No'\n    end\n    if suffix ~= 'txt' and suffix\
    \ ~= 'exe' and suffix ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpnng9p_.lua:35:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmpnng9p_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extension = false\n    local valid_name = false\n    local valid_digits\
    \ = false\n    local valid_dot = false\n    local valid_extension = false\n  \
    \  local valid_name = false\n    local valid_digits = false\n    local valid_dot\
    \ = false\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if count <= 3 then\n        valid_digits\
    \ = true\n    end\n    if dot_count == 1 then\n        valid_dot = true\n    end\n\
    \    if valid_digits and valid_dot then\n        if file_name:sub(1, 1):match('%a')\
    \ then\n            valid_name = true\n        end\n        extension = file_name:sub(dot_index\
    \ + 1, #file_name)\n        for i = 1, #valid_extensions do\n            if extension\
    \ == valid_extensions[i] then\n                valid_extension = true\n      \
    \      end\n        end\n    end\n    if valid_name and valid_extension then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits_count = 0\n    local dot_count = 0\n    local dot_index = 0\n\
    \    local extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n\
    \    local valid_extension = false\n    local valid_name = false\n    local valid_name_start\
    \ = false\n    local valid_name_end = false\n    local valid_name_length = false\n\
    \    local valid_name_length_min = 1\n    local valid_name_length_max = 20\n \
    \   local valid_name_length_current = 0\n    local valid_name_length_current_index\
    \ = 0\n    local valid_name_length_current_index_start = 0\n    local valid_name_length_current_index_end\
    \ = 0\n    local valid_name_length_current_index_start_found = false\n    local\
    \ valid_name_length_current_index_end_found = false\n    local valid_name_length_current_index_start_found_index\
    \ = 0\n    local valid_name_length_current_index_end_found_index = 0\n    local\
    \ valid_name_length_current_index_start_found_index_last = 0\n    local valid_name_length_current_index_end_found_index_last\
    \ = 0\n    local valid_name_length_current_index_start_found_index_last_valid\
    \ = false\n    local valid_name_length_current_index_end_found_index_last_valid\
    \ = false\n    local valid_name_length_current_index_start_found_index_last_valid_index\
    \ = 0\n    local valid_name_length_current_index_end_found_index_last_valid_index\
    \ = 0\n    local valid_name_length_current_index_start_found_index_last_valid_index_last\
    \ = 0\n    local valid_name_length_current_index_end_found_index_last_valid_index_last\
    \ = 0\n    local valid_name_length_current_index_start_found_index_last_valid_index_last_valid\
    \ = false\n    local valid_name_length_current_index_end_found_index_last_valid_index_last_valid\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpttmpi05b.lua:78: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits_count = 0\n    local dot_count = 0\n    local ext = ''\n   \
    \ local name = ''\n    local i = 1\n    while i <= #file_name do\n        local\
    \ c = file_name:sub(i, i)\n        if c == '.' then\n            dot_count = dot_count\
    \ + 1\n            i = i + 1\n            while i <= #file_name do\n         \
    \       ext = ext .. file_name:sub(i, i)\n                i = i + 1\n        \
    \    end\n        elseif c:match('%d') then\n            digits_count = digits_count\
    \ + 1\n            i = i + 1\n        elseif c:match('%a') then\n            name\
    \ = name .. c\n            i = i + 1\n        else\n            return 'No'\n\
    \        end\n    end\n    if digits_count > 3 or dot_count ~= 1 or #name == 0\
    \ or not ext:match('txt$') and not ext:match('exe$') and not ext:match('dll$')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljboesad.lua:50:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpljboesad.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local ext = string.sub(file_name,\
    \ dot_pos + 1)\n    local name = string.sub(file_name, 1, dot_pos - 1)\n    local\
    \ digits = 0\n    for i = 1, #name do\n        local c = string.sub(name, i, i)\n\
    \        if c >= '0' and c <= '9' then\n            digits = digits + 1\n    \
    \    end\n    end\n    if digits > 3 then\n        return 'No'\n    end\n    if\
    \ string.find(name, '%a') ~= 1 then\n        return 'No'\n    end\n    if ext\
    \ ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ubh6q3y.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp4ubh6q3y.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local function check_substring(substring)\n        local function check_first_char(first_char)\n\
    \            local first_char_code = string.byte(first_char)\n            return\
    \ (first_char_code >= string.byte('a') and first_char_code <= string.byte('z'))\n\
    \                    or (first_char_code >= string.byte('A') and first_char_code\
    \ <= string.byte('Z'))\n        end\n        local function check_digits(substring)\n\
    \            local digits_count = 0\n            for i = 1, #substring do\n  \
    \              local char_code = string.byte(substring, i)\n                if\
    \ char_code >= string.byte('0') and char_code <= string.byte('9') then\n     \
    \               digits_count = digits_count + 1\n                end\n       \
    \     end\n            return digits_count <= 3\n        end\n        return #substring\
    \ > 0 and check_first_char(substring:sub(1, 1)) and check_digits(substring)\n\
    \    end\n    local dot_index = string.find(file_name, '.')\n    if dot_index\
    \ == nil then\n        return 'No'\n    end\n    local substring_before_dot =\
    \ file_name:sub(1, dot_index - 1)\n    local substring_after_dot = file_name:sub(dot_index\
    \ + 1)\n    local valid_substrings_after_dot = {'txt', 'exe', 'dll'}\n    local\
    \ valid_substring_after_dot = false\n    for _, valid_substring in ipairs(valid_substrings_after_dot)\
    \ do\n        if valid_substring == substring_after_dot then\n            valid_substring_after_dot\
    \ = true\n            break\n        end\n    end\n    return check_substring(substring_before_dot)\
    \ and valid_substring_after_dot and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcmrvdaj.lua:54:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphcmrvdaj.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extension = {'txt', 'exe', 'dll'}\n    for i\
    \ = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n           \
    \ dot_count = dot_count + 1\n            dot_index = i\n        end\n        if\
    \ file_name:sub(i, i):match('%d') then\n            count = count + 1\n      \
    \  end\n    end\n    if count > 3 or dot_count ~= 1 then\n        return 'No'\n\
    \    end\n    if file_name:sub(1, dot_index - 1):match('%a') == nil then\n   \
    \     return 'No'\n    end\n    extension = file_name:sub(dot_index + 1, #file_name)\n\
    \    for i = 1, #valid_extension do\n        if extension == valid_extension[i]\
    \ then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddwst2g1.lua:49:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpddwst2g1.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    local ext_count\
    \ = 0\n    local ext_valid = false\n    local ext_valid_count = 0\n    local ext_valid_list\
    \ = {'txt', 'exe', 'dll'}\n    local file_name_valid = false\n    local file_name_valid_count\
    \ = 0\n    local file_name_valid_list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}\n    local file_name_valid_list_count\
    \ = 0\n    local file_name_valid_list_index = 0\n    local file_name_valid_list_index_count\
    \ = 0\n    local file_name_valid_list_index_count_valid = false\n    local file_name_valid_list_index_count_valid_count\
    \ = 0\n    local file_name_valid_list_index_count_valid_count_valid = false\n\
    \    local file_name_valid_list_index_count_valid_count_valid_count = 0\n    local\
    \ file_name_valid_list_index_count_valid_count_valid_count_valid = false\n   \
    \ local file_name_valid_list_index_count_valid_count_valid_count_valid_count =\
    \ 0\n    local file_name_valid_list_index_count_valid_count_valid_count_valid_count_valid\
    \ = false\n    local file_name_valid_list_index_count_valid_count_valid_count_valid_count_valid_count\
    \ = 0\n    local file_name_valid_list_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5c5luyzq.lua:70: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = false\n    local extension = ''\n    for\
    \ i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c ==\
    \ '.' then\n            dot = true\n        elseif c:match('%d') then\n      \
    \      digits = digits + 1\n        elseif dot then\n            extension = extension\
    \ .. c\n        end\n    end\n    if digits > 3 or not dot or not file_name:sub(1,\
    \ 1):match('%a') or not\n        {['txt'] = true, ['exe'] = true, ['dll'] = true}[extension]\
    \ then\n        return 'No'\n    else\n        return 'Yes'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp90_uko8v.lua:30: 'then' expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if not dot_index then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if prefix:find('%d') or\
    \ #prefix == 0 or not prefix:find('^[a-zA-Z]') then\n        return 'No'\n   \
    \ end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n \
    \       return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g8f4jmk.lua:34:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_g8f4jmk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3htd3z84.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3htd3z84.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    for\
    \ i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c ==\
    \ '.' then\n            dot_count = dot_count + 1\n            dot_index = i\n\
    \        elseif c:match('%d') then\n            digits = digits + 1\n        end\n\
    \    end\n    if dot_count ~= 1 then\n        return 'No'\n    end\n    local\
    \ prefix = file_name:sub(1, dot_index - 1)\n    if #prefix == 0 or not prefix:match('^%a')\
    \ then\n        return 'No'\n    end\n    extension = file_name:sub(dot_index\
    \ + 1)\n    for _, ext in ipairs(valid_extensions) do\n        if ext == extension\
    \ then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqcw6syd.lua:54:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpzqcw6syd.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0_0dmyc.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpe0_0dmyc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[^%a]') ~= nil then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[%d]') ~= nil then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[%d]', string.find(prefix, '[%d]') + 1) ~= nil then\n        return 'No'\n\
    \    end\n    if string.find(prefix, '[%d]', string.find(prefix, '[%d]', string.find(prefix,\
    \ '[%d]') + 1) + 1) ~= nil then\n        return 'No'\n    end\n    if suffix ~=\
    \ 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n        return 'No'\n  \
    \  end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai46mu9x.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpai46mu9x.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal count = 0\n\tlocal dot_count = 0\n\tlocal dot_index = 0\n\tlocal ext =\
    \ ''\n\tfor i = 1, #file_name do\n\t\tif file_name:sub(i, i) == '.' then\n\t\t\
    \tdot_count = dot_count + 1\n\t\t\tdot_index = i\n\t\tend\n\t\tif file_name:sub(i,\
    \ i):match('%d') then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif count > 3\
    \ or dot_count ~= 1 then\n\t\treturn 'No'\n\tend\n\tif file_name:sub(1, 1):match('%a')\
    \ then\n\t\text = file_name:sub(dot_index + 1, #file_name)\n\t\tif ext == 'txt'\
    \ or ext == 'exe' or ext == 'dll' then\n\t\t\treturn 'Yes'\n\t\tend\n\tend\n\t\
    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = false\n    local ext = false\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            if dot then\n                return 'No'\n            end\n\
    \            dot = true\n        elseif c >= '0' and c <= '9' then\n         \
    \   digits = digits + 1\n            if digits > 3 then\n                return\
    \ 'No'\n            end\n        elseif c >= 'a' and c <= 'z' or c >= 'A' and\
    \ c <= 'Z' then\n            if dot then\n                if not ext then\n  \
    \                  ext = true\n                    if c ~= 't' then\n        \
    \                return 'No'\n                    end\n                elseif\
    \ c == 't' then\n                    return 'No'\n                elseif c ==\
    \ 'x' then\n                    return 'No'\n                elseif c == 'e' then\n\
    \                    return 'Yes'\n                else\n                    return\
    \ 'No'\n                end\n            end\n        else\n            return\
    \ 'No'\n        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5ehi1ta.lua:58:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpj5ehi1ta.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local name = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local ext = string.sub(file_name, dot_pos + 1)\n    local\
    \ digits = 0\n    for i = 1, #name do\n        local c = string.sub(name, i, i)\n\
    \        if c >= '0' and c <= '9' then\n            digits = digits + 1\n    \
    \    end\n    end\n    if digits > 3 then\n        return 'No'\n    end\n    if\
    \ not (string.sub(name, 1, 1) >= 'a' and string.sub(name, 1, 1) <= 'z' or\n  \
    \          string.sub(name, 1, 1) >= 'A' and string.sub(name, 1, 1) <= 'Z') then\n\
    \        return 'No'\n    end\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~=\
    \ 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cdr1dp9.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0cdr1dp9.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    local name\
    \ = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c == '.' then\n            dot_count = dot_count + 1\n        elseif\
    \ c:match('%d') then\n            count = count + 1\n        end\n    end\n  \
    \  if count > 3 or dot_count ~= 1 then\n        return 'No'\n    end\n    ext\
    \ = file_name:match('%.(%w+)$')\n    name = file_name:match('^(%w+)%.')\n    if\
    \ not name or not ext or not (ext == 'txt' or ext == 'exe' or ext == 'dll') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qyzvpae.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp0qyzvpae.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local extension = string.sub(file_name,\
    \ dot_index + 1)\n    local name = string.sub(file_name, 1, dot_index - 1)\n \
    \   local digit_count = 0\n    for i = 1, #name do\n        if string.find(name,\
    \ '%d') then\n            digit_count = digit_count + 1\n        end\n    end\n\
    \    if digit_count > 3 then\n        return 'No'\n    end\n    if string.find(name,\
    \ '%a') ~= 1 then\n        return 'No'\n    end\n    if extension ~= 'txt' and\
    \ extension ~= 'exe' and extension ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx3tn1v5.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpzx3tn1v5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = 0\n    local ext = ''\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c == '.' then\n      \
    \      dot = dot + 1\n        elseif c:match('%d') then\n            digits =\
    \ digits + 1\n        elseif dot == 0 then\n            if not c:match('%a') then\n\
    \                return 'No'\n            end\n        else\n            ext =\
    \ ext .. c\n        end\n    end\n    if digits > 3 or dot ~= 1 or ext == '' or\
    \ not ext:match('^txt$|^exe$|^dll$') then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiz5x6vsn.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpiz5x6vsn.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local num_digits = 0\n    local dot_found = false\n    local extension =\
    \ ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n  \
    \      if c == '.' then\n            dot_found = true\n        elseif c:match('%d')\
    \ then\n            num_digits = num_digits + 1\n        elseif dot_found then\n\
    \            extension = extension .. c\n        end\n    end\n    if num_digits\
    \ > 3 or not dot_found or #extension == 0 or not file_name:match('^[%a]') then\n\
    \        return 'No'\n    end\n    if extension == 'txt' or extension == 'exe'\
    \ or extension == 'dll' then\n        return 'Yes'\n    end\n    return 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvud23uc.lua:62:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpyvud23uc.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnni5t366.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnni5t366.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local prefix = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n   \
    \ local prefix_valid = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')\n    local\
    \ suffix_valid = suffix == 'txt' or suffix == 'exe' or suffix == 'dll'\n    local\
    \ digit_count = string.gsub(prefix, '[^0-9]', '')\n    local digit_count_valid\
    \ = #digit_count <= 3\n    return (prefix_valid and suffix_valid and digit_count_valid)\
    \ and 'Yes' or 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wwaqog_.lua:29:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp9wwaqog_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif c:match('%d') then\n\
    \            digits = digits + 1\n        elseif dot_count == 0 then\n       \
    \     if not c:match('%a') then\n                return 'No'\n            end\n\
    \        else\n            ext = ext .. c\n        end\n    end\n    if digits\
    \ > 3 or dot_count ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftj2yoxz.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpftj2yoxz.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local file_name_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,3}%.[a-zA-Z]{3}$'\n   \
    \ return string.match(file_name, file_name_pattern) and 'Yes' or 'No'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm9xgfcy.lua:23:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpqm9xgfcy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif c:match('%d') then\n\
    \            digits = digits + 1\n        elseif dot_count == 0 then\n       \
    \     if not c:match('%a') then\n                return 'No'\n            end\n\
    \        else\n            ext = ext .. c\n        end\n    end\n    if digits\
    \ > 3 or dot_count ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07b_ab0y.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp07b_ab0y.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    for\
    \ i = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n         \
    \   dot_count = dot_count + 1\n            dot_index = i\n        end\n      \
    \  if file_name:sub(i, i):match('%d') then\n            count = count + 1\n  \
    \      end\n    end\n    if count > 3 then\n        return 'No'\n    end\n   \
    \ if dot_count ~= 1 then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ 1):match('%a') == nil then\n        return 'No'\n    end\n    extension = file_name:sub(dot_index\
    \ + 1, #file_name)\n    for i = 1, #valid_extensions do\n        if extension\
    \ == valid_extensions[i] then\n            return 'Yes'\n        end\n    end\n\
    \    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    local extension = file_name:sub(dot_index\
    \ + 1)\n    local name = file_name:sub(1, dot_index - 1)\n    local digit_count\
    \ = 0\n    for i = 1, #name do\n        if name:sub(i, i):match('%d') then\n \
    \           digit_count = digit_count + 1\n        end\n    end\n    if digit_count\
    \ > 3 then\n        return 'No'\n    end\n    if not name:match('^[a-zA-Z]') then\n\
    \        return 'No'\n    end\n    if extension ~= 'txt' and extension ~= 'exe'\
    \ and extension ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad78fnmo.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpad78fnmo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpwihbhq.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfpwihbhq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == '.' then\n            dot_count = dot_count + 1\n            dot_index =\
    \ i\n        end\n        if file_name:sub(i, i):match('%d') then\n          \
    \  count = count + 1\n        end\n    end\n    if count > 3 then\n        return\
    \ 'No'\n    end\n    if dot_count ~= 1 then\n        return 'No'\n    end\n  \
    \  if file_name:sub(1, dot_index - 1) == '' then\n        return 'No'\n    end\n\
    \    if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then\n        return\
    \ 'No'\n    end\n    extension = file_name:sub(dot_index + 1, #file_name)\n  \
    \  if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local dot_pos_2 = string.find(file_name,\
    \ '.', dot_pos + 1)\n    local digits_count = 0\n    local file_name_len = string.len(file_name)\n\
    \    for i = 1, file_name_len do\n        local char = string.sub(file_name, i,\
    \ i)\n        if char >= '0' and char <= '9' then\n            digits_count =\
    \ digits_count + 1\n        end\n    end\n    if digits_count > 3 or dot_pos_2\
    \ ~= nil then\n        return 'No'\n    end\n    local prefix = string.sub(file_name,\
    \ 1, dot_pos - 1)\n    local suffix = string.sub(file_name, dot_pos + 1, file_name_len)\n\
    \    if string.len(prefix) == 0 or string.len(suffix) == 0 then\n        return\
    \ 'No'\n    end\n    local first_char = string.sub(prefix, 1, 1)\n    if not (first_char\
    \ >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then\n\
    \        return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and\
    \ suffix ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmngq922n.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmngq922n.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local count = 0\n  local dot_index = 0\n  local dot_count = 0\n  local ext\
    \ = ''\n  for i = 1, #file_name do\n    if file_name:sub(i, i) == '.' then\n \
    \     dot_index = i\n      dot_count = dot_count + 1\n    end\n    if file_name:sub(i,\
    \ i):match('%d') then\n      count = count + 1\n    end\n  end\n  if count > 3\
    \ or dot_count ~= 1 then\n    return 'No'\n  end\n  if not file_name:sub(1, dot_index\
    \ - 1):match('^[a-zA-Z]') then\n    return 'No'\n  end\n  ext = file_name:sub(dot_index\
    \ + 1, #file_name)\n  if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    if not file_name:match('^[a-zA-Z]') then\n        return 'No'\n    end\n\
    \    if not file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.[a-zA-Z]+$') then\n      \
    \  return 'No'\n    end\n    if file_name:match('%d%d%d') then\n        return\
    \ 'No'\n    end\n    if not file_name:match('%.[a-zA-Z]+$') then\n        return\
    \ 'No'\n    end\n    local ext = file_name:match('%.[a-zA-Z]+$')\n    if ext ~=\
    \ '.txt' and ext ~= '.exe' and ext ~= '.dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2bxif0y.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpu2bxif0y.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local after_dot = ''\n    local\
    \ before_dot = ''\n    local dot_index = 0\n    for i = 1, #file_name do\n   \
    \     if file_name:sub(i, i) == '.' then\n            dot_count = dot_count +\
    \ 1\n            dot_index = i\n        end\n        if file_name:sub(i, i) >=\
    \ '0' and file_name:sub(i, i) <= '9' then\n            count = count + 1\n   \
    \     end\n    end\n    if count > 3 or dot_count ~= 1 then\n        return 'No'\n\
    \    end\n    before_dot = file_name:sub(1, dot_index - 1)\n    after_dot = file_name:sub(dot_index\
    \ + 1, #file_name)\n    if before_dot == '' or (before_dot:sub(1, 1) < 'a' or\
    \ before_dot:sub(1, 1) > 'z') and (before_dot:sub(1, 1) < 'A' or before_dot:sub(1,\
    \ 1) > 'Z') then\n        return 'No'\n    end\n    if after_dot ~= 'txt' and\
    \ after_dot ~= 'exe' and after_dot ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c >= '0'\
    \ and c <= '9' then\n            digits = digits + 1\n        elseif c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif dot_count == 0 then\n\
    \            if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then\n  \
    \              return 'No'\n            end\n        else\n            ext = ext\
    \ .. c\n        end\n    end\n    if digits > 3 or dot_count ~= 1 or ext ~= 'txt'\
    \ and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzlbo_jn.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpzzlbo_jn.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    local name\
    \ = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n\
    \        if c == '.' then\n            dot_count = dot_count + 1\n        elseif\
    \ c:match('%d') then\n            count = count + 1\n        end\n    end\n  \
    \  if dot_count ~= 1 then\n        return 'No'\n    end\n    if count > 3 then\n\
    \        return 'No'\n    end\n    name, ext = file_name:match('(.*)%.(.*)')\n\
    \    if name == '' then\n        return 'No'\n    end\n    if not name:match('^[a-zA-Z]')\
    \ then\n        return 'No'\n    end\n    if ext ~= 'txt' and ext ~= 'exe' and\
    \ ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c == '.' then\n            dot_count = dot_count + 1\n      \
    \      dot_index = i\n        elseif c:match('%d') then\n            digits =\
    \ digits + 1\n        end\n    end\n    if dot_count ~= 1 then\n        return\
    \ 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n    if #prefix\
    \ == 0 or not prefix:match('^[a-zA-Z]') then\n        return 'No'\n    end\n \
    \   extension = file_name:sub(dot_index + 1)\n    if digits > 3 or not extension:match('^txt$|^exe$|^dll$')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fxinyni.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp4fxinyni.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ig5l4bh.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6ig5l4bh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local num_digits = 0\n    local dot_found = false\n    local ext_found =\
    \ false\n    local ext_valid = false\n    local ext_start = 0\n    local ext_end\
    \ = 0\n    local ext = ''\n    local name_start = 0\n    local name_end = 0\n\
    \    local name = ''\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c == '.' then\n            dot_found = true\n            ext_start\
    \ = i + 1\n        elseif dot_found then\n            ext_end = i\n          \
    \  ext = file_name:sub(ext_start, ext_end)\n            ext_found = true\n   \
    \         break\n        elseif c:match('%d') then\n            num_digits = num_digits\
    \ + 1\n        end\n    end\n    if ext_found then\n        ext_valid = ext ==\
    \ 'txt' or ext == 'exe' or ext == 'dll'\n    end\n    if ext_found and ext_valid\
    \ then\n        name_end = ext_start - 2\n        name = file_name:sub(1, name_end)\n\
    \        if name:match('^%a') and num_digits <= 3 then\n            return 'Yes'\n\
    \        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0mkj1_q.lua:56:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpd0mkj1_q.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2zjasm2.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn2zjasm2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal dot_pos = file_name:find('.')\n\tif not dot_pos then\n\t\treturn 'No'\n\
    \tend\n\tlocal prefix = file_name:sub(1, dot_pos - 1)\n\tlocal suffix = file_name:sub(dot_pos\
    \ + 1)\n\tif #prefix == 0 or prefix:find('%d') or not prefix:find('%a') then\n\
    \t\treturn 'No'\n\tend\n\tif #prefix:gsub('%d', '') > 3 then\n\t\treturn 'No'\n\
    \tend\n\tif suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n\t\t\
    return 'No'\n\tend\n\treturn 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnie4fjfg.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnie4fjfg.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if dot_index == nil then\n   \
    \     return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if prefix:match('%d') ==\
    \ nil and prefix:match('^[a-zA-Z]') and suffix:match('^txt$') or suffix:match('^exe$')\
    \ or suffix:match('^dll$') then\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9e6ufa.lua:32:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpc_9e6ufa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local ext_index = 0\n    local\
    \ ext_length = 0\n    local ext_name = ''\n    local valid_ext = {'txt', 'exe',\
    \ 'dll'}\n    local valid_ext_count = 0\n    local valid_ext_index = 0\n    local\
    \ valid_ext_name = ''\n    local valid_ext_length = 0\n    local valid_ext_name_length\
    \ = 0\n    local valid_ext_name_index = 0\n    local valid_ext_name_count = 0\n\
    \    local valid_ext_name_count_index = 0\n    local valid_ext_name_count_index_count\
    \ = 0\n    local valid_ext_name_count_index_count_index = 0\n    local valid_ext_name_count_index_count_index_count\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index = 0\n    local\
    \ valid_ext_name_count_index_count_index_count_index_count = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4z6qkdm4.lua:76: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extension = false\n    local valid_name = false\n    local valid_number\
    \ = false\n    local valid_dot = false\n    local valid_extension = false\n  \
    \  local valid_file_name = false\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuljhz6ql.lua:59: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_index = i\n            dot_count = dot_count + 1\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if count > 3 or dot_count ~= 1 then\n\
    \        return 'No'\n    end\n    if file_name:sub(1, dot_index - 1):match('%a')\
    \ == nil then\n        return 'No'\n    end\n    ext = file_name:sub(dot_index\
    \ + 1, #file_name)\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh3j88q1.lua:46:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpjh3j88q1.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    local ext_list = {'txt', 'exe', 'dll'}\n    local valid_ext =\
    \ false\n    local valid_name = false\n    local valid_num = false\n    local\
    \ valid_ext = false\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == '.' then\n            dot_count = dot_count + 1\n            dot_index\
    \ = i\n        end\n        if file_name:sub(i, i):match('%d') then\n        \
    \    count = count + 1\n        end\n    end\n    if count > 3 then\n        valid_num\
    \ = false\n    else\n        valid_num = true\n    end\n    if dot_count == 1\
    \ then\n        valid_ext = true\n    else\n        valid_ext = false\n    end\n\
    \    if file_name:sub(1, 1):match('%a') then\n        valid_name = true\n    else\n\
    \        valid_name = false\n    end\n    ext = file_name:sub(dot_index + 1, #file_name)\n\
    \    for i = 1, #ext_list do\n        if ext == ext_list[i] then\n           \
    \ valid_ext = true\n        end\n    end\n    if valid_num and valid_ext and valid_name\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lncd6dw.lua:67:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp9lncd6dw.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count_digits = 0\n    local count_dot = 0\n    local count_letters\
    \ = 0\n    local count_letters_after_dot = 0\n    local count_letters_before_dot\
    \ = 0\n    local count_letters_after_dot_txt = 0\n    local count_letters_after_dot_exe\
    \ = 0\n    local count_letters_after_dot_dll = 0\n    local count_letters_after_dot_txt_exe_dll\
    \ = 0\n    local count_letters_before_dot_txt = 0\n    local count_letters_before_dot_exe\
    \ = 0\n    local count_letters_before_dot_dll = 0\n    local count_letters_before_dot_txt_exe_dll\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot_exe = 0\n    local count_letters_before_dot_txt_exe_dll_dot_dll\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll = 0\n  \
    \  local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt = 0\n    local\
    \ count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_exe = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_dll\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll_txt\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll_exe\
    \ = 0\n    local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll_dll\
    \ = 0\n    local count_letters_before_dot_txt_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0xtrci10.lua:74: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ ext = ''\n    local ext_list = {'txt', 'exe', 'dll'}\n    local ext_valid =\
    \ false\n    local ext_index = 0\n    local ext_count = 0\n    local ext_char\
    \ = ''\n    local ext_char_valid = false\n    local ext_char_index = 0\n    local\
    \ ext_char_count = 0\n    local ext_char_list = {'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}\n    local\
    \ ext_char_valid_list = {}\n    local ext_char_valid_index = 0\n    local ext_char_valid_count\
    \ = 0\n    local ext_char_valid_char = ''\n    local ext_char_valid_char_index\
    \ = 0\n    local ext_char_valid_char_count = 0\n    local ext_char_valid_char_list\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W',\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpauv89vvo.lua:38: '}' expected (to close '{' at line 35) near\
    \ 'function'\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = file_name:find('.')\n    if not dot_index then\n      \
    \  return 'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n\
    \    local suffix = file_name:sub(dot_index + 1)\n    if #prefix == 0 or #prefix\
    \ > 8 or #suffix == 0 or #suffix > 3 or\n        prefix:find('%d') or not prefix:find('%a')\
    \ or\n        not (suffix == 'txt' or suffix == 'exe' or suffix == 'dll') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu01m09m.lua:33:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbu01m09m.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vk4ar0r.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9vk4ar0r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = 0\n    local dot_found = false\n  \
    \  local ext_found = false\n    local ext_pos = 0\n    local ext_len = 0\n   \
    \ local ext_valid = false\n    local ext_valid_list = {'txt', 'exe', 'dll'}\n\
    \    local ext_valid_list_len = #ext_valid_list\n    local ext_valid_list_len_1\
    \ = ext_valid_list_len - 1\n    local ext_valid_list_len_2 = ext_valid_list_len\
    \ - 2\n    local ext_valid_list_len_3 = ext_valid_list_len - 3\n    local ext_valid_list_len_4\
    \ = ext_valid_list_len - 4\n    local ext_valid_list_len_5 = ext_valid_list_len\
    \ - 5\n    local ext_valid_list_len_6 = ext_valid_list_len - 6\n    local ext_valid_list_len_7\
    \ = ext_valid_list_len - 7\n    local ext_valid_list_len_8 = ext_valid_list_len\
    \ - 8\n    local ext_valid_list_len_9 = ext_valid_list_len - 9\n    local ext_valid_list_len_10\
    \ = ext_valid_list_len - 10\n    local ext_valid_list_len_11 = ext_valid_list_len\
    \ - 11\n    local ext_valid_list_len_12 = ext_valid_list_len - 12\n    local ext_valid_list_len_13\
    \ = ext_valid_list_len - 13\n    local ext_valid_list_len_14 = ext_valid_list_len\
    \ - 14\n    local ext_valid_list_len_15 = ext_valid_list_len - 15\n    local ext_valid_list_len_16\
    \ = ext_valid_list_len - 16\n    local ext_valid_list_len_17 = ext_valid_list_len\
    \ - 17\n    local ext_valid_list_len_18 = ext_valid_list_len - 18\n    local ext_valid_list_len_19\
    \ = ext_valid_list_len - 19\n    local\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp433a323h.lua:77: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    if dot_pos == nil then\n       \
    \ return 'No'\n    end\n    local prefix = file_name:sub(1, dot_pos - 1)\n   \
    \ local suffix = file_name:sub(dot_pos + 1)\n    if #prefix == 0 or #prefix >\
    \ 8 or #suffix == 0 or #suffix > 3 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, #prefix do\n        local c = prefix:sub(i,\
    \ i)\n        if c >= '0' and c <= '9' then\n            prefix_digit_count =\
    \ prefix_digit_count + 1\n        end\n    end\n    if prefix_digit_count > 3\
    \ then\n        return 'No'\n    end\n    local prefix_first_char = prefix:sub(1,\
    \ 1)\n    if prefix_first_char < 'a' or prefix_first_char > 'z' and prefix_first_char\
    \ < 'A' or prefix_first_char > 'Z' then\n        return 'No'\n    end\n    if\
    \ suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpair3m6il.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpair3m6il.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ digit_count = 0\n    local extension = ''\n    local valid_extensions = {'txt',\
    \ 'exe', 'dll'}\n    local valid_extension = false\n    local valid_name = false\n\
    \    local valid_digit_count = false\n    local valid_dot_count = false\n    local\
    \ valid_extension_count = false\n    local valid_name_count = false\n    local\
    \ valid_name_start = false\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == '.' then\n            dot_index = i\n            dot_count = dot_count\
    \ + 1\n        end\n        if file_name:sub(i, i):match('%d') then\n        \
    \    digit_count = digit_count + 1\n        end\n    end\n    if digit_count <=\
    \ 3 then\n        valid_digit_count = true\n    end\n    if dot_count == 1 then\n\
    \        valid_dot_count = true\n    end\n    if dot_index ~= 1 then\n       \
    \ valid_name_count = true\n    end\n    if file_name:sub(1, 1):match('%a') then\n\
    \        valid_name_start = true\n    end\n    if valid_digit_count and valid_dot_count\
    \ and valid_name_count and valid_name_start then\n        valid_name = true\n\
    \    end\n    extension = file_name:sub(dot_index + 1, #file_name)\n    for i\
    \ = 1, #valid_extensions do\n        if extension == valid_extensions[i] then\n\
    \            valid_extension = true\n        end\n    end\n    if valid_extension\
    \ then\n        valid_extension_count = true\n    end\n    if valid_name and valid_extension_count\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local ext = string.sub(file_name,\
    \ dot_index + 1)\n    local name = string.sub(file_name, 1, dot_index - 1)\n \
    \   local digits = 0\n    for i = 1, string.len(name) do\n        local c = string.sub(name,\
    \ i, i)\n        if c >= '0' and c <= '9' then\n            digits = digits +\
    \ 1\n        end\n    end\n    if digits > 3 then\n        return 'No'\n    end\n\
    \    if string.find(name, '%a') ~= 1 then\n        return 'No'\n    end\n    if\
    \ ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n \
    \   end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4avo8q1.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpd4avo8q1.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_pos = 0\n    local dot_count = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_pos = i\n            dot_count = dot_count + 1\n     \
    \   end\n        if file_name:sub(i, i):match('%d') then\n            count =\
    \ count + 1\n        end\n    end\n    if count > 3 or dot_count ~= 1 then\n \
    \       return 'No'\n    end\n    if file_name:sub(1, dot_pos - 1):match('%a')\
    \ == nil then\n        return 'No'\n    end\n    ext = file_name:sub(dot_pos +\
    \ 1, #file_name)\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60lkls0s.lua:46:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp60lkls0s.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \tlocal dot_index = string.find(file_name, '.')\n\tlocal extension = string.sub(file_name,\
    \ dot_index + 1)\n\tlocal digits_count = 0\n\tlocal digits = '0123456789'\n\t\
    for i = 1, #file_name do\n\t\tlocal char = string.sub(file_name, i, i)\n\t\tif\
    \ string.find(digits, char) then\n\t\t\tdigits_count = digits_count + 1\n\t\t\
    end\n\tend\n\tif digits_count > 3 then\n\t\treturn 'No'\n\tend\n\tif string.find(file_name,\
    \ '%.') ~= dot_index then\n\t\treturn 'No'\n\tend\n\tif string.sub(file_name,\
    \ 1, dot_index - 1) == '' then\n\t\treturn 'No'\n\tend\n\tif string.find(file_name,\
    \ '%a') ~= 1 then\n\t\treturn 'No'\n\tend\n\tif extension ~= 'txt' and extension\
    \ ~= 'exe' and extension ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvq6ihmrs.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpvq6ihmrs.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if dot_count ~= 1 then\n        return\
    \ 'No'\n    end\n    if count > 3 then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ dot_index - 1):match('%a') == nil then\n        return 'No'\n    end\n    ext\
    \ = file_name:sub(dot_index + 1, #file_name)\n    if ext ~= 'txt' and ext ~= 'exe'\
    \ and ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq1vy4bf.lua:49:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpiq1vy4bf.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local count = 0\n  local dot_count = 0\n  local dot_index = 0\n  local ext\
    \ = ''\n  local ext_list = {'txt', 'exe', 'dll'}\n  local valid_ext = false\n\
    \  local valid_name = false\n  local valid_count = false\n  local valid_dot =\
    \ false\n  local valid_ext_count = false\n  for i = 1, #file_name do\n    if file_name:sub(i,\
    \ i) == '.' then\n      dot_count = dot_count + 1\n      dot_index = i\n    end\n\
    \    if file_name:sub(i, i):match('%d') then\n      count = count + 1\n    end\n\
    \  end\n  if count <= 3 then\n    valid_count = true\n  end\n  if dot_count ==\
    \ 1 then\n    valid_dot = true\n  end\n  if dot_index > 1 then\n    valid_name\
    \ = true\n  end\n  if file_name:sub(dot_index + 1, dot_index + 3) == 'txt' or\n\
    \     file_name:sub(dot_index + 1, dot_index + 3) == 'exe' or\n     file_name:sub(dot_index\
    \ + 1, dot_index + 3) == 'dll' then\n    valid_ext = true\n  end\n  if valid_count\
    \ and valid_dot and valid_name and valid_ext then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8b_y0ha.lua:60:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpo8b_y0ha.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif c:match('%d') then\n\
    \            digits = digits + 1\n        elseif dot_count == 0 then\n       \
    \     if not c:match('%a') then\n                return 'No'\n            end\n\
    \        else\n            ext = ext .. c\n        end\n    end\n    if digits\
    \ > 3 or dot_count ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7byr3kt8.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7byr3kt8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext_index = 0\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == '.' then\n            dot_count = dot_count + 1\n            dot_index =\
    \ i\n        end\n        if file_name:sub(i, i) >= '0' and file_name:sub(i, i)\
    \ <= '9' then\n            count = count + 1\n        end\n    end\n    if count\
    \ > 3 or dot_count ~= 1 then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ 1) < 'A' or file_name:sub(1, 1) > 'z' then\n        return 'No'\n    end\n \
    \   ext_index = dot_index + 1\n    if file_name:sub(ext_index, ext_index + 2)\
    \ ~= 'txt' and file_name:sub(ext_index, ext_index + 2) ~= 'exe' and file_name:sub(ext_index,\
    \ ext_index + 2) ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7a9rsjs.lua:51:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpi7a9rsjs.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bv86hq6.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7bv86hq6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext_index = 0\n    local ext = ''\n    for i = 1, #file_name do\n        if\
    \ file_name:sub(i, i) == '.' then\n            dot_count = dot_count + 1\n   \
    \         dot_index = i\n        end\n        if file_name:sub(i, i) >= '0' and\
    \ file_name:sub(i, i) <= '9' then\n            count = count + 1\n        end\n\
    \    end\n    if count > 3 then\n        return 'No'\n    end\n    if dot_count\
    \ ~= 1 then\n        return 'No'\n    end\n    ext_index = dot_index + 1\n   \
    \ ext = file_name:sub(ext_index, #file_name)\n    if ext ~= 'txt' and ext ~= 'exe'\
    \ and ext ~= 'dll' then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ 1) < 'a' or file_name:sub(1, 1) > 'z' then\n        if file_name:sub(1, 1) <\
    \ 'A' or file_name:sub(1, 1) > 'Z' then\n            return 'No'\n        end\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    local ext_valid = false\n    local ext_valid_list = {'txt', 'exe',\
    \ 'dll'}\n    local ext_valid_list_len = #ext_valid_list\n    local ext_valid_list_len_minus_one\
    \ = ext_valid_list_len - 1\n    local ext_valid_list_len_minus_two = ext_valid_list_len\
    \ - 2\n    local ext_valid_list_len_minus_three = ext_valid_list_len - 3\n   \
    \ local ext_valid_list_len_minus_four = ext_valid_list_len - 4\n    local ext_valid_list_len_minus_five\
    \ = ext_valid_list_len - 5\n    local ext_valid_list_len_minus_six = ext_valid_list_len\
    \ - 6\n    local ext_valid_list_len_minus_seven = ext_valid_list_len - 7\n   \
    \ local ext_valid_list_len_minus_eight = ext_valid_list_len - 8\n    local ext_valid_list_len_minus_nine\
    \ = ext_valid_list_len - 9\n    local ext_valid_list_len_minus_ten = ext_valid_list_len\
    \ - 10\n    local ext_valid_list_len_minus_eleven = ext_valid_list_len - 11\n\
    \    local ext_valid_list_len_minus_twelve = ext_valid_list_len - 12\n    local\
    \ ext_valid_list_len_minus_thirteen = ext_valid_list_len - 13\n    local ext_valid_list_len_minus_fourteen\
    \ = ext_valid_list_len - 14\n    local ext_valid_list_len_minus_fifteen = ext_valid_list_len\
    \ - 15\n    local ext_valid_list_len_minus_sixteen = ext_valid_list_len - 16\n\
    \    local ext_valid_list_len_minus_seventeen = ext_valid_list_len - 17\n    local\
    \ ext_valid_list_len_minus_eighteen = ext_valid_list_len\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr8401e_1.lua:73: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    local file_name_without_extension\
    \ = file_name:sub(1, dot_pos - 1)\n    local file_extension = file_name:sub(dot_pos\
    \ + 1)\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local valid_extension\
    \ = false\n    for _, extension in ipairs(valid_extensions) do\n        if extension\
    \ == file_extension then\n            valid_extension = true\n            break\n\
    \        end\n    end\n    local valid_file_name = file_name_without_extension:match('^[a-zA-Z]%w*$')\n\
    \    local valid_number_of_digits = file_name_without_extension:match('%d') ==\
    \ nil\n    if valid_file_name and valid_number_of_digits and valid_extension then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmoiooi_0.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmoiooi_0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local function is_valid_extension(extension)\n        return extension ==\
    \ 'txt' or extension == 'exe' or extension == 'dll'\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmopl0f5d.lua:51: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_count = 0\n    local ext = ''\n    for i\
    \ = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c == '.'\
    \ then\n            dot_count = dot_count + 1\n        elseif c:match('%d') then\n\
    \            digits = digits + 1\n        elseif dot_count == 0 then\n       \
    \     if not c:match('%a') then\n                return 'No'\n            end\n\
    \        else\n            ext = ext .. c\n        end\n    end\n    if digits\
    \ > 3 or dot_count ~= 1 or ext == '' or not ext:match('txt$') and not ext:match('exe$')\
    \ and not ext:match('dll$') then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr5i9vk3.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpmr5i9vk3.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    if dot_index == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n    local prefix_valid\
    \ = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')\n    local suffix_valid = suffix\
    \ == 'txt' or suffix == 'exe' or suffix == 'dll'\n    if prefix_valid and suffix_valid\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxwvbyu9.lua:34:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbxwvbyu9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext_count = 0\n    local\
    \ ext_list = {'txt', 'exe', 'dll'}\n    local ext_name = ''\n    local file_name_len\
    \ = string.len(file_name)\n    for i = 1, file_name_len do\n        local char\
    \ = string.sub(file_name, i, i)\n        if char == '.' then\n            dot_count\
    \ = dot_count + 1\n            ext_count = 1\n        elseif ext_count == 1 then\n\
    \            ext_name = ext_name .. char\n        elseif char >= '0' and char\
    \ <= '9' then\n            count = count + 1\n        end\n    end\n    if count\
    \ > 3 or dot_count ~= 1 or ext_count == 0 then\n        return 'No'\n    end\n\
    \    for _, ext in ipairs(ext_list) do\n        if ext == ext_name then\n    \
    \        return 'Yes'\n        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj83g6tol.lua:48:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpj83g6tol.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext_index = 0\n    local ext_len = 0\n    local ext = ''\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c == '.' then\n      \
    \      dot_count = dot_count + 1\n            dot_index = i\n        elseif c\
    \ >= '0' and c <= '9' then\n            count = count + 1\n        end\n    end\n\
    \    if count > 3 or dot_count ~= 1 then\n        return 'No'\n    end\n    ext_index\
    \ = dot_index + 1\n    ext_len = #file_name - ext_index + 1\n    ext = file_name:sub(ext_index,\
    \ ext_index + ext_len - 1)\n    if ext == 'txt' or ext == 'exe' or ext == 'dll'\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4q9qegj.lua:48:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpx4q9qegj.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    if dot_index == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[0-9]') ~= nil then\n        return 'No'\n    end\n    if string.find(prefix,\
    \ '[a-zA-Z]') == nil then\n        return 'No'\n    end\n    if string.len(string.gsub(prefix,\
    \ '[0-9]', '')) ~= string.len(prefix) then\n        return 'No'\n    end\n   \
    \ if string.len(string.gsub(prefix, '[0-9]', '')) > 3 then\n        return 'No'\n\
    \    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y7xlutd.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1y7xlutd.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3bmkve6.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpw3bmkve6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local extension_list = {'txt', 'exe', 'dll'}\n    for i\
    \ = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n           \
    \ dot_count = dot_count + 1\n            dot_index = i\n        end\n        if\
    \ file_name:sub(i, i):match('%d') then\n            count = count + 1\n      \
    \  end\n    end\n    if count > 3 then\n        return 'No'\n    end\n    if dot_count\
    \ ~= 1 then\n        return 'No'\n    end\n    if file_name:sub(1, dot_index -\
    \ 1) == '' then\n        return 'No'\n    end\n    if not file_name:sub(1, dot_index\
    \ - 1):match('%a') then\n        return 'No'\n    end\n    extension = file_name:sub(dot_index\
    \ + 1, #file_name)\n    for i = 1, #extension_list do\n        if extension ==\
    \ extension_list[i] then\n            return 'Yes'\n        end\n    end\n   \
    \ return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9t17raj.lua:55:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpn9t17raj.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    local dot_index_2 = string.find(file_name,\
    \ '.', dot_index + 1)\n    local before_dot = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local after_dot = string.sub(file_name, dot_index + 1)\n    local\
    \ digit_count = 0\n    for i = 1, #before_dot do\n        if string.find('0123456789',\
    \ string.sub(before_dot, i, i)) then\n            digit_count = digit_count +\
    \ 1\n        end\n    end\n    if digit_count > 3 or dot_index_2 ~= nil or string.len(before_dot)\
    \ == 0 or string.find('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ string.sub(before_dot, 1, 1)) == nil or (after_dot ~= 'txt' and after_dot ~=\
    \ 'exe' and after_dot ~= 'dll') then\n        return 'No'\n    else\n        return\
    \ 'Yes'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_d15frb.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7_d15frb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext_index = 0\n    local ext_len = 0\n    local ext_list = {'txt', 'exe', 'dll'}\n\
    \    local ext_found = false\n    local valid_ext = false\n    local valid_name\
    \ = false\n    local valid_count = false\n    local valid_dot = false\n    local\
    \ valid_ext_len = false\n    local valid_ext_start = false\n    local valid_ext_end\
    \ = false\n    local valid_ext_list = false\n    local valid_ext_found = false\n\
    \    local valid_ext_valid = false\n    local valid_ext_invalid = false\n    local\
    \ valid_ext_invalid_list = false\n    local valid_ext_invalid_start = false\n\
    \    local valid_ext_invalid_end = false\n    local valid_ext_invalid_len = false\n\
    \    local valid_ext_invalid_dot = false\n    local valid_ext_invalid_count =\
    \ false\n    local valid_ext_invalid_name = false\n    local valid_ext_invalid_name_start\
    \ = false\n    local valid_ext_invalid_name_end = false\n    local valid_ext_invalid_name_len\
    \ = false\n    local valid_ext_invalid_name_dot = false\n    local valid_ext_invalid_name_count\
    \ = false\n    local valid_ext_invalid_name_start_end = false\n    local valid_ext_invalid_name_start_len\
    \ = false\n    local valid_ext_invalid_name_start_dot = false\n    local valid_ext_invalid_name_start_count\
    \ = false\n    local valid_ext_invalid_name_end_len = false\n    local valid_ext_invalid_name_end_dot\
    \ = false\n    local valid_ext_invalid_name_end_count = false\n    local valid_ext_invalid_name_len_dot\
    \ = false\n    local valid_ext_invalid_name_len_count = false\n    local valid_ext_invalid_name_dot_count\
    \ = false\n    local valid_ext_invalid\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjwmdgp2h.lua:89: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos\
    \ - 1)\n    local suffix = string.sub(file_name, dot_pos + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, string.len(prefix) do\n        local\
    \ c = string.sub(prefix, i, i)\n        if c >= '0' and c <= '9' then\n      \
    \      prefix_digit_count = prefix_digit_count + 1\n        end\n    end\n   \
    \ if prefix_digit_count > 3 then\n        return 'No'\n    end\n    local c =\
    \ string.sub(prefix, 1, 1)\n    if (c < 'a' or c > 'z') and (c < 'A' or c > 'Z')\
    \ then\n        return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe'\
    \ and suffix ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7z9fa1d.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_7z9fa1d.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot_pos = 0\n    local ext = ''\n    for i =\
    \ 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c >= '0'\
    \ and c <= '9' then\n            digits = digits + 1\n        elseif c == '.'\
    \ then\n            dot_pos = i\n        end\n    end\n    if digits > 3 then\n\
    \        return 'No'\n    end\n    if dot_pos == 0 then\n        return 'No'\n\
    \    end\n    if dot_pos == 1 then\n        return 'No'\n    end\n    if dot_pos\
    \ == #file_name then\n        return 'No'\n    end\n    ext = file_name:sub(dot_pos\
    \ + 1)\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiwcs7d7.lua:50:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpsiwcs7d7.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    for i =\
    \ 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n            dot_count\
    \ = dot_count + 1\n        end\n        if file_name:sub(i, i):match('%d') then\n\
    \            count = count + 1\n        end\n    end\n    if dot_count ~= 1 then\n\
    \        return 'No'\n    end\n    if count > 3 then\n        return 'No'\n  \
    \  end\n    if file_name:sub(1, 1):match('%a') then\n        ext = file_name:sub(#file_name\
    \ - 2, #file_name)\n        if ext == 'txt' or ext == 'exe' or ext == 'dll' then\n\
    \            return 'Yes'\n        end\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1676axr.lua:56:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmps1676axr.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    if not dot_pos then\n        return\
    \ 'No'\n    end\n    local prefix = file_name:sub(1, dot_pos - 1)\n    local suffix\
    \ = file_name:sub(dot_pos + 1)\n    if not prefix:match('^[a-zA-Z]') or prefix:match('%d')\
    \ then\n        return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe'\
    \ and suffix ~= 'dll' then\n        return 'No'\n    end\n    if prefix:match('%d')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9aiu5y04.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp9aiu5y04.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_lqfsxa.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpx_lqfsxa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq2u0wdm.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpoq2u0wdm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if count > 3 or dot_count ~= 1 then\n\
    \        return 'No'\n    end\n    ext = file_name:sub(dot_index + 1)\n    if\
    \ ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n \
    \   end\n    if file_name:sub(1, dot_index - 1):match('%a') then\n        return\
    \ 'Yes'\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf88kgnw3.lua:46:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpf88kgnw3.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = 0\n    local ext = ''\n    for c in file_name:gmatch('.')\
    \ do\n        if c:match('%d') then\n            digits = digits + 1\n       \
    \ elseif c == '.' then\n            dot = dot + 1\n        elseif dot == 1 then\n\
    \            ext = ext .. c\n        end\n    end\n    if digits > 3 or dot ~=\
    \ 1 or not file_name:match('^[a-zA-Z]') or not\n        (ext == 'txt' or ext ==\
    \ 'exe' or ext == 'dll') then\n        return 'No'\n    end\n    return 'Yes'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local ext = string.sub(file_name,\
    \ dot_pos + 1)\n    local name = string.sub(file_name, 1, dot_pos - 1)\n    local\
    \ digit_count = 0\n    for i = 1, string.len(name) do\n        local c = string.sub(name,\
    \ i, i)\n        if c >= '0' and c <= '9' then\n            digit_count = digit_count\
    \ + 1\n        end\n    end\n    if digit_count > 3 then\n        return 'No'\n\
    \    end\n    local first_char = string.sub(name, 1, 1)\n    if not (first_char\
    \ >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then\n\
    \        return 'No'\n    end\n    if ext ~= 'txt' and ext ~= 'exe' and ext ~=\
    \ 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lrp7a7q.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8lrp7a7q.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    local valid_ext = {'txt', 'exe', 'dll'}\n    local valid_ext_count\
    \ = 0\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n\
    \            dot_count = dot_count + 1\n            dot_index = i\n        end\n\
    \        if file_name:sub(i, i):match('%d') then\n            count = count +\
    \ 1\n        end\n    end\n    if count > 3 then\n        return 'No'\n    end\n\
    \    if dot_count ~= 1 then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ dot_index - 1) == '' then\n        return 'No'\n    end\n    if not file_name:sub(1,\
    \ dot_index - 1):match('^[a-zA-Z]') then\n        return 'No'\n    end\n    ext\
    \ = file_name:sub(dot_index + 1, #file_name)\n    for i = 1, #valid_ext do\n \
    \       if ext == valid_ext[i] then\n            valid_ext_count = valid_ext_count\
    \ + 1\n        end\n    end\n    if valid_ext_count == 0 then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2iyjuunf.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2iyjuunf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- your code here\n    local count = 0\n    local dot_count = 0\n    local\
    \ dot_index = 0\n    local extension = ''\n    for i = 1, #file_name do\n    \
    \    if file_name:sub(i, i) == '.' then\n            dot_count = dot_count + 1\n\
    \            dot_index = i\n        end\n        if file_name:sub(i, i):match('%d')\
    \ then\n            count = count + 1\n        end\n    end\n    if count > 3\
    \ or dot_count ~= 1 or file_name:sub(1, 1):match('%d') or file_name:sub(1, dot_index\
    \ - 1) == '' then\n        return 'No'\n    end\n    extension = file_name:sub(dot_index\
    \ + 1, #file_name)\n    if extension == 'txt' or extension == 'exe' or extension\
    \ == 'dll' then\n        return 'Yes'\n    end\n    return 'No'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytguux7c.lua:49:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpytguux7c.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local function check_digits(file_name)\n        local count = 0\n       \
    \ for i = 1, #file_name do\n            if file_name:sub(i, i) >= '0' and file_name:sub(i,\
    \ i) <= '9' then\n                count = count + 1\n            end\n       \
    \ end\n        return count <= 3\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf96c6q2o.lua:57: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_index = string.find(file_name, '.')\n    if dot_index == nil then\n\
    \        return 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_index\
    \ - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n    if string.len(prefix)\
    \ == 0 or string.len(suffix) == 0 then\n        return 'No'\n    end\n    local\
    \ prefix_digit_count = 0\n    for i = 1, string.len(prefix) do\n        local\
    \ c = string.sub(prefix, i, i)\n        if c >= '0' and c <= '9' then\n      \
    \      prefix_digit_count = prefix_digit_count + 1\n        end\n    end\n   \
    \ if prefix_digit_count > 3 then\n        return 'No'\n    end\n    if string.sub(prefix,\
    \ 1, 1) < 'A' or string.sub(prefix, 1, 1) > 'z' then\n        return 'No'\n  \
    \  end\n    if not (suffix == 'txt' or suffix == 'exe' or suffix == 'dll') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eok36jr.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp3eok36jr.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_index = 0\n    local dot_count = 0\n    local\
    \ extension = ''\n    local extension_check = false\n    for i = 1, #file_name\
    \ do\n        if file_name:sub(i, i) == '.' then\n            dot_index = i\n\
    \            dot_count = dot_count + 1\n        end\n        if file_name:sub(i,\
    \ i) >= '0' and file_name:sub(i, i) <= '9' then\n            count = count + 1\n\
    \        end\n    end\n    if dot_count ~= 1 then\n        return 'No'\n    end\n\
    \    if count > 3 then\n        return 'No'\n    end\n    if file_name:sub(1,\
    \ 1) < 'A' or file_name:sub(1, 1) > 'z' then\n        return 'No'\n    end\n \
    \   if file_name:sub(1, 1) > 'Z' and file_name:sub(1, 1) < 'a' then\n        return\
    \ 'No'\n    end\n    extension = file_name:sub(dot_index + 1, #file_name)\n  \
    \  if extension == 'txt' or extension == 'exe' or extension == 'dll' then\n  \
    \      extension_check = true\n    end\n    if extension_check then\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local digits = 0\n  local dot = 0\n  local ext = ''\n  local name = ''\n  for\
    \ i = 1, #file_name do\n    local c = file_name:sub(i, i)\n    if c == '.' then\n\
    \      dot = dot + 1\n    elseif c:match('%d') then\n      digits = digits + 1\n\
    \    elseif dot == 0 then\n      name = name .. c\n    else\n      ext = ext ..\
    \ c\n    end\n  end\n  if dot ~= 1 or digits > 3 or name == '' or not name:match('^%a')\
    \ or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n    return 'No'\n  else\n\
    \    return 'Yes'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehvc5w3d.lua:43:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpehvc5w3d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    for i = 1, #file_name do\n        if file_name:sub(i, i) == '.'\
    \ then\n            dot_count = dot_count + 1\n            dot_index = i\n   \
    \     end\n        if file_name:sub(i, i):match('%d') then\n            count\
    \ = count + 1\n        end\n    end\n    if count > 3 or dot_count ~= 1 then\n\
    \        return 'No'\n    end\n    if file_name:sub(1, 1):match('%a') == nil then\n\
    \        return 'No'\n    end\n    ext = file_name:sub(dot_index + 1, #file_name)\n\
    \    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxeemfbw2.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxeemfbw2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ extension = ''\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extensions_count = #valid_extensions\n    local valid_extensions_index\
    \ = 0\n    local valid_extensions_found = false\n    local valid_extensions_found_count\
    \ = 0\n    local valid_extensions_found_index = 0\n    local valid_extensions_found_index_count\
    \ = 0\n    local valid_extensions_found_index_count_index = 0\n    local valid_extensions_found_index_count_index_count\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index = 0\n  \
    \  local valid_extensions_found_index_count_index_count_index_count = 0\n    local\
    \ valid_extensions_found_index_count_index_count_index_count_index = 0\n    local\
    \ valid_extensions_found_index_count_index_count_index_count_index_count = 0\n\
    \    local valid_extensions_found_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n    local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n    local valid_extensions_found_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps1pl12es.lua:73: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local ext = string.sub(file_name,\
    \ dot_pos + 1)\n    local name = string.sub(file_name, 1, dot_pos - 1)\n    local\
    \ digits = 0\n    for i = 1, #name do\n        local c = string.sub(name, i, i)\n\
    \        if c >= '0' and c <= '9' then\n            digits = digits + 1\n    \
    \    end\n    end\n    if digits > 3 then\n        return 'No'\n    end\n    if\
    \ string.find(name, '%a') ~= 1 then\n        return 'No'\n    end\n    if ext\
    \ ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgusxbnu_.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpgusxbnu_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext = ''\n    local ext_valid = false\n    local ext_list = {'txt', 'exe', 'dll'}\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n    local valid_name = false\n    local valid_ext\
    \ = false\n    local valid_name = false\n    local valid_ext = false\n    local\
    \ valid_name = false\n    local valid_ext = false\n    local valid_name = false\n\
    \    local valid_ext = false\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5zr0vt3i.lua:112: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local ext = ''\n    for i =\
    \ 1, #file_name do\n        if file_name:sub(i, i) == '.' then\n            dot_count\
    \ = dot_count + 1\n        end\n        if file_name:sub(i, i):match('%d') then\n\
    \            count = count + 1\n        end\n    end\n    if count > 3 then\n\
    \        return 'No'\n    end\n    if dot_count ~= 1 then\n        return 'No'\n\
    \    end\n    if not file_name:sub(1, file_name:find('.') - 1):match('%a') then\n\
    \        return 'No'\n    end\n    ext = file_name:sub(file_name:find('.') + 1)\n\
    \    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m12asch.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp4m12asch.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \  local digits = 0\n  local dot = 0\n  local ext = ''\n  for i = 1, #file_name\
    \ do\n    local c = file_name:sub(i, i)\n    if c == '.' then\n      dot = dot\
    \ + 1\n    elseif c:match('%d') then\n      digits = digits + 1\n    end\n  end\n\
    \  if dot ~= 1 or digits > 3 then\n    return 'No'\n  end\n  local name, ext =\
    \ file_name:match('^([^.]+)%.(.+)$')\n  if not name or not ext then\n    return\
    \ 'No'\n  end\n  if not name:match('^[a-zA-Z]') then\n    return 'No'\n  end\n\
    \  if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n    return 'No'\n \
    \ end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local digits = 0\n    local dot = false\n    local ext = false\n    local\
    \ first_letter = false\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c == '.' then\n            if dot then\n                return\
    \ 'No'\n            end\n            dot = true\n        elseif c:match('%d')\
    \ then\n            digits = digits + 1\n            if digits > 3 then\n    \
    \            return 'No'\n            end\n        elseif c:match('%a') then\n\
    \            if not first_letter then\n                first_letter = true\n \
    \           end\n        else\n            return 'No'\n        end\n    end\n\
    \    if not dot or not first_letter then\n        return 'No'\n    end\n    local\
    \ ext = file_name:sub(#file_name - 2, #file_name)\n    if ext == 'txt' or ext\
    \ == 'exe' or ext == 'dll' then\n        return 'Yes'\n    end\n    return 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_yevcfv.lua:54:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp5_yevcfv.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = file_name:find('.')\n    if dot_pos == nil then\n       \
    \ return 'No'\n    end\n    local prefix = file_name:sub(1, dot_pos - 1)\n   \
    \ local suffix = file_name:sub(dot_pos + 1)\n    if #prefix == 0 or #prefix >\
    \ 8 or #suffix > 3 then\n        return 'No'\n    end\n    if prefix:find('%d')\
    \ == nil then\n        return 'No'\n    end\n    if prefix:find('%d') ~= nil and\
    \ prefix:find('%d') > 1 then\n        return 'No'\n    end\n    if prefix:find('%d')\
    \ ~= nil and prefix:find('%d') < #prefix then\n        return 'No'\n    end\n\
    \    if prefix:find('%d') ~= nil and prefix:find('%d') == #prefix then\n     \
    \   return 'No'\n    end\n    if prefix:find('%d') ~= nil and prefix:find('%d')\
    \ == 1 then\n        return 'No'\n    end\n    if prefix:find('%d') ~= nil and\
    \ prefix:find('%d') == 2 then\n        return 'No'\n    end\n    if prefix:find('%d')\
    \ ~= nil and prefix:find('%d') == 3 then\n        return 'No'\n    end\n    if\
    \ prefix:find('%d') ~= nil and prefix:find('%d') == 4 then\n        return 'No'\n\
    \    end\n    if prefix:find('%d') ~= nil and prefix:find('%d') == 5 then\n  \
    \      return 'No'\n    end\n    if prefix:find('%d') ~= nil and prefix:find('%d')\
    \ == 6 then\n        return 'No'\n    end\n    if prefix:find('%d') ~= nil and\
    \ prefix:find('%d') == 7 then\n        return 'No'\n    end\n    if prefix:find('%d')\
    \ ~= nil and prefix:find('%d') == 8 then\n        return 'No'\n    end\n    if\
    \ prefix:find('%d') ~= nil and prefix:find('%d') == 9 then\n        return '\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo5ay4rjk.lua:62: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n\
    \        return 'No'\n    end\n    local digits_count = 0\n    for i = 1, dot_pos\
    \ - 1 do\n        local c = string.sub(file_name, i, i)\n        if c >= '0' and\
    \ c <= '9' then\n            digits_count = digits_count + 1\n        end\n  \
    \  end\n    if digits_count > 3 then\n        return 'No'\n    end\n    local\
    \ prefix = string.sub(file_name, 1, dot_pos - 1)\n    local suffix = string.sub(file_name,\
    \ dot_pos + 1)\n    if string.len(prefix) == 0 then\n        return 'No'\n   \
    \ end\n    local first_char = string.sub(prefix, 1, 1)\n    if not (first_char\
    \ >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then\n\
    \        return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and\
    \ suffix ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu57xtrp.lua:48:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphu57xtrp.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_uxlqwo.lua:22:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn_uxlqwo.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local\
    \ ext_index = 0\n    local ext = ''\n    local ext_valid = false\n    local valid_ext\
    \ = {'txt', 'exe', 'dll'}\n    local valid_ext_count = 0\n    local valid_ext_index\
    \ = 0\n    local valid_ext_name = ''\n    local valid_ext_name_index = 0\n   \
    \ local valid_ext_name_count = 0\n    local valid_ext_name_valid = false\n   \
    \ local valid_ext_name_valid_count = 0\n    local valid_ext_name_valid_index =\
    \ 0\n    local valid_ext_name_valid_char = ''\n    local valid_ext_name_valid_char_code\
    \ = 0\n    local valid_ext_name_valid_char_code_min = 0\n    local valid_ext_name_valid_char_code_max\
    \ = 0\n    local valid_ext_name_valid_char_code_valid = false\n    local valid_ext_name_valid_char_code_valid_count\
    \ = 0\n    local valid_ext_name_valid_char_code_valid_index = 0\n    local valid_ext_name_valid_char_code_valid_char\
    \ = ''\n    local valid_ext_name_valid_char_code_valid_char_code = 0\n    local\
    \ valid_ext_name_valid_char_code_valid_char_code_min = 0\n    local valid_ext_name_valid_char_code_valid_char_code_max\
    \ = 0\n    local valid_ext_name_valid_char_code_valid_char_code_valid = false\n\
    \    local valid_ext_name_valid_char_code_valid_char_code_valid_count = 0\n  \
    \  local valid_ext_name_valid_char_code_valid_char_code_valid_index = 0\n    local\
    \ valid_ext_name_valid_char_code_valid_char_code_valid_char = ''\n    local valid_ext_name_valid_char_code_valid_char_code_valid_char_code\
    \ = 0\n    local valid_ext_name_valid_char\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_xmogbe9.lua:80: 'end' expected (to close 'function' at line\
    \ 15) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
    -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n\
    \    local dot_pos = string.find(file_name, '.')\n    local file_name_before_dot\
    \ = string.sub(file_name, 1, dot_pos - 1)\n    local file_name_after_dot = string.sub(file_name,\
    \ dot_pos + 1)\n    local file_name_before_dot_valid = string.match(file_name_before_dot,\
    \ '^[a-zA-Z][a-zA-Z0-9]*$')\n    local file_name_after_dot_valid = string.match(file_name_after_dot,\
    \ '^txt$|^exe$|^dll$')\n    local file_name_valid = file_name_before_dot_valid\
    \ and file_name_after_dot_valid\n    return file_name_valid and 'Yes' or 'No'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8chnw0g.lua:28:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpn8chnw0g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
