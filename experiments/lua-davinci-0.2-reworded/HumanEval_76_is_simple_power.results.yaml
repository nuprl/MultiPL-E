name: HumanEval_76_is_simple_power
language: lua
results:
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi033fgu7.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpi033fgu7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiu175m4e.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpiu175m4e.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local p = n\n  while p < x do\n    p = p * n\n  end\n  return p == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyuiyj40.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkyuiyj40.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 0\n    while n^i < x do\n        i = i + 1\n    end\n    return\
    \ n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = 1\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i < x do\n        i = i + 1\n    end\n    return\
    \ n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wh6u6lt.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_wh6u6lt.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ n^i < x do\n        i = i + 1\n    end\n    return n^i == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ (math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdet_b1pr.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdet_b1pr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = n\n  while p < x do\n    p = p\
    \ * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if n == 1 then\n        return x == 1\n    end\n    if x == 1 then\n    \
    \    return false\n    end\n    local power = 1\n    while power < x do\n    \
    \    power = power * n\n    end\n    return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst65subk.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpst65subk.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = 1\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 0\n    while n^i <= x do\n        if n^i == x then\n          \
    \  return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x < 1 or n < 1 then return false end\n\
    \  local i = 1\n  while i <= x do\n    if i == x then return true end\n    i =\
    \ i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = n\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfs31zlp.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwfs31zlp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mxzwmo8.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4mxzwmo8.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i <= x do\n        if n^i == x then\n          \
    \  return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88hwoisx.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp88hwoisx.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local power = n\n    while\
    \ power < x do\n        power = power * n\n    end\n    return power == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if n == 1 then return false end\n  local\
    \ i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while n ^ i < x do\n    i = i + 1\n  end\n  return n ^ i ==\
    \ x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zudy6ke.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_zudy6ke.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while i < x do\n        i = i * n\n    end\n    return i\
    \ == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = n\n  while p < x do\n    p = p\
    \ * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdfy3d9l.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsdfy3d9l.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = n\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t3bhie5.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1t3bhie5.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = 1\n  while p <= x do\n    if p\
    \ == x then return true end\n    p = p * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while i < x do\n        i = i * n\n    end\n    return i\
    \ == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        if i * i == x then\n            return true\n        end\n\
    \        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local power = n\n    while power < x do\n        power = power * n\n    end\n\
    \    return power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xub9hkv.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4xub9hkv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4io611f.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_4io611f.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x %\
    \ n ~= 0 then return false end\n  return is_simple_power(x / n, n)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local power = n\n    while power < x do\n        power = power * n\n    end\n\
    \    return power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23uyyq_3.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp23uyyq_3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56y4fd1w.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp56y4fd1w.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    if x == n then\n      \
    \  return true\n    end\n    if x % n ~= 0 then\n        return false\n    end\n\
    \    return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    if n == 1 then\n      \
    \  return false\n    end\n    local p = math.log(x) / math.log(n)\n    return\
    \ p == math.floor(p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0430m9i.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpa0430m9i.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp54bzlp.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgp54bzlp.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while n^i < x do\n    i =\
    \ i + 1\n  end\n  return n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ n^i < x do\n        i = i + 1\n    end\n    return n^i == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmgkqukl.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmptmgkqukl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = n\n  while p < x do\n    p = p\
    \ * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  local i = 1\n  local p = n\n  while p < x do\n  \
    \  i = i + 1\n    p = p * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3e63imd.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpc3e63imd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if n == 1 then return false end\n  if x ==\
    \ n then return true end\n  local i = 2\n  while i < x do\n    if i * n > x then\
    \ return false end\n    if i * n == x then return true end\n    i = i + 1\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1n9vtc4.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn1n9vtc4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxqi7poe.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmxqi7poe.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while i < x do\n        if i == x then\n            return\
    \ true\n        end\n        i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszpd9luh.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpszpd9luh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnp29ajh.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmnp29ajh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = math.log(x) / math.log(n)\n  return power == math.floor(power)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk75c68e1.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk75c68e1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 0\n  while n^i < x do\n    i = i + 1\n  end\n  return n^i == x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51zgrhkd.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp51zgrhkd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnynqrye.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprnynqrye.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while n^i < x do\n    i = i + 1\n  end\n  return n^i == x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxfj81be.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfxfj81be.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwun45252.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpwun45252.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n ^ i <= x do\n        if n ^ i == x then\n      \
    \      return true\n        end\n        i = i + 1\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gew8_xh.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gew8_xh.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while true do\n        local p = n ^ i\n        if p ==\
    \ x then\n            return true\n        elseif p > x then\n            return\
    \ false\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9mgscbr.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd9mgscbr.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4v110xv.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpy4v110xv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo61gzus3.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpo61gzus3.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = 1\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbikcziyt.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpbikcziyt.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = n\n  while p < x do\n    p = p\
    \ * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while i <= x do\n        if i == x then\n            return\
    \ true\n        end\n        i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjko6sz_i.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjko6sz_i.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8xt_5k7.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpq8xt_5k7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = 1\n  while power <= x do\n    if power == x then\n      return\
    \ true\n    end\n    power = power * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == 0 then return false end\n  local\
    \ i = 0\n  while true do\n    i = i + 1\n    local nn = n ^ i\n    if nn == x\
    \ then return true end\n    if nn > x then return false end\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdu48j6g.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqdu48j6g.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eii5gi7.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp3eii5gi7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd_olng9.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjd_olng9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 2\n    while\
    \ i < x do\n        if i == x then\n            return true\n        end\n   \
    \     i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzroyld_.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptzroyld_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujne7i1i.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpujne7i1i.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  local p = n\n  while p < x\
    \ do\n    p = p * n\n    i = i + 1\n  end\n  return p == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymiu7x8d.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpymiu7x8d.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while i <= x do\n        if i == x then\n            return\
    \ true\n        end\n        i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o9ohtck.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0o9ohtck.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i <= x do\n    if i\
    \ == x then return true end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i < x do\n        i = i + 1\n    end\n    return\
    \ n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8l92ouz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps8l92ouz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = 1\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m_6t8cj.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4m_6t8cj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb1dpjb6.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpeb1dpjb6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while n^i <= x do\n    if n^i == x then\n      return true\n\
    \    end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9eyubwm.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk9eyubwm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk7pf7ur.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpyk7pf7ur.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 0\n  while true do\n    local p = n ^ i\n    if p == x then\n   \
    \   return true\n    elseif p > x then\n      return false\n    end\n    i = i\
    \ + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk8wq31g.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvk8wq31g.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  local p = n\n  while p < x do\n    p = p * n\n  end\n\
    \  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i < x do\n        i = i + 1\n    end\n    return\
    \ n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7fg9_va.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu7fg9_va.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if n == 1 then return false end\n  local\
    \ i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n ^ i <= x do\n        if n ^ i == x then\n      \
    \      return true\n        end\n        i = i + 1\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn2m88ac.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcn2m88ac.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == 1 or (x % n == 0 and is_simple_power(x / n, n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 2\n    while\
    \ i < x do\n        if i == x then\n            return true\n        end\n   \
    \     i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppupuwm2k.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppupuwm2k.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i < x do\n        i = i + 1\n    end\n    return\
    \ n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih3e4zwn.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpih3e4zwn.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local p = n\n    while\
    \ p < x do\n        p = p * n\n    end\n    return p == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ n ^ i < x do\n        i = i + 1\n    end\n    return n ^ i == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 0\n  while n^i < x do\n    i = i + 1\n  end\n  return n^i == x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n^(math.log(x)/math.log(n))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6hrzxkp.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm6hrzxkp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        if i * i == x then\n            return true\n        end\n\
    \        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local int = math.log(x) / math.log(n)\n    return x == n ^ int\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp502w9ozd.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp502w9ozd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while i <= x do\n        if i == x then\n            return\
    \ true\n        end\n        i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = n\n  while p < x do\n    p = p\
    \ * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local power = 1\n    while power < x do\n        power = power * n\n    end\n\
    \    return power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i <= x do\n        if n^i == x then\n          \
    \  return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfuxb8be.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppfuxb8be.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fr9lowq.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8fr9lowq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 0\n    while n^i <= x do\n        if n^i == x then\n          \
    \  return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24mgur3z.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp24mgur3z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkigjiibm.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpkigjiibm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i <= x do\n    if i\
    \ == x then return true end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local power = 1\n    while power < x do\n        power = power * n\n    end\n\
    \    return power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local power = n\n  while power < x do\n    power = power * n\n  end\n  return\
    \ power == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zvvmonz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6zvvmonz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == 1 or (x % n == 0 and is_simple_power(x / n, n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i < x do\n        i = i + 1\n    end\n    return\
    \ n^i == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucvuv5l3.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpucvuv5l3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while true do\n    local p = n ^ i\n    if p == x then\n   \
    \   return true\n    elseif p > x then\n      return false\n    end\n    i = i\
    \ + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe6c3zng.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbe6c3zng.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x %\
    \ n ~= 0 then return false end\n  return is_simple_power(x / n, n)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 2\n  while n ^ i <= x do\n    if\
    \ n ^ i == x then return true end\n    i = i + 1\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tpxqhyz.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_tpxqhyz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 0\n  while x >= n do\n    if x == n then\n      return true\n   \
    \ end\n    x = x / n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr1nenzr.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzr1nenzr.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if n == 1 then return false end\n  if x %\
    \ n ~= 0 then return false end\n  return is_simple_power(x / n, n)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local p = n\n  while p < x do\n    p = p\
    \ * n\n  end\n  return p == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i <= x do\n        if n^i == x then\n          \
    \  return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1dmf6d3.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf1dmf6d3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn52z6ll.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpnn52z6ll.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvszakuus.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvszakuus.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i < x do\n        i = i * n\n        if i == x then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if n == 1 then\n        return x == 1\n    end\n    if x == 1 then\n    \
    \    return false\n    end\n    local i = 1\n    while i <= x do\n        if i\
    \ == x then\n            return true\n        end\n        i = i * n\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghx6k2mb.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpghx6k2mb.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ i <= x do\n        if i == x then\n            return true\n        end\n  \
    \      i = i * n\n    end\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwj1hkn3_.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpwj1hkn3_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 2\n  while i < x do\n    if i ==\
    \ x then return true end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls26pmk4.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpls26pmk4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    local i = 1\n    while n^i <= x do\n        if n^i == x then\n          \
    \  return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhdger4l.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzhdger4l.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i <= x do\n    if i\
    \ == x then return true end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  return x == n ^ math.floor(math.log(x) / math.log(n))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  local i = 1\n  while i < x do\n    i = i\
    \ * n\n    if i == x then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i < x do\n    i = i * n\n  end\n  return i == x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if n == 1 then return false end\n  local\
    \ i = 1\n  local nn = n\n  while nn <= x do\n    if nn == x then return true end\n\
    \    nn = nn * n\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \    if x == 1 then\n        return true\n    end\n    local i = 1\n    while\
    \ n ^ i < x do\n        i = i + 1\n    end\n    return n ^ i == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x < 1 or n < 1 then return false end\n\
    \  local i = 1\n  while true do\n    local p = n ^ i\n    if p == x then return\
    \ true end\n    if p > x then return false end\n    i = i + 1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  if x == 1 then return true end\n  if x == n then return true end\n  if x <\
    \ n then return false end\n  return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>>\
    \ is_simple_power(2, 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>>\
    \ is_simple_power(3, 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n--\
    \ >>> is_simple_power(5, 3)\n-- false\nlocal function is_simple_power(x, n)\n\
    \  local i = 1\n  while i <= x do\n    if i == x then\n      return true\n   \
    \ end\n    i = i * n\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
