---
name: HumanEval_44_change_base
language: lua
prompt: |
  -- Change numerical base of input number x to base.
  -- return string representation after the conversion.
  -- base numbers are less than 10.
  -- >>> change_base(8, 3)
  -- '22'
  -- >>> change_base(8, 2)
  -- '1000'
  -- >>> change_base(7, 2)
  -- '111'
  local function change_base(x, base)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = change_base
      lu.assertEquals(candidate(8, 3), '22')
      lu.assertEquals(candidate(9, 3), '100')
      lu.assertEquals(candidate(234, 2), '11101010')
      lu.assertEquals(candidate(16, 2), '10000')
      lu.assertEquals(candidate(8, 2), '1000')
      lu.assertEquals(candidate(7, 2), '111')
      lu.assertEquals(candidate(2, 3), '2')
      lu.assertEquals(candidate(3, 4), '3')
      lu.assertEquals(candidate(4, 5), '4')
      lu.assertEquals(candidate(5, 6), '5')
      lu.assertEquals(candidate(6, 7), '6')
      lu.assertEquals(candidate(7, 8), '7')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local s = ''
    while x > 0 do
      local r = x % base
      x = (x - r) / base
      s = tostring(r) .. s
    end
    return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          s = tostring(r) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    local r
    while x > 0 do
      r = x % base
      x = math.floor(x / base)
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      result = tostring(x % base) .. result
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = (x - r) / base
      end
      return res
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          s = s .. tostring(r)
          x = (x - r) / base
      end
      return s
  end
- |2-
      local result = ''
      local quotient = x
      local remainder = 0
      while quotient > 0 do
          remainder = quotient % base
          quotient = math.floor(quotient / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          s = tostring(r) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local digit = x % base
          result = tostring(digit) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          s = tostring(x % base) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = (x - r) / base
      end
      return res
  end
- |2-
      local result = ''
      local quotient = x
      while quotient > 0 do
          local remainder = quotient % base
          quotient = math.floor(quotient / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = (x - r) / base
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local mod = x % base
          result = tostring(mod) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local s = ""
      while x > 0 do
          local r = x % base
          s = s .. tostring(r)
          x = (x - r) / base
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = (x - r) / base
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      result = tostring(x % base) .. result
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local digit = x % base
          result = tostring(digit) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local digit = x % base
      result = tostring(digit) .. result
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local result = ""
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = (x - r) / base
      end
      return result
  end
- |2-
      local result = ''
      local x = x
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          s = tostring(r) .. s
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = (x - r) / base
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local digit = x % base
          res = tostring(digit) .. res
          x = math.floor(x / base)
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local digit = x % base
          result = tostring(digit) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = (x - r) / base
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          result = tostring(remainder) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local remainder = x % base
      result = tostring(remainder) .. result
      x = (x - remainder) / base
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local d = x % base
          result = tostring(d) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local m = x % base
          result = tostring(m) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      result = tostring(r) .. result
      x = (x - r) / base
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      local quotient = x
      while quotient > 0 do
          local remainder = quotient % base
          result = tostring(remainder) .. result
          quotient = math.floor(quotient / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = string.format('%d%s', r, result)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          s = tostring(r) .. s
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local digit = x % base
          x = math.floor(x / base)
          result = tostring(digit) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          s = tostring(x % base) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          result = tostring(remainder) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = (x - r) / base
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = (x - r) / base
      end
      return result
  end
- "\tlocal result = ''\n\twhile x > 0 do\n\t\tlocal r = x % base\n\t\tx = math.floor(x
  / base)\n\t\tresult = tostring(r) .. result\n\tend\n\treturn result\nend"
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ""
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      result = tostring(x % base) .. result
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          s = tostring(r) .. s
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = math.floor(x / base)
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      local remainder = 0
      while x > 0 do
          remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = math.floor(x / base)
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local digits = {}
      local i = 1
      while x > 0 do
          digits[i] = x % base
          x = math.floor(x / base)
          i = i + 1
      end
      local s = ""
      for i = #digits, 1, -1 do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = math.floor(x / base)
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ""
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = (x - r) / base
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          s = tostring(x % base) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = (x - remainder) / base
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = (x - r) / base
      end
      return res
  end
- |2-
      local result = ''
      local quotient = x
      while quotient > 0 do
          local remainder = quotient % base
          result = tostring(remainder) .. result
          quotient = math.floor(quotient / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      x = (x - r) / base
      result = tostring(r) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ""
      local remainder = 0
      while x > 0 do
          remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          res = tostring(x % base) .. res
          x = math.floor(x / base)
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = result .. tostring(r)
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = math.floor(x / base)
      end
      return res
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          s = s .. tostring(r)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ""
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      result = tostring(r) .. result
      x = (x - r) / base
    end
    return result
  end
- |2-
      local result = ''
      local num = x
      while num > 0 do
          local r = num % base
          result = result .. tostring(r)
          num = math.floor(num / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          s = tostring(x % base) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      local rest = x
      while rest > 0 do
          local digit = rest % base
          rest = math.floor(rest / base)
          result = tostring(digit) .. result
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      result = tostring(r) .. result
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          res = tostring(x % base) .. res
          x = math.floor(x / base)
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      local remainder = 0
      while x > 0 do
          remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      result = result .. tostring(r)
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local mod = x % base
          x = math.floor(x / base)
          result = tostring(mod) .. result
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = math.floor(x / base)
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local mod = x % base
          result = tostring(mod) .. result
          x = (x - mod) / base
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local ret = ''
    while x > 0 do
      local r = x % base
      ret = tostring(r) .. ret
      x = (x - r) / base
    end
    return ret
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
    local result = ''
    while x > 0 do
      local r = x % base
      result = result .. tostring(r)
      x = math.floor(x / base)
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local s = ""
      while x > 0 do
          s = tostring(x % base) .. s
          x = math.floor(x / base)
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          result = tostring(x % base) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = (x - r) / base
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
    local result = ''
    local rest = x
    while rest > 0 do
      local digit = rest % base
      rest = math.floor(rest / base)
      result = tostring(digit) .. result
    end
    return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          s = s .. tostring(r)
      end
      return s
  end
- |2-
      local s = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          s = string.char(r + 48) .. s
      end
      return s
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local mod = x % base
          result = tostring(mod) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local res = ''
      while x > 0 do
          local r = x % base
          res = tostring(r) .. res
          x = math.floor(x / base)
      end
      return res
  end
- |2-
      local result = ''
      while x > 0 do
          local digit = x % base
          result = tostring(digit) .. result
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = (x - r) / base
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = (x - r) / base
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = math.floor(x / base)
      end
      return result
  end
- |2-
      local result = ''
      local rest = x
      while rest > 0 do
          local digit = rest % base
          result = tostring(digit) .. result
          rest = math.floor(rest / base)
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local remainder = x % base
          x = math.floor(x / base)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = result .. tostring(r)
          x = (x - r) / base
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          x = math.floor(x / base)
          result = tostring(r) .. result
      end
      return result
  end
- |2-
      local result = ''
      while x > 0 do
          local r = x % base
          result = tostring(r) .. result
          x = (x - r) / base
      end
      return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
