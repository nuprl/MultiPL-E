---
name: HumanEval_10_make_palindrome
language: lua
prompt: |
  -- Find the shortest palindrome that begins with a supplied string.
  -- Algorithm idea is simple:
  -- - Find the longest postfix of supplied string that is a palindrome.
  -- - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
  -- >>> make_palindrome('')
  -- ''
  -- >>> make_palindrome('cat')
  -- 'catac'
  -- >>> make_palindrome('cata')
  -- 'catac'
  local function make_palindrome(string)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = make_palindrome
      lu.assertEquals(candidate(''), '')
      lu.assertEquals(candidate('x'), 'x')
      lu.assertEquals(candidate('xyz'), 'xyzyx')
      lu.assertEquals(candidate('xyx'), 'xyx')
      lu.assertEquals(candidate('jerry'), 'jerryrrej')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local palindrome_suffix = find_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local function longest_palindrome_suffix(string)
          local function is_palindrome(string)
              local length = #string
              for i = 1, length / 2 do
                  if string:sub(i, i) ~= string:sub(length - i + 1, length - i + 1) then
                      return false
                  end
              end
              return true
          end
          local length = #string
          for i = length, 1, -1 do
              if is_palindrome(string:sub(i, length)) then
                  return string:sub(i, length)
              end
          end
          return ''
      end
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string.reverse(prefix) .. string .. suffix
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local n = #string
      local i = n
      while i > 0 do
          if is_palindrome(string, i, n) then
              return string .. string:sub(1, n - i):reverse()
          end
          i = i - 1
      end
      return string
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
    return string .. prefix:reverse()
  end
- |2-
      local string_length = string.len(string)
      local palindrome_length = 0
      local palindrome_end = 0
      local palindrome_start = 0
      local palindrome_end_index = 0
      local palindrome_start_index = 0
      local palindrome_length_index = 0
      local palindrome_end_index_index = 0
      local palindrome_start_index_index = 0
      local palindrome_length_index_index = 0
      local palindrome_end_index_index_index = 0
      local palindrome_start_index_index_index = 0
      local palindrome_length_index_index_index = 0
      local palindrome_end_index_index_index_index = 0
      local palindrome_start_index_index_index_index = 0
      local palindrome_length_index_index_index_index = 0
      local palindrome_end_index_index_index_index_index = 0
      local palindrome_start_index_index_index_index_index = 0
      local palindrome_length_index_index_index_index_index = 0
      local palindrome_end_index_index_index_index_index_index = 0
      local palindrome_start_index_index_index_index_index_index = 0
      local palindrome_length_index_index_index_index_index_index = 0
      local palindrome_end_index_index_index_index_index_index_index = 0
      local palindrome_start_index_index_index_index_index_index_index = 0
      local palindrome_length_index_index_index_index_index_index_index = 0
      local palindrome_end_index_index_index_index_index_index_index_index = 0
      local palindrome_start_index_index_index_index_index_index_index_index = 0
      local palindrome_length_index_index_index_index_index_index_index_index = 0
      local palindrome_end_index_index_
- |2-
      local len = #string
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, len - longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, string:len() - suffix:len())
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local function reverse(string)
          local reversed = ''
          for i = #string, 1, -1 do
              reversed = reversed .. string:sub(i, i)
          end
          return reversed
      end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local n = #string
      local i = 1
      while i <= n do
          if is_palindrome(string, i, n) then
              return string .. string:sub(1, n - i):reverse()
          end
          i = i + 1
      end
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome = find_longest_palindrome(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
    local function find_longest_palindrome_postfix(string)
      local function is_palindrome(string)
        local len = #string
        for i = 1, len / 2 do
          if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
            return false
          end
        end
        return true
      end
      local len = #string
      for i = len, 1, -1 do
        if is_palindrome(string:sub(i, len)) then
          return string:sub(i, len)
        end
      end
      return ''
    end
    local palindrome_postfix = find_longest_palindrome_postfix(string)
    local palindrome_prefix = string:sub(1, #string - #palindrome_postfix)
    return string .. palindrome_prefix:reverse()
  end
- |2-
      local function reverse(string)
          local result = ''
          for i = #string, 1, -1 do
              result = result .. string:sub(i, i)
          end
          return result
      end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
    local longest_palindrome = find_longest_palindrome(string)
    local prefix = string.sub(string, 1, string.len(string) - string.len(longest_palindrome))
    local reversed_prefix = string.reverse(prefix)
    return string .. reversed_prefix
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local len = #string
      local i = len
      while i > 0 do
          if is_palindrome(string, i, len) then
              return string .. string:sub(1, len - i):reverse()
          end
          i = i - 1
      end
      return string
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome = string
      local prefix = string:sub(1, #string - 1)
      local suffix = string:sub(#string)
      while not is_palindrome(palindrome) do
          palindrome = prefix .. suffix
          prefix = prefix:sub(1, #prefix - 1)
          suffix = suffix .. suffix:sub(1, 1)
      end
      return palindrome
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix_length = longest_palindrome_suffix_length(string)
      local prefix = string:sub(1, #string - longest_palindrome_suffix_length)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local suffix_len = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - suffix_len)
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
    local len = #string
    local longest_palindrome = ''
    for i = len, 1, -1 do
      local prefix = string:sub(1, i)
      local suffix = string:sub(i + 1, len)
      if prefix == reverse(suffix) then
        longest_palindrome = prefix
        break
      end
    end
    return string .. reverse(string:sub(1, len - #longest_palindrome))
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
    local prefix = string:sub(1, #string - find_longest_palindrome_suffix(string))
    return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
    local function reverse(str)
      local reversed = ''
      for i = #str, 1, -1 do
        reversed = reversed .. str:sub(i, i)
      end
      return reversed
    end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local function is_palindrome(string)
          local len = #string
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local len = string:len()
      local i = len
      while i > 0 do
          if is_palindrome(string:sub(1, i)) then
              break
          end
          i = i - 1
      end
      return string .. string:sub(1, len - i):reverse()
  end
- |2-
      local reversed = string:reverse()
      local prefix = string:sub(1, #string - 1)
      local suffix = string:sub(#string)
      local prefix_reversed = prefix:reverse()
      local suffix_reversed = suffix:reverse()
      local longest_palindrome_suffix = ''
      local longest_palindrome_suffix_length = 0
      for i = 1, #string do
          local suffix_candidate = reversed:sub(1, i)
          local prefix_candidate = reversed:sub(i + 1)
          if suffix_candidate == prefix_candidate then
              longest_palindrome_suffix = suffix_candidate
              longest_palindrome_suffix_length = #suffix_candidate
          end
      end
      return string .. reversed:sub(longest_palindrome_suffix_length + 1)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local function is_palindrome(string)
          local len = string:len()
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local function is_palindrome(string)
          local len = #string
          for i = 1, len // 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, string:len() - palindrome_suffix:len())
      return string .. string:reverse():sub(1, prefix:len())
  end
- |2-
      local reverse = string:reverse()
      local suffix = string:sub(1, #string - 1)
      local prefix = string:sub(2, #string)
      local longest_suffix_palindrome = longest_palindrome(suffix)
      local longest_prefix_palindrome = longest_palindrome(prefix)
      if #longest_suffix_palindrome > #longest_prefix_palindrome then
          return string .. reverse:sub(#longest_suffix_palindrome + 1, #string)
      else
          return string .. reverse:sub(#longest_prefix_palindrome + 1, #string)
      end
  end
- |2-
      local longest_palindrome = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. prefix:reverse()
  end
- |2-
      local reversed = string:reverse()
      local longest_postfix = longest_common_substring(string, reversed)
      return string .. reversed:sub(#longest_postfix + 1)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local function longest_palindrome_suffix(string)
          local function is_palindrome(string)
              local i = 1
              local j = #string
              while i < j do
                  if string:sub(i, i) ~= string:sub(j, j) then
                      return false
                  end
                  i = i + 1
                  j = j - 1
              end
              return true
          end
          local i = #string
          while i > 0 do
              if is_palindrome(string:sub(i)) then
                  return string:sub(i)
              end
              i = i - 1
          end
          return ''
      end
      local function reverse(string)
          local reversed = ''
          for i = #string, 1, -1 do
              reversed = reversed .. string:sub(i, i)
          end
          return reversed
      end
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. reverse(prefix)
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local function is_palindrome(string)
          local len = #string
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #suffix)
    return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local string_length = #string
      local result = string
      local i = 1
      while i <= string_length do
          local j = string_length
          while j >= i do
              if string:sub(i, j) == string:sub(i, j):reverse() then
                  result = result .. string:sub(1, i - 1):reverse()
                  return result
              end
              j = j - 1
          end
          i = i + 1
      end
      return result
  end
- |2-
      local function is_palindrome(string)
          local len = string:len()
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local function find_longest_palindrome_suffix(string)
          local function is_palindrome(string)
              return string == string:reverse()
          end
          local function find_longest_palindrome_suffix_rec(string, suffix)
              if is_palindrome(string) then
                  return suffix
              else
                  return find_longest_palindrome_suffix_rec(string:sub(1, #string - 1), string:sub(#string, #string) .. suffix)
              end
          end
          return find_longest_palindrome_suffix_rec(string, '')
      end
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
    return string .. string.reverse(prefix)
  end
- |2-
      local function is_palindrome(string)
          local len = string:len()
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      local reversed_prefix = prefix:reverse()
      return string .. reversed_prefix
  end
- |2-
      local prefix = string:sub(1, #string - find_longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local function is_palindrome(string)
          local len = #string
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local function reverse(string)
          local reversed = {}
          for i = #string, 1, -1 do
              table.insert(reversed, string:sub(i, i))
          end
          return table.concat(reversed)
      end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
    return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local len = #string
      local i = len
      while i > 0 do
          local prefix = string:sub(1, i)
          local suffix = string:sub(len - i + 1, len)
          if prefix == suffix then
              return string .. string:sub(i + 1, len):reverse()
          end
          i = i - 1
      end
      return string
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local palindrome_prefix = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))
      return string .. palindrome_prefix
  end
- |2-
      local suffix_length = longest_palindromic_suffix(string)
      local prefix = string:sub(1, #string - suffix_length)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local function reverse(string)
          local reversed = ''
          for i = #string, 1, -1 do
              reversed = reversed .. string:sub(i, i)
          end
          return reversed
      end
- |2-
      local function longest_palindrome_suffix(string)
          local function is_palindrome(string)
              local i = 1
              local j = #string
              while i < j do
                  if string:sub(i, i) ~= string:sub(j, j) then
                      return false
                  end
                  i = i + 1
                  j = j - 1
              end
              return true
          end
          local i = #string
          while i > 0 do
              if is_palindrome(string:sub(i)) then
                  return string:sub(i)
              end
              i = i - 1
          end
          return ''
      end
      local function reverse(string)
          local reversed = ''
          for i = #string, 1, -1 do
              reversed = reversed .. string:sub(i, i)
          end
          return reversed
      end
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #suffix)
    return string .. prefix:reverse()
  end
- |2-
      local string_length = string.len(string)
      local string_reversed = string.reverse(string)
      local longest_common_suffix_length = longest_common_suffix(string, string_reversed)
      local string_prefix = string.sub(string, 1, string_length - longest_common_suffix_length)
      local string_prefix_reversed = string.reverse(string_prefix)
      return string .. string_prefix_reversed
  end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #suffix)
    return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. string.reverse(prefix)
  end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
    return string .. string.reverse(prefix)
  end
- |2-
      local n = #string
      local suffix_length = 0
      local suffix_start = 0
      local suffix_end = 0
      local prefix_start = 0
      local prefix_end = 0
      local palindrome_length = 0
      local palindrome_start = 0
      local palindrome_end = 0
      local i = 0
      local j = 0
      local k = 0
      local l = 0
      local m = 0
      local s = ''
      local t = ''
      local u = ''
      local v = ''
      local w = ''
      local x = ''
      local y = ''
      local z = ''
      local aa = ''
      local ab = ''
      local ac = ''
      local ad = ''
      local ae = ''
      local af = ''
      local ag = ''
      local ah = ''
      local ai = ''
      local aj = ''
      local ak = ''
      local al = ''
      local am = ''
      local an = ''
      local ao = ''
      local ap = ''
      local aq = ''
      local ar = ''
      local as = ''
      local at = ''
      local au = ''
      local av = ''
      local aw = ''
      local ax = ''
      local ay = ''
      local az = ''
      local ba = ''
      local bb = ''
      local bc = ''
      local bd = ''
      local be = ''
      local bf = ''
      local bg = ''
      local bh = ''
      local bi = ''
      local bj = ''
      local bk = ''
      local bl = ''
      local bm = ''
      local bn = ''
      local bo = ''
      local bp = ''
      local bq = ''
      local br = ''
      local bs = ''
      local bt = ''
      local bu = ''
      local bv = ''
      local bw = ''
      local bx = ''
      local by = ''
      local bz = ''
      local ca = ''
      local cb = ''
      local cc = ''
      local
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())
      return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local function find_longest_palindrome_suffix(string)
          local function is_palindrome(string)
              local i = 1
              local j = #string
              while i < j do
                  if string:sub(i, i) ~= string:sub(j, j) then
                      return false
                  end
                  i = i + 1
                  j = j - 1
              end
              return true
          end
          local i = #string
          while i > 0 do
              if is_palindrome(string:sub(i)) then
                  return string:sub(i)
              end
              i = i - 1
          end
          return ''
      end
      local function reverse(string)
          local reversed = ''
          for i = #string, 1, -1 do
              reversed = reversed .. string:sub(i, i)
          end
          return reversed
      end
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
    return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix_len = 0
      local suffix_len = 0
      local prefix = ''
      local suffix = ''
      local palindrome = ''
      local i = 1
      local j = #string
      while i <= j do
          if string:sub(i, j) == string:sub(j, i) then
              prefix_len = i - 1
              suffix_len = j
              break
          end
          i = i + 1
          j = j - 1
      end
      if prefix_len > 0 then
          prefix = string:sub(1, prefix_len)
          suffix = string:sub(suffix_len + 1)
          palindrome = string .. prefix:reverse()
      else
          palindrome = string .. string:reverse()
      end
      return palindrome
  end
- |2-
      local len = string:len()
      local i = len
      while i > 0 do
          if string:sub(1, i) == string:sub(len - i + 1, len):reverse() then
              return string .. string:sub(1, len - i):reverse()
          end
          i = i - 1
      end
      return string
  end
- |2-
      local suffix = find_longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local function is_palindrome(string)
          local len = #string
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local reversed_string = string:reverse()
      local longest_postfix = longest_common_substring(string, reversed_string)
      local prefix = string:sub(1, string:len() - longest_postfix:len())
      return string .. reversed_string:sub(1, prefix:len())
  end
- |2-
      local function reverse(string)
          return string:reverse()
      end
- |2-
      local len = string:len()
      local palindrome_suffix = find_palindrome_suffix(string)
      local prefix = string:sub(1, len - palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local length = #string
      local palindrome_length = 0
      local palindrome_start = 0
      local palindrome_end = 0
      local i = 1
      while i <= length do
          local j = 1
          while j <= length do
              if i + j - 1 > length then
                  break
              end
              if string:sub(i, i + j - 1) == string:sub(length - j + 1, length - (i - 1)) then
                  if j > palindrome_length then
                      palindrome_length = j
                      palindrome_start = i
                      palindrome_end = i + j - 1
                  end
              end
              j = j + 1
          end
          i = i + 1
      end
      if palindrome_length == 0 then
          return string
      end
      return string .. string:sub(palindrome_start, palindrome_end - 1):reverse()
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local function reverse(string)
          local reversed = ''
          for i = #string, 1, -1 do
              reversed = reversed .. string:sub(i, i)
          end
          return reversed
      end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local n = #string
      local suffix = string
      local prefix = ''
      local i = 1
      while i <= n do
          if is_palindrome(suffix) then
              break
          end
          suffix = string.sub(string, i, n)
          prefix = string.sub(string, 1, i - 1)
          i = i + 1
      end
      return string .. string.reverse(prefix)
  end
- |2-
      local prefix_len = find_longest_palindrome_postfix(string)
      local prefix = string:sub(1, prefix_len)
      local suffix = string:sub(prefix_len + 1)
      return string .. reverse(suffix)
  end
- |2-
      local len = #string
      local palindrome_len = 0
      local palindrome_pos = 0
      local i = 1
      while i <= len do
          local j = 1
          while j <= len - i + 1 do
              if string:sub(i, i + j - 1) == string:sub(len - j + 1, len - i + j) then
                  if j > palindrome_len then
                      palindrome_len = j
                      palindrome_pos = i
                  end
              end
              j = j + 1
          end
          i = i + 1
      end
      return string .. string:sub(1, palindrome_pos - 1):reverse()
  end
- |2-
      local n = #string
      local i = n
      while i > 0 do
          local prefix = string:sub(1, i)
          local suffix = string:sub(n - i + 1, n)
          if prefix == suffix then
              return string .. string:sub(i + 1, n):reverse()
          end
          i = i - 1
      end
      return string
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, string:len() - suffix:len())
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
    return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, math.floor(#string / 2))
      local postfix = string:sub(math.ceil(#string / 2) + 1)
      local longest_palindrome_postfix = find_longest_palindrome_postfix(postfix)
      local prefix_to_append = prefix:sub(1, #prefix - #longest_palindrome_postfix)
      return string .. prefix_to_append:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local suffix_length = longest_palindromic_suffix(string)
      local prefix = string:sub(1, #string - suffix_length)
      return string .. prefix:reverse()
  end
- |2-
    local suffix_len = longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - suffix_len)
    return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local s = string
      local l = #s
      local i = 1
      local j = l
      local k = 0
      local t = {}
      while i <= j do
          if s:sub(i, j) == s:sub(j, i) then
              k = j
          end
          i = i + 1
          j = j - 1
      end
      for i = k + 1, l do
          t[#t + 1] = s:sub(i, i)
      end
      return s .. table.concat(t):reverse()
  end
- |2-
      local string_len = #string
      local palindrome_len = 0
      local palindrome_pos = 0
      local palindrome_table = {}
      local i = 1
      local j = string_len
      local k = 1
      local l = 1
      local m = 0
      local n = 0
      local o = 0
      local p = 0
      local q = 0
      local r = 0
      local s = 0
      local t = 0
      local u = 0
      local v = 0
      local w = 0
      local x = 0
      local y = 0
      local z = 0
      local aa = 0
      local ab = 0
      local ac = 0
      local ad = 0
      local ae = 0
      local af = 0
      local ag = 0
      local ah = 0
      local ai = 0
      local aj = 0
      local ak = 0
      local al = 0
      local am = 0
      local an = 0
      local ao = 0
      local ap = 0
      local aq = 0
      local ar = 0
      local as = 0
      local at = 0
      local au = 0
      local av = 0
      local aw = 0
      local ax = 0
      local ay = 0
      local az = 0
      local ba = 0
      local bb = 0
      local bc = 0
      local bd = 0
      local be = 0
      local bf = 0
      local bg = 0
      local bh = 0
      local bi = 0
      local bj = 0
      local bk = 0
      local bl = 0
      local bm = 0
      local bn = 0
      local bo = 0
      local bp = 0
      local bq = 0
      local br = 0
      local bs = 0
      local bt = 0
      local bu = 0
      local bv = 0
      local bw = 0
      local bx = 0
      local by = 0
      local bz = 0
      local ca = 0
      local cb = 0
      local cc = 0
      local cd = 0
      local
- |2-
      local longest_suffix = longest_palindromic_suffix(string)
      local prefix = string:sub(1, #string - #longest_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local length = #string
      local suffix = string
      local prefix = ''
      local palindrome = ''
      local i = 1
      while i <= length do
          local j = length - i + 1
          if is_palindrome(suffix) then
              palindrome = suffix .. reverse(prefix)
              break
          end
          prefix = prefix .. string:sub(j, j)
          suffix = string:sub(i, length)
          i = i + 1
      end
      return palindrome
  end
- |2-
      local n = #string
      local i = n
      while i > 0 do
          if is_palindrome(string, i, n) then
              return string .. string:sub(1, n - i):reverse()
          end
          i = i - 1
      end
      return string
  end
- |2-
      local string_length = #string
      local palindrome_length = 0
      local palindrome_end = 0
      local palindrome_start = 0
      local palindrome_end_next = 0
      local palindrome_start_next = 0
      local palindrome_length_next = 0
      local palindrome_length_max = 0
      local palindrome_end_max = 0
      local palindrome_start_max = 0
      local palindrome_length_max_next = 0
      local palindrome_end_max_next = 0
      local palindrome_start_max_next = 0
      local palindrome_length_max_next_next = 0
      local palindrome_end_max_next_next = 0
      local palindrome_start_max_next_next = 0
      local palindrome_length_max_next_next_next = 0
      local palindrome_end_max_next_next_next = 0
      local palindrome_start_max_next_next_next = 0
      local palindrome_length_max_next_next_next_next = 0
      local palindrome_end_max_next_next_next_next = 0
      local palindrome_start_max_next_next_next_next = 0
      local palindrome_length_max_next_next_next_next_next = 0
      local palindrome_end_max_next_next_next_next_next = 0
      local palindrome_start_max_next_next_next_next_next = 0
      local palindrome_length_max_next_next_next_next_next_next = 0
      local palindrome_end_max_next_next_next_next_next_next = 0
      local palindrome_start_max_next_next_next_next_next_next = 0
      local palindrome_length_max_next_next_next_next_next_next_next = 0
      local palindrome_end_max_next_next_next_next_next_next_next = 0
      local palindrome_
- |2-
    local string_length = string.len(string)
    local palindrome_length = 0
    local palindrome_end = 0
    local palindrome_start = 0
    local palindrome_length_at = {}
    for i = 1, string_length do
      palindrome_length_at[i] = 0
    end
    for i = 1, string_length do
      local j = i
      while j > 0 and string.sub(string, j, j) == string.sub(string, i, i) do
        j = j - 1
      end
      palindrome_length_at[i] = i - j
    end
    for i = 1, string_length do
      local j = i - palindrome_length_at[i]
      if j > 0 and palindrome_length_at[j] == j then
        palindrome_length = palindrome_length_at[i]
        palindrome_end = i
        palindrome_start = j
      end
    end
    local prefix = string.sub(string, 1, palindrome_start - 1)
    local prefix_length = string.len(prefix)
    local prefix_reversed = ''
    for i = prefix_length, 1, -1 do
      prefix_reversed = prefix_reversed .. string.sub(prefix, i, i)
    end
    return string .. prefix_reversed
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local longest_palindrome = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local reversed_string = string:reverse()
      local string_length = string:len()
      local reversed_string_length = reversed_string:len()
      local longest_palindrome_length = 0
      local longest_palindrome_index = 0
      local longest_palindrome_suffix = ''
      local longest_palindrome_prefix = ''
      local longest_palindrome_suffix_index = 0
      local longest_palindrome_prefix_index = 0
      local longest_palindrome_suffix_length = 0
      local longest_palindrome_prefix_length = 0
      local longest_palindrome_suffix_reversed = ''
      local longest_palindrome_prefix_reversed = ''
      local longest_palindrome_suffix_reversed_length = 0
      local longest_palindrome_prefix_reversed_length = 0
      local longest_palindrome_suffix_reversed_index = 0
      local longest_palindrome_prefix_reversed_index = 0
      local longest_palindrome_suffix_reversed_index_in_string = 0
      local longest_palindrome_prefix_reversed_index_in_string = 0
      local longest_palindrome_suffix_reversed_index_in_string_length = 0
      local longest_palindrome_prefix_reversed_index_in_string_length = 0
      local longest_palindrome_suffix_reversed_index_in_string_index = 0
      local longest_palindrome_prefix_reversed_index_in_string_index = 0
      local longest_palindrome_suffix_reversed_index_in_string_index_length = 0
      local longest_palindrome_prefix_reversed_index_in_string_index_length = 0
      local longest_palindrome_suffix_reversed_index_in_string_index_index = 0
      local longest_palindrome_prefix_reversed_index_in_string_index_index = 0
      local longest_palindrome_suffix_
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      return string .. string.reverse(string.sub(string, 1, #string - #longest_palindrome_suffix))
  end
- |2-
      local length = #string
      local palindrome_length = 0
      for i = 1, length do
          if string:sub(1, i) == string:sub(length - i + 1, length):reverse() then
              palindrome_length = i
          end
      end
      return string .. string:sub(1, length - palindrome_length):reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      local reversed_prefix = prefix:reverse()
      return string .. reversed_prefix
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
    local longest_palindrome = find_longest_palindrome(string)
    local prefix = string:sub(1, #string - #longest_palindrome)
    return string .. prefix:reverse()
  end
- "    local len = string:len()\n    local suffix = string:sub(len)\n    local prefix
  = string:sub(1, len - 1)\n    local prefix_len = prefix:len()\n    local suffix_len
  = suffix:len()\n    local palindrome_len = 0\n    local palindrome_start = 0\n    local
  palindrome_end = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local
  l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local
  q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local
  v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local
  aa = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n    local ae = 0\n
  \   local af = 0\n    local ag = 0\n    local ah = 0\n    local ai = 0\n    local
  aj = 0\n    local ak = 0\n    local al = 0\n    local am = 0\n    local an = 0\n
  \   local ao = 0\n    local ap = 0\n    local aq = 0\n    local ar = 0\n    local
  as = 0\n    local at = 0\n    local au = 0\n    local av = 0\n    local aw = 0\n
  \   local ax = 0\n    local ay = 0\n    local az = 0\n    local ba = 0\n    local
  bb = 0\n    local bc = 0\n    local bd = 0\n    local be = 0\n    local bf = 0\n
  \   local bg = 0\n    local bh = 0\n    local bi = 0\n    local bj = 0\n    local
  bk = 0\n    local bl = 0\n    local bm = 0\n    local bn = 0\n    local bo = 0\n
  \   local bp = 0\n    local bq = 0\n    local br = 0\n    local bs = 0\n    local
  bt = 0\n    local bu = 0\n    local bv = 0\n    local bw = 0\n   "
- |2-
    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #longest_palindrome_suffix)
    return string .. reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local len = #string
      local palindrome_len = 0
      local palindrome_pos = 0
      local i = 1
      while i <= len do
          local j = 1
          while i - j >= 1 and i + j <= len and string:sub(i - j, i - j) == string:sub(i + j, i + j) do
              j = j + 1
          end
          j = j - 1
          if j > palindrome_len then
              palindrome_len = j
              palindrome_pos = i
          end
          i = i + 1
      end
      if palindrome_len == 0 then
          return string
      end
      local prefix = string:sub(1, palindrome_pos - palindrome_len - 1)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
      local n = #string
      local palindrome_suffix = longest_palindrome_suffix(string)
      local palindrome_prefix = string.reverse(string:sub(1, n - palindrome_suffix))
      return string .. palindrome_prefix
  end
- |2-
      local function reverse(string)
          local result = ''
          for i = #string, 1, -1 do
              result = result .. string:sub(i, i)
          end
          return result
      end
- |2-
    local suffix = longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #suffix)
    return string .. prefix:reverse()
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = find_longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      local reversed_prefix = prefix:reverse()
      return string .. reversed_prefix
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
    local palindrome_suffix = find_longest_palindrome_suffix(string)
    local palindrome_prefix = string.reverse(string.sub(string, 1, string.len(string) - string.len(palindrome_suffix)))
    return string .. palindrome_prefix
  end
- |2-
      local function is_palindrome(string)
          local len = #string
          for i = 1, len / 2 do
              if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local function is_palindrome(string)
          local length = #string
          for i = 1, length / 2 do
              if string:sub(i, i) ~= string:sub(length - i + 1, length - i + 1) then
                  return false
              end
          end
          return true
      end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, #string - #suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. string:reverse():sub(1, #prefix)
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local prefix = string:sub(1, #string - longest_palindrome_suffix(string))
      return string .. prefix:reverse()
  end
- |2-
      local longest_palindrome = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome)
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. prefix:reverse()
  end
- |2-
      local reversed = string:reverse()
      local suffix = string:sub(1, #string - 1)
      local prefix = string:sub(2, #string)
      local suffix_palindrome = reversed:find(suffix)
      local prefix_palindrome = reversed:find(prefix)
      if suffix_palindrome then
          return string .. reversed:sub(suffix_palindrome + 1, #string)
      elseif prefix_palindrome then
          return string .. reversed:sub(prefix_palindrome + 1, #string)
      else
          return string .. reversed:sub(1, #string)
      end
  end
- |2-
    local palindrome_suffix = find_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #palindrome_suffix)
    return string .. reverse(prefix)
  end
- |2-
      local n = #string
      local i = n
      while i > 0 do
          if is_palindrome(string, i, n) then
              break
          end
          i = i - 1
      end
      return string .. string:sub(1, n - i):reverse()
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #suffix)
      return string .. prefix:reverse()
  end
- |2-
    local palindrome_suffix = longest_palindrome_suffix(string)
    local prefix = string:sub(1, #string - #palindrome_suffix)
    return string .. prefix:reverse()
  end
- |2-
      local function reverse(s)
          local r = ''
          for i = 1, #s do
              r = s:sub(i, i) .. r
          end
          return r
      end
- |2-
      local palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #palindrome_suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome = string
      local prefix = string:sub(1, #string - 1)
      while prefix ~= '' and not is_palindrome(prefix) do
          palindrome = palindrome .. prefix:reverse()
          prefix = prefix:sub(1, #prefix - 1)
      end
      return palindrome
  end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local suffix = find_longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local longest_palindrome_suffix = longest_palindrome_suffix(string)
      local prefix = string:sub(1, #string - #longest_palindrome_suffix)
      return string .. string.reverse(prefix)
  end
- |2-
      local function reverse(string)
          return string:reverse()
      end
- |2-
      local suffix = longest_palindrome_suffix(string)
      local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))
      return string .. string.reverse(prefix)
  end
- |2-
      local palindrome_suffix = find_longest_palindrome_suffix(string)
      local palindrome_prefix = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))
      return string .. palindrome_prefix
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
