name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local function longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local length = #string\n\
    \            for i = 1, length / 2 do\n                if string:sub(i, i) ~=\
    \ string:sub(length - i + 1, length - i + 1) then\n                    return\
    \ false\n                end\n            end\n            return true\n     \
    \   end\n        local length = #string\n        for i = length, 1, -1 do\n  \
    \          if is_palindrome(string:sub(i, length)) then\n                return\
    \ string:sub(i, length)\n            end\n        end\n        return ''\n   \
    \ end\n    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string.reverse(prefix) .. string .. suffix\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local n = #string\n \
    \   local i = n\n    while i > 0 do\n        if is_palindrome(string, i, n) then\n\
    \            return string .. string:sub(1, n - i):reverse()\n        end\n  \
    \      i = i - 1\n    end\n    return string\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "  local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \  return string .. prefix:reverse()\nend", "    local string_length = string.len(string)\n\
    \    local palindrome_length = 0\n    local palindrome_end = 0\n    local palindrome_start\
    \ = 0\n    local palindrome_end_index = 0\n    local palindrome_start_index =\
    \ 0\n    local palindrome_length_index = 0\n    local palindrome_end_index_index\
    \ = 0\n    local palindrome_start_index_index = 0\n    local palindrome_length_index_index\
    \ = 0\n    local palindrome_end_index_index_index = 0\n    local palindrome_start_index_index_index\
    \ = 0\n    local palindrome_length_index_index_index = 0\n    local palindrome_end_index_index_index_index\
    \ = 0\n    local palindrome_start_index_index_index_index = 0\n    local palindrome_length_index_index_index_index\
    \ = 0\n    local palindrome_end_index_index_index_index_index = 0\n    local palindrome_start_index_index_index_index_index\
    \ = 0\n    local palindrome_length_index_index_index_index_index = 0\n    local\
    \ palindrome_end_index_index_index_index_index_index = 0\n    local palindrome_start_index_index_index_index_index_index\
    \ = 0\n    local palindrome_length_index_index_index_index_index_index = 0\n \
    \   local palindrome_end_index_index_index_index_index_index_index = 0\n    local\
    \ palindrome_start_index_index_index_index_index_index_index = 0\n    local palindrome_length_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_end_index_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_start_index_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_length_index_index_index_index_index_index_index_index\
    \ = 0\n    local palindrome_end_index_index_", "    local len = #string\n    local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, len - longest_palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ n = #string\n    local i = 1\n    while i <= n do\n        if is_palindrome(string,\
    \ i, n) then\n            return string .. string:sub(1, n - i):reverse()\n  \
    \      end\n        i = i + 1\n    end\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome =\
    \ find_longest_palindrome(string)\n    local prefix = string:sub(1, #string -\
    \ #longest_palindrome)\n    return string .. prefix:reverse()\nend", "    local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome_suffix)\n    return string ..\
    \ prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "  local function find_longest_palindrome_postfix(string)\n\
    \    local function is_palindrome(string)\n      local len = #string\n      for\
    \ i = 1, len / 2 do\n        if string:sub(i, i) ~= string:sub(len - i + 1, len\
    \ - i + 1) then\n          return false\n        end\n      end\n      return\
    \ true\n    end\n    local len = #string\n    for i = len, 1, -1 do\n      if\
    \ is_palindrome(string:sub(i, len)) then\n        return string:sub(i, len)\n\
    \      end\n    end\n    return ''\n  end\n  local palindrome_postfix = find_longest_palindrome_postfix(string)\n\
    \  local palindrome_prefix = string:sub(1, #string - #palindrome_postfix)\n  return\
    \ string .. palindrome_prefix:reverse()\nend", "    local function reverse(string)\n\
    \        local result = ''\n        for i = #string, 1, -1 do\n            result\
    \ = result .. string:sub(i, i)\n        end\n        return result\n    end",
  "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. prefix:reverse()\nend", "  local\
    \ longest_palindrome = find_longest_palindrome(string)\n  local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(longest_palindrome))\n  local reversed_prefix\
    \ = string.reverse(prefix)\n  return string .. reversed_prefix\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local len = #string\n    local i = len\n    while i > 0 do\n      \
    \  if is_palindrome(string, i, len) then\n            return string .. string:sub(1,\
    \ len - i):reverse()\n        end\n        i = i - 1\n    end\n    return string\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local palindrome = string\n   \
    \ local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    while not is_palindrome(palindrome) do\n        palindrome = prefix .. suffix\n\
    \        prefix = prefix:sub(1, #prefix - 1)\n        suffix = suffix .. suffix:sub(1,\
    \ 1)\n    end\n    return palindrome\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix_length(string)\n    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix_length)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local suffix_len = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - suffix_len)\n    return string ..\
    \ prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "  local len = #string\n  local longest_palindrome\
    \ = ''\n  for i = len, 1, -1 do\n    local prefix = string:sub(1, i)\n    local\
    \ suffix = string:sub(i + 1, len)\n    if prefix == reverse(suffix) then\n   \
    \   longest_palindrome = prefix\n      break\n    end\n  end\n  return string\
    \ .. reverse(string:sub(1, len - #longest_palindrome))\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local longest_palindrome = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "  local prefix = string:sub(1, #string -\
    \ find_longest_palindrome_suffix(string))\n  return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "  local function reverse(str)\n   \
    \ local reversed = ''\n    for i = #str, 1, -1 do\n      reversed = reversed ..\
    \ str:sub(i, i)\n    end\n    return reversed\n  end", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local function is_palindrome(string)\n\
    \        local len = #string\n        for i = 1, len / 2 do\n            if string:sub(i,\
    \ i) ~= string:sub(len - i + 1, len - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end", "    local len =\
    \ string:len()\n    local i = len\n    while i > 0 do\n        if is_palindrome(string:sub(1,\
    \ i)) then\n            break\n        end\n        i = i - 1\n    end\n    return\
    \ string .. string:sub(1, len - i):reverse()\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local prefix_reversed = prefix:reverse()\n    local suffix_reversed = suffix:reverse()\n\
    \    local longest_palindrome_suffix = ''\n    local longest_palindrome_suffix_length\
    \ = 0\n    for i = 1, #string do\n        local suffix_candidate = reversed:sub(1,\
    \ i)\n        local prefix_candidate = reversed:sub(i + 1)\n        if suffix_candidate\
    \ == prefix_candidate then\n            longest_palindrome_suffix = suffix_candidate\n\
    \            longest_palindrome_suffix_length = #suffix_candidate\n        end\n\
    \    end\n    return string .. reversed:sub(longest_palindrome_suffix_length +\
    \ 1)\nend", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local function is_palindrome(string)\n\
    \        local len = string:len()\n        for i = 1, len / 2 do\n           \
    \ if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then\n         \
    \       return false\n            end\n        end\n        return true\n    end",
  "    local function is_palindrome(string)\n        local len = #string\n       \
    \ for i = 1, len // 2 do\n            if string:sub(i, i) ~= string:sub(len -\
    \ i + 1, len - i + 1) then\n                return false\n            end\n  \
    \      end\n        return true\n    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - palindrome_suffix:len())\n  \
    \  return string .. string:reverse():sub(1, prefix:len())\nend", "    local reverse\
    \ = string:reverse()\n    local suffix = string:sub(1, #string - 1)\n    local\
    \ prefix = string:sub(2, #string)\n    local longest_suffix_palindrome = longest_palindrome(suffix)\n\
    \    local longest_prefix_palindrome = longest_palindrome(prefix)\n    if #longest_suffix_palindrome\
    \ > #longest_prefix_palindrome then\n        return string .. reverse:sub(#longest_suffix_palindrome\
    \ + 1, #string)\n    else\n        return string .. reverse:sub(#longest_prefix_palindrome\
    \ + 1, #string)\n    end\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local reversed = string:reverse()\n    local\
    \ longest_postfix = longest_common_substring(string, reversed)\n    return string\
    \ .. reversed:sub(#longest_postfix + 1)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local function longest_palindrome_suffix(string)\n        local function\
    \ is_palindrome(string)\n            local i = 1\n            local j = #string\n\
    \            while i < j do\n                if string:sub(i, i) ~= string:sub(j,\
    \ j) then\n                    return false\n                end\n           \
    \     i = i + 1\n                j = j - 1\n            end\n            return\
    \ true\n        end\n        local i = #string\n        while i > 0 do\n     \
    \       if is_palindrome(string:sub(i)) then\n                return string:sub(i)\n\
    \            end\n            i = i - 1\n        end\n        return ''\n    end\n\
    \    local function reverse(string)\n        local reversed = ''\n        for\
    \ i = #string, 1, -1 do\n            reversed = reversed .. string:sub(i, i)\n\
    \        end\n        return reversed\n    end\n    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. reverse(prefix)\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "    local function is_palindrome(string)\n        local len = #string\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local string_length = #string\n\
    \    local result = string\n    local i = 1\n    while i <= string_length do\n\
    \        local j = string_length\n        while j >= i do\n            if string:sub(i,\
    \ j) == string:sub(i, j):reverse() then\n                result = result .. string:sub(1,\
    \ i - 1):reverse()\n                return result\n            end\n         \
    \   j = j - 1\n        end\n        i = i + 1\n    end\n    return result\nend",
  "    local function is_palindrome(string)\n        local len = string:len()\n  \
    \      for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local function find_longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            return string == string:reverse()\n\
    \        end\n        local function find_longest_palindrome_suffix_rec(string,\
    \ suffix)\n            if is_palindrome(string) then\n                return suffix\n\
    \            else\n                return find_longest_palindrome_suffix_rec(string:sub(1,\
    \ #string - 1), string:sub(#string, #string) .. suffix)\n            end\n   \
    \     end\n        return find_longest_palindrome_suffix_rec(string, '')\n   \
    \ end\n    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \  return string .. string.reverse(prefix)\nend", "    local function is_palindrome(string)\n\
    \        local len = string:len()\n        for i = 1, len / 2 do\n           \
    \ if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then\n         \
    \       return false\n            end\n        end\n        return true\n    end",
  "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    local reversed_prefix = prefix:reverse()\n\
    \    return string .. reversed_prefix\nend", "    local prefix = string:sub(1,\
    \ #string - find_longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local function is_palindrome(string)\n        local len = #string\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local function reverse(string)\n\
    \        local reversed = {}\n        for i = #string, 1, -1 do\n            table.insert(reversed,\
    \ string:sub(i, i))\n        end\n        return table.concat(reversed)\n    end",
  "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \  return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \   local len = #string\n    local i = len\n    while i > 0 do\n        local\
    \ prefix = string:sub(1, i)\n        local suffix = string:sub(len - i + 1, len)\n\
    \        if prefix == suffix then\n            return string .. string:sub(i +\
    \ 1, len):reverse()\n        end\n        i = i - 1\n    end\n    return string\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ palindrome_prefix = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))\n\
    \    return string .. palindrome_prefix\nend", "    local suffix_length = longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - suffix_length)\n    return string\
    \ .. prefix:reverse()\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "    local function longest_palindrome_suffix(string)\n        local function is_palindrome(string)\n\
    \            local i = 1\n            local j = #string\n            while i <\
    \ j do\n                if string:sub(i, i) ~= string:sub(j, j) then\n       \
    \             return false\n                end\n                i = i + 1\n \
    \               j = j - 1\n            end\n            return true\n        end\n\
    \        local i = #string\n        while i > 0 do\n            if is_palindrome(string:sub(i))\
    \ then\n                return string:sub(i)\n            end\n            i =\
    \ i - 1\n        end\n        return ''\n    end\n    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end\n\
    \    local palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "  local suffix = longest_palindrome_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - #suffix)\n  return string .. prefix:reverse()\nend", "    local string_length\
    \ = string.len(string)\n    local string_reversed = string.reverse(string)\n \
    \   local longest_common_suffix_length = longest_common_suffix(string, string_reversed)\n\
    \    local string_prefix = string.sub(string, 1, string_length - longest_common_suffix_length)\n\
    \    local string_prefix_reversed = string.reverse(string_prefix)\n    return\
    \ string .. string_prefix_reversed\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \  return string .. string.reverse(prefix)\nend", "    local n = #string\n   \
    \ local suffix_length = 0\n    local suffix_start = 0\n    local suffix_end =\
    \ 0\n    local prefix_start = 0\n    local prefix_end = 0\n    local palindrome_length\
    \ = 0\n    local palindrome_start = 0\n    local palindrome_end = 0\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local s = ''\n    local t = ''\n    local u = ''\n    local v = ''\n    local\
    \ w = ''\n    local x = ''\n    local y = ''\n    local z = ''\n    local aa =\
    \ ''\n    local ab = ''\n    local ac = ''\n    local ad = ''\n    local ae =\
    \ ''\n    local af = ''\n    local ag = ''\n    local ah = ''\n    local ai =\
    \ ''\n    local aj = ''\n    local ak = ''\n    local al = ''\n    local am =\
    \ ''\n    local an = ''\n    local ao = ''\n    local ap = ''\n    local aq =\
    \ ''\n    local ar = ''\n    local as = ''\n    local at = ''\n    local au =\
    \ ''\n    local av = ''\n    local aw = ''\n    local ax = ''\n    local ay =\
    \ ''\n    local az = ''\n    local ba = ''\n    local bb = ''\n    local bc =\
    \ ''\n    local bd = ''\n    local be = ''\n    local bf = ''\n    local bg =\
    \ ''\n    local bh = ''\n    local bi = ''\n    local bj = ''\n    local bk =\
    \ ''\n    local bl = ''\n    local bm = ''\n    local bn = ''\n    local bo =\
    \ ''\n    local bp = ''\n    local bq = ''\n    local br = ''\n    local bs =\
    \ ''\n    local bt = ''\n    local bu = ''\n    local bv = ''\n    local bw =\
    \ ''\n    local bx = ''\n    local by = ''\n    local bz = ''\n    local ca =\
    \ ''\n    local cb = ''\n    local cc = ''\n    local", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())\n\
    \    return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local function find_longest_palindrome_suffix(string)\n        local function\
    \ is_palindrome(string)\n            local i = 1\n            local j = #string\n\
    \            while i < j do\n                if string:sub(i, i) ~= string:sub(j,\
    \ j) then\n                    return false\n                end\n           \
    \     i = i + 1\n                j = j - 1\n            end\n            return\
    \ true\n        end\n        local i = #string\n        while i > 0 do\n     \
    \       if is_palindrome(string:sub(i)) then\n                return string:sub(i)\n\
    \            end\n            i = i - 1\n        end\n        return ''\n    end\n\
    \    local function reverse(string)\n        local reversed = ''\n        for\
    \ i = #string, 1, -1 do\n            reversed = reversed .. string:sub(i, i)\n\
    \        end\n        return reversed\n    end\n    local palindrome_suffix =\
    \ find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. reverse(prefix)\nend", "  local\
    \ suffix = longest_palindrome_suffix(string)\n  local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n  return string .. string.reverse(prefix)\n\
    end", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix_len = 0\n    local suffix_len =\
    \ 0\n    local prefix = ''\n    local suffix = ''\n    local palindrome = ''\n\
    \    local i = 1\n    local j = #string\n    while i <= j do\n        if string:sub(i,\
    \ j) == string:sub(j, i) then\n            prefix_len = i - 1\n            suffix_len\
    \ = j\n            break\n        end\n        i = i + 1\n        j = j - 1\n\
    \    end\n    if prefix_len > 0 then\n        prefix = string:sub(1, prefix_len)\n\
    \        suffix = string:sub(suffix_len + 1)\n        palindrome = string .. prefix:reverse()\n\
    \    else\n        palindrome = string .. string:reverse()\n    end\n    return\
    \ palindrome\nend", "    local len = string:len()\n    local i = len\n    while\
    \ i > 0 do\n        if string:sub(1, i) == string:sub(len - i + 1, len):reverse()\
    \ then\n            return string .. string:sub(1, len - i):reverse()\n      \
    \  end\n        i = i - 1\n    end\n    return string\nend", "    local suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local function is_palindrome(string)\n        local len = #string\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local reversed_string = string:reverse()\n\
    \    local longest_postfix = longest_common_substring(string, reversed_string)\n\
    \    local prefix = string:sub(1, string:len() - longest_postfix:len())\n    return\
    \ string .. reversed_string:sub(1, prefix:len())\nend", "    local function reverse(string)\n\
    \        return string:reverse()\n    end", "    local len = string:len()\n  \
    \  local palindrome_suffix = find_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, len - palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "    local length = #string\n    local palindrome_length = 0\n    local\
    \ palindrome_start = 0\n    local palindrome_end = 0\n    local i = 1\n    while\
    \ i <= length do\n        local j = 1\n        while j <= length do\n        \
    \    if i + j - 1 > length then\n                break\n            end\n    \
    \        if string:sub(i, i + j - 1) == string:sub(length - j + 1, length - (i\
    \ - 1)) then\n                if j > palindrome_length then\n                \
    \    palindrome_length = j\n                    palindrome_start = i\n       \
    \             palindrome_end = i + j - 1\n                end\n            end\n\
    \            j = j + 1\n        end\n        i = i + 1\n    end\n    if palindrome_length\
    \ == 0 then\n        return string\n    end\n    return string .. string:sub(palindrome_start,\
    \ palindrome_end - 1):reverse()\nend", "    local longest_palindrome_suffix =\
    \ find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local longest_palindrome = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ n = #string\n    local suffix = string\n    local prefix = ''\n    local i =\
    \ 1\n    while i <= n do\n        if is_palindrome(suffix) then\n            break\n\
    \        end\n        suffix = string.sub(string, i, n)\n        prefix = string.sub(string,\
    \ 1, i - 1)\n        i = i + 1\n    end\n    return string .. string.reverse(prefix)\n\
    end", "    local prefix_len = find_longest_palindrome_postfix(string)\n    local\
    \ prefix = string:sub(1, prefix_len)\n    local suffix = string:sub(prefix_len\
    \ + 1)\n    return string .. reverse(suffix)\nend", "    local len = #string\n\
    \    local palindrome_len = 0\n    local palindrome_pos = 0\n    local i = 1\n\
    \    while i <= len do\n        local j = 1\n        while j <= len - i + 1 do\n\
    \            if string:sub(i, i + j - 1) == string:sub(len - j + 1, len - i +\
    \ j) then\n                if j > palindrome_len then\n                    palindrome_len\
    \ = j\n                    palindrome_pos = i\n                end\n         \
    \   end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return\
    \ string .. string:sub(1, palindrome_pos - 1):reverse()\nend", "    local n =\
    \ #string\n    local i = n\n    while i > 0 do\n        local prefix = string:sub(1,\
    \ i)\n        local suffix = string:sub(n - i + 1, n)\n        if prefix == suffix\
    \ then\n            return string .. string:sub(i + 1, n):reverse()\n        end\n\
    \        i = i - 1\n    end\n    return string\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "  local prefix = string:sub(1, #string -\
    \ longest_palindrome_suffix(string))\n  return string .. prefix:reverse()\nend",
  "    local prefix = string:sub(1, math.floor(#string / 2))\n    local postfix =\
    \ string:sub(math.ceil(#string / 2) + 1)\n    local longest_palindrome_postfix\
    \ = find_longest_palindrome_postfix(postfix)\n    local prefix_to_append = prefix:sub(1,\
    \ #prefix - #longest_palindrome_postfix)\n    return string .. prefix_to_append:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix_length = longest_palindromic_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - suffix_length)\n    return string .. prefix:reverse()\n\
    end", "  local suffix_len = longest_palindrome_suffix(string)\n  local prefix\
    \ = string:sub(1, #string - suffix_len)\n  return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local s = string\n    local l = #s\n    local i = 1\n    local j =\
    \ l\n    local k = 0\n    local t = {}\n    while i <= j do\n        if s:sub(i,\
    \ j) == s:sub(j, i) then\n            k = j\n        end\n        i = i + 1\n\
    \        j = j - 1\n    end\n    for i = k + 1, l do\n        t[#t + 1] = s:sub(i,\
    \ i)\n    end\n    return s .. table.concat(t):reverse()\nend", "    local string_len\
    \ = #string\n    local palindrome_len = 0\n    local palindrome_pos = 0\n    local\
    \ palindrome_table = {}\n    local i = 1\n    local j = string_len\n    local\
    \ k = 1\n    local l = 1\n    local m = 0\n    local n = 0\n    local o = 0\n\
    \    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local\
    \ t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n\
    \    local y = 0\n    local z = 0\n    local aa = 0\n    local ab = 0\n    local\
    \ ac = 0\n    local ad = 0\n    local ae = 0\n    local af = 0\n    local ag =\
    \ 0\n    local ah = 0\n    local ai = 0\n    local aj = 0\n    local ak = 0\n\
    \    local al = 0\n    local am = 0\n    local an = 0\n    local ao = 0\n    local\
    \ ap = 0\n    local aq = 0\n    local ar = 0\n    local as = 0\n    local at =\
    \ 0\n    local au = 0\n    local av = 0\n    local aw = 0\n    local ax = 0\n\
    \    local ay = 0\n    local az = 0\n    local ba = 0\n    local bb = 0\n    local\
    \ bc = 0\n    local bd = 0\n    local be = 0\n    local bf = 0\n    local bg =\
    \ 0\n    local bh = 0\n    local bi = 0\n    local bj = 0\n    local bk = 0\n\
    \    local bl = 0\n    local bm = 0\n    local bn = 0\n    local bo = 0\n    local\
    \ bp = 0\n    local bq = 0\n    local br = 0\n    local bs = 0\n    local bt =\
    \ 0\n    local bu = 0\n    local bv = 0\n    local bw = 0\n    local bx = 0\n\
    \    local by = 0\n    local bz = 0\n    local ca = 0\n    local cb = 0\n    local\
    \ cc = 0\n    local cd = 0\n    local", "    local longest_suffix = longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local length = #string\n    local suffix = string\n\
    \    local prefix = ''\n    local palindrome = ''\n    local i = 1\n    while\
    \ i <= length do\n        local j = length - i + 1\n        if is_palindrome(suffix)\
    \ then\n            palindrome = suffix .. reverse(prefix)\n            break\n\
    \        end\n        prefix = prefix .. string:sub(j, j)\n        suffix = string:sub(i,\
    \ length)\n        i = i + 1\n    end\n    return palindrome\nend", "    local\
    \ n = #string\n    local i = n\n    while i > 0 do\n        if is_palindrome(string,\
    \ i, n) then\n            return string .. string:sub(1, n - i):reverse()\n  \
    \      end\n        i = i - 1\n    end\n    return string\nend", "    local string_length\
    \ = #string\n    local palindrome_length = 0\n    local palindrome_end = 0\n \
    \   local palindrome_start = 0\n    local palindrome_end_next = 0\n    local palindrome_start_next\
    \ = 0\n    local palindrome_length_next = 0\n    local palindrome_length_max =\
    \ 0\n    local palindrome_end_max = 0\n    local palindrome_start_max = 0\n  \
    \  local palindrome_length_max_next = 0\n    local palindrome_end_max_next = 0\n\
    \    local palindrome_start_max_next = 0\n    local palindrome_length_max_next_next\
    \ = 0\n    local palindrome_end_max_next_next = 0\n    local palindrome_start_max_next_next\
    \ = 0\n    local palindrome_length_max_next_next_next = 0\n    local palindrome_end_max_next_next_next\
    \ = 0\n    local palindrome_start_max_next_next_next = 0\n    local palindrome_length_max_next_next_next_next\
    \ = 0\n    local palindrome_end_max_next_next_next_next = 0\n    local palindrome_start_max_next_next_next_next\
    \ = 0\n    local palindrome_length_max_next_next_next_next_next = 0\n    local\
    \ palindrome_end_max_next_next_next_next_next = 0\n    local palindrome_start_max_next_next_next_next_next\
    \ = 0\n    local palindrome_length_max_next_next_next_next_next_next = 0\n   \
    \ local palindrome_end_max_next_next_next_next_next_next = 0\n    local palindrome_start_max_next_next_next_next_next_next\
    \ = 0\n    local palindrome_length_max_next_next_next_next_next_next_next = 0\n\
    \    local palindrome_end_max_next_next_next_next_next_next_next = 0\n    local\
    \ palindrome_", "  local string_length = string.len(string)\n  local palindrome_length\
    \ = 0\n  local palindrome_end = 0\n  local palindrome_start = 0\n  local palindrome_length_at\
    \ = {}\n  for i = 1, string_length do\n    palindrome_length_at[i] = 0\n  end\n\
    \  for i = 1, string_length do\n    local j = i\n    while j > 0 and string.sub(string,\
    \ j, j) == string.sub(string, i, i) do\n      j = j - 1\n    end\n    palindrome_length_at[i]\
    \ = i - j\n  end\n  for i = 1, string_length do\n    local j = i - palindrome_length_at[i]\n\
    \    if j > 0 and palindrome_length_at[j] == j then\n      palindrome_length =\
    \ palindrome_length_at[i]\n      palindrome_end = i\n      palindrome_start =\
    \ j\n    end\n  end\n  local prefix = string.sub(string, 1, palindrome_start -\
    \ 1)\n  local prefix_length = string.len(prefix)\n  local prefix_reversed = ''\n\
    \  for i = prefix_length, 1, -1 do\n    prefix_reversed = prefix_reversed .. string.sub(prefix,\
    \ i, i)\n  end\n  return string .. prefix_reversed\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \   local longest_palindrome = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local reversed_string = string:reverse()\n\
    \    local string_length = string:len()\n    local reversed_string_length = reversed_string:len()\n\
    \    local longest_palindrome_length = 0\n    local longest_palindrome_index =\
    \ 0\n    local longest_palindrome_suffix = ''\n    local longest_palindrome_prefix\
    \ = ''\n    local longest_palindrome_suffix_index = 0\n    local longest_palindrome_prefix_index\
    \ = 0\n    local longest_palindrome_suffix_length = 0\n    local longest_palindrome_prefix_length\
    \ = 0\n    local longest_palindrome_suffix_reversed = ''\n    local longest_palindrome_prefix_reversed\
    \ = ''\n    local longest_palindrome_suffix_reversed_length = 0\n    local longest_palindrome_prefix_reversed_length\
    \ = 0\n    local longest_palindrome_suffix_reversed_index = 0\n    local longest_palindrome_prefix_reversed_index\
    \ = 0\n    local longest_palindrome_suffix_reversed_index_in_string = 0\n    local\
    \ longest_palindrome_prefix_reversed_index_in_string = 0\n    local longest_palindrome_suffix_reversed_index_in_string_length\
    \ = 0\n    local longest_palindrome_prefix_reversed_index_in_string_length = 0\n\
    \    local longest_palindrome_suffix_reversed_index_in_string_index = 0\n    local\
    \ longest_palindrome_prefix_reversed_index_in_string_index = 0\n    local longest_palindrome_suffix_reversed_index_in_string_index_length\
    \ = 0\n    local longest_palindrome_prefix_reversed_index_in_string_index_length\
    \ = 0\n    local longest_palindrome_suffix_reversed_index_in_string_index_index\
    \ = 0\n    local longest_palindrome_prefix_reversed_index_in_string_index_index\
    \ = 0\n    local longest_palindrome_suffix_", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, string:len()\
    \ - longest_palindrome_suffix:len())\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    return string .. string.reverse(string.sub(string,\
    \ 1, #string - #longest_palindrome_suffix))\nend", "    local length = #string\n\
    \    local palindrome_length = 0\n    for i = 1, length do\n        if string:sub(1,\
    \ i) == string:sub(length - i + 1, length):reverse() then\n            palindrome_length\
    \ = i\n        end\n    end\n    return string .. string:sub(1, length - palindrome_length):reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    local\
    \ reversed_prefix = prefix:reverse()\n    return string .. reversed_prefix\nend",
  "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "  local longest_palindrome\
    \ = find_longest_palindrome(string)\n  local prefix = string:sub(1, #string -\
    \ #longest_palindrome)\n  return string .. prefix:reverse()\nend", "    local\
    \ len = string:len()\n    local suffix = string:sub(len)\n    local prefix = string:sub(1,\
    \ len - 1)\n    local prefix_len = prefix:len()\n    local suffix_len = suffix:len()\n\
    \    local palindrome_len = 0\n    local palindrome_start = 0\n    local palindrome_end\
    \ = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n  \
    \  local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q\
    \ = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n  \
    \  local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z\
    \ = 0\n    local aa = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n\
    \    local ae = 0\n    local af = 0\n    local ag = 0\n    local ah = 0\n    local\
    \ ai = 0\n    local aj = 0\n    local ak = 0\n    local al = 0\n    local am =\
    \ 0\n    local an = 0\n    local ao = 0\n    local ap = 0\n    local aq = 0\n\
    \    local ar = 0\n    local as = 0\n    local at = 0\n    local au = 0\n    local\
    \ av = 0\n    local aw = 0\n    local ax = 0\n    local ay = 0\n    local az =\
    \ 0\n    local ba = 0\n    local bb = 0\n    local bc = 0\n    local bd = 0\n\
    \    local be = 0\n    local bf = 0\n    local bg = 0\n    local bh = 0\n    local\
    \ bi = 0\n    local bj = 0\n    local bk = 0\n    local bl = 0\n    local bm =\
    \ 0\n    local bn = 0\n    local bo = 0\n    local bp = 0\n    local bq = 0\n\
    \    local br = 0\n    local bs = 0\n    local bt = 0\n    local bu = 0\n    local\
    \ bv = 0\n    local bw = 0\n   ", "  local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return\
    \ string .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local len = #string\n    local palindrome_len = 0\n    local palindrome_pos\
    \ = 0\n    local i = 1\n    while i <= len do\n        local j = 1\n        while\
    \ i - j >= 1 and i + j <= len and string:sub(i - j, i - j) == string:sub(i + j,\
    \ i + j) do\n            j = j + 1\n        end\n        j = j - 1\n        if\
    \ j > palindrome_len then\n            palindrome_len = j\n            palindrome_pos\
    \ = i\n        end\n        i = i + 1\n    end\n    if palindrome_len == 0 then\n\
    \        return string\n    end\n    local prefix = string:sub(1, palindrome_pos\
    \ - palindrome_len - 1)\n    return string .. string:reverse():sub(1, #prefix)\n\
    end", "    local n = #string\n    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.reverse(string:sub(1, n - palindrome_suffix))\n\
    \    return string .. palindrome_prefix\nend", "    local function reverse(string)\n\
    \        local result = ''\n        for i = #string, 1, -1 do\n            result\
    \ = result .. string:sub(i, i)\n        end\n        return result\n    end",
  "  local suffix = longest_palindrome_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - #suffix)\n  return string .. prefix:reverse()\nend", "    local palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    local reversed_prefix\
    \ = prefix:reverse()\n    return string .. reversed_prefix\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \ local palindrome_suffix = find_longest_palindrome_suffix(string)\n  local palindrome_prefix\
    \ = string.reverse(string.sub(string, 1, string.len(string) - string.len(palindrome_suffix)))\n\
    \  return string .. palindrome_prefix\nend", "    local function is_palindrome(string)\n\
    \        local len = #string\n        for i = 1, len / 2 do\n            if string:sub(i,\
    \ i) ~= string:sub(len - i + 1, len - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end", "    local suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #suffix)\n    return string .. prefix:reverse()\nend", "    local function\
    \ is_palindrome(string)\n        local length = #string\n        for i = 1, length\
    \ / 2 do\n            if string:sub(i, i) ~= string:sub(length - i + 1, length\
    \ - i + 1) then\n                return false\n            end\n        end\n\
    \        return true\n    end", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n    return string ..\
    \ string.reverse(prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local reversed = string:reverse()\n    local\
    \ suffix = string:sub(1, #string - 1)\n    local prefix = string:sub(2, #string)\n\
    \    local suffix_palindrome = reversed:find(suffix)\n    local prefix_palindrome\
    \ = reversed:find(prefix)\n    if suffix_palindrome then\n        return string\
    \ .. reversed:sub(suffix_palindrome + 1, #string)\n    elseif prefix_palindrome\
    \ then\n        return string .. reversed:sub(prefix_palindrome + 1, #string)\n\
    \    else\n        return string .. reversed:sub(1, #string)\n    end\nend", " \
    \ local palindrome_suffix = find_palindrome_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - #palindrome_suffix)\n  return string .. reverse(prefix)\nend", " \
    \   local n = #string\n    local i = n\n    while i > 0 do\n        if is_palindrome(string,\
    \ i, n) then\n            break\n        end\n        i = i - 1\n    end\n   \
    \ return string .. string:sub(1, n - i):reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "  local palindrome_suffix = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n  return string .. prefix:reverse()\n\
    end", "    local function reverse(s)\n        local r = ''\n        for i = 1,\
    \ #s do\n            r = s:sub(i, i) .. r\n        end\n        return r\n   \
    \ end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n   \
    \ local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local palindrome = string\n    local prefix\
    \ = string:sub(1, #string - 1)\n    while prefix ~= '' and not is_palindrome(prefix)\
    \ do\n        palindrome = palindrome .. prefix:reverse()\n        prefix = prefix:sub(1,\
    \ #prefix - 1)\n    end\n    return palindrome\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local function reverse(string)\n        return string:reverse()\n \
    \   end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.reverse(string.sub(string, 1, #string -\
    \ #palindrome_suffix))\n    return string .. palindrome_prefix\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
