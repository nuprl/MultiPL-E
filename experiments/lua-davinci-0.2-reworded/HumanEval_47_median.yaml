name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2, 4,\
  \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] =\
    \ v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n  \
    \      return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1)\
    \ / 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n     \
    \   table.insert(t, v)\n    end\n    table.sort(t)\n    local n = #t\n    if n\
    \ == 0 then\n        return nil\n    elseif n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "    local t = copy(l)\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n =\
    \ #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local sorted = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n\
    \    return sorted[(n + 1) / 2]\n  end\nend", "  local t = copy(l)\n  table.sort(t)\n\
    \  local n = #t\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend", "  local t = copy(l)\n  table.sort(t)\n  local n = #t\n  if n %\
    \ 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n\
    \ + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n  \
    \      table.insert(t, v)\n    end\n    table.sort(t)\n    local n = #t\n    if\
    \ n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n  \
    \      return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in\
    \ ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[math.ceil(n / 2)]\n    end\nend", "  local t = {}\n\
    \  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local\
    \ n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "    local n = #l\n    if n == 0 then\n\
    \        return nil\n    end\n    table.sort(l)\n    if n % 2 == 0 then\n    \
    \    return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[math.ceil(n\
    \ / 2)]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n    \
    \    t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2\
    \ == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return\
    \ t[(n + 1) / 2]\n    end\nend", "    local sorted = {}\n    for _, v in ipairs(l)\
    \ do\n        table.insert(sorted, v)\n    end\n    table.sort(sorted)\n    local\
    \ n = #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n\
    \ / 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "  local n = #l\n  if n == 0 then return nil end\n  local\
    \ sorted = {}\n  for i, v in ipairs(l) do\n    sorted[i] = v\n  end\n  table.sort(sorted)\n\
    \  if n % 2 == 1 then\n    return sorted[(n + 1) / 2]\n  else\n    return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n  end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 ==\
    \ 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n +\
    \ 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t\
    \ + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n   \
    \ return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ table.insert(t, v)\n    end\n    table.sort(t)\n    local n = #t\n    if n %\
    \ 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n      \
    \  return t[(n + 1) / 2]\n    end\nend", "    local n = #l\n    table.sort(l)\n\
    \    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n\
    \        return l[(n + 1) / 2]\n    end\nend", "  local l = copy(l)\n  table.sort(l)\n\
    \  local n = #l\n  if n % 2 == 0 then\n    return (l[n / 2] + l[n / 2 + 1]) /\
    \ 2\n  else\n    return l[(n + 1) / 2]\n  end\nend", "    local t = copy(l)\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n/2]\
    \ + t[n/2+1]) / 2\n    else\n        return t[(n+1)/2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ n = #l\n    local m = n % 2\n    local s = n // 2\n    if m == 0 then\n    \
    \    return (l[s] + l[s + 1]) / 2\n    else\n        return l[s + 1]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 ==\
    \ 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return\
    \ t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        table.insert(t, v)\n    end\n    table.sort(t)\n    local n = #t\n\
    \    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n \
    \   for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n   \
    \ else\n        return t[math.ceil(#t / 2)]\n    end\nend", "    local t = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = copy(l)\n    table.sort(t)\n    local n = #t\n    if n == 0 then\n     \
    \   return nil\n    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ l = copy(l)\n  table.sort(l)\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return l[(n + 1) / 2]\n  end\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n  \
    \  end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n   \
    \ end\nend", "    local t = {}\n    for i, v in ipairs(l) do\n        t[i] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "  local s = sort(l)\n  local n = #s\n  if n % 2 == 0 then\n\
    \    return (s[n/2] + s[n/2+1]) / 2\n  else\n    return s[math.ceil(n/2)]\n  end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ table.insert(t, v)\n    end\n    table.sort(t)\n    local n = #t\n    if n %\
    \ 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n      \
    \  return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n  \
    \  local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local l = copy(l)\n\
    \    table.sort(l)\n    local n = #l\n    if n % 2 == 0 then\n        return (l[n\
    \ / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(t,\
    \ v)\n\tend\n\ttable.sort(t)\n\tlocal n = #t\n\tif n == 0 then\n\t\treturn nil\n\
    \telseif n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\
    \treturn t[(n + 1) / 2]\n\tend\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        table.insert(t, v)\n    end\n    table.sort(t)\n    local n = #t\n\
    \    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n  \
    \  local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[math.ceil(n / 2)]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ l = clone(l)\n    table.sort(l)\n    local n = #l\n    if n % 2 == 0 then\n\
    \        return (l[n/2] + l[n/2+1]) / 2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t\
    \ + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n == 0 then\n\
    \        return nil\n    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n\
    \ / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local t = table.copy(l)\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "  local m = {}\n  for _, v in ipairs(l) do\n    m[#m + 1] = v\n  end\n\
    \  table.sort(m)\n  local n = #m\n  if n % 2 == 0 then\n    return (m[n / 2] +\
    \ m[n / 2 + 1]) / 2\n  else\n    return m[(n + 1) / 2]\n  end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend",
  "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n  \
    \  local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t\
    \ = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n  \
    \  local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t\
    \ = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for i, v in ipairs(l) do\n \
    \   t[i] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n \
    \   return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t,\
    \ v)\n  end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n    return 0\n\
    \  elseif n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[math.ceil(n / 2)]\n  end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n =\
    \ #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  if #t % 2 == 0 then\n    return\
    \ (t[#t / 2] + t[#t / 2 + 1]) / 2\n  else\n    return t[math.ceil(#t / 2)]\n \
    \ end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n  \
    \      t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n %\
    \ 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n      \
    \  return t[(n + 1) / 2]\n    end\nend", "    local t = copy(l)\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n/2] + t[n/2+1])\
    \ / 2\n    else\n        return t[(n+1)/2]\n    end\nend", "    local t = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(t, v)\n\tend\n\ttable.sort(t)\n\
    \tlocal n = #t\n\tif n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local n = #l\n    if n == 0 then\n       \
    \ return nil\n    end\n    local t = {}\n    for i, v in ipairs(l) do\n      \
    \  t[i] = v\n    end\n    table.sort(t)\n    if n % 2 == 0 then\n        return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[math.ceil(n / 2)]\n\
    \    end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[math.ceil(n / 2)]\n   \
    \ end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n \
    \   end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n       \
    \ return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n\
    \    end\nend", "  local t = {}\n  for k, v in pairs(l) do\n    table.insert(t,\
    \ v)\n  end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n    return 0\n\
    \  elseif n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "  local l = copy(l)\n  table.sort(l)\n\
    \  local n = #l\n  if n % 2 == 0 then\n    return (l[n / 2] + l[n / 2 + 1]) /\
    \ 2\n  else\n    return l[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = copy(l)\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n/2] + t[n/2+1]) / 2\n    else\n        return t[(n+1)/2]\n\
    \    end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t,\
    \ v)\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend",
  "  local t = table.copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n\
    \    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[math.ceil(n / 2)]\n  end\nend",
  "    local t = copy(l)\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n/2] + t[n/2+1]) / 2\n    else\n        return t[(n+1)/2]\n\
    \    end\nend", "  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n\
    \    return sorted[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = sort(l)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[#t + 1] = v\n    end\n    table.sort(t)\n    if #t % 2 == 0 then\n\
    \        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n    else\n        return t[math.ceil(#t\
    \ / 2)]\n    end\nend", "    local sorted = {}\n    for i, v in ipairs(l) do\n\
    \        sorted[i] = v\n    end\n    table.sort(sorted)\n    local mid = math.floor(#sorted\
    \ / 2)\n    if #sorted % 2 == 0 then\n        return (sorted[mid] + sorted[mid\
    \ + 1]) / 2\n    else\n        return sorted[mid + 1]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "\tlocal t = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\ttable.insert(t, v)\n\tend\n\ttable.sort(t)\n\tlocal n\
    \ = #t\n\tif n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\telse\n\
    \t\treturn t[(n + 1) / 2]\n\tend\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "\tlocal t = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\ttable.insert(t, v)\n\tend\n\ttable.sort(t)\n\tlocal n = #t\n\
    \tif n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn\
    \ t[(n + 1) / 2]\n\tend\nend", "  local n = #l\n  if n == 0 then return nil end\n\
    \  local m = n % 2\n  if m == 0 then\n    return (l[n / 2] + l[n / 2 + 1]) / 2\n\
    \  else\n    return l[(n + 1) / 2]\n  end\nend", "    local n = #l\n    if n ==\
    \ 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if\
    \ n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return\
    \ l[m + 1]\n    end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t\
    \ + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n   \
    \ return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\n\
    end", "    local n = #l\n    if n == 0 then\n        return nil\n    end\n   \
    \ local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] +\
    \ l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend", "  local t\
    \ = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[#t + 1] = v\n\tend\n\ttable.sort(t)\n\
    \tlocal n = #t\n\tif n % 2 == 0 then\n\t\treturn (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n =\
    \ #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local m = #t\n  \
    \  if m % 2 == 0 then\n        return (t[m / 2] + t[m / 2 + 1]) / 2\n    else\n\
    \        return t[math.ceil(m / 2)]\n    end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  if #t % 2 ==\
    \ 0 then\n    return (t[#t / 2] + t[#t / 2 + 1]) / 2\n  else\n    return t[math.ceil(#t\
    \ / 2)]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t +\
    \ 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n == 0 then\n    return 0\n  elseif n % 2 == 0 then\n    return (t[n / 2]\
    \ + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t,\
    \ v)\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend",
  "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n  \
    \  local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t\
    \ = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = copy(l)\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n \
    \       return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "    local t = copy(l)\n    table.sort(t)\n    local\
    \ n = #t\n    if n == 0 then\n        return nil\n    elseif n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "    local t = copy(l)\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n =\
    \ #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n \
    \   for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = table.copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n \
    \   return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t,\
    \ v)\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return\
    \ (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend",
  "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local n = #l\n    if\
    \ n == 0 then\n        return nil\n    end\n    local sorted = {}\n    for i,\
    \ v in ipairs(l) do\n        sorted[i] = v\n    end\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n        return sorted[(n + 1) / 2]\n    else\n      \
    \  return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\nend", "    local t\
    \ = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n  \
    \  table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local n = #l\n    if n == 0 then\n       \
    \ return nil\n    end\n    local s = l\n    table.sort(s)\n    if n % 2 == 0 then\n\
    \        return (s[n / 2] + s[n / 2 + 1]) / 2\n    else\n        return s[(n +\
    \ 1) / 2]\n    end\nend", "  local t = table.copy(l)\n  table.sort(t)\n  local\
    \ n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 ==\
    \ 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n +\
    \ 1) / 2]\n  end\nend", "  local t = table.copy(l)\n  table.sort(t)\n  local n\
    \ = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 ==\
    \ 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n +\
    \ 1) / 2]\n  end\nend", "    local t = table.copy(l)\n    table.sort(t)\n    local\
    \ n = #t\n    if n == 0 then\n        return nil\n    elseif n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t\
    \ + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n    return\
    \ nil\n  elseif n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n == 0 then\n\
    \    return nil\n  elseif n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1])\
    \ / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = copy(l)\n\
    \    table.sort(t)\n    local n = #t\n    if n == 0 then\n        return nil\n\
    \    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n  \
    \  else\n        return t[(n + 1) / 2]\n    end\nend", "    local t = table.copy(l)\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "    local t = sorted(l)\n    local n = #t\n    if n == 0\
    \ then\n        return nil\n    elseif n % 2 == 0 then\n        return (t[n/2]\
    \ + t[n/2+1]) / 2\n    else\n        return t[(n+1)/2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = copy(l)\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 ==\
    \ 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return\
    \ t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n\
    \ % 2 == 0 then\n        return (t[n/2] + t[n/2 + 1]) / 2\n    else\n        return\
    \ t[(n + 1)/2]\n    end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n \
    \   t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n\
    \    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n\
    \  end\n  table.sort(t)\n  if #t % 2 == 0 then\n    return (t[#t / 2] + t[#t /\
    \ 2 + 1]) / 2\n  else\n    return t[math.ceil(#t / 2)]\n  end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t\
    \ / 2 + 1]) / 2\n    else\n        return t[math.ceil(#t / 2)]\n    end\nend",
  "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  if #t % 2 == 0 then\n    return (t[#t / 2] + t[#t / 2 + 1]) / 2\n  else\n \
    \   return t[math.ceil(#t / 2)]\n  end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n =\
    \ #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local t = copy(l)\n  table.sort(t)\n\
    \  return t[math.ceil(#t / 2)]\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 ==\
    \ 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n +\
    \ 1) / 2]\n  end\nend", "  local t = copy(l)\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n \
    \   t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  local m = n % 2\n\
    \  if m == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n\
    \ % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n    \
    \    return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in\
    \ ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    if #t %\
    \ 2 == 0 then\n        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n    else\n    \
    \    return t[math.ceil(#t / 2)]\n    end\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if\
    \ n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n\
    \ % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n    \
    \    return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(t, v)\n  end\n  table.sort(t)\n  local n = #t\n  if n ==\
    \ 0 then\n    return nil\n  elseif n % 2 == 0 then\n    return (t[n / 2] + t[n\
    \ / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t\
    \ = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n  \
    \  local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 +\
    \ 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n\
    \    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n      \
    \  return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) /\
    \ 2]\n    end\nend", "  local t = copy(l)\n  table.sort(t)\n  local n = #t\n \
    \ if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local t = copy(l)\n    table.sort(t)\n   \
    \ return (t[#t//2] + t[(#t+1)//2]) / 2\nend", "    local t = copy(l)\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n \
    \   table.insert(t, v)\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 ==\
    \ 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n +\
    \ 1) / 2]\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
