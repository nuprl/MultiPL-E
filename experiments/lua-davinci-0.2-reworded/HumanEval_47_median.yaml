name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2, 4,\
  \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    local n = #t\n    if n == 0 then\n     \
    \   return nil\n    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = copy(l)\n  sort(t)\n  local n = #t\n  if n == 0 then\n    return nil\n \
    \ elseif n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n \
    \   return t[(n + 1) / 2]\n  end\nend", "    local t = copy(l)\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ m = {}\n  for _, v in ipairs(l) do\n    m[#m + 1] = v\n  end\n  table.sort(m)\n\
    \  local n = #m\n  if n % 2 == 0 then\n    return (m[n / 2] + m[n / 2 + 1]) /\
    \ 2\n  else\n    return m[(n + 1) / 2]\n  end\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n\
    \ % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n    \
    \    return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v in\
    \ ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n\
    \ = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n \
    \   for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n   \
    \ else\n        return t[math.ceil(#t / 2)]\n    end\nend", "    local t = copy(l)\n\
    \    table.sort(t)\n    local n = #t\n    if n == 0 then\n        return nil\n\
    \    elseif n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n  \
    \  else\n        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n  local\
    \ n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "  local t = copy(l)\n  table.sort(t)\n\
    \  local n = #t\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[#t +\
    \ 1] = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend", "    local t = copy(l)\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "    local t = {}\n \
    \   for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        table.insert(t, v)\n    end\n\
    \    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
