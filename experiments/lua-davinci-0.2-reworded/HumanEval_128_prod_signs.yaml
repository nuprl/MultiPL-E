name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given a table arr of integers and you need to return\n-- sum of\
  \ magnitudes of integers multiplied by product of all signs\n-- of each number in\
  \ the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n--\
  \ Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
  -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n \
    \   if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum\
    \ - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "    if #arr == 0 then return nil end\n   \
    \ local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if\
    \ v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n         \
    \   sum = sum - v\n            prod = prod * -1\n        end\n    end\n    return\
    \ sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n      sum = sum + -v\n    else\n      prod\
    \ = prod * 0\n      sum = sum + 0\n    end\n  end\n  return prod * sum\nend",
  "  if #arr == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v > 0 then prod = prod\
    \ * 1\n    elseif v < 0 then prod = prod * -1\n    end\n  end\n  return sum *\
    \ prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n\
    \    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      prod = prod * -1\n      sum = sum + math.abs(v)\n    else\n  \
    \    prod = prod * 0\n    end\n  end\n  return prod * sum\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v < 0 then\n      prod = prod * -1\n    elseif v > 0 then\n      prod\
    \ = prod * 1\n    else\n      prod = prod * 0\n    end\n  end\n  return prod *\
    \ sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n\
    \    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum\
    \ - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  if #arr == 0 then return nil end\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    local sign = v > 0 and 1 or v <\
    \ 0 and -1 or 0\n    sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n\
    \  return prod == 0 and nil or sum * prod\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v > 0 then\n      prod\
    \ = prod * 1\n    elseif v < 0 then\n      prod = prod * -1\n    else\n      prod\
    \ = prod * 0\n    end\n  end\n  return sum * prod\nend", "  local prod = 1\n \
    \ local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod =\
    \ prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n\
    \      sum = sum + math.abs(v)\n    else\n      prod = prod * 0\n    end\n  end\n\
    \  return prod * sum\nend", "  if #arr == 0 then return nil end\n  local sum =\
    \ 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then prod = prod * 1\n    elseif v < 0 then prod = prod * -1\n \
    \   end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  if #arr == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v > 0 then prod = prod\
    \ * 1\n    elseif v < 0 then prod = prod * -1\n    end\n  end\n  return sum *\
    \ prod\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
