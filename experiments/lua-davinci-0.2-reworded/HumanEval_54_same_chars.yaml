---
name: HumanEval_54_same_chars
language: lua
prompt: |
  -- Check if two words have the same characters.
  -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
  -- true
  -- >>> same_chars('abcd', 'dddddddabc')
  -- true
  -- >>> same_chars('dddddddabc', 'abcd')
  -- true
  -- >>> same_chars('eabcd', 'dddddddabc')
  -- false
  -- >>> same_chars('abcd', 'dddddddabce')
  -- false
  -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
  -- false
  local function same_chars(s0, s1)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = same_chars
      lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)
      lu.assertEquals(candidate('abcd', 'dddddddabc'), true)
      lu.assertEquals(candidate('dddddddabc', 'abcd'), true)
      lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)
      lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)
      lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)
      lu.assertEquals(candidate('aabb', 'aaccc'), false)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = char_counts(s0)
      local c1 = char_counts(s1)
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in utf8.chars(s0) do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in utf8.chars(s1) do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local s0_chars = {}
    local s1_chars = {}
    for i = 1, #s0 do
      s0_chars[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      s1_chars[s1:sub(i, i)] = true
    end
    for k, _ in pairs(s0_chars) do
      if not s1_chars[k] then
        return false
      end
    end
    for k, _ in pairs(s1_chars) do
      if not s0_chars[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = count_chars(s0)
      local c1 = count_chars(s1)
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = count_chars(s0)
      local c1 = count_chars(s1)
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          c0[c] = (c0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          c1[c] = (c1[c] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = count_chars(s0)
      local c1 = count_chars(s1)
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    if #s0 ~= #s1 then return false end
    local t0, t1 = {}, {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then return false end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if v ~= t1[k] then
              return false
          end
      end
      for k, v in pairs(t1) do
          if v ~= t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
    local chars = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      chars[c] = (chars[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      chars[c] = (chars[c] or 0) - 1
    end
    for _, v in pairs(chars) do
      if v ~= 0 then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(t0) do
      if not t1[k] then
        return false
      end
    end
    for k, _ in pairs(t1) do
      if not t0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, v in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, v in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for c, n in pairs(t0) do
          if t1[c] ~= n then
              return false
          end
      end
      for c, n in pairs(t1) do
          if t0[c] ~= n then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          c0[c] = (c0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          c1[c] = (c1[c] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch('.') do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch('.') do
      t1[c] = (t1[c] or 0) + 1
    end
    for c, n in pairs(t0) do
      if t1[c] ~= n then
        return false
      end
    end
    for c, n in pairs(t1) do
      if t0[c] ~= n then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for c, n in pairs(t0) do
          if t1[c] ~= n then
              return false
          end
      end
      for c, n in pairs(t1) do
          if t0[c] ~= n then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(c0) do
      if not c1[k] then
        return false
      end
    end
    for k, _ in pairs(c1) do
      if not c0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = count_chars(s0)
    local c1 = count_chars(s1)
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(t0) do
      if not t1[k] then
        return false
      end
    end
    for k, _ in pairs(t1) do
      if not t0[k] then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(c0) do
          if not c1[k] then
              return false
          end
      end
      for k, _ in pairs(c1) do
          if not c0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local c0 = {}
    local c1 = {}
    for i = 1, #s0 do
      c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(c0) do
      if c1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(c1) do
      if c0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for c in s0:gmatch(".") do
      t0[c] = (t0[c] or 0) + 1
    end
    for c in s1:gmatch(".") do
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      local c = s0:sub(i, i)
      t0[c] = (t0[c] or 0) + 1
    end
    for i = 1, #s1 do
      local c = s1:sub(i, i)
      t1[c] = (t1[c] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for c in s0:gmatch('.') do
          t0[c] = (t0[c] or 0) + 1
      end
      for c in s1:gmatch('.') do
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
- |2-
      local c0 = {}
      local c1 = {}
      for i = 1, #s0 do
          c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1
      end
      for i = 1, #s1 do
          c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1
      end
      for k, v in pairs(c0) do
          if c1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(c1) do
          if c0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          t0[s0:sub(i, i)] = true
      end
      for i = 1, #s1 do
          t1[s1:sub(i, i)] = true
      end
      for k, _ in pairs(t0) do
          if not t1[k] then
              return false
          end
      end
      for k, _ in pairs(t1) do
          if not t0[k] then
              return false
          end
      end
      return true
  end
- |2-
      local t0 = {}
      local t1 = {}
      for i = 1, #s0 do
          local c = s0:sub(i, i)
          t0[c] = (t0[c] or 0) + 1
      end
      for i = 1, #s1 do
          local c = s1:sub(i, i)
          t1[c] = (t1[c] or 0) + 1
      end
      for k, v in pairs(t0) do
          if t1[k] ~= v then
              return false
          end
      end
      for k, v in pairs(t1) do
          if t0[k] ~= v then
              return false
          end
      end
      return true
  end
- |2-
    local chars0 = {}
    local chars1 = {}
    for i = 1, #s0 do
      chars0[s0:sub(i, i)] = true
    end
    for i = 1, #s1 do
      chars1[s1:sub(i, i)] = true
    end
    for k, _ in pairs(chars0) do
      if not chars1[k] then
        return false
      end
    end
    for k, _ in pairs(chars1) do
      if not chars0[k] then
        return false
      end
    end
    return true
  end
- |2-
    local t0 = {}
    local t1 = {}
    for i = 1, #s0 do
      t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1
    end
    for i = 1, #s1 do
      t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1
    end
    for k, v in pairs(t0) do
      if t1[k] ~= v then
        return false
      end
    end
    for k, v in pairs(t1) do
      if t0[k] ~= v then
        return false
      end
    end
    return true
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
