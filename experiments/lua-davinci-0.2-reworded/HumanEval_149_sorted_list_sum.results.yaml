name: HumanEval_149_sorted_list_sum
language: lua
results:
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvjz8izk.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmphvjz8izk.lua:19: in local 'candidate'\n\t/tmp/tmphvjz8izk.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sum = 0\n    for _, v in ipairs(lst) do\n\
    \        if #v % 2 == 0 then\n            table.insert(sorted_lst, v)\n      \
    \  end\n    end\n    table.sort(sorted_lst, function(a, b)\n        if #a == #b\
    \ then\n            return a < b\n        else\n            return #a < #b\n \
    \       end\n    end)\n    return sorted_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lbnmmet.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp0lbnmmet.lua:19: in local 'candidate'\n\t/tmp/tmp0lbnmmet.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpei_tht_g.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpei_tht_g.lua:19: in local 'candidate'\n\t/tmp/tmpei_tht_g.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zapw2n5.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp3zapw2n5.lua:19: in local 'candidate'\n\t/tmp/tmp3zapw2n5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcf1sc7d0.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpcf1sc7d0.lua:19: in local 'candidate'\n\t/tmp/tmpcf1sc7d0.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function sort_by_length(a, b)\n        if #a == #b then\n          \
    \  return a < b\n        else\n            return #a < #b\n        end\n    end\n\
    \    table.sort(lst, sort_by_length)\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8ykez8n.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpv8ykez8n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeorzy2mz.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpeorzy2mz.lua:19: in local 'candidate'\n\t/tmp/tmpeorzy2mz.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgrs_j4c4.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpgrs_j4c4.lua:19: in local 'candidate'\n\t/tmp/tmpgrs_j4c4.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeklg89dd.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpeklg89dd.lua:19: in local 'candidate'\n\t/tmp/tmpeklg89dd.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhyp8kcv.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpxhyp8kcv.lua:19: in local 'candidate'\n\t/tmp/tmpxhyp8kcv.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for i, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst, function(a, b)\n        if #a == #b\
    \ then\n            return a < b\n        else\n            return #a < #b\n \
    \       end\n    end)\n    return sorted_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn8z67ye.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmprn8z67ye.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqh3pjgpu.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpqh3pjgpu.lua:19: in local 'candidate'\n\t/tmp/tmpqh3pjgpu.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6l_9tkyb.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp6l_9tkyb.lua:19: in local 'candidate'\n\t/tmp/tmp6l_9tkyb.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxl99gv58.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpxl99gv58.lua:19: in local 'candidate'\n\t/tmp/tmpxl99gv58.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ftq3z2a.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4ftq3z2a.lua:19: in local 'candidate'\n\t/tmp/tmp4ftq3z2a.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzajqryty.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpzajqryty.lua:19: in local 'candidate'\n\t/tmp/tmpzajqryty.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzzljgtg.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmptzzljgtg.lua:19: in local 'candidate'\n\t/tmp/tmptzzljgtg.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprguh0huv.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmprguh0huv.lua:19: in local 'candidate'\n\t/tmp/tmprguh0huv.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62r02bt6.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp62r02bt6.lua:19: in local 'candidate'\n\t/tmp/tmp62r02bt6.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc6wp30_.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpsc6wp30_.lua:19: in local 'candidate'\n\t/tmp/tmpsc6wp30_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = {}\n    local sum = 0\n    for _, v in ipairs(lst) do\n\
    \        if #v % 2 == 0 then\n            table.insert(sorted_list, v)\n     \
    \   end\n    end\n    table.sort(sorted_list, function(a, b)\n        if #a ==\
    \ #b then\n            return a < b\n        else\n            return #a < #b\n\
    \        end\n    end)\n    return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0821sh_.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpq0821sh_.lua:19: in local 'candidate'\n\t/tmp/tmpq0821sh_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71r_azow.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp71r_azow.lua:19: in local 'candidate'\n\t/tmp/tmp71r_azow.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqcgx73zf.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpqcgx73zf.lua:19: in local 'candidate'\n\t/tmp/tmpqcgx73zf.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo11551sh.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpo11551sh.lua:19: in local 'candidate'\n\t/tmp/tmpo11551sh.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkpjm9xw.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpmkpjm9xw.lua:19: in local 'candidate'\n\t/tmp/tmpmkpjm9xw.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxtp7r6j.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpbxtp7r6j.lua:19: in local 'candidate'\n\t/tmp/tmpbxtp7r6j.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local t = {}\n    for _, v in ipairs(lst) do\n        t[#t + 1] = v\n    end\n\
    \    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdrdbfml.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpqdrdbfml.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_xdxi20.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp1_xdxi20.lua:19: in local 'candidate'\n\t/tmp/tmp1_xdxi20.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_list,\
    \ v)\n    end\n    table.sort(sorted_list)\n    return sorted_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvv2tbiyn.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpvv2tbiyn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpflsru897.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpflsru897.lua:19: in local 'candidate'\n\t/tmp/tmpflsru897.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sr9vkxt.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp6sr9vkxt.lua:19: in local 'candidate'\n\t/tmp/tmp6sr9vkxt.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ajtgea3.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp0ajtgea3.lua:19: in local 'candidate'\n\t/tmp/tmp0ajtgea3.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82oy6j__.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp82oy6j__.lua:19: in local 'candidate'\n\t/tmp/tmp82oy6j__.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm35o15f.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzm35o15f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyv9c313.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppyv9c313.lua:19: in local 'candidate'\n\t/tmp/tmppyv9c313.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2zclrez.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpb2zclrez.lua:19: in local 'candidate'\n\t/tmp/tmpb2zclrez.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = {}\n    for i = 1, #lst do\n        if #lst[i] % 2 ==\
    \ 0 then\n            table.insert(sorted_list, lst[i])\n        end\n    end\n\
    \    table.sort(sorted_list, function(a, b)\n        return #a < #b\n    end)\n\
    \    return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yev7mo0.lua:35:\
    \ expected: {\"abcd\", \"dcba\"}\nactual: {\"dcba\", \"abcd\"}\nstack traceback:\n\
    \t/tmp/tmp0yev7mo0.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpov51s40u.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpov51s40u.lua:19: in local 'candidate'\n\t/tmp/tmpov51s40u.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdghit74.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmprdghit74.lua:19: in local 'candidate'\n\t/tmp/tmprdghit74.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8scdtyp.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpo8scdtyp.lua:19: in local 'candidate'\n\t/tmp/tmpo8scdtyp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48e_t0zq.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp48e_t0zq.lua:19: in local 'candidate'\n\t/tmp/tmp48e_t0zq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1spwkl6q.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp1spwkl6q.lua:19: in local 'candidate'\n\t/tmp/tmp1spwkl6q.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhdw9sn8.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpjhdw9sn8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4q7jgymb.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4q7jgymb.lua:19: in local 'candidate'\n\t/tmp/tmp4q7jgymb.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  table.sort(lst)\n  for _, v in ipairs(lst) do\n    sum = sum\
    \ + v\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3dym_a3.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpw3dym_a3.lua:20: in local 'candidate'\n\t/tmp/tmpw3dym_a3.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdfirxgmg.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpdfirxgmg.lua:19: in local 'candidate'\n\t/tmp/tmpdfirxgmg.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sum = 0\n    for _, v in ipairs(lst) do\n\
    \        if v % 2 == 0 then\n            table.insert(sorted_lst, v)\n       \
    \     sum = sum + v\n        end\n    end\n    table.sort(sorted_lst)\n    return\
    \ sorted_lst, sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnypa6s1.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpxnypa6s1.lua:20: in local 'candidate'\n\t/tmp/tmpxnypa6s1.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptfchniz2.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmptfchniz2.lua:19: in local 'candidate'\n\t/tmp/tmptfchniz2.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if #a == #b then\n            return\
    \ a < b\n        else\n            return #a < #b\n        end\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jc1y8qb.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp1jc1y8qb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsuzvbw3u.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpsuzvbw3u.lua:19: in local 'candidate'\n\t/tmp/tmpsuzvbw3u.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local t = {}\n  for _, v in ipairs(lst) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lv9ooyv.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp1lv9ooyv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_bc74kn.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpq_bc74kn.lua:19: in local 'candidate'\n\t/tmp/tmpq_bc74kn.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0s01s3j.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp_0s01s3j.lua:19: in local 'candidate'\n\t/tmp/tmp_0s01s3j.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppd8ch1xp.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppd8ch1xp.lua:19: in local 'candidate'\n\t/tmp/tmppd8ch1xp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkur8_sl5.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpkur8_sl5.lua:19: in local 'candidate'\n\t/tmp/tmpkur8_sl5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7drmady.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpm7drmady.lua:19: in local 'candidate'\n\t/tmp/tmpm7drmady.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = {}\n    for i, v in ipairs(lst) do\n        sorted_list[i]\
    \ = v\n    end\n    table.sort(sorted_list)\n    return sorted_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmllp13am.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmllp13am.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0xnczf9.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpz0xnczf9.lua:19: in local 'candidate'\n\t/tmp/tmpz0xnczf9.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfhc3sl4.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppfhc3sl4.lua:19: in local 'candidate'\n\t/tmp/tmppfhc3sl4.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5syq33rd.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp5syq33rd.lua:19: in local 'candidate'\n\t/tmp/tmp5syq33rd.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpof0npsq3.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpof0npsq3.lua:19: in local 'candidate'\n\t/tmp/tmpof0npsq3.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkoti0bzu.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpkoti0bzu.lua:19: in local 'candidate'\n\t/tmp/tmpkoti0bzu.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2nac0uq5.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp2nac0uq5.lua:19: in local 'candidate'\n\t/tmp/tmp2nac0uq5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3oc51m3.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpi3oc51m3.lua:19: in local 'candidate'\n\t/tmp/tmpi3oc51m3.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppq9tpxoq.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppq9tpxoq.lua:19: in local 'candidate'\n\t/tmp/tmppq9tpxoq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv60vj4ls.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpv60vj4ls.lua:19: in local 'candidate'\n\t/tmp/tmpv60vj4ls.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq449s7zo.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpq449s7zo.lua:19: in local 'candidate'\n\t/tmp/tmpq449s7zo.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85z_s6t_.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp85z_s6t_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklu7_t4l.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpklu7_t4l.lua:19: in local 'candidate'\n\t/tmp/tmpklu7_t4l.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyp6spio.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpjyp6spio.lua:19: in local 'candidate'\n\t/tmp/tmpjyp6spio.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7nvhaalj.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp7nvhaalj.lua:19: in local 'candidate'\n\t/tmp/tmp7nvhaalj.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsfow0awt.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpsfow0awt.lua:19: in local 'candidate'\n\t/tmp/tmpsfow0awt.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local function sort_by_length(a, b)\n    if #a == #b then\n      return a <\
    \ b\n    else\n      return #a < #b\n    end\n  end\n  table.sort(lst, sort_by_length)\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1kjs4_y.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpe1kjs4_y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local new_lst = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(new_lst, v)\n        end\n    end\n    table.sort(new_lst,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9d9llyn.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp_9d9llyn.lua:19: in local 'candidate'\n\t/tmp/tmp_9d9llyn.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxooe44h.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpaxooe44h.lua:19: in local 'candidate'\n\t/tmp/tmpaxooe44h.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function sort_by_length(a, b)\n        if #a == #b then\n          \
    \  return a < b\n        else\n            return #a < #b\n        end\n    end\n\
    \    table.sort(lst, sort_by_length)\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bd2oioz.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp4bd2oioz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojvwzley.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpojvwzley.lua:19: in local 'candidate'\n\t/tmp/tmpojvwzley.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhaod3j0.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpxhaod3j0.lua:19: in local 'candidate'\n\t/tmp/tmpxhaod3j0.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if a == b then\n            return false\n\
    \        elseif a < b then\n            return true\n        else\n          \
    \  return false\n        end\n    end\n    table.sort(lst, compare)\n    return\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gm363d_.lua:33:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp0gm363d_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo6cu1i1.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppo6cu1i1.lua:19: in local 'candidate'\n\t/tmp/tmppo6cu1i1.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local t = {}\n  for _, v in ipairs(lst) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0qr9nkm.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpf0qr9nkm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ntec9o_.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp3ntec9o_.lua:19: in local 'candidate'\n\t/tmp/tmp3ntec9o_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1x5709d.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpc1x5709d.lua:19: in local 'candidate'\n\t/tmp/tmpc1x5709d.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjt836qsl.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpjt836qsl.lua:19: in local 'candidate'\n\t/tmp/tmpjt836qsl.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cd0spkj.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp_cd0spkj.lua:19: in local 'candidate'\n\t/tmp/tmp_cd0spkj.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyx9p_v0q.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpyx9p_v0q.lua:19: in local 'candidate'\n\t/tmp/tmpyx9p_v0q.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8rgf3y9.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpn8rgf3y9.lua:19: in local 'candidate'\n\t/tmp/tmpn8rgf3y9.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88tkgsxt.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp88tkgsxt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4prztc0e.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4prztc0e.lua:19: in local 'candidate'\n\t/tmp/tmp4prztc0e.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62hxq3ap.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp62hxq3ap.lua:19: in local 'candidate'\n\t/tmp/tmp62hxq3ap.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local new_lst = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(new_lst, v)\n        end\n    end\n    table.sort(new_lst,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn7421trm.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpn7421trm.lua:19: in local 'candidate'\n\t/tmp/tmpn7421trm.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla5wmz86.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpla5wmz86.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs1c1vdn.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpjs1c1vdn.lua:19: in local 'candidate'\n\t/tmp/tmpjs1c1vdn.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplu2sgn2k.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmplu2sgn2k.lua:19: in local 'candidate'\n\t/tmp/tmplu2sgn2k.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4vyvm2hz.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4vyvm2hz.lua:19: in local 'candidate'\n\t/tmp/tmp4vyvm2hz.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = {}\n    for _, v in ipairs(lst) do\n        if #v % 2\
    \ == 0 then\n            table.insert(sorted_list, v)\n        end\n    end\n\
    \    table.sort(sorted_list, function(a, b)\n        if #a == #b then\n      \
    \      return a < b\n        else\n            return #a < #b\n        end\n \
    \   end)\n    return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = {}\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if\
    \ v % 2 == 0 then\n      sum = sum + v\n      table.insert(sorted_list, v)\n \
    \   end\n  end\n  return sorted_list, sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsn40lqa0.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpsn40lqa0.lua:20: in local 'candidate'\n\t/tmp/tmpsn40lqa0.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = {}\n  for _, v in ipairs(lst) do\n    if #v % 2 == 0 then\n\
    \      table.insert(sorted_list, v)\n    end\n  end\n  table.sort(sorted_list,\
    \ function(a, b)\n    if #a == #b then\n      return a < b\n    else\n      return\
    \ #a < #b\n    end\n  end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxy3nto1.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpwxy3nto1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local function sort_by_length(a, b)\n    if #a == #b then\n      return a <\
    \ b\n    else\n      return #a < #b\n    end\n  end\n  table.sort(lst, sort_by_length)\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppsngre86.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmppsngre86.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxlo402ko.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpxlo402ko.lua:19: in local 'candidate'\n\t/tmp/tmpxlo402ko.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mxqhmoy.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp7mxqhmoy.lua:19: in local 'candidate'\n\t/tmp/tmp7mxqhmoy.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function sort_by_length(a, b)\n        if #a == #b then\n          \
    \  return a < b\n        else\n            return #a < #b\n        end\n    end\n\
    \    table.sort(lst, sort_by_length)\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpziu_zlcn.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpziu_zlcn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjkpxnopn.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpjkpxnopn.lua:19: in local 'candidate'\n\t/tmp/tmpjkpxnopn.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpess2gwbw.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpess2gwbw.lua:19: in local 'candidate'\n\t/tmp/tmpess2gwbw.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnefqzqq.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmprnefqzqq.lua:19: in local 'candidate'\n\t/tmp/tmprnefqzqq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if #a == #b then\n            return\
    \ a < b\n        else\n            return #a < #b\n        end\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwcz4u0a.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbwcz4u0a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfwozs2m.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmprfwozs2m.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9og1nbtd.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp9og1nbtd.lua:19: in local 'candidate'\n\t/tmp/tmp9og1nbtd.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if #a == #b then\n            return\
    \ a < b\n        else\n            return #a < #b\n        end\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2sjlqo0.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpx2sjlqo0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local result = {}\n  for _, v in ipairs(lst) do\n    local sum = 0\n    for\
    \ _, v2 in ipairs(v) do\n      sum = sum + v2\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x2401zy.lua:31:\
    \ expected: {\"aa\"}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp4x2401zy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfezdfbjs.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpfezdfbjs.lua:19: in local 'candidate'\n\t/tmp/tmpfezdfbjs.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0212cwb.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmps0212cwb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmavbq9xf.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpmavbq9xf.lua:19: in local 'candidate'\n\t/tmp/tmpmavbq9xf.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if #a == #b then\n            return\
    \ a < b\n        else\n            return #a < #b\n        end\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnnqahod.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbnnqahod.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7whlk7qw.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp7whlk7qw.lua:19: in local 'candidate'\n\t/tmp/tmp7whlk7qw.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function sort_by_length(a, b)\n        if #a == #b then\n          \
    \  return a < b\n        else\n            return #a < #b\n        end\n    end\n\
    \    table.sort(lst, sort_by_length)\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d3nmdiq.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp8d3nmdiq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4go9vace.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4go9vace.lua:19: in local 'candidate'\n\t/tmp/tmp4go9vace.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqaqovtrv.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpqaqovtrv.lua:19: in local 'candidate'\n\t/tmp/tmpqaqovtrv.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjynj3xka.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpjynj3xka.lua:19: in local 'candidate'\n\t/tmp/tmpjynj3xka.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hbgz2ey.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp1hbgz2ey.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5_3u1rsh.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp5_3u1rsh.lua:19: in local 'candidate'\n\t/tmp/tmp5_3u1rsh.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1s990vnp.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp1s990vnp.lua:19: in local 'candidate'\n\t/tmp/tmp1s990vnp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if #a == #b then\n            return\
    \ a < b\n        else\n            return #a < #b\n        end\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zi8mpaj.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9zi8mpaj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4etead_4.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4etead_4.lua:19: in local 'candidate'\n\t/tmp/tmp4etead_4.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5r2kfrio.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp5r2kfrio.lua:19: in local 'candidate'\n\t/tmp/tmp5r2kfrio.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptl3sz6as.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmptl3sz6as.lua:19: in local 'candidate'\n\t/tmp/tmptl3sz6as.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpauzw0vt_.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpauzw0vt_.lua:19: in local 'candidate'\n\t/tmp/tmpauzw0vt_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local function compare(a, b)\n    if #a == #b then\n      return a < b\n   \
    \ else\n      return #a < #b\n    end\n  end\n  table.sort(lst, compare)\n  return\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23fvgsos.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp23fvgsos.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jgx_w_u.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp5jgx_w_u.lua:19: in local 'candidate'\n\t/tmp/tmp5jgx_w_u.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeyoqmevm.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpeyoqmevm.lua:19: in local 'candidate'\n\t/tmp/tmpeyoqmevm.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4vz_726.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpb4vz_726.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  table.sort(lst)\n  for _, v in ipairs(lst) do\n    sum = sum\
    \ + v\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcdeo73p.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpdcdeo73p.lua:20: in local 'candidate'\n\t/tmp/tmpdcdeo73p.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkmek2ul.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpbkmek2ul.lua:19: in local 'candidate'\n\t/tmp/tmpbkmek2ul.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if #a == #b then\n            return\
    \ a < b\n        else\n            return #a < #b\n        end\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfoafwuhx.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpfoafwuhx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xp6q9dt.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp_xp6q9dt.lua:19: in local 'candidate'\n\t/tmp/tmp_xp6q9dt.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5f8x1ja.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmps5f8x1ja.lua:19: in local 'candidate'\n\t/tmp/tmps5f8x1ja.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzagoeii5.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpzagoeii5.lua:19: in local 'candidate'\n\t/tmp/tmpzagoeii5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppql9s45_.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmppql9s45_.lua:19: in local 'candidate'\n\t/tmp/tmppql9s45_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function compare(a, b)\n        if a == b then\n            return 0\n\
    \        elseif a < b then\n            return -1\n        else\n            return\
    \ 1\n        end\n    end\n    table.sort(lst, compare)\n    return lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqv6gj4c.lua:33:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\", \"aa\"}\nstack traceback:\n\t/tmp/tmpqqv6gj4c.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0v5ljmt.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpr0v5ljmt.lua:19: in local 'candidate'\n\t/tmp/tmpr0v5ljmt.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphn47e61f.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmphn47e61f.lua:19: in local 'candidate'\n\t/tmp/tmphn47e61f.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0m69hto.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpz0m69hto.lua:19: in local 'candidate'\n\t/tmp/tmpz0m69hto.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrg27zy5.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpzrg27zy5.lua:19: in local 'candidate'\n\t/tmp/tmpzrg27zy5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinn36w3g.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpinn36w3g.lua:19: in local 'candidate'\n\t/tmp/tmpinn36w3g.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9l15vl5.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpq9l15vl5.lua:19: in local 'candidate'\n\t/tmp/tmpq9l15vl5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jjxoj6c.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp0jjxoj6c.lua:19: in local 'candidate'\n\t/tmp/tmp0jjxoj6c.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local res = {}\n  for _, v in ipairs(lst) do\n    if #v % 2 == 0 then\n    \
    \  table.insert(res, v)\n    end\n  end\n  table.sort(res, function(a, b)\n  \
    \  if #a == #b then\n      return a < b\n    else\n      return #a < #b\n    end\n\
    \  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ckdbxwl.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp3ckdbxwl.lua:19: in local 'candidate'\n\t/tmp/tmp3ckdbxwl.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ja2ivqb.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp8ja2ivqb.lua:19: in local 'candidate'\n\t/tmp/tmp8ja2ivqb.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local result = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if #a == #b then\n            return a < b\n       \
    \ else\n            return #a < #b\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpq2jrra.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpwpq2jrra.lua:19: in local 'candidate'\n\t/tmp/tmpwpq2jrra.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rc2aa19.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp7rc2aa19.lua:19: in local 'candidate'\n\t/tmp/tmp7rc2aa19.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8v8waa9.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpe8v8waa9.lua:19: in local 'candidate'\n\t/tmp/tmpe8v8waa9.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_4scco7.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp9_4scco7.lua:19: in local 'candidate'\n\t/tmp/tmp9_4scco7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjayjnml.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpgjayjnml.lua:19: in local 'candidate'\n\t/tmp/tmpgjayjnml.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2fr6v9g7.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp2fr6v9g7.lua:19: in local 'candidate'\n\t/tmp/tmp2fr6v9g7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6q25gjm.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpf6q25gjm.lua:19: in local 'candidate'\n\t/tmp/tmpf6q25gjm.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjo63zili.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpjo63zili.lua:19: in local 'candidate'\n\t/tmp/tmpjo63zili.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggcahd0z.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpggcahd0z.lua:19: in local 'candidate'\n\t/tmp/tmpggcahd0z.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xtzb5fq.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp_xtzb5fq.lua:19: in local 'candidate'\n\t/tmp/tmp_xtzb5fq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmt7qqyg.lua:19:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcmt7qqyg.lua:19: in local 'candidate'\n\t/tmp/tmpcmt7qqyg.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwvjiwx0g.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpwvjiwx0g.lua:19: in local 'candidate'\n\t/tmp/tmpwvjiwx0g.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local function list_sum(lst)\n        local sum = 0\n        for _, v in ipairs(lst)\
    \ do\n            sum = sum + v\n        end\n        return sum\n    end\n  \
    \  local function list_sort(lst)\n        local function sort_by_length(a, b)\n\
    \            if #a == #b then\n                return a < b\n            else\n\
    \                return #a < #b\n            end\n        end\n        table.sort(lst,\
    \ sort_by_length)\n        return lst\n    end\n    local function list_filter(lst)\n\
    \        local function is_even(v)\n            return v % 2 == 0\n        end\n\
    \        local new_lst = {}\n        for _, v in ipairs(lst) do\n            if\
    \ is_even(#v) then\n                table.insert(new_lst, v)\n            end\n\
    \        end\n        return new_lst\n    end\n    return list_sum(list_sort(list_filter(lst)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcxq8zr5.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpfcxq8zr5.lua:20: in function </tmp/tmpfcxq8zr5.lua:17>\n\t(...tail calls...)\n\
    \t/tmp/tmpfcxq8zr5.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudrok3wk.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpudrok3wk.lua:19: in local 'candidate'\n\t/tmp/tmpudrok3wk.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98d5bkha.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp98d5bkha.lua:19: in local 'candidate'\n\t/tmp/tmp98d5bkha.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpks66zic7.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpks66zic7.lua:19: in local 'candidate'\n\t/tmp/tmpks66zic7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvf1_ipi.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpsvf1_ipi.lua:19: in local 'candidate'\n\t/tmp/tmpsvf1_ipi.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkxwts3z.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpzkxwts3z.lua:19: in local 'candidate'\n\t/tmp/tmpzkxwts3z.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xg25vq2.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp7xg25vq2.lua:19: in local 'candidate'\n\t/tmp/tmp7xg25vq2.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8t_6ahxl.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp8t_6ahxl.lua:19: in local 'candidate'\n\t/tmp/tmp8t_6ahxl.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_h_pnfg.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpt_h_pnfg.lua:19: in local 'candidate'\n\t/tmp/tmpt_h_pnfg.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local t = {}\n    for _, v in ipairs(lst) do\n        t[#t + 1] = v\n    end\n\
    \    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3g8w8gk.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpr3g8w8gk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47cea2n7.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp47cea2n7.lua:19: in local 'candidate'\n\t/tmp/tmp47cea2n7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk94nzxgw.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpk94nzxgw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3i6_jc3.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpe3i6_jc3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for i, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4aqcf5so.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp4aqcf5so.lua:19: in local 'candidate'\n\t/tmp/tmp4aqcf5so.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzpjaem2.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmplzpjaem2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaivi_4z.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpuaivi_4z.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqudoii_t.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpqudoii_t.lua:19: in local 'candidate'\n\t/tmp/tmpqudoii_t.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt7kwnhb.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpdt7kwnhb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxputmx7q.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpxputmx7q.lua:19: in local 'candidate'\n\t/tmp/tmpxputmx7q.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl0fh03x.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpkl0fh03x.lua:19: in local 'candidate'\n\t/tmp/tmpkl0fh03x.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst)\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kq3qjsf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp5kq3qjsf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9cmamico.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp9cmamico.lua:19: in local 'candidate'\n\t/tmp/tmp9cmamico.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rl1tstw.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmp2rl1tstw.lua:19: in local 'candidate'\n\t/tmp/tmp2rl1tstw.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk5k1irg.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpwk5k1irg.lua:19: in local 'candidate'\n\t/tmp/tmpwk5k1irg.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyonawr4m.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpyonawr4m.lua:19: in local 'candidate'\n\t/tmp/tmpyonawr4m.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpeiqz6f.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpnpeiqz6f.lua:19: in local 'candidate'\n\t/tmp/tmpnpeiqz6f.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsns3w53.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'v')\nstack traceback:\n\
    \t/tmp/tmpmsns3w53.lua:19: in local 'candidate'\n\t/tmp/tmpmsns3w53.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
