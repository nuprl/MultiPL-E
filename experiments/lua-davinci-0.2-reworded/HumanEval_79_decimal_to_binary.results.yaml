name: HumanEval_79_decimal_to_binary
language: lua
results:
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs90lpvf.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzs90lpvf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7v0pcz4.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpg7v0pcz4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6rz__zb.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpl6rz__zb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsu0pybg.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpjsu0pybg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = tostring(remainder)\
    \ .. binary\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks0azvky.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpks0azvky.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxq0v4_5.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpmxq0v4_5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n7sf2ty.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp_n7sf2ty.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j5r2izu.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp_j5r2izu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = remainder .. binary\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo2mek3a.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpoo2mek3a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf2mtgnz.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpwf2mtgnz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztpicuoq.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpztpicuoq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42y6bc43.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp42y6bc43.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxptlks7.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmprxptlks7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d7n_pfo.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9d7n_pfo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    binary = binary .. tostring(remainder)\n  end\n\
    \  binary = binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0hj948m.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpb0hj948m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq4mkb4s.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpcq4mkb4s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = binary .. tostring(remainder)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2mpptn7.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpf2mpptn7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remainder = decimal\n  while remainder > 0 do\n    local remainder, digit\
    \ = math.modf(remainder / 2)\n    binary = binary .. tostring(digit)\n  end\n\
    \  return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74bqh4q9.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp74bqh4q9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = binary .. tostring(remainder)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5g5z_lu.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpc5g5z_lu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbsyua5v.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpxbsyua5v.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmb4c3xri.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpmb4c3xri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_bzqsyp.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu_bzqsyp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffsmy2bk.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpffsmy2bk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91i0pdif.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp91i0pdif.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrkv4n6l.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmphrkv4n6l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = binary .. tostring(remainder)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw50iv0r8.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpw50iv0r8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  local remainder = 0\n  local quotient = decimal\n  while quotient > 0 do\n\
    \    remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    binary\
    \ = tostring(remainder) .. binary\n  end\n  return 'db' .. binary .. 'db'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8fb7_ee.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpr8fb7_ee.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = (decimal - remainder)\
    \ / 2\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozz9z2z5.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpozz9z2z5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qkpmi0h.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp1qkpmi0h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1braa_y.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu1braa_y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatx1bv58.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpatx1bv58.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = remainder .. binary\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf53429qw.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpf53429qw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppehic3yt.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppehic3yt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. (decimal % 2)\n \
    \       decimal = math.floor(decimal / 2)\n    end\n    return binary .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_55wq85n.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp_55wq85n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeckf35rz.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpeckf35rz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu4h4lzw.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmplu4h4lzw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v3seew3.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp4v3seew3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvka_8ov9.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpvka_8ov9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    db\"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary =\
    \ binary .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n\
    \  binary = binary .. \"db\"\n  return binary\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgfk_8f2.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpjgfk_8f2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpial4wcgc.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpial4wcgc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnqw40h6.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpxnqw40h6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j1i2ii2.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9j1i2ii2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjs8xcum.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpvjs8xcum.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf82vjet.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmphf82vjet.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplit1bm63.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmplit1bm63.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    binary = binary .. tostring(remainder)\n  end\n\
    \  return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4u31qu0.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpo4u31qu0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi9faqwq.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppi9faqwq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gbojebc.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp8gbojebc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu7leg1_.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpeu7leg1_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnydjzgj.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpcnydjzgj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ ~= 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = binary .. tostring(remainder)\n    end\n    binary =\
    \ binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dxn5az4.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp2dxn5az4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    binary = binary .. tostring(remainder)\n  end\n\
    \  return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfzp96lf.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgfzp96lf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9le2k78t.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9le2k78t.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb2tdlrv.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmphb2tdlrv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7cbe8_g.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpk7cbe8_g.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = remainder\
    \ .. binary\n    decimal = (decimal - remainder) / 2\n  end\n  return 'db' ..\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_yv6nas.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu_yv6nas.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph83vhp33.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmph83vhp33.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrdxwar5.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpkrdxwar5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbuduec36.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpbuduec36.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ > 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = tostring(remainder) .. binary\n    end\n    return 'db'\
    \ .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpah2tdsq8.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpah2tdsq8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = (decimal - remainder)\
    \ / 2\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hq855b_.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6hq855b_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6omlrv1.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpp6omlrv1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtjjmofv.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpvtjjmofv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = binary .. tostring(remainder)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a0m0cjc.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp2a0m0cjc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2auwv4a.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpb2auwv4a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdm475ba.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmphdm475ba.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9cswh66.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpw9cswh66.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb01eb3c.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzb01eb3c.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1mkrixc.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpg1mkrixc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g4zfbiy.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6g4zfbiy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qxv7rcx.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp8qxv7rcx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ > 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = binary .. tostring(remainder)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79_yhxtl.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp79_yhxtl.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk78xylph.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpk78xylph.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66vz0fcd.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp66vz0fcd.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1ugnsx7.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpj1ugnsx7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfbrt5hr.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpjfbrt5hr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8grllhh4.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp8grllhh4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmtrr734.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpnmtrr734.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcof0dveh.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpcof0dveh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1y10fcp.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp_1y10fcp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  binary\
    \ = binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznnunvg8.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpznnunvg8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98p8ziet.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp98p8ziet.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  decimal = math.floor(decimal / 2)\n        binary = tostring(remainder) ..\
    \ binary\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahxzsb9z.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpahxzsb9z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    db\"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary =\
    \ binary .. remainder\n    decimal = math.floor(decimal / 2)\n  end\n  binary\
    \ = binary .. \"db\"\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwt8yfg4.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpjwt8yfg4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    local remainder = 0\n    while decimal > 0 do\n        remainder =\
    \ decimal % 2\n        decimal = math.floor(decimal / 2)\n        binary = remainder\
    \ .. binary\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_adzmie.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu_adzmie.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  binary\
    \ = binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu12k3cg.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppu12k3cg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = (decimal - remainder)\
    \ / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc8fivy7.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpsc8fivy7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnk7tndm.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpmnk7tndm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ue81ru6.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp2ue81ru6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4uxkwnc.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu4uxkwnc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhhuvu5f.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpyhhuvu5f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h5iq7ya.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp1h5iq7ya.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi17_1mt.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzi17_1mt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsglzs4b4.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpsglzs4b4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalg1clje.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpalg1clje.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jfnp2e6.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6jfnp2e6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocbkplgz.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpocbkplgz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = (decimal - remainder)\
    \ / 2\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n5fveub.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6n5fveub.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    binary = tostring(decimal % 2) .. binary\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr0vqxa2.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzr0vqxa2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyptl4v7.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpoyptl4v7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0i0sjzp.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpo0i0sjzp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = remainder ..\
    \ binary\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92q_pc21.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp92q_pc21.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcsjdqgp.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpvcsjdqgp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    binary = binary\
    \ .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1segbjwn.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp1segbjwn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2eq370v.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpq2eq370v.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuvkerh.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9iuvkerh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqtkirf9.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpnqtkirf9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2wkiuug.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpi2wkiuug.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoufqneec.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpoufqneec.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder = decimal\n    while remainder > 0 do\n        local\
    \ remainder_binary = remainder % 2\n        remainder = math.floor(remainder /\
    \ 2)\n        binary = binary .. tostring(remainder_binary)\n    end\n    return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4lb9aqu.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmps4lb9aqu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ ~= 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = binary .. tostring(remainder)\n    end\n    binary =\
    \ binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpetfhdx.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmprpetfhdx.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ ~= 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = tostring(remainder) .. binary\n    end\n    return \"\
    db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4f89tqd.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpb4f89tqd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyyu78nc.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpiyyu78nc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    if decimal % 2 == 0 then\n      binary = '0' .. binary\n\
    \    else\n      binary = '1' .. binary\n    end\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp176a_gcj.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp176a_gcj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9qh1a0k.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpa9qh1a0k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    db\"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary =\
    \ binary .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n\
    \  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2dmvuzo.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpq2dmvuzo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfxna5fw.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpmfxna5fw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    binary = tostring(decimal % 2) .. binary\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdn6_su3.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpfdn6_su3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56kdiul3.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp56kdiul3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    binary = binary\
    \ .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnmtz6ef.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgnmtz6ef.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2seqtys.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpl2seqtys.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyphdlbh.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmphyphdlbh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    binary = binary .. tostring(decimal % 2)\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg8tfh_j.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpcg8tfh_j.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbpj9v6z.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppbpj9v6z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79i00r2v.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp79i00r2v.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttteowxa.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpttteowxa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y8vb00e.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp3y8vb00e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local result =\
    \ 'db'\n    local remainder = 0\n    local quotient = decimal\n    local binary\
    \ = ''\n    while quotient ~= 0 do\n        remainder = quotient % 2\n       \
    \ quotient = math.floor(quotient / 2)\n        binary = tostring(remainder) ..\
    \ binary\n    end\n    result = result .. binary .. 'db'\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsbt6hma.lua:28:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpjsbt6hma.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    binary = tostring(remainder) .. binary\n  end\n\
    \  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq04xf1x.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpdq04xf1x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q05yq1u.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp3q05yq1u.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    binary = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfnhv24k.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpxfnhv24k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqr704p8s.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpqr704p8s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe7s_qru.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpwe7s_qru.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7_h3t5p.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpi7_h3t5p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdoa787uw.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpdoa787uw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph99fow_f.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmph99fow_f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36vn6qld.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp36vn6qld.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ > 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = remainder .. binary\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu58jf7ov.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu58jf7ov.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    binary = binary .. tostring(decimal % 2)\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59nevywe.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp59nevywe.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk98fk560.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpk98fk560.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dn2_2oh.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp0dn2_2oh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5tlg14b.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpe5tlg14b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  binary\
    \ = binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcqfoiwq.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgcqfoiwq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10s4iruj.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp10s4iruj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  binary\
    \ = binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x6bem4b.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp5x6bem4b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        if decimal % 2 == 0 then\n         \
    \   binary = '0' .. binary\n        else\n            binary = '1' .. binary\n\
    \        end\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqjhdubw.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppqjhdubw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remainder = 0\n  local quotient = decimal\n  while quotient ~= 0 do\n\
    \    remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    binary\
    \ = binary .. tostring(remainder)\n  end\n  return binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9n7x4db.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpn9n7x4db.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgntt6pa_.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgntt6pa_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5onb60qi.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp5onb60qi.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeao64513.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpeao64513.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yx18ih7.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp7yx18ih7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor8h24rb.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpor8h24rb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_596goq.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmph_596goq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpct54ae_n.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpct54ae_n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local result = 'db'\n\
    \  local remainder = decimal\n  while remainder > 0 do\n    local binary_digit\
    \ = remainder % 2\n    remainder = math.floor(remainder / 2)\n    result = result\
    \ .. binary_digit\n  end\n  result = result .. 'db'\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6o9qcvt.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmps6o9qcvt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr53mn9wx.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpr53mn9wx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3m1mrn6.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpc3m1mrn6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzv65vyt.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmptzv65vyt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeksjr9t9.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpeksjr9t9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94kfgn6e.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp94kfgn6e.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfe6an87.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpvfe6an87.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpbw96je.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmptpbw96je.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_2c5a4w.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpy_2c5a4w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ > 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = binary .. tostring(remainder)\n    end\n    binary =\
    \ binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpx2z52.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgtpx2z52.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. tostring(remainder)\n        decimal = (decimal - remainder)\
    \ / 2\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp789qkqku.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp789qkqku.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bz4wb7a.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp_bz4wb7a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktun7yln.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpktun7yln.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    binary = binary\
    \ .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppid9b1s9.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppid9b1s9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fqcon68.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp4fqcon68.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwecuhz1y.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpwecuhz1y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = tostring(remainder)\
    \ .. binary\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nu9rr89.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp2nu9rr89.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a9hiuli.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp0a9hiuli.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp892xl114.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp892xl114.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3njdiidg.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp3njdiidg.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8o_4uad.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpk8o_4uad.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = binary .. tostring(remainder)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5_80fs_.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpj5_80fs_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder = 0\n    local quotient = decimal\n    while quotient\
    \ > 0 do\n        remainder = quotient % 2\n        quotient = math.floor(quotient\
    \ / 2)\n        binary = tostring(remainder) .. binary\n    end\n    return 'db'\
    \ .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfc1khy8.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzfc1khy8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpho2z0jrp.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpho2z0jrp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniczth05.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpniczth05.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qi980r5.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6qi980r5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = remainder .. binary\n        decimal = math.floor(decimal / 2)\n \
    \   end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzq8ro14.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpyzq8ro14.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remainder = 0\n  local quotient = decimal\n  while quotient > 0 do\n\
    \    remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    binary\
    \ = binary .. tostring(remainder)\n  end\n  return binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz5otd7i.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpyz5otd7i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mxwbfu_.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp3mxwbfu_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktj9fup9.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpktj9fup9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = tostring(remainder)\
    \ .. binary\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9mxxm91.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpi9mxxm91.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp8jz0ig.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmplp8jz0ig.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5n7br19.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu5n7br19.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeptqb1ys.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpeptqb1ys.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsyio8_s.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzsyio8_s.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwx5uqpg.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppwx5uqpg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        decimal = math.floor(decimal / 2)\n        binary = binary .. tostring(remainder)\n\
    \    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiils_sa.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpoiils_sa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbqvhd5y.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmplbqvhd5y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaibzbh_r.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpaibzbh_r.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  binary\
    \ = binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquenv9tj.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpquenv9tj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9lcdnio.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpx9lcdnio.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = remainder\
    \ .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiu3wd_l.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpmiu3wd_l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qvygyv5.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp5qvygyv5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelhbp3op.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpelhbp3op.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local remainder = decimal % 2\n    \
    \    binary = binary .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    binary = binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4lo5ue2.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpk4lo5ue2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    local remainder\n    while decimal > 0 do\n        remainder = decimal\
    \ % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiiw1_9pp.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpiiw1_9pp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
