name: HumanEval_77_iscube
language: lua
results:
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgtvz7wz.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkgtvz7wz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a == 0 then\n        return true\n    end\n    if a < 0 then\n\
    \        a = -a\n    end\n    local i = 1\n    while i * i * i <= a do\n     \
    \   if i * i * i == a then\n            return true\n        end\n        i =\
    \ i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\n  if a == 0 then\n    return true\n  end\n  if a < 0 then\n    a = -a\n\
    \  end\n  local i = 1\n  while i * i * i <= a do\n    if i * i * i == a then\n\
    \      return true\n    end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprupgrd0n.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprupgrd0n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtmokefu.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprtmokefu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapc00jpr.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpapc00jpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0t09waj.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz0t09waj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = math.floor(math.pow(a,\
    \ 1/3))\n\treturn math.pow(b, 3) == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbkq0ybo.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjbkq0ybo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qqv4sbu.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8qqv4sbu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x5r0u09.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3x5r0u09.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodb13gqu.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpodb13gqu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6vm8qsp.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi6vm8qsp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp661vp3vl.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp661vp3vl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp00h7_1.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcp00h7_1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8chw77oe.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8chw77oe.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.floor(math.pow(a, 1/3))\n    return b * b * b == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv443qbxm.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv443qbxm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4wbb3vb.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp4wbb3vb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sydrge4.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7sydrge4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3qwii5e.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf3qwii5e.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fq3krz0.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5fq3krz0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80d015ai.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp80d015ai.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn46vyfmo.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn46vyfmo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.floor(math.pow(a, 1/3))\n    return b*b*b == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q5nyq1h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7q5nyq1h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqsg1y31.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgqsg1y31.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2alcv34z.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2alcv34z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = math.floor(math.pow(a,\
    \ 1/3))\n\treturn b*b*b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex2d0ryr.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpex2d0ryr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.floor(math.pow(a, 1/3))\n    return b * b * b == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1or2cn.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptt1or2cn.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbppct5ya.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbppct5ya.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn math.floor(math.pow(a,\
    \ 1/3))^3 == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyuy_34_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnyuy_34_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2aepxm8.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl2aepxm8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a == 0 then\n        return true\n    end\n    if a < 0 then\n\
    \        a = -a\n    end\n    local x = math.floor(math.pow(a, 1/3))\n    return\
    \ x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzh1yz8o.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfzh1yz8o.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrbb2bqt.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxrbb2bqt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntiue5y3.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpntiue5y3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe8c4hnc.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfe8c4hnc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohkig6pb.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpohkig6pb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    local x = math.sqrt(a)\n    if x == math.floor(x) then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuj4gp_0.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyuj4gp_0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz58or11a.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz58or11a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryiyz9vx.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpryiyz9vx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5_xeau4.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps5_xeau4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.abs(a)\
    \ == math.abs(a)^(1/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5cdqu6o.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn5cdqu6o.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvedb0y67.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvedb0y67.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitok6ptl.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpitok6ptl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ == 0) or (a == 1) or (a == -1) or (math.sqrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx89owcj7.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx89owcj7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zvvj56m.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8zvvj56m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo_p5j1i.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxo_p5j1i.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local i = 0\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32_bdccn.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp32_bdccn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local x = math.floor(math.pow(a, 1/3))\n    return x*x*x == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wx92jo9.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_wx92jo9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- TODO: implement\
    \ this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wr6gbzg.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5wr6gbzg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2m_ivc1.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj2m_ivc1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv54moior.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv54moior.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tif a < 0 then\n\t\ta = -a\n\tend\n\tlocal i = 1\n\t\
    while i * i * i <= a do\n\t\tif i * i * i == a then\n\t\t\treturn true\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k1cx3q9.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5k1cx3q9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local i = 1\n    while i * i * i <= a do\n        if i * i * i == a\
    \ then\n            return true\n        end\n        i = i + 1\n    end\n   \
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_54e5txq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_54e5txq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cv39zc6.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1cv39zc6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local n = math.floor(math.pow(a,\
    \ 1/3))\n  return n*n*n == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_35xt9b.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3_35xt9b.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.pow(math.ceil(math.pow(a, 1/3)), 3) == a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbidoe9y.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprbidoe9y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblxh74eu.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpblxh74eu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70r80ilv.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp70r80ilv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.abs(a)\
    \ == math.abs(a)^(1/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hhgrqtk.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4hhgrqtk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k0m7d49.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8k0m7d49.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    local b = math.sqrt(a)\n    local c = math.pow(b,\
    \ 3)\n    if c == a then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklto5c_4.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpklto5c_4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u8rkdsj.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_u8rkdsj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement the function\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7t3paxq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7t3paxq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    local b = math.floor(math.pow(a, 1/3))\n\
    \    return b * b * b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfeqtyu5.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzfeqtyu5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykp6y_ur.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpykp6y_ur.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a < 0 then\n        a = -a\n    end\n    if a == 0 then\n     \
    \   return true\n    end\n    local i = 1\n    while i * i * i <= a do\n     \
    \   if i * i * i == a then\n            return true\n        end\n        i =\
    \ i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    -- Hint: you may use the math.sqrt function\n \
    \   -- Hint: you may use the math.modf function\n    -- Hint: you may use the\
    \ math.abs function\n    -- Hint: you may use the math.floor function\n    --\
    \ Hint: you may use the math.ceil function\n    -- Hint: you may use the math.pow\
    \ function\n    -- Hint: you may use the math.fmod function\n    -- Hint: you\
    \ may use the math.pi function\n    -- Hint: you may use the math.exp function\n\
    \    -- Hint: you may use the math.log function\n    -- Hint: you may use the\
    \ math.log10 function\n    -- Hint: you may use the math.sin function\n    --\
    \ Hint: you may use the math.cos function\n    -- Hint: you may use the math.tan\
    \ function\n    -- Hint: you may use the math.asin function\n    -- Hint: you\
    \ may use the math.acos function\n    -- Hint: you may use the math.atan function\n\
    \    -- Hint: you may use the math.sinh function\n    -- Hint: you may use the\
    \ math.cosh function\n    -- Hint: you may use the math.tanh function\n    --\
    \ Hint: you may use the math.deg function\n    -- Hint: you may use the math.rad\
    \ function\n    -- Hint: you may use the math.random function\n    -- Hint: you\
    \ may use the math.randomseed function\n    -- Hint: you may use the math.max\
    \ function\n    -- Hint: you may use the math.min function\n    -- Hint: you may\
    \ use the math.mod function\n    -- Hint: you may use the math.frexp function\n\
    \    -- Hint: you may use the math.ldexp function\n    -- Hint: you may use the\
    \ math.ult function\n    -- Hint: you may use the math.huge function\n    -- Hint:\
    \ you may use the math.type function\n    -- Hint: you may use the math.tointeger\
    \ function\n    -- Hint: you may use the math.tonumber function\n    -- Hint:\
    \ you may use the math.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsbiuzhlx.lua:68: 'end' expected (to close 'function' at line\
    \ 17) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.pow(math.floor(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppg8hxtcs.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppg8hxtcs.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4x0z6wd.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi4x0z6wd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe595pcs.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphe595pcs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu308im62.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu308im62.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmnp74vw.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjmnp74vw.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph162i327.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph162i327.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsbznhck.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvsbznhck.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7f96p.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp2k7f96p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv20dodj4.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv20dodj4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk5ubw5n.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfk5ubw5n.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty_21woi.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpty_21woi.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2ik3bb3.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd2ik3bb3.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5clmz8gx.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5clmz8gx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zyjno4o.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8zyjno4o.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.abs(a)\
    \ == math.abs(a)^(1/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsoe_mq1c.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsoe_mq1c.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcrafqny.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprcrafqny.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ow6qq_e.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1ow6qq_e.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ write your code here\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr6t4nhw.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxr6t4nhw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_a2u5v9.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9_a2u5v9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    local x = math.floor(math.pow(math.abs(a),\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nsoitva.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_nsoitva.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl7zhmk2.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyl7zhmk2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a ==\
    \ 0 or a == 1 or a == -1 or math.pow(math.floor(math.pow(a, 1/3)), 3) == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljv4mxqe.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpljv4mxqe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep3opbko.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpep3opbko.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.floor(math.pow(a, 1/3))\n    return math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7iqtcdpy.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7iqtcdpy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.floor(math.pow(a, 1/3))\n    return math.pow(b, 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpfwi3ho.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptpfwi3ho.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.floor(math.pow(a, 1/3))\n    return a == b*b*b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0t3y0z9.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0t3y0z9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6r56vol.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph6r56vol.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1aoi4tmh.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1aoi4tmh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3rl4hbs.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo3rl4hbs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_s5w0nbo.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_s5w0nbo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwn97_ba.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcwn97_ba.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local x = math.floor(math.pow(a,\
    \ 1/3))\n  return a == x * x * x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsee1ozs0.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsee1ozs0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp186pj9k8.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp186pj9k8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    if a < 0 then a = -a end\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g9q2nya.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9g9q2nya.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: implement\
    \ this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperhs1s01.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmperhs1s01.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkivto83.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwkivto83.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_90v2u8o.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_90v2u8o.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1u4_8rc.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx1u4_8rc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb7rdl0s.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpnb7rdl0s.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8z5pwu4.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm8z5pwu4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uqo6oqd.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4uqo6oqd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstrx14x7.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpstrx14x7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqwhc5jd.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqwhc5jd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local n = math.floor(math.pow(a, 1/3))\n    return n*n*n == a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_are7wd1.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_are7wd1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.sqrt(a)\n    return b*b*b == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplg8xz0u3.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplg8xz0u3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyanp7fst.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyanp7fst.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xngavo8.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4xngavo8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sjkh7u8.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9sjkh7u8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm00v1s1g.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm00v1s1g.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw33940nm.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw33940nm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    local b = math.sqrt(a)\n    if b == math.floor(b)\
    \ then\n        local c = math.sqrt(b)\n        if c == math.floor(c) then\n \
    \           return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbsx25yy.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcbsx25yy.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- TODO: implement\
    \ this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oyxr_n3.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6oyxr_n3.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz24zxqq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcz24zxqq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x*x*x == a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mg22r3f.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6mg22r3f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuhqb_3n.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpeuhqb_3n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yfe3ph5.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2yfe3ph5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgak_7_9q.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgak_7_9q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local i =\
    \ 1\n    while i * i * i <= a do\n        if i * i * i == a then\n           \
    \ return true\n        end\n        i = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndgi8i6l.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpndgi8i6l.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local b = math.floor(math.pow(a, 1/3))\n    return b * b * b == a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qoq4ssh.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7qoq4ssh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcu1i9nu.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjcu1i9nu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqe69njii.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqe69njii.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.floor(math.pow(a, 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwf1qa7d.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzwf1qa7d.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.sqrt(a)\n    if math.floor(b) == b then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4oq11kb.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg4oq11kb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9084lpjl.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9084lpjl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k8rpncx.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8k8rpncx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6epjmnk.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn6epjmnk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    local i = 0\n    while i*i*i < a do\n        i\
    \ = i + 1\n    end\n    if i*i*i == a then\n        return true\n    else\n  \
    \      return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xnrk_pk.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8xnrk_pk.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjn6go6zr.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjn6go6zr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- your code\
    \ here\n  local b = math.sqrt(a)\n  if b == math.floor(b) then\n    return true\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc02win0.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzc02win0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.abs(a)\
    \ == math.abs(a)^(1/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbai_1tu.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptbai_1tu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = math.floor(math.pow(a,\
    \ 1/3))\n\treturn b*b*b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqeq2oza.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqeq2oza.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5e5b_wg.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpt5e5b_wg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    local b = math.sqrt(a)\n    if b == math.floor(b) then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_c2laa3.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph_c2laa3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiyrp9jr.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsiyrp9jr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2twjsgq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv2twjsgq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmrmlfdc.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxmrmlfdc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a == 0 then\n        return true\n    end\n    if a < 0 then\n\
    \        a = -a\n    end\n    local x = math.floor(math.pow(a, 1/3))\n    return\
    \ math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vuxa0xb.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_vuxa0xb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf96v5cb.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuf96v5cb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx09gd8rj.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx09gd8rj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45mqvbvo.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp45mqvbvo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq17gukyu.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpq17gukyu.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a == 0 then\n        return true\n   \
    \ end\n    local i = 1\n    while i * i * i <= a do\n        if i * i * i == a\
    \ then\n            return true\n        end\n        i = i + 1\n    end\n   \
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfc1d9dw.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvfc1d9dw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    if a == 0 then\n        return true\n    end\n\
    \    if a < 0 then\n        a = -a\n    end\n    local i = 1\n    while i * i\
    \ * i <= a do\n        if i * i * i == a then\n            return true\n     \
    \   end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vzmzw67.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4vzmzw67.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh_q5_9h.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmh_q5_9h.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ivy3pmj.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8ivy3pmj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    -- HINT: you may use math.sqrt\n    -- HINT: you\
    \ may use math.floor\n    -- HINT: you may use math.pow\n    -- HINT: you may\
    \ use math.abs\n    local b = math.sqrt(math.abs(a))\n    if math.floor(b) ==\
    \ b and math.pow(b, 3) == math.abs(a) then\n        return true\n    else\n  \
    \      return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo24xhvjx.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo24xhvjx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_d5gdyl.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph_d5gdyl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2n0c38w.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx2n0c38w.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedb3844n.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpedb3844n.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- Write\
    \ your code here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr9d8848.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmr9d8848.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxktkiaxk.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxktkiaxk.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local i = 1\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: implement\
    \ this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xu0ngax.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp6xu0ngax.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfots7kst.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfots7kst.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkog3ir32.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkog3ir32.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2hqsdec.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq2hqsdec.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local x = math.floor(math.pow(a, 1/3))\n    return x*x*x == a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvur8zqq.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkvur8zqq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a==0 then\n\
    \        return true\n    end\n    if a<0 then\n        a=-a\n    end\n    local\
    \ i=1\n    while i*i*i<=a do\n        if i*i*i==a then\n            return true\n\
    \        end\n        i=i+1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts3s6p4l.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpts3s6p4l.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjrqh88i.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmjrqh88i.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4re5qw9.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo4re5qw9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnba0hiqk.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnba0hiqk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    if a < 0 then a = -a end\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbp0eelr.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvbp0eelr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimrynpd0.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpimrynpd0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9glcuruq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9glcuruq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe79im8e1.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpe79im8e1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyp9kqeb.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzyp9kqeb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement iscube function\n    if a == 0 then\n        return true\n    end\n\
    \    if a < 0 then\n        a = -a\n    end\n    local i = 1\n    while i * i\
    \ * i <= a do\n        if i * i * i == a then\n            return true\n     \
    \   end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3qvvhnj.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpc3qvvhnj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmkfxga6.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprmkfxga6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ == 0 or a == 1 or a == -1 or (a > 0 and a % math.floor(math.pow(a, 1/3)) ==\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq3vrfay.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgq3vrfay.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local b =\
    \ math.ceil(math.pow(a, 1/3))\n    return b * b * b == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1oonhic.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt1oonhic.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a ==\
    \ 0 or (a > 0 and math.pow(math.floor(math.pow(a, 1/3)), 3) == a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgstyajb.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcgstyajb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qup6wl9.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6qup6wl9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n\
    \    local i = 1\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a == 0 then\n        return true\n    end\n    if a < 0 then\n\
    \        a = -a\n    end\n    local i = 1\n    while i*i*i <= a do\n        if\
    \ i*i*i == a then\n            return true\n        end\n        i = i + 1\n \
    \   end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_uqmp6s.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0_uqmp6s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    if a < 0 then a = -a end\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sudy9_2.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3sudy9_2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    if a == 0 then\n        return true\n    end\n    if a < 0 then\n\
    \        a = -a\n    end\n    local x = math.floor(math.pow(a, 1/3))\n    if math.pow(x,\
    \ 3) == a then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8552_0ej.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8552_0ej.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    if a == 0 then\n        return true\n    end\n\
    \    if a < 0 then\n        a = -a\n    end\n    local i = 1\n    while i * i\
    \ * i <= a do\n        if i * i * i == a then\n            return true\n     \
    \   end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.pow(math.floor(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprobaxsek.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprobaxsek.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x =\
    \ math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfmj87ho.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwfmj87ho.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    local x = math.floor(math.pow(a,1/3))\n    if math.pow(x,3)\
    \ == a then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfdirail.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvfdirail.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn38dfygh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn38dfygh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gowny1z.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9gowny1z.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- your code\
    \ here\n    local n = math.floor(math.cbrt(a))\n    return a == n * n * n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_vkh3m2.lua:19:\
    \ attempt to call a nil value (field 'cbrt')\nstack traceback:\n\t/tmp/tmpe_vkh3m2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpe_vkh3m2.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i_6z9ey.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0i_6z9ey.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- TODO:\
    \ implement this function.\n    -- Hint: you may use the math.sqrt function.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamb1vwib.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpamb1vwib.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
