---
name: HumanEval_33_sort_third
language: lua
prompt: |
  -- This function takes a table l and returns a table l' such that
  -- l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
  -- to the values of the corresponding indicies of l, but sorted.
  -- >>> sort_third({1, 2, 3})
  -- {1, 2, 3}
  -- >>> sort_third({5, 6, 3, 4, 8, 9, 2})
  -- {2, 6, 3, 4, 8, 9, 5}
  local function sort_third(l)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = sort_third
      lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})
      lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})
      lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})
      lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      table.sort(l_prime, function(a, b) return a < b end)
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_list
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(sub_list, l[j])\n\t\t\tend\n\t\t\ttable.sort(sub_list)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = sub_list[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
    local sorted = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        table.insert(sorted, v)
      end
    end
    table.sort(sorted)
    local j = 1
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        l[i] = sorted[j]
        j = j + 1
      end
    end
    return l
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        table.insert(l_prime, i, table.sort(v))
      else
        table.insert(l_prime, i, v)
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local l_prime_sub = {}
        for j = 1, 3 do
          l_prime_sub[j] = l[i - j + 1]
        end
        table.sort(l_prime_sub)
        for j = 1, 3 do
          l_prime[i - j + 1] = l_prime_sub[j]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_prime_sub = {}
              for j, v_sub in ipairs(l_prime) do
                  l_prime_sub[j] = v_sub
              end
              table.insert(l_prime_sub, v)
              table.sort(l_prime_sub)
              for j, v_sub in ipairs(l_prime_sub) do
                  l_prime[j] = v_sub
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_prime[j] = l_sub[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local temp = {}
        for j = 1, #l do
          if j % 3 == 0 then
            table.insert(temp, l[j])
          end
        end
        table.sort(temp)
        l_prime[i] = temp[i / 3]
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  temp = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local result = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local temp = {}
              for j, w in ipairs(l) do
                  if j % 3 == 0 then
                      table.insert(temp, w)
                  end
              end
              table.sort(temp)
              for k, x in ipairs(temp) do
                  if x == v then
                      table.insert(result, temp[k])
                  end
              end
          else
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(v))
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local temp = {}
              for j, w in ipairs(l) do
                  if j % 3 == 0 then
                      table.insert(temp, w)
                  end
              end
              table.sort(temp)
              table.insert(l_prime, temp[i / 3])
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, i, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_new = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_new, table.sort({v, l[i - 1], l[i - 2]}))
          else
              table.insert(l_new, v)
          end
      end
      return l_new
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_prime[j] = l_sub[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = 1, 3 do
                  table.insert(l_sub, l[i - j + 1])
              end
              table.sort(l_sub)
              for j = 1, 3 do
                  table.insert(l_prime, l_sub[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {l[i], l[i-1], l[i-2]}
              table.sort(temp)
              l_prime[i] = temp[3]
              l_prime[i-1] = temp[2]
              l_prime[i-2] = temp[1]
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local temp = {}
              for j = i - 2, i do
                  table.insert(temp, l[j])
              end
              table.sort(temp)
              for j = i - 2, i do
                  l_prime[j] = temp[j - i + 3]
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = 1, 3 do
                  table.insert(temp, l[i - j + 1])
              end
              table.sort(temp)
              for j = 1, 3 do
                  table.insert(l_prime, temp[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local new_l = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(new_l, table.sort(v))
          else
              table.insert(new_l, v)
          end
      end
      return new_l
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(v))
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  temp = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_prime[j] = l_sub[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        table.insert(l_prime, i, table.sort(v))
      else
        table.insert(l_prime, i, v)
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_l
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(sub_l, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(sub_l)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = sub_l[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local sub_l = {}
        for j = i - 2, i do
          table.insert(sub_l, l[j])
        end
        table.sort(sub_l)
        for j = i - 2, i do
          l_prime[j] = sub_l[j - i + 3]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal ret = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  t = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\tt[j] = l[i - j + 1]\n\t\t\tend\n\t\t\ttable.sort(t)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tret[i - j + 1] = t[j]\n\t\t\tend\n\t\telse\n\t\t\tret[i] =
  v\n\t\tend\n\tend\n\treturn ret\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  temp = {v}\n\t\t\tfor j = 1, i - 1 do\n\t\t\t\tif j % 3 == 0 then\n\t\t\t\t\ttable.insert(temp,
  l[j])\n\t\t\t\tend\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor j = 1, i - 1 do\n\t\t\t\tif
  j % 3 == 0 then\n\t\t\t\t\tl_prime[j] = table.remove(temp, 1)\n\t\t\t\telse\n\t\t\t\t\tl_prime[j]
  = l[j]\n\t\t\t\tend\n\t\t\tend\n\t\t\tl_prime[i] = v\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_prime_sub = {}
              for j = i - 2, i do
                  table.insert(l_prime_sub, l[j])
              end
              table.sort(l_prime_sub)
              for j = i - 2, i do
                  l_prime[j] = l_prime_sub[j - i + 3]
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local sub_l = {}
              for j = i - 2, i do
                  table.insert(sub_l, l[j])
              end
              table.sort(sub_l)
              for j = i - 2, i do
                  l_prime[j] = sub_l[j - i + 3]
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local temp = {}
        for j = i - 2, i do
          table.insert(temp, l[j])
        end
        table.sort(temp)
        for j = i - 2, i do
          l_prime[j] = temp[j - i + 3]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_sub = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    local i = 1
    while i <= #l do
      if i % 3 == 0 then
        local sub_list = {l[i], l[i-1], l[i-2]}
        table.sort(sub_list)
        l_prime[i] = sub_list[3]
        l_prime[i-1] = sub_list[2]
        l_prime[i-2] = sub_list[1]
        i = i + 3
      else
        l_prime[i] = l[i]
        i = i + 1
      end
    end
    return l_prime
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        table.insert(l_prime, i, table.sort(v))
      else
        table.insert(l_prime, i, v)
      end
    end
    return l_prime
  end
- "\tlocal ret = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(ret,
  table.sort(v))\n\t\telse\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend"
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        local l_sub = {}
        for j = i - 2, i do
          table.insert(l_sub, l[j])
        end
        table.sort(l_sub)
        for j = i - 2, i do
          l_prime[j] = l_sub[j - i + 3]
        end
      else
        l_prime[i] = v
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, i, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        table.insert(l_prime, table.sort(l[i]))
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_prime[j] = l_sub[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_prime[j] = l_sub[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local temp = {}
        for j = 1, 3 do
          table.insert(temp, l[i - 2 + j])
        end
        table.sort(temp)
        for j = 1, 3 do
          table.insert(l_prime, temp[j])
        end
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_ = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_[j] = l_sub[j - i + 3]
              end
          else
              l_[i] = l[i]
          end
      end
      return l_
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(l[i]))
          else
              table.insert(l_prime, i, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l2 = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l3 = {}
              for j = 1, 3 do
                  l3[j] = l[i - 2 + j]
              end
              table.sort(l3)
              for j = 1, 3 do
                  l2[i - 2 + j] = l3[j]
              end
          else
              l2[i] = l[i]
          end
      end
      return l2
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = 1, 3 do
                  table.insert(l_sub, l[i - j + 1])
              end
              table.sort(l_sub)
              for j = 1, 3 do
                  table.insert(l_prime, l_sub[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(l_temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(l_temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = l_temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = 1, 3 do
                  table.insert(temp, l[i - 2 + j])
              end
              table.sort(temp)
              for j = 1, 3 do
                  table.insert(l_prime, temp[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = 1, 3 do
                  table.insert(temp, l[i - 2 + j])
              end
              table.sort(temp)
              for j = 1, 3 do
                  table.insert(l_prime, temp[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  sub_list = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(sub_list, l[i - 2 + j])\n\t\t\tend\n\t\t\ttable.sort(sub_list)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\ttable.insert(l_prime, sub_list[j])\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(l_prime,
  v)\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = i - 2, i do
                  table.insert(temp, l[j])
              end
              table.sort(temp)
              for j = i - 2, i do
                  l_prime[j] = temp[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, sort_list(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  temp = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttemp[j] = l[i - 2 + j]\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - 2 + j] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l2 = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l2, table.sort(l[i]))
          else
              table.insert(l2, l[i])
          end
      end
      return l2
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(l[i]))
          else
              table.insert(l_prime, i, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        l_prime[i] = table.sort(v)
      else
        l_prime[i] = v
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_prime_sub = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\tl_prime_sub[j] = l[i - j + 1]\n\t\t\tend\n\t\t\ttable.sort(l_prime_sub)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = l_prime_sub[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = 1, 3 do
                  table.insert(l_sub, l[i - j + 1])
              end
              table.sort(l_sub)
              for j = 1, 3 do
                  table.insert(l_prime, l_sub[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              l_prime[i] = table.sort(l[i])
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_prime_sub = {}
              for j, w in ipairs(l_prime) do
                  l_prime_sub[j] = w
              end
              table.insert(l_prime_sub, v)
              table.sort(l_prime_sub)
              for j, w in ipairs(l_prime_sub) do
                  l_prime[j] = w
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(v))
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_prime_sub = {}
              for j, v_prime in ipairs(l_prime) do
                  l_prime_sub[j] = v_prime
              end
              table.insert(l_prime_sub, v)
              table.sort(l_prime_sub)
              for j, v_prime in ipairs(l_prime_sub) do
                  l_prime[j] = v_prime
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = 1, 3 do
                  table.insert(temp, l[i - j + 1])
              end
              table.sort(temp)
              for j = 1, 3 do
                  table.insert(l_prime, temp[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = 1, 3 do
                  table.insert(l_sub, l[i - j + 1])
              end
              table.sort(l_sub)
              for j = 1, 3 do
                  table.insert(l_prime, l_sub[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_copy = {}\n\t\t\tfor j, w in ipairs(l) do\n\t\t\t\tl_copy[j] = w\n\t\t\tend\n\t\t\ttable.sort(l_copy)\n\t\t\tl_prime[i]
  = l_copy[i]\n\t\telse\n\t\t\tl_prime[i] = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local result = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local temp = {}
              for j, w in ipairs(l) do
                  if j % 3 == 0 then
                      table.insert(temp, w)
                  end
              end
              table.sort(temp)
              result[i] = temp[i / 3]
          else
              result[i] = v
          end
      end
      return result
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_list
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(sub_list, l[j])\n\t\t\tend\n\t\t\ttable.sort(sub_list)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = sub_list[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_prime[j] = l_sub[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_prime_sub = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_prime_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_prime_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\ttable.insert(l_prime, l_prime_sub[j - i + 3])\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(l_prime,
  v)\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  temp = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_list
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(sub_list, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(sub_list)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = sub_list[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local l_sub = {}
        for j = i - 2, i do
          table.insert(l_sub, l[j])
        end
        table.sort(l_sub)
        for j = i - 2, i do
          l_prime[j] = l_sub[j - i + 3]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_new = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_temp
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_new[j] = l_temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_new[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_new\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tl_prime[i]
  = l[i]\n\t\telse\n\t\t\tl_prime[i] = l[i]\n\t\tend\n\tend\n\tfor i = 3, #l, 3 do\n\t\tlocal
  temp = {}\n\t\tfor j = i, i + 2 do\n\t\t\ttable.insert(temp, l[j])\n\t\tend\n\t\ttable.sort(temp)\n\t\tfor
  j = i, i + 2 do\n\t\t\tl_prime[j] = temp[j - i + 1]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, i, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        table.insert(l_prime, table.sort(l[i]))
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_slice = {}
              for j = i - 2, i do
                  table.insert(l_slice, l[j])
              end
              table.sort(l_slice)
              for j = i - 2, i do
                  l_prime[j] = l_slice[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local l_sub = {}
        for j = i - 2, i do
          table.insert(l_sub, l[j])
        end
        table.sort(l_sub)
        for j = i - 2, i do
          l_prime[j] = l_sub[j - i + 3]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if (i - 1) % 3 == 0 then
              table.insert(l_prime, i, table.sort(l[i]))
          else
              table.insert(l_prime, i, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  temp = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_sub = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        local l_prime_sub = {}
        for j = i - 2, i do
          table.insert(l_prime_sub, l[j])
        end
        table.sort(l_prime_sub)
        for j = i - 2, i do
          l_prime[j] = l_prime_sub[j - i + 3]
        end
      else
        l_prime[i] = v
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(l[i]))
          else
              table.insert(l_prime, i, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l2 = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l2, table.sort(l[i]))
          else
              table.insert(l2, l[i])
          end
      end
      return l2
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local temp = {}
        for j = i - 2, i do
          table.insert(temp, l[j])
        end
        table.sort(temp)
        l_prime[i - 2] = temp[1]
        l_prime[i - 1] = temp[2]
        l_prime[i] = temp[3]
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_table
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(sub_table, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(sub_table)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = sub_table[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local sub_table = {}
              for j = i - 2, i do
                  table.insert(sub_table, l[j])
              end
              table.sort(sub_table)
              for j = i - 2, i do
                  l_prime[j] = sub_table[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_prime_sub = {}
              for j = 1, 3 do
                  l_prime_sub[j] = l[i - 2 + j]
              end
              table.sort(l_prime_sub)
              for j = 1, 3 do
                  l_prime[i - 2 + j] = l_prime_sub[j]
              end
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tlocal i = 1\n\twhile i <= #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  sub_list = {}\n\t\t\tfor j = i, i + 2 do\n\t\t\t\ttable.insert(sub_list, l[j])\n\t\t\tend\n\t\t\ttable.sort(sub_list)\n\t\t\tfor
  j = i, i + 2 do\n\t\t\t\ttable.insert(l_prime, sub_list[j - i + 1])\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(l_prime,
  l[i])\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        l_prime[i] = v
      else
        l_prime[i] = table.sort(l[i])
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        local l_sub = {}
        for j = i - 2, i do
          table.insert(l_sub, l[j])
        end
        table.sort(l_sub)
        for j = i - 2, i do
          l_prime[j] = l_sub[j - i + 3]
        end
      else
        l_prime[i] = v
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local temp = {}
        for j = 1, 3 do
          table.insert(temp, l[i - 2 + j])
        end
        table.sort(temp)
        for j = 1, 3 do
          table.insert(l_prime, temp[j])
        end
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(l[i]))
          else
              table.insert(l_prime, i, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, i, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_new = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local l_sub = {}
              for j = i - 2, i do
                  table.insert(l_sub, l[j])
              end
              table.sort(l_sub)
              for j = i - 2, i do
                  l_new[j] = l_sub[j - i + 3]
              end
          else
              l_new[i] = l[i]
          end
      end
      return l_new
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort({v, l[i - 1], l[i - 2]}))
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local l_sub = {}
        for j = 1, 3 do
          table.insert(l_sub, l[i - j + 1])
        end
        table.sort(l_sub)
        for j = 1, 3 do
          table.insert(l_prime, l_sub[j])
        end
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(l_sub, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = l_sub[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = 1, 3 do
                  table.insert(temp, l[i - j + 1])
              end
              table.sort(temp)
              for j = 1, 3 do
                  table.insert(l_prime, temp[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tl_prime[i]
  = v\n\t\telse\n\t\t\tl_prime[i] = l[i]\n\t\tend\n\tend\n\tfor i = 1, #l_prime, 3
  do\n\t\ttable.sort(l_prime, i, i + 2)\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_temp = {}
              for j, w in ipairs(l) do
                  if j % 3 == 0 then
                      table.insert(l_temp, w)
                  end
              end
              table.sort(l_temp)
              l_prime[i] = l_temp[i / 3]
          else
              l_prime[i] = v
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = l[i]
              table.sort(temp)
              l_prime[i] = temp
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local l_prime_sub = {}
              for j, v in ipairs(l) do
                  if j % 3 == 0 then
                      table.insert(l_prime_sub, v)
                  end
              end
              table.sort(l_prime_sub)
              for j, v in ipairs(l_prime_sub) do
                  if j % 3 == 0 then
                      table.insert(l_prime, v)
                  end
              end
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_table
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(sub_table, l[j])\n\t\t\tend\n\t\t\ttable.sort(sub_table)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = sub_table[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local l_sub = {}
        for j = i - 2, i do
          table.insert(l_sub, l[j])
        end
        table.sort(l_sub)
        for j = i - 2, i do
          l_prime[j] = l_sub[j - i + 3]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local new_l = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              local new_v = {}
              for j, w in ipairs(v) do
                  table.insert(new_v, w)
              end
              table.sort(new_v)
              new_l[i] = new_v
          else
              new_l[i] = v
          end
      end
      return new_l
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        local sub_table = {}
        for j = i - 2, i do
          table.insert(sub_table, l[j])
        end
        table.sort(sub_table)
        for j = i - 2, i do
          l_prime[j] = sub_table[j - i + 3]
        end
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 3 == 0 then
        l_prime[i] = table.sort(l[i])
      else
        l_prime[i] = l[i]
      end
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local temp = {}
              for j = 1, 3 do
                  table.insert(temp, l[i - j + 1])
              end
              table.sort(temp)
              for j = 1, 3 do
                  table.insert(l_prime, temp[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_ = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tl_[i] = l[i]\n\t\telse\n\t\t\tl_[i]
  = l[i]\n\t\tend\n\tend\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.sort(l_,
  i - 2, i)\n\t\tend\n\tend\n\treturn l_\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_temp = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_temp, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_temp)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_temp[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal temp
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(temp, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = temp[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  i, sort_list(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, i, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local sorted = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(sorted, i, table.sort(l[i]))
          else
              table.insert(sorted, i, l[i])
          end
      end
      return sorted
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal sub_list
  = {}\n\t\t\tfor j = 1, 3 do\n\t\t\t\ttable.insert(sub_list, l[i - j + 1])\n\t\t\tend\n\t\t\ttable.sort(sub_list)\n\t\t\tfor
  j = 1, 3 do\n\t\t\t\tl_prime[i - j + 1] = sub_list[j]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              local sub_table = {}
              for j = i - 2, i do
                  table.insert(sub_table, l[j])
              end
              table.sort(sub_table)
              for j = i - 2, i do
                  l_prime[j] = sub_table[j - i + 3]
              end
          else
              l_prime[i] = l[i]
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(v))\n\t\telse\n\t\t\ttable.insert(l_prime, v)\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(v))
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\ttable.insert(l_prime,
  table.sort(l[i]))\n\t\telse\n\t\t\ttable.insert(l_prime, l[i])\n\t\tend\n\tend\n\treturn
  l_prime\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 3 == 0 then
              table.insert(l_prime, table.sort(l[i]))
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 3 == 0 then
        table.insert(l_prime, i, table.sort(v))
      else
        table.insert(l_prime, i, v)
      end
    end
    return l_prime
  end
- "\tlocal l_prime = {}\n\tfor i = 1, #l do\n\t\tif i % 3 == 0 then\n\t\t\tlocal l_sub
  = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = l[i]\n\t\tend\n\tend\n\treturn l_prime\nend"
- "\tlocal l_prime = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 3 == 0 then\n\t\t\tlocal
  l_sub = {}\n\t\t\tfor j = i - 2, i do\n\t\t\t\ttable.insert(l_sub, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_sub)\n\t\t\tfor
  j = i - 2, i do\n\t\t\t\tl_prime[j] = l_sub[j - i + 3]\n\t\t\tend\n\t\telse\n\t\t\tl_prime[i]
  = v\n\t\tend\n\tend\n\treturn l_prime\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 3 == 0 then
              table.insert(l_prime, i, table.sort(v))
          else
              table.insert(l_prime, i, v)
          end
      end
      return l_prime
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
