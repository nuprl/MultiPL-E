---
name: HumanEval_51_remove_vowels
language: lua
results:
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd35hz3qx.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpd35hz3qx.lua:17:
    in local 'candidate'\n\t/tmp/tmpd35hz3qx.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiou]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv68l46_8.lua:23:
    expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpv68l46_8.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzyg549ro.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpzyg549ro.lua:17:
    in local 'candidate'\n\t/tmp/tmpzyg549ro.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap0rp3ku.lua:17:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpap0rp3ku.lua:17:
    in local 'candidate'\n\t/tmp/tmpap0rp3ku.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfnscmj87.lua:17:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpfnscmj87.lua:17:
    in local 'candidate'\n\t/tmp/tmpfnscmj87.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            if not contains(vowels, text:sub(i, i)) then
                result = result .. text:sub(i, i)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xnmni7d.lua:16:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp7xnmni7d.lua:16:
    in local 'candidate'\n\t/tmp/tmp7xnmni7d.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjkow2z_n.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjkow2z_n.lua:17:
    in local 'candidate'\n\t/tmp/tmpjkow2z_n.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp76elb25h.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp76elb25h.lua:17:
    in local 'candidate'\n\t/tmp/tmp76elb25h.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for _, v in ipairs(vowels) do
                if char == v then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiou]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbduqeowj.lua:23:
    expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpbduqeowj.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dsp6cic.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp0dsp6cic.lua:17:
    in local 'candidate'\n\t/tmp/tmp0dsp6cic.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
      local result = ''
      for i = 1, #text do
        local char = text:sub(i, i)
        if not table.contains(vowels, char) then
          result = result .. char
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgaxa12i.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmprgaxa12i.lua:17:
    in local 'candidate'\n\t/tmp/tmprgaxa12i.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjr0_ndga.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjr0_ndga.lua:17:
    in local 'candidate'\n\t/tmp/tmpjr0_ndga.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not vowels:find(char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return (text:gsub('[aeiouAEIOU]', ''))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3byw86i.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpd3byw86i.lua:17:
    in local 'candidate'\n\t/tmp/tmpd3byw86i.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local new_text = ''
        for i = 1, #text do
            if not is_vowel(text:sub(i, i)) then
                new_text = new_text .. text:sub(i, i)
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp262x9sye.lua:15:
    attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmp262x9sye.lua:15:
    in local 'candidate'\n\t/tmp/tmp262x9sye.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiou]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgw1jqdw.lua:23:
    expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmprgw1jqdw.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzw6howka.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpzw6howka.lua:17:
    in local 'candidate'\n\t/tmp/tmpzw6howka.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo99dsheu.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpo99dsheu.lua:17:
    in local 'candidate'\n\t/tmp/tmpo99dsheu.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local c = text:sub(i, i)
            local is_vowel = false
            for _, v in ipairs(vowels) do
                if c == v then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                result = result .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local text_without_vowels = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not vowels:find(char) then
                text_without_vowels = text_without_vowels .. char
            end
        end
        return text_without_vowels
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local result = ''
        for i = 1, #text do
            local c = text:sub(i, i)
            if not vowels:find(c) then
                result = result .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkomdb6lt.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpkomdb6lt.lua:17:
    in local 'candidate'\n\t/tmp/tmpkomdb6lt.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not is_in(char, vowels) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb08eognd.lua:17:
    attempt to call a nil value (global 'is_in')\nstack traceback:\n\t/tmp/tmpb08eognd.lua:17:
    in local 'candidate'\n\t/tmp/tmpb08eognd.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lxqveuq.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp9lxqveuq.lua:17:
    in local 'candidate'\n\t/tmp/tmp9lxqveuq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm91bj849.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpm91bj849.lua:17:
    in local 'candidate'\n\t/tmp/tmpm91bj849.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not char:match('[aeiouAEIOU]') then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0xs67xg.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpw0xs67xg.lua:17:
    in local 'candidate'\n\t/tmp/tmpw0xs67xg.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicdkk65x.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpicdkk65x.lua:17:
    in local 'candidate'\n\t/tmp/tmpicdkk65x.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not vowels:find(char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fcj7fvz.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp4fcj7fvz.lua:17:
    in local 'candidate'\n\t/tmp/tmp4fcj7fvz.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local new_text = ''
        for i = 1, #text do
            if not vowels:find(text:sub(i, i)) then
                new_text = new_text .. text:sub(i, i)
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_x_xkok.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp4_x_xkok.lua:17:
    in local 'candidate'\n\t/tmp/tmp4_x_xkok.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0n7snbj.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpv0n7snbj.lua:17:
    in local 'candidate'\n\t/tmp/tmpv0n7snbj.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiou]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxeizg5g.lua:23:
    expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpaxeizg5g.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not is_vowel(char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwddqine5.lua:16:
    attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpwddqine5.lua:16:
    in local 'candidate'\n\t/tmp/tmpwddqine5.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for _, vowel in ipairs(vowels) do
                if char == vowel then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local c = text:sub(i, i)
            if not table.contains(vowels, c) then
                result = result .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqwuytz7s.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpqwuytz7s.lua:17:
    in local 'candidate'\n\t/tmp/tmpqwuytz7s.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for _, vowel in ipairs(vowels) do
                if char == vowel then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfbu3ku5.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpwfbu3ku5.lua:17:
    in local 'candidate'\n\t/tmp/tmpwfbu3ku5.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local result = ''
        for i = 1, #text do
            local c = text:sub(i, i)
            if not vowels:find(c) then
                result = result .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpckqs425h.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpckqs425h.lua:17:
    in local 'candidate'\n\t/tmp/tmpckqs425h.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local new_text = ''
        for i = 1, #text do
            if not is_vowel(text:sub(i, i)) then
                new_text = new_text .. text:sub(i, i)
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpglti5sx7.lua:15:
    attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpglti5sx7.lua:15:
    in local 'candidate'\n\t/tmp/tmpglti5sx7.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy28tyxpt.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpy28tyxpt.lua:17:
    in local 'candidate'\n\t/tmp/tmpy28tyxpt.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmbth74bi.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpmbth74bi.lua:17:
    in local 'candidate'\n\t/tmp/tmpmbth74bi.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0yr0_kh7.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp0yr0_kh7.lua:17:
    in local 'candidate'\n\t/tmp/tmp0yr0_kh7.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return (text:gsub('[aeiouAEIOU]', ''))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
      local result = ''
      for i = 1, #text do
        local char = text:sub(i, i)
        if not table.contains(vowels, char) then
          result = result .. char
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgsi43s4m.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpgsi43s4m.lua:17:
    in local 'candidate'\n\t/tmp/tmpgsi43s4m.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyh30ut1j.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpyh30ut1j.lua:17:
    in local 'candidate'\n\t/tmp/tmpyh30ut1j.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local c = text:sub(i, i)
            if not table.contains(vowels, c) then
                result = result .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjqgrffp.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmprjqgrffp.lua:17:
    in local 'candidate'\n\t/tmp/tmprjqgrffp.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpli1wb1xj.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpli1wb1xj.lua:17:
    in local 'candidate'\n\t/tmp/tmpli1wb1xj.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bzrs6na.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp2bzrs6na.lua:17:
    in local 'candidate'\n\t/tmp/tmp2bzrs6na.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03nnxfct.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp03nnxfct.lua:17:
    in local 'candidate'\n\t/tmp/tmp03nnxfct.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for _, v in ipairs(vowels) do
                if char == v then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpddruhbpj.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpddruhbpj.lua:17:
    in local 'candidate'\n\t/tmp/tmpddruhbpj.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for _, vowel in ipairs(vowels) do
                if char == vowel then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadx00yna.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpadx00yna.lua:17:
    in local 'candidate'\n\t/tmp/tmpadx00yna.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6yfnyyn2.lua:17:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp6yfnyyn2.lua:17:
    in local 'candidate'\n\t/tmp/tmp6yfnyyn2.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyugyqoru.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpyugyqoru.lua:17:
    in local 'candidate'\n\t/tmp/tmpyugyqoru.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjko6u1xh.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjko6u1xh.lua:17:
    in local 'candidate'\n\t/tmp/tmpjko6u1xh.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            if not vowels[text:sub(i, i)] then
                new_text = new_text .. text:sub(i, i)
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3ixlztz.lua:27:
    expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\t/tmp/tmpr3ixlztz.lua:27:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcc34okjw.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcc34okjw.lua:17:
    in local 'candidate'\n\t/tmp/tmpcc34okjw.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local c = text:sub(i, i)
            if not table.contains(vowels, c) then
                result = result .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4vchbe1.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpx4vchbe1.lua:17:
    in local 'candidate'\n\t/tmp/tmpx4vchbe1.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9oak51d.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpg9oak51d.lua:17:
    in local 'candidate'\n\t/tmp/tmpg9oak51d.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local found = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    found = true
                    break
                end
            end
            if not found then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcw8n8j2z.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcw8n8j2z.lua:17:
    in local 'candidate'\n\t/tmp/tmpcw8n8j2z.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0re26xog.lua:17:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp0re26xog.lua:17:
    in local 'candidate'\n\t/tmp/tmp0re26xog.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph2q4u9j_.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmph2q4u9j_.lua:17:
    in local 'candidate'\n\t/tmp/tmph2q4u9j_.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyx96c2u3.lua:17:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpyx96c2u3.lua:17:
    in local 'candidate'\n\t/tmp/tmpyx96c2u3.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxj071faa.lua:17:
    attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxj071faa.lua:17:
    in local 'candidate'\n\t/tmp/tmpxj071faa.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without
    vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n--
    >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n-- >>>
    remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\treturn
    text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'),
    'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),
    '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),
    'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyfwcpouu.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpyfwcpouu.lua:17:
    in local 'candidate'\n\t/tmp/tmpyfwcpouu.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
      local result = ''
      for i = 1, #text do
        local char = text:sub(i, i)
        if not table.contains(vowels, char) then
          result = result .. char
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwe1p8l2.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpmwe1p8l2.lua:17:
    in local 'candidate'\n\t/tmp/tmpmwe1p8l2.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
      local result = ''
      for i = 1, #text do
        local char = text:sub(i, i)
        if not table.contains(vowels, char) then
          result = result .. char
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kyofahj.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp0kyofahj.lua:17:
    in local 'candidate'\n\t/tmp/tmp0kyofahj.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = 'aeiouAEIOU'
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not vowels:find(char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local new_text = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            local is_vowel = false
            for j = 1, #vowels do
                if char == vowels[j] then
                    is_vowel = true
                    break
                end
            end
            if not is_vowel then
                new_text = new_text .. char
            end
        end
        return new_text
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiou]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l33ojlx.lua:23:
    expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp6l33ojlx.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return string.gsub(text, '[aeiou]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92avjn_u.lua:23:
    expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp92avjn_u.lua:23:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpanv02y7f.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpanv02y7f.lua:17:
    in local 'candidate'\n\t/tmp/tmpanv02y7f.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
      return text:gsub('[aeiouAEIOU]', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- remove_vowels is a function that takes string and returns string without vowels.
    -- >>> remove_vowels('')
    -- ''
    -- >>> remove_vowels('abcdef')
    -- 'bcdf'
    -- >>> remove_vowels('aaaaa')
    -- ''
    -- >>> remove_vowels('aaBAA')
    -- 'B'
    -- >>> remove_vowels('zbcd')
    -- 'zbcd'
    local function remove_vowels(text)
        local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        local result = ''
        for i = 1, #text do
            local char = text:sub(i, i)
            if not table.contains(vowels, char) then
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = remove_vowels
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('abcdef\nghijklm'), 'bcdf\nghjklm')
        lu.assertEquals(candidate('fedcba'), 'fdcb')
        lu.assertEquals(candidate('eeeee'), '')
        lu.assertEquals(candidate('acBAA'), 'cB')
        lu.assertEquals(candidate('EcBOO'), 'cB')
        lu.assertEquals(candidate('ybcd'), 'ybcd')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0wkyomxc.lua:17:
    attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp0wkyomxc.lua:17:
    in local 'candidate'\n\t/tmp/tmp0wkyomxc.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
