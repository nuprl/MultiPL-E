---
name: HumanEval_56_correct_bracketing
language: lua
prompt: |
  -- brackets is a string of "<" and ">".
  -- return true if every opening bracket has a corresponding closing bracket.
  -- >>> correct_bracketing('<')
  -- false
  -- >>> correct_bracketing('<>')
  -- true
  -- >>> correct_bracketing('<<><>>')
  -- true
  -- >>> correct_bracketing('><<>')
  -- false
  local function correct_bracketing(brackets)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = correct_bracketing
      lu.assertEquals(candidate('<>'), true)
      lu.assertEquals(candidate('<<><>>'), true)
      lu.assertEquals(candidate('<><><<><>><>'), true)
      lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
      lu.assertEquals(candidate('<<<><>>>>'), false)
      lu.assertEquals(candidate('><<>'), false)
      lu.assertEquals(candidate('<'), false)
      lu.assertEquals(candidate('<<<<'), false)
      lu.assertEquals(candidate('>'), false)
      lu.assertEquals(candidate('<<>'), false)
      lu.assertEquals(candidate('<><><<><>><>><<>'), false)
      lu.assertEquals(candidate('<><><<><>><>>><>'), false)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local b = brackets:sub(i, i)
      if b == '<' then
        table.insert(stack, b)
      elseif b == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              count = count + 1
          elseif c == '>' then
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              local top = table.remove(stack)
              if top ~= '<' then
                  return false
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, '<')
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              stack:push(bracket)
          elseif bracket == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        stack[#stack + 1] = c
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        stack[#stack] = nil
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        count = count + 1
      elseif c == '>' then
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              stack:push(bracket)
          elseif bracket == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack:new()
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              stack:push(b)
          elseif b == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = Stack()
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        stack:push(c)
      elseif c == '>' then
        if stack:is_empty() then
          return false
        else
          stack:pop()
        end
      end
    end
    return stack:is_empty()
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = Stack()
    for i = 1, #brackets do
      local bracket = brackets:sub(i, i)
      if bracket == '<' then
        stack:push(bracket)
      elseif bracket == '>' then
        if stack:is_empty() then
          return false
        else
          stack:pop()
        end
      end
    end
    return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              count = count + 1
          elseif c == '>' then
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- "\tlocal count = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '<'
  then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count - 1\n\t\tend\n\t\tif
  count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn count == 0\nend"
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack[#stack + 1] = c
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              stack[#stack] = nil
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              count = count + 1
          elseif c == '>' then
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              count = count + 1
          elseif c == '>' then
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local b = brackets:sub(i, i)
      if b == '<' then
        table.insert(stack, b)
      elseif b == '>' then
        if #stack == 0 then
          return false
        else
          table.remove(stack)
        end
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              stack:push(b)
          elseif b == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        stack[#stack + 1] = c
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        stack[#stack] = nil
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = Stack()
    for i = 1, #brackets do
      local b = brackets:sub(i, i)
      if b == '<' then
        stack:push(b)
      else
        if stack:is_empty() then
          return false
        else
          stack:pop()
        end
      end
    end
    return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local b = brackets:sub(i, i)
      if b == '<' then
        table.insert(stack, b)
      elseif b == '>' then
        if #stack == 0 then
          return false
        else
          table.remove(stack)
        end
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              stack:push(bracket)
          elseif bracket == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- "\tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif
  c == '<' then\n\t\t\ttable.insert(stack, c)\n\t\telseif c == '>' then\n\t\t\tif
  #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\tend\n\tend\n\treturn
  #stack == 0\nend"
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local char = brackets:sub(i, i)
          if char == '<' then
              table.insert(stack, char)
          elseif char == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack[#stack + 1] = c
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              stack[#stack] = nil
          end
      end
      return #stack == 0
  end
- |2-
      local depth = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              depth = depth + 1
          elseif brackets:sub(i, i) == '>' then
              depth = depth - 1
          end
          if depth < 0 then
              return false
          end
      end
      return depth == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local char = brackets:sub(i, i)
          if char == '<' then
              table.insert(stack, char)
          elseif char == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local bracket = brackets:sub(i, i)
          if bracket == '<' then
              table.insert(stack, bracket)
          elseif bracket == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              count = count + 1
          elseif c == '>' then
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for c in brackets:gmatch('.') do
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
    local count = 0
    for i = 1, #brackets do
      if brackets:sub(i, i) == '<' then
        count = count + 1
      else
        count = count - 1
      end
      if count < 0 then
        return false
      end
    end
    return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local char = brackets:sub(i, i)
          if char == '<' then
              table.insert(stack, char)
          elseif char == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local bracket = brackets:sub(i, i)
      if bracket == '<' then
        stack[#stack + 1] = bracket
      elseif bracket == '>' then
        if #stack == 0 then
          return false
        end
        stack[#stack] = nil
      end
    end
    return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
    local stack = Stack()
    for i = 1, #brackets do
      local b = brackets:sub(i, i)
      if b == '<' then
        stack:push(b)
      elseif b == '>' then
        if stack:is_empty() then
          return false
        else
          stack:pop()
        end
      end
    end
    return stack:is_empty()
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
    local stack = {}
    for i = 1, #brackets do
      local c = brackets:sub(i, i)
      if c == '<' then
        table.insert(stack, c)
      elseif c == '>' then
        if #stack == 0 then
          return false
        end
        table.remove(stack)
      end
    end
    return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              table.insert(stack, c)
          elseif c == '>' then
              if #stack == 0 then
                  return false
              end
              table.remove(stack)
          end
      end
      return #stack == 0
  end
- |2-
      local count = 0
      for i = 1, #brackets do
          if brackets:sub(i, i) == '<' then
              count = count + 1
          else
              count = count - 1
          end
          if count < 0 then
              return false
          end
      end
      return count == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = {}
      for i = 1, #brackets do
          local b = brackets:sub(i, i)
          if b == '<' then
              table.insert(stack, b)
          elseif b == '>' then
              if #stack == 0 then
                  return false
              else
                  table.remove(stack)
              end
          end
      end
      return #stack == 0
  end
- |2-
      local stack = Stack()
      for i = 1, #brackets do
          local c = brackets:sub(i, i)
          if c == '<' then
              stack:push(c)
          elseif c == '>' then
              if stack:is_empty() then
                  return false
              else
                  stack:pop()
              end
          end
      end
      return stack:is_empty()
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
