---
name: HumanEval_31_is_prime
language: lua
results:
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n <= 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.floor(math.sqrt(n)) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n < 2 then
        return false
      end
      if n == 2 then
        return true
      end
      if n % 2 == 0 then
        return false
      end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      if n == 2 then
        return true
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n <= 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        local max = math.floor(math.sqrt(n))
        for i = 3, max, 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                return false
            end
            i = i + 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n < 2 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n <= 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                return false
            end
            i = i + 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.floor(math.sqrt(n)) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n <= 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.floor(math.sqrt(n)) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n < 2 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 2 then
            return true
        elseif n < 2 or n % 2 == 0 then
            return false
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpztudlke6.lua:41: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        if n == 2 then
            return true
        end
        if n % 2 == 0 then
            return false
        end
        for i = 3, math.sqrt(n), 2 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n < 2 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n <= 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn
    true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),
    true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),
    true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),
    false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),
    true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),
    true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),
    false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n < 2 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        local i = 2
        while i < n do
            if n % i == 0 then
                return false
            end
            i = i + 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      if n == 2 then
        return true
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>
    is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n--
    true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n--
    false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\tif n == 1 then\n\t\treturn
    false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),
    false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),
    true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),
    false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),
    true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),
    false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n <= 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                return false
            end
            i = i + 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n <= 1 then
        return false
      end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, n - 1 do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n < 2 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
      if n == 1 then
        return false
      end
      for i = 2, n - 1 do
        if n % i == 0 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return true if a given number is prime, and false otherwise.
    -- >>> is_prime(6)
    -- false
    -- >>> is_prime(101)
    -- true
    -- >>> is_prime(11)
    -- true
    -- >>> is_prime(13441)
    -- true
    -- >>> is_prime(61)
    -- true
    -- >>> is_prime(4)
    -- false
    -- >>> is_prime(1)
    -- false
    local function is_prime(n)
        if n == 1 then
            return false
        end
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = is_prime
        lu.assertEquals(candidate(6), false)
        lu.assertEquals(candidate(101), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(13441), true)
        lu.assertEquals(candidate(61), true)
        lu.assertEquals(candidate(4), false)
        lu.assertEquals(candidate(1), false)
        lu.assertEquals(candidate(5), true)
        lu.assertEquals(candidate(11), true)
        lu.assertEquals(candidate(17), true)
        lu.assertEquals(candidate(85), false)
        lu.assertEquals(candidate(77), false)
        lu.assertEquals(candidate(255379), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
