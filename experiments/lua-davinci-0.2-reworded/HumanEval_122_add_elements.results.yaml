---
language: lua
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local num = arr[i]
            if num < 100 then
                sum = sum + num
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local num = arr[i]
            if num < 100 then
                sum = sum + num
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local num = arr[i]
            if num < 100 then
                sum = sum + num
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local num = arr[i]
        if num < 100 then
          sum = sum + num
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local num = arr[i]
            if num < 100 then
                sum = sum + num
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            local n = arr[i]
            if n < 100 then
                sum = sum + n
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        if arr[i] < 100 then
          sum = sum + arr[i]
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
      local sum = 0
      for i = 1, k do
        local n = arr[i]
        if n < 100 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Given a non-empty table of integers arr and an integer k, return
    -- the sum of the elements with at most two digits from the first k elements of arr.
    -- Example:
    -- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)
    -- 24
    -- Constraints:
    -- 1. 1 <= len(arr) <= 100
    -- 2. 1 <= k <= len(arr)
    local function add_elements(arr, k)
        local sum = 0
        for i = 1, k do
            if arr[i] < 100 then
                sum = sum + arr[i]
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = add_elements
        lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)
        lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)
        lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)
        lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)
        lu.assertEquals(candidate({1}, 1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
