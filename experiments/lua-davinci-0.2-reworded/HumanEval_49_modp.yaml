---
name: HumanEval_49_modp
language: lua
prompt: |
  -- Return 2^n modulo p (be aware of numerics).
  -- >>> modp(3, 5)
  -- 3
  -- >>> modp(1101, 101)
  -- 2
  -- >>> modp(0, 101)
  -- 1
  -- >>> modp(3, 11)
  -- 8
  -- >>> modp(100, 101)
  -- 1
  local function modp(n, p)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = modp
      lu.assertEquals(candidate(3, 5), 3)
      lu.assertEquals(candidate(1101, 101), 2)
      lu.assertEquals(candidate(0, 101), 1)
      lu.assertEquals(candidate(3, 11), 8)
      lu.assertEquals(candidate(100, 101), 1)
      lu.assertEquals(candidate(30, 5), 4)
      lu.assertEquals(candidate(31, 5), 3)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = r * 2 % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local result = 1
      while n > 0 do
          if n % 2 == 1 then
              result = (result * 2) % p
          end
          n = math.floor(n / 2)
      end
      return result
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local result = 1
      local power = n
      while power > 0 do
          if power % 2 == 1 then
              result = (result * n) % p
          end
          n = (n * n) % p
          power = math.floor(power / 2)
      end
      return result
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    if n == 0 then return 1 end
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
      local r = 1
      local x = n % p
      while n > 0 do
          if n % 2 == 1 then
              r = (r * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return r
  end
- |2-
    local result = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        result = (result * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return result
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          local m = modp(n / 2, p)
          return (m * m) % p
      else
          return (2 * modp(n - 1, p)) % p
      end
  end
- "\tlocal r = 1\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn
  = math.floor(n / 2)\n\tend\n\treturn r\nend"
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      if n == 0 then
          return 1
      elseif n % 2 == 0 then
          local m = modp(n / 2, p)
          return (m * m) % p
      else
          return (n * modp(n - 1, p)) % p
      end
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local res = 1
    local x = n
    while n > 0 do
      if n % 2 == 1 then
        res = (res * x) % p
      end
      x = (x * x) % p
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local res = 1
      local a = 2
      local b = n
      while b > 0 do
          if b % 2 == 1 then
              res = (res * a) % p
          end
          b = math.floor(b / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local res = 1
      local x = n % p
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
    local res = 1
    local x = n
    while n > 0 do
      if n % 2 == 1 then
        res = (res * x) % p
      end
      x = (x * x) % p
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local a = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              a = (a * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return a
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
      local res = 1
      local x = n
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          x = (x * x) % p
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local result = 1
    local base = 2
    while n > 0 do
      if n % 2 == 1 then
        result = (result * base) % p
      end
      n = math.floor(n / 2)
      base = (base * base) % p
    end
    return result
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local res = 1
      local x = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n % 2 == 0 then
          return modp(n / 2, p) ^ 2 % p
      else
          return modp(n - 1, p) * 2 % p
      end
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          local m = modp(n / 2, p)
          return (m * m) % p
      else
          return (2 * modp(n - 1, p)) % p
      end
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
    if n == 0 then return 1 end
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
      local res = 1
      for i = 1, n do
          res = (res * 2) % p
      end
      return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local res = 1
    local x = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * x) % p
      end
      x = (x * x) % p
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local result = 1
    local base = 2
    while n > 0 do
      if n % 2 == 1 then
        result = (result * base) % p
      end
      n = math.floor(n / 2)
      base = (base * base) % p
    end
    return result
  end
- |2-
    local res = 1
    local x = n % p
    while n > 0 do
      if n % 2 == 1 then
        res = (res * x) % p
      end
      n = math.floor(n / 2)
      x = (x * x) % p
    end
    return res
  end
- |2
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n == 2 then
          return 4
      elseif n == 3 then
          return 8
      elseif n == 4 then
          return 16
      elseif n == 5 then
          return 32
      elseif n == 6 then
          return 64
      elseif n == 7 then
          return 128
      elseif n == 8 then
          return 29
      elseif n == 9 then
          return 58
      elseif n == 10 then
          return 116
      elseif n == 11 then
          return 232
      elseif n == 12 then
          return 205
      elseif n == 13 then
          return 135
      elseif n == 14 then
          return 19
      elseif n == 15 then
          return 38
      elseif n == 16 then
          return 76
      elseif n == 17 then
          return 152
      elseif n == 18 then
          return 45
      elseif n == 19 then
          return 90
      elseif n == 20 then
          return 180
      elseif n == 21 then
          return 117
      elseif n == 22 then
          return 234
      elseif n == 23 then
          return 201
      elseif n == 24 then
          return 143
      elseif n == 25 then
          return 3
      elseif n == 26 then
          return 6
      elseif n == 27 then
          return 12
      elseif n == 28 then
          return 24
      elseif n == 29 then
          return 48
      elseif n == 30 then
          return 96
      elseif n == 31 then
          return 192
      elseif n == 32 then
          return 157
      elseif n == 33 then
          return 39
      elseif n == 34 then
          return 78
      elseif n == 35 then
          return 156
      elseif n == 36 then
          return 37
      elseif n == 37 then
          return 74
      elseif n == 38 then
          return 148
      elseif n == 39 then
          return 53
      elseif n == 40 then
          return 106
      elseif n == 41 then
          return 212
      elseif n == 42 then
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
    if n == 0 then return 1 end
    local res = 1
    local x = n
    while x > 0 do
      if x % 2 == 1 then
        res = (res * n) % p
      end
      x = math.floor(x / 2)
      n = (n * n) % p
    end
    return res
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n == 2 then
          return 4
      elseif n == 3 then
          return 8
      elseif n == 4 then
          return 16
      elseif n == 5 then
          return 32
      elseif n == 6 then
          return 64
      elseif n == 7 then
          return 128
      elseif n == 8 then
          return 27
      elseif n == 9 then
          return 54
      elseif n == 10 then
          return 108
      elseif n == 11 then
          return 216
      elseif n == 12 then
          return 171
      elseif n == 13 then
          return 77
      elseif n == 14 then
          return 154
      elseif n == 15 then
          return 47
      elseif n == 16 then
          return 94
      elseif n == 17 then
          return 188
      elseif n == 18 then
          return 99
      elseif n == 19 then
          return 198
      elseif n == 20 then
          return 151
      elseif n == 21 then
          return 53
      elseif n == 22 then
          return 106
      elseif n == 23 then
          return 212
      elseif n == 24 then
          return 179
      elseif n == 25 then
          return 125
      elseif n == 26 then
          return 250
      elseif n == 27 then
          return 239
      elseif n == 28 then
          return 195
      elseif n == 29 then
          return 155
      elseif n == 30 then
          return 43
      elseif n == 31 then
          return 86
      elseif n == 32 then
          return 172
      elseif n == 33 then
          return 116
      elseif n == 34 then
          return 232
      elseif n == 35 then
          return 205
      elseif n == 36 then
          return 237
      elseif n == 37 then
          return 211
      elseif n == 38 then
          return 245
      elseif n == 39 then
          return 199
      elseif n == 40 then
          return 147
      elseif n == 41 then
          return 59
      elseif n == 42 then
- |2
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n == 2 then
          return 4
      elseif n == 3 then
          return 8
      elseif n == 4 then
          return 16
      elseif n == 5 then
          return 32
      elseif n == 6 then
          return 64
      elseif n == 7 then
          return 128
      elseif n == 8 then
          return 27
      elseif n == 9 then
          return 54
      elseif n == 10 then
          return 108
      elseif n == 11 then
          return 216
      elseif n == 12 then
          return 171
      elseif n == 13 then
          return 77
      elseif n == 14 then
          return 154
      elseif n == 15 then
          return 47
      elseif n == 16 then
          return 94
      elseif n == 17 then
          return 188
      elseif n == 18 then
          return 99
      elseif n == 19 then
          return 198
      elseif n == 20 then
          return 151
      elseif n == 21 then
          return 53
      elseif n == 22 then
          return 106
      elseif n == 23 then
          return 212
      elseif n == 24 then
          return 179
      elseif n == 25 then
          return 125
      elseif n == 26 then
          return 250
      elseif n == 27 then
          return 239
      elseif n == 28 then
          return 195
      elseif n == 29 then
          return 155
      elseif n == 30 then
          return 43
      elseif n == 31 then
          return 86
      elseif n == 32 then
          return 172
      elseif n == 33 then
          return 116
      elseif n == 34 then
          return 232
      elseif n == 35 then
          return 205
      elseif n == 36 then
          return 237
      elseif n == 37 then
          return 211
      elseif n == 38 then
          return 245
      elseif n == 39 then
          return 199
      elseif n == 40 then
          return 147
      elseif n == 41 then
          return 59
      elseif n == 42 then
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          return modp(n/2, p)^2 % p
      else
          return 2 * modp(n-1, p) % p
      end
  end
- |2-
    local r = 1
    for i = 1, n do
      r = (r * 2) % p
    end
    return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- "\tlocal r = 1\n\tlocal x = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr
  = (r * x) % p\n\t\tend\n\t\tn = math.floor(n / 2)\n\t\tx = (x * x) % p\n\tend\n\treturn
  r\nend"
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local r = 1
      local x = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return r
  end
- |2-
    local r = 1
    for i = 1, n do
      r = (r * 2) % p
    end
    return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          local m = modp(n / 2, p)
          return (m * m) % p
      else
          return (2 * modp(n - 1, p)) % p
      end
  end
- |2-
    if n == 0 then return 1 end
    local r = modp(math.floor(n/2), p)
    r = (r*r) % p
    if n % 2 == 1 then
      r = (r*2) % p
    end
    return r
  end
- |2-
      local result = 1
      local base = 2
      while n > 0 do
          if n % 2 == 1 then
              result = (result * base) % p
          end
          n = math.floor(n / 2)
          base = (base * base) % p
      end
      return result
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- "\tlocal r = 1\n\tlocal x = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr
  = (r * x) % p\n\t\tend\n\t\tn = math.floor(n / 2)\n\t\tx = (x * x) % p\n\tend\n\treturn
  r\nend"
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
      local res = 1
      local x = n
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          x = (x * x) % p
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local res = 1
      local a = 2
      local b = n
      while b > 0 do
          if b % 2 == 1 then
              res = (res * a) % p
          end
          a = (a * a) % p
          b = math.floor(b / 2)
      end
      return res
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
    local r = 1
    local x = n % p
    while n > 0 do
      if n % 2 == 1 then
        r = (r * x) % p
      end
      n = math.floor(n / 2)
      x = (x * x) % p
    end
    return r
  end
- |2
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n == 2 then
          return 4
      elseif n == 3 then
          return 8
      elseif n == 4 then
          return 16
      elseif n == 5 then
          return 32
      elseif n == 6 then
          return 64
      elseif n == 7 then
          return 128
      elseif n == 8 then
          return 27
      elseif n == 9 then
          return 54
      elseif n == 10 then
          return 108
      elseif n == 11 then
          return 216
      elseif n == 12 then
          return 171
      elseif n == 13 then
          return 77
      elseif n == 14 then
          return 154
      elseif n == 15 then
          return 47
      elseif n == 16 then
          return 94
      elseif n == 17 then
          return 188
      elseif n == 18 then
          return 99
      elseif n == 19 then
          return 198
      elseif n == 20 then
          return 151
      elseif n == 21 then
          return 53
      elseif n == 22 then
          return 106
      elseif n == 23 then
          return 212
      elseif n == 24 then
          return 179
      elseif n == 25 then
          return 125
      elseif n == 26 then
          return 250
      elseif n == 27 then
          return 239
      elseif n == 28 then
          return 195
      elseif n == 29 then
          return 155
      elseif n == 30 then
          return 43
      elseif n == 31 then
          return 86
      elseif n == 32 then
          return 172
      elseif n == 33 then
          return 116
      elseif n == 34 then
          return 232
      elseif n == 35 then
          return 205
      elseif n == 36 then
          return 237
      elseif n == 37 then
          return 211
      elseif n == 38 then
          return 245
      elseif n == 39 then
          return 199
      elseif n == 40 then
          return 147
      elseif n == 41 then
          return 59
      elseif n == 42 then
- |2-
      local r = 1
      local x = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return r
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          return (modp(n / 2, p) ^ 2 - 1) % p
      else
          return (2 * modp((n - 1) / 2, p) ^ 2) % p
      end
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          local m = modp(n/2, p)
          return (m*m) % p
      else
          return (2 * modp(n-1, p)) % p
      end
  end
- |2-
      local result = 1
      local base = 2
      while n > 0 do
          if n % 2 == 1 then
              result = (result * base) % p
          end
          n = math.floor(n / 2)
          base = (base * base) % p
      end
      return result
  end
- |2-
      local res = 1
      local x = n % p
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local result = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              result = (result * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return result
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    if n == 0 then return 1 end
    local res = 1
    local x = n
    while x > 0 do
      if x % 2 == 1 then
        res = (res * n) % p
      end
      x = math.floor(x / 2)
      n = (n * n) % p
    end
    return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    for i = 1, n do
      r = (r * 2) % p
    end
    return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local x = 1
      local y = 2
      while n > 0 do
          if n % 2 == 1 then
              x = (x * y) % p
          end
          y = (y * y) % p
          n = math.floor(n / 2)
      end
      return x
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local res = 1
      local x = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
      local r = 1
      for i = 1, n do
          r = (r * 2) % p
      end
      return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local res = 1
      local x = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
      local res = 1
      local x = n
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          x = (x * x) % p
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local result = 1
    local base = 2
    while n > 0 do
      if n % 2 == 1 then
        result = (result * base) % p
      end
      n = math.floor(n / 2)
      base = (base * base) % p
    end
    return result
  end
- |2-
      local res = 1
      local x = n
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          x = (x * x) % p
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
    if n == 0 then return 1 end
    local res = 1
    local x = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * x) % p
      end
      x = (x * x) % p
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n % 2 == 0 then
          return modp(n / 2, p) ^ 2 % p
      else
          return modp(n - 1, p) * 2 % p
      end
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
    if n == 0 then return 1 end
    local res = 1
    local x = n
    while x > 0 do
      if x % 2 == 1 then
        res = (res * n) % p
      end
      x = math.floor(x / 2)
      n = (n * n) % p
    end
    return res
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
      local result = 1
      local base = 2
      while n > 0 do
          if n % 2 == 1 then
              result = (result * base) % p
          end
          n = math.floor(n / 2)
          base = (base * base) % p
      end
      return result
  end
- |2-
    local result = 1
    local base = 2
    while n > 0 do
      if n % 2 == 1 then
        result = (result * base) % p
      end
      n = math.floor(n / 2)
      base = (base * base) % p
    end
    return result
  end
- |2-
      local r = 1
      for i = 1, n do
          r = (r * 2) % p
      end
      return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local x = 1
      local y = 2
      while n > 0 do
          if n % 2 == 1 then
              x = (x * y) % p
          end
          y = (y * y) % p
          n = math.floor(n / 2)
      end
      return x
  end
- |2-
      local res = 1
      local a = 2
      local n = n % (p - 1)
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local res = 1
      local x = n % p
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return n
      elseif n % 2 == 0 then
          return (modp(n/2, p)^2) % p
      else
          return (modp(n-1, p) * n) % p
      end
  end
- |2
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n == 2 then
          return 4
      elseif n == 3 then
          return 8
      elseif n == 4 then
          return 16
      elseif n == 5 then
          return 32
      elseif n == 6 then
          return 64
      elseif n == 7 then
          return 128
      elseif n == 8 then
          return 29
      elseif n == 9 then
          return 58
      elseif n == 10 then
          return 116
      elseif n == 11 then
          return 232
      elseif n == 12 then
          return 205
      elseif n == 13 then
          return 135
      elseif n == 14 then
          return 19
      elseif n == 15 then
          return 38
      elseif n == 16 then
          return 76
      elseif n == 17 then
          return 152
      elseif n == 18 then
          return 45
      elseif n == 19 then
          return 90
      elseif n == 20 then
          return 180
      elseif n == 21 then
          return 117
      elseif n == 22 then
          return 234
      elseif n == 23 then
          return 201
      elseif n == 24 then
          return 143
      elseif n == 25 then
          return 3
      elseif n == 26 then
          return 6
      elseif n == 27 then
          return 12
      elseif n == 28 then
          return 24
      elseif n == 29 then
          return 48
      elseif n == 30 then
          return 96
      elseif n == 31 then
          return 192
      elseif n == 32 then
          return 157
      elseif n == 33 then
          return 39
      elseif n == 34 then
          return 78
      elseif n == 35 then
          return 156
      elseif n == 36 then
          return 37
      elseif n == 37 then
          return 74
      elseif n == 38 then
          return 148
      elseif n == 39 then
          return 53
      elseif n == 40 then
          return 106
      elseif n == 41 then
          return 212
      elseif n == 42 then
- |2-
      local res = 1
      while n > 0 do
          if n % 2 == 1 then
              res = (res * 2) % p
          end
          n = math.floor(n / 2)
      end
      return res
  end
- |2-
      local result = 1
      local base = 2
      while n > 0 do
          if n % 2 == 1 then
              result = (result * base) % p
          end
          n = math.floor(n / 2)
          base = (base * base) % p
      end
      return result
  end
- |2-
    if n == 0 then
      return 1
    elseif n == 1 then
      return n
    elseif n % 2 == 0 then
      return modp(n/2, p)^2 % p
    else
      return n * modp(n-1, p) % p
    end
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local r = 1
      local x = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return r
  end
- |2-
      local res = 1
      local x = n % p
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    local r = 1
    local b = 2
    while n > 0 do
      if n % 2 == 1 then
        r = (r * b) % p
      end
      n = math.floor(n / 2)
      b = (b * b) % p
    end
    return r
  end
- |2-
      -- TODO: this is not the most efficient way to do this, but it works.
      local res = 1
      for i = 1, n do
          res = (res * 2) % p
      end
      return res
  end
- |2-
      local r = 1
      local x = n
      while n > 0 do
          if n % 2 == 1 then
              r = (r * x) % p
          end
          x = (x * x) % p
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      local a = 1
      local b = 2
      local c = n
      while c > 0 do
          if c % 2 == 1 then
              a = (a * b) % p
          end
          b = (b * b) % p
          c = math.floor(c / 2)
      end
      return a
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local res = 1
    local a = 2
    while n > 0 do
      if n % 2 == 1 then
        res = (res * a) % p
      end
      n = math.floor(n / 2)
      a = (a * a) % p
    end
    return res
  end
- |2-
    local result = 1
    local base = 2
    while n > 0 do
      if n % 2 == 1 then
        result = (result * base) % p
      end
      n = math.floor(n / 2)
      base = (base * base) % p
    end
    return result
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
    local r = 1
    local b = n
    while b > 0 do
      if b % 2 == 1 then
        r = (r * n) % p
      end
      b = math.floor(b / 2)
      n = (n * n) % p
    end
    return r
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
      local res = 1
      for i = 1, n do
          res = (res * 2) % p
      end
      return res
  end
- |2-
      local res = 1
      local x = n % p
      while n > 0 do
          if n % 2 == 1 then
              res = (res * x) % p
          end
          n = math.floor(n / 2)
          x = (x * x) % p
      end
      return res
  end
- |2-
      local r = 1
      local b = 2
      while n > 0 do
          if n % 2 == 1 then
              r = (r * b) % p
          end
          n = math.floor(n / 2)
          b = (b * b) % p
      end
      return r
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- |2-
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n % 2 == 0 then
          local m = modp(n/2, p)
          return (m * m) % p
      else
          return (2 * modp(n-1, p)) % p
      end
  end
- |2-
      local res = 1
      local a = 2
      while n > 0 do
          if n % 2 == 1 then
              res = (res * a) % p
          end
          n = math.floor(n / 2)
          a = (a * a) % p
      end
      return res
  end
- |2-
    if n == 0 then
      return 1
    elseif n % 2 == 0 then
      return modp(n/2, p)^2 % p
    else
      return (modp(n/2, p)^2 * 2) % p
    end
  end
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    if n == 0 then
      return 1
    elseif n == 1 then
      return 2
    elseif n % 2 == 0 then
      return (modp(n / 2, p) ^ 2 - 1) % p
    else
      return (2 * modp((n - 1) / 2, p) ^ 2) % p
    end
  end
- |2-
    local res = 1
    for i = 1, n do
      res = (res * 2) % p
    end
    return res
  end
- |2-
    local r = 1
    while n > 0 do
      if n % 2 == 1 then
        r = (r * 2) % p
      end
      n = math.floor(n / 2)
    end
    return r
  end
- |2-
    local result = 1
    local power = n
    while power > 0 do
      if power % 2 == 1 then
        result = (result * n) % p
      end
      n = (n * n) % p
      power = math.floor(power / 2)
    end
    return result
  end
- |2-
      local r = 1
      while n > 0 do
          if n % 2 == 1 then
              r = (r * 2) % p
          end
          n = math.floor(n / 2)
      end
      return r
  end
- "\tlocal r = 1\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn
  = math.floor(n / 2)\n\tend\n\treturn r\nend"
- |2-
    local res = 1
    while n > 0 do
      if n % 2 == 1 then
        res = (res * 2) % p
      end
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
      if n == 0 then
          return 1
      elseif n % 2 == 0 then
          return modp(n / 2, p) ^ 2 % p
      else
          return modp(n - 1, p) * 2 % p
      end
  end
- |2
      if n == 0 then
          return 1
      elseif n == 1 then
          return 2
      elseif n == 2 then
          return 4
      elseif n == 3 then
          return 8
      elseif n == 4 then
          return 16
      elseif n == 5 then
          return 32
      elseif n == 6 then
          return 64
      elseif n == 7 then
          return 128
      elseif n == 8 then
          return 27
      elseif n == 9 then
          return 54
      elseif n == 10 then
          return 108
      elseif n == 11 then
          return 216
      elseif n == 12 then
          return 171
      elseif n == 13 then
          return 77
      elseif n == 14 then
          return 154
      elseif n == 15 then
          return 47
      elseif n == 16 then
          return 94
      elseif n == 17 then
          return 188
      elseif n == 18 then
          return 99
      elseif n == 19 then
          return 198
      elseif n == 20 then
          return 151
      elseif n == 21 then
          return 53
      elseif n == 22 then
          return 106
      elseif n == 23 then
          return 212
      elseif n == 24 then
          return 179
      elseif n == 25 then
          return 125
      elseif n == 26 then
          return 250
      elseif n == 27 then
          return 239
      elseif n == 28 then
          return 195
      elseif n == 29 then
          return 155
      elseif n == 30 then
          return 43
      elseif n == 31 then
          return 86
      elseif n == 32 then
          return 172
      elseif n == 33 then
          return 116
      elseif n == 34 then
          return 232
      elseif n == 35 then
          return 205
      elseif n == 36 then
          return 237
      elseif n == 37 then
          return 211
      elseif n == 38 then
          return 245
      elseif n == 39 then
          return 235
      elseif n == 40 then
          return 203
      elseif n == 41 then
          return 251
      elseif n == 42 then
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
