---
name: HumanEval_76_is_simple_power
language: lua
prompt: |
  -- Your task is to write a function that returns true if a number x is a simple
  -- power of n and false in other cases.
  -- x is a simple power of n if n**int=x
  -- For example:
  -- >>> is_simple_power(1, 4)
  -- true
  -- >>> is_simple_power(2, 2)
  -- true
  -- >>> is_simple_power(8, 2)
  -- true
  -- >>> is_simple_power(3, 2)
  -- false
  -- >>> is_simple_power(3, 1)
  -- false
  -- >>> is_simple_power(5, 3)
  -- false
  local function is_simple_power(x, n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = is_simple_power
      lu.assertEquals(candidate(16, 2), true)
      lu.assertEquals(candidate(143214, 16), false)
      lu.assertEquals(candidate(4, 2), true)
      lu.assertEquals(candidate(9, 3), true)
      lu.assertEquals(candidate(16, 4), true)
      lu.assertEquals(candidate(24, 2), false)
      lu.assertEquals(candidate(128, 4), false)
      lu.assertEquals(candidate(12, 6), false)
      lu.assertEquals(candidate(1, 1), true)
      lu.assertEquals(candidate(1, 12), true)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
      local i = 0
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    local power = 1
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
    return x == n ^ (math.log(x) / math.log(n))
  end
- |2-
    if x == 1 then return true end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
      if n == 1 then
          return x == 1
      end
      if x == 1 then
          return false
      end
      local power = 1
      while power < x do
          power = power * n
      end
      return power == x
  end
- |2-
    local power = 1
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
      local i = 0
      while n^i <= x do
          if n^i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if x < 1 or n < 1 then return false end
    local i = 1
    while i <= x do
      if i == x then return true end
      i = i * n
    end
    return false
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local power = n
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    -- your code here
  end
- |2-
      local i = 1
      while n^i <= x do
          if n^i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      if x == 1 then
          return true
      end
      local power = n
      while power < x do
          power = power * n
      end
      return power == x
  end
- |2-
    if x == 1 then return true end
    if n == 1 then return false end
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while n ^ i < x do
      i = i + 1
    end
    return n ^ i == x
  end
- |2-
      local i = 1
      while i < x do
          i = i * n
      end
      return i == x
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
    if x == 1 then return true end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
    -- your code here
  end
- |2-
    local power = n
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
    if x == 1 then return true end
    local p = 1
    while p <= x do
      if p == x then return true end
      p = p * n
    end
    return false
  end
- |2-
      local i = 1
      while i < x do
          i = i * n
      end
      return i == x
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          if i * i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      local power = n
      while power < x do
          power = power * n
      end
      return power == x
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x % n ~= 0 then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
      local power = n
      while power < x do
          power = power * n
      end
      return power == x
  end
- |2-
      -- your code here
  end
- |2-
      if x == 1 then
          return true
      end
      if x == n then
          return true
      end
      if x % n ~= 0 then
          return false
      end
      return is_simple_power(x / n, n)
  end
- |2-
      if x == 1 then
          return true
      end
      if n == 1 then
          return false
      end
      local p = math.log(x) / math.log(n)
      return p == math.floor(p)
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while n^i < x do
      i = i + 1
    end
    return n^i == x
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    local i = 1
    local p = n
    while p < x do
      i = i + 1
      p = p * n
    end
    return p == x
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    if n == 1 then return false end
    if x == n then return true end
    local i = 2
    while i < x do
      if i * n > x then return false end
      if i * n == x then return true end
      i = i + 1
    end
    return false
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    -- your code here
  end
- |2-
      local i = 1
      while i < x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    -- your code here
  end
- |2-
    local power = math.log(x) / math.log(n)
    return power == math.floor(power)
  end
- |2-
    local i = 0
    while n^i < x do
      i = i + 1
    end
    return n^i == x
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    local i = 1
    while n^i < x do
      i = i + 1
    end
    return n^i == x
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    return is_simple_power(x / n, n)
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
      local i = 1
      while n ^ i <= x do
          if n ^ i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
      local i = 1
      while true do
          local p = n ^ i
          if p == x then
              return true
          elseif p > x then
              return false
          end
          i = i + 1
      end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    local power = 1
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
      -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    if x == 1 then return true end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
      local i = 1
      while i <= x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local power = 1
    while power <= x do
      if power == x then
        return true
      end
      power = power * n
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if x == 0 then return false end
    local i = 0
    while true do
      i = i + 1
      local nn = n ^ i
      if nn == x then return true end
      if nn > x then return false end
    end
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    -- your code here
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    -- your code here
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 2
      while i < x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    local p = n
    while p < x do
      p = p * n
      i = i + 1
    end
    return p == x
  end
- |2-
    -- your code here
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
      local i = 1
      while i <= x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i <= x do
      if i == x then return true end
      i = i * n
    end
    return false
  end
- |2-
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
      return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    local power = 1
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local i = 1
    while n^i <= x do
      if n^i == x then
        return true
      end
      i = i + 1
    end
    return false
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
      -- your code here
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 0
    while true do
      local p = n ^ i
      if p == x then
        return true
      elseif p > x then
        return false
      end
      i = i + 1
    end
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
    if x == 1 then return true end
    if n == 1 then return false end
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
      local i = 1
      while n ^ i <= x do
          if n ^ i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    return x == 1 or (x % n == 0 and is_simple_power(x / n, n))
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 2
      while i < x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
      if x == 1 then
          return true
      end
      local p = n
      while p < x do
          p = p * n
      end
      return p == x
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while n ^ i < x do
          i = i + 1
      end
      return n ^ i == x
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    local i = 0
    while n^i < x do
      i = i + 1
    end
    return n^i == x
  end
- |2-
    return x == n^(math.log(x)/math.log(n))
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          if i * i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      local int = math.log(x) / math.log(n)
      return x == n ^ int
  end
- |2-
      local i = 1
      while i <= x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
    if x == 1 then return true end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
      return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
      local power = 1
      while power < x do
          power = power * n
      end
      return power == x
  end
- |2-
      local i = 1
      while n^i <= x do
          if n^i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
      local i = 0
      while n^i <= x do
          if n^i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i <= x do
      if i == x then return true end
      i = i * n
    end
    return false
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
      local power = 1
      while power < x do
          power = power * n
      end
      return power == x
  end
- |2-
    local power = n
    while power < x do
      power = power * n
    end
    return power == x
  end
- |2-
    return x == 1 or (x % n == 0 and is_simple_power(x / n, n))
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
      local i = 1
      while n^i < x do
          i = i + 1
      end
      return n^i == x
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while true do
      local p = n ^ i
      if p == x then
        return true
      elseif p > x then
        return false
      end
      i = i + 1
    end
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x % n ~= 0 then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    if x == 1 then return true end
    local i = 2
    while n ^ i <= x do
      if n ^ i == x then return true end
      i = i + 1
    end
    return false
  end
- |2-
    -- your code here
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    local i = 0
    while x >= n do
      if x == n then
        return true
      end
      x = x / n
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if n == 1 then return false end
    if x % n ~= 0 then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
      return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    if x == 1 then return true end
    local p = n
    while p < x do
      p = p * n
    end
    return p == x
  end
- |2-
      local i = 1
      while n^i <= x do
          if n^i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- your code here
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    -- your code here
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i < x do
          i = i * n
          if i == x then
              return true
          end
      end
      return false
  end
- |2-
      if n == 1 then
          return x == 1
      end
      if x == 1 then
          return false
      end
      local i = 1
      while i <= x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while i <= x do
          if i == x then
              return true
          end
          i = i * n
      end
      return false
  end
- |2-
    -- your code here
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    if x == 1 then return true end
    local i = 2
    while i < x do
      if i == x then return true end
      i = i * n
    end
    return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
      local i = 1
      while n^i <= x do
          if n^i == x then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i <= x do
      if i == x then return true end
      i = i * n
    end
    return false
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    return x == n ^ math.floor(math.log(x) / math.log(n))
  end
- |2-
    if x == 1 then return true end
    local i = 1
    while i < x do
      i = i * n
      if i == x then return true end
    end
    return false
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    local i = 1
    while i < x do
      i = i * n
    end
    return i == x
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
- |2-
    if x == 1 then return true end
    if n == 1 then return false end
    local i = 1
    local nn = n
    while nn <= x do
      if nn == x then return true end
      nn = nn * n
      i = i + 1
    end
    return false
  end
- |2-
      if x == 1 then
          return true
      end
      local i = 1
      while n ^ i < x do
          i = i + 1
      end
      return n ^ i == x
  end
- |2-
    if x == 1 then return true end
    if x < 1 or n < 1 then return false end
    local i = 1
    while true do
      local p = n ^ i
      if p == x then return true end
      if p > x then return false end
      i = i + 1
    end
  end
- |2-
    if x == 1 then return true end
    if x == n then return true end
    if x < n then return false end
    return is_simple_power(x / n, n)
  end
- |2-
    local i = 1
    while i <= x do
      if i == x then
        return true
      end
      i = i * n
    end
    return false
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
