name: HumanEval_74_total_match
language: lua
results:
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaoronrkk.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpaoronrkk.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrzf3acp.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpjrzf3acp.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f9tz4fp.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_f9tz4fp.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local function sum(lst)\n    local total = 0\n    for _, v in ipairs(lst) do\n\
    \      total = total + #v\n    end\n    return total\n  end\n  if sum(lst1) <\
    \ sum(lst2) then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpideq85kb.lua:39:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpideq85kb.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1\
    \ + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\t\
    end\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6h46htr.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpp6h46htr.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm5mg5cg.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmplm5mg5cg.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqq19lyy.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzqq19lyy.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvv1oote.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpqvv1oote.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_fco0ng.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4_fco0ng.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokr7_plq.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpokr7_plq.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9bt56sl.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_9bt56sl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfja6grcg.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpfja6grcg.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj412h8oi.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpj412h8oi.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, str in ipairs(lst1) do\n\
    \        total1 = total1 + #str\n    end\n    for _, str in ipairs(lst2) do\n\
    \        total2 = total2 + #str\n    end\n    if total1 < total2 then\n      \
    \  return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9q4dg4w.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpl9q4dg4w.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufxd9q32.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpufxd9q32.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6a5iten.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpo6a5iten.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55dgn8_0.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp55dgn8_0.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc3u6khn.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzc3u6khn.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8v5ocvd.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpl8v5ocvd.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi1jncwh.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpdi1jncwh.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkr7ml3o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptkr7ml3o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6lh8a04.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpx6lh8a04.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gd77w7c.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2gd77w7c.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfgowf67.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpsfgowf67.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps65dk5o8.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmps65dk5o8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8u74onf.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpg8u74onf.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9m4p109.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpt9m4p109.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86j5y0fl.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp86j5y0fl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdphtvjm_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpdphtvjm_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n8a5ww2.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp6n8a5ww2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm732m6rr.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpm732m6rr.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvtrmfe7.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpfvtrmfe7.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_j_o7ja.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpr_j_o7ja.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmsvoy7_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmplmsvoy7_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw40tg6t9.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpw40tg6t9.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2airw3pu.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2airw3pu.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1\
    \ + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\t\
    end\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3em5tjn3.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp3em5tjn3.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjihpkut.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpvjihpkut.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawjgd2uh.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpawjgd2uh.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r305dqq.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5r305dqq.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9glev4y.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpb9glev4y.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyafpdifl.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpyafpdifl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2yxly5q.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpm2yxly5q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5dfp_zb.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpw5dfp_zb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2od0q0a.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpv2od0q0a.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq3y7irf.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptq3y7irf.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfja_ufu.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpcfja_ufu.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq_fuer3.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpnq_fuer3.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppr2aoaly.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmppr2aoaly.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv0ec7uq.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmprv0ec7uq.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  -- body\n  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n  \
    \  total1 = total1 + string.len(lst1[i])\n  end\n  for i = 1, #lst2 do\n    total2\
    \ = total2 + string.len(lst2[i])\n  end\n  if total1 < total2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz7uzhwn.lua:41:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpsz7uzhwn.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xediuc_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp6xediuc_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal lst1_total = 0\n\tlocal lst2_total = 0\n\tfor i = 1, #lst1 do\n\t\tlst1_total\
    \ = lst1_total + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\tlst2_total = lst2_total\
    \ + #lst2[i]\n\tend\n\tif lst1_total <= lst2_total then\n\t\treturn lst1\n\telse\n\
    \t\treturn lst2\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuf5kwfc.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpmuf5kwfc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local sum1 = 0\n  local sum2 = 0\n  for i = 1, #lst1 do\n    sum1 = sum1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n\
    \  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszx268m4.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpszx268m4.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtpbamky.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmprtpbamky.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xw_pmmd.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4xw_pmmd.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgt4qw51w.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgt4qw51w.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcxj7s67.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgcxj7s67.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepjp3g25.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpepjp3g25.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  -- your code here\n  local sum1 = 0\n  local sum2 = 0\n  for i, v in ipairs(lst1)\
    \ do\n    sum1 = sum1 + string.len(v)\n  end\n  for i, v in ipairs(lst2) do\n\
    \    sum2 = sum2 + string.len(v)\n  end\n  if sum1 < sum2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf40o6be.lua:41:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmphf40o6be.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1\
    \ + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\t\
    end\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ow0d5xz.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp3ow0d5xz.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4bkr8o9.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpw4bkr8o9.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrh2_ooy.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpcrh2_ooy.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9gr_8db.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpl9gr_8db.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total_chars1 = 0\n    local total_chars2 = 0\n    for i = 1, #lst1\
    \ do\n        total_chars1 = total_chars1 + #lst1[i]\n    end\n    for i = 1,\
    \ #lst2 do\n        total_chars2 = total_chars2 + #lst2[i]\n    end\n    if total_chars1\
    \ < total_chars2 then\n        return lst1\n    else\n        return lst2\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ig84eou.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2ig84eou.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm2jttc4.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgm2jttc4.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7rm0w4t.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmph7rm0w4t.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi4zz73y.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxi4zz73y.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczn0mhnu.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpczn0mhnu.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhzvtwmu.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpkhzvtwmu.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjty5pyr.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpmjty5pyr.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjm2rgpc.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpsjm2rgpc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqekg7kos.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpqekg7kos.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusqqppfw.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpusqqppfw.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a8oj8bs.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2a8oj8bs.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwshcsgl.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmppwshcsgl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcgkrpu5.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgcgkrpu5.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6ozgtwc.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpz6ozgtwc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqothzqdm.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpqothzqdm.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  -- your code here\n  local total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1)\
    \ do\n    total1 = total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2\
    \ = total2 + #v\n  end\n  if total1 < total2 then\n    return lst1\n  else\n \
    \   return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mwf89l6.lua:41:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5mwf89l6.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l41c4ue.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp6l41c4ue.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomqzskjf.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpomqzskjf.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwufjfnv.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpcwufjfnv.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cmeww_t.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_cmeww_t.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin8nu4ql.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpin8nu4ql.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39gi29gz.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp39gi29gz.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wt7zw2r.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp1wt7zw2r.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycj9vyff.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpycj9vyff.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1\
    \ + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\t\
    end\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83eg9i0a.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp83eg9i0a.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ddm20qs.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp7ddm20qs.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzx5w29v.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxzx5w29v.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwywo51x.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpbwywo51x.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbbw6x1_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpnbbw6x1_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn7ubb46.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzn7ubb46.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoabcms2m.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpoabcms2m.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor _, v in ipairs(lst1) do\n\t\ttotal1\
    \ = total1 + #v\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp216pcrm8.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp216pcrm8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local sum1 = 0\n  local sum2 = 0\n  for i = 1, #lst1 do\n    sum1 = sum1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n\
    \  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwg8899o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxwg8899o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppiz_cwm_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmppiz_cwm_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud1ixkr1.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpud1ixkr1.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fv64jab.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5fv64jab.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iv1lay8.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp1iv1lay8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5_bjg2g.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpy5_bjg2g.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local sum1 = 0\n  local sum2 = 0\n  for i = 1, #lst1 do\n    sum1 = sum1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n\
    \  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmdvgp85.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpwmdvgp85.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpff1y2avj.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpff1y2avj.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    if #lst1 == 0 then\n        return lst1\n    elseif #lst2 == 0 then\n   \
    \     return lst2\n    else\n        local total1 = 0\n        local total2 =\
    \ 0\n        for i = 1, #lst1 do\n            total1 = total1 + #lst1[i]\n   \
    \     end\n        for i = 1, #lst2 do\n            total2 = total2 + #lst2[i]\n\
    \        end\n        if total1 < total2 then\n            return lst1\n     \
    \   else\n            return lst2\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cyptxk7.lua:46:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp9cyptxk7.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc1mob_9.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmphc1mob_9.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhkhuh6v.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmphhkhuh6v.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvnvqq_l.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpwvnvqq_l.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    -- your code here\n    local sum1 = 0\n    local sum2 = 0\n    for i = 1,\
    \ #lst1 do\n        sum1 = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        sum2 = sum2 + #lst2[i]\n    end\n    if sum1 < sum2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n2dyn4o.lua:41:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp_n2dyn4o.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1666suc.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpg1666suc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjin9ya0.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzjin9ya0.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72vbfg2o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp72vbfg2o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbyzfuxr.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpjbyzfuxr.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ty5tmee.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2ty5tmee.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor _, v in ipairs(lst1) do\n\t\ttotal1\
    \ = total1 + #v\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknc2dqfo.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpknc2dqfo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for k, v in pairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for k, v in pairs(lst2) do\n     \
    \   total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4mccxs.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpnc4mccxs.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75p138dj.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp75p138dj.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o8vuyfv.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp3o8vuyfv.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcizbzhx1.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpcizbzhx1.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu320bv42.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpu320bv42.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl94u1doi.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpl94u1doi.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxahbsrlj.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxahbsrlj.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd90tvjl.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpmd90tvjl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylxa_l3p.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpylxa_l3p.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztrfup6q.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpztrfup6q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet7d36bg.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpet7d36bg.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  -- your code here\n  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1\
    \ do\n    total1 = total1 + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2\
    \ = total2 + #lst2[i]\n  end\n  if total1 < total2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzx5afyp.lua:41:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpvzx5afyp.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxox5kps.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxxox5kps.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_qfzyl2.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5_qfzyl2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9opbwh24.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp9opbwh24.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr4ctokb.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgr4ctokb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbnwh0kq.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxbnwh0kq.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf115lyl.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpkf115lyl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  -- your code here\n  local sum1 = 0\n  local sum2 = 0\n  for i, v in ipairs(lst1)\
    \ do\n    sum1 = sum1 + string.len(v)\n  end\n  for i, v in ipairs(lst2) do\n\
    \    sum2 = sum2 + string.len(v)\n  end\n  if sum1 < sum2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3vqivdj.lua:41:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpd3vqivdj.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2sg3zbb.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpi2sg3zbb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb47h72dp.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpb47h72dp.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxibvux7.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpaxibvux7.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk_gy83q.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpzk_gy83q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplseuv2wn.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmplseuv2wn.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqi7_tem.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmppqi7_tem.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9q6647c.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpo9q6647c.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, str in ipairs(lst1) do\n\
    \        total1 = total1 + #str\n    end\n    for _, str in ipairs(lst2) do\n\
    \        total2 = total2 + #str\n    end\n    if total1 < total2 then\n      \
    \  return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwkjhxqo.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpmwkjhxqo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor i = 1, #lst1 do\n\t\tsum1 = sum1 + #lst1[i]\n\
    \tend\n\tfor i = 1, #lst2 do\n\t\tsum2 = sum2 + #lst2[i]\n\tend\n\tif sum1 < sum2\
    \ then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7d32ft3.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmps7d32ft3.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97nxeh59.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp97nxeh59.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvs7_fbi.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpmvs7_fbi.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyo8tzow.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpfyo8tzow.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1\
    \ + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\t\
    end\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre1nfm1d.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpre1nfm1d.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqvl7k0n.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpyqvl7k0n.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4erpzu9.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpc4erpzu9.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f6zgdwv.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp0f6zgdwv.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm076p5gr.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpm076p5gr.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6gmtu1f.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpq6gmtu1f.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm870dmrb.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpm870dmrb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4x28_rn.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpk4x28_rn.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3so9za3.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpk3so9za3.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru_110d8.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpru_110d8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe4niqt5.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpwe4niqt5.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oqyxhua.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp6oqyxhua.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55sxge6i.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp55sxge6i.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1\
    \ + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\t\
    end\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zpsynlc.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp9zpsynlc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmq4incm.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpdmq4incm.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10z5cb2x.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp10z5cb2x.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mebb2jj.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp1mebb2jj.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrw987fi.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxrw987fi.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local sum1 = 0\n  local sum2 = 0\n  for i = 1, #lst1 do\n    sum1 = sum1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n\
    \  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5x93tk7.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpd5x93tk7.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbrek1yd.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpkbrek1yd.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for i, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wbc2grd.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp9wbc2grd.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz97ou2o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmphz97ou2o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuywroxqo.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpuywroxqo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3d3sf5f.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf3d3sf5f.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25romxyj.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp25romxyj.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo9pb2_y.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpgo9pb2_y.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ntvzuj7.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp7ntvzuj7.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6dj0ka5.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpz6dj0ka5.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq1acc6o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpcq1acc6o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1r213n6.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpf1r213n6.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1\
    \ = total1 + #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7en2ooh.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpl7en2ooh.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6anx0khn.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp6anx0khn.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ervan0o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp8ervan0o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihdtgjdc.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpihdtgjdc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9zxhm9u.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpv9zxhm9u.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5au43j5g.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp5au43j5g.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdhy3fa_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpkdhy3fa_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan_53ymp.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpan_53ymp.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j86s4cg.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2j86s4cg.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, str in ipairs(lst1) do\n\
    \        total1 = total1 + #str\n    end\n    for _, str in ipairs(lst2) do\n\
    \        total2 = total2 + #str\n    end\n    if total1 < total2 then\n      \
    \  return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ebgg0be.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2ebgg0be.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q8bxv6_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp2q8bxv6_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr20br2q.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpxr20br2q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6buzd9x.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpl6buzd9x.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lzzdj3v.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp4lzzdj3v.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0puo5o_.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpw0puo5o_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6toj3_8.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpq6toj3_8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy76_jjr9.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpy76_jjr9.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rjsysyw.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmp7rjsysyw.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3lx3v4o.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpn3lx3v4o.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisk692ks.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpisk692ks.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuhgy1i0.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmptuhgy1i0.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3dzh6oe.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpm3dzh6oe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two tables of strings and returns the\
    \ table that has \n-- total number of chars in the all strings of the table less\
    \ than the other table.\n-- if the two tables have the same number of chars, return\
    \ the first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
    \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
    \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxxsv1ed.lua:40:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hI\", \"hi\", \"hii\"}\nstack traceback:\n\
    \t/tmp/tmpoxxsv1ed.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
