name: HumanEval_84_solve
language: lua
results:
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4f6y7m69.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp4f6y7m69.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local t\
    \ = {}\n    while N > 0 do\n        table.insert(t, N % 2)\n        N = math.floor(N\
    \ / 2)\n    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19nahnkq.lua:26:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp19nahnkq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  for i = 1, N do\n    sum = sum + i\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9_t5ceo.lua:25:\
    \ expected: \"1\"\nactual: 500500\nstack traceback:\n\t/tmp/tmpt9_t5ceo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkphwfk0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmptkphwfk0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  for i = 1, #N do\n    sum = sum + tonumber(N:sub(i, i))\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08bexk8c.lua:16:\
    \ attempt to get length of a number value (local 'N')\nstack traceback:\n\t/tmp/tmp08bexk8c.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp08bexk8c.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69h53gw0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp69h53gw0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl4b051u.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpcl4b051u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(N)\n    local binary = {}\n    local i = 0\n    while N > 0 do\n \
    \     i = i + 1\n      binary[i] = N % 2\n      N = math.floor(N / 2)\n    end\n\
    \    return binary\n  end\n  local function sum_digits(binary)\n    local sum\
    \ = 0\n    for i = 1, #binary do\n      sum = sum + binary[i]\n    end\n    return\
    \ sum\n  end\n  return sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7ih0361.lua:38:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpy7ih0361.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdi4cvyd.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpwdi4cvyd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    local remainder = 0\n    while N > 0 do\n        remainder = N % 2\n\
    \        N = math.floor(N / 2)\n        result = remainder .. result\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vd0z4tv.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp2vd0z4tv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  sum = sum + remainder\n    binary = remainder .. binary\n    N = math.floor(N\
    \ / 2)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcac19c4.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpwcac19c4.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zjvfunq.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp6zjvfunq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_4udtme.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpm_4udtme.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszopvzjb.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpszopvzjb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local res\
    \ = {}\n    local i = 1\n    while N > 0 do\n        res[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi_6sra_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpwi_6sra_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  while N > 0 do\n    local r = N % 2\n    sum = sum\
    \ + r\n    table.insert(binary, r)\n    N = (N - r) / 2\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1eb18cmv.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp1eb18cmv.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        binary = remainder .. binary\n        N = math.floor(N / 2)\n \
    \   end\n    for i = 1, #binary do\n        sum = sum + tonumber(binary:sub(i,\
    \ i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0bnhiuh.lua:31:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpw0bnhiuh.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunquurae.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpunquurae.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr1vts_y.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpyr1vts_y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return tostring(N):gsub(\"\
    .\", function(c) return tonumber(c) end):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptrsvd7r.lua:21:\
    \ expected: \"1\"\nactual: \"0001\"\nstack traceback:\n\t/tmp/tmpptrsvd7r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply78jpf1.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmply78jpf1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    N = (N - r)\
    \ / 2\n    sum = sum + r\n    bin = r .. bin\n  end\n  return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u06bk9h.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp5u06bk9h.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  while N > 0 do\n    local remainder = N % 2\n    result = tostring(remainder)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4asmhqo.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpl4asmhqo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5esytoaf.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp5esytoaf.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = tostring(N)\n    local sum = 0\n    for i = 1, #s do\n        sum = sum +\
    \ tonumber(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1epn0eta.lua:26:\
    \ expected: \"1\"\nactual: 1\nstack traceback:\n\t/tmp/tmp1epn0eta.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        local remainder = N % 2\n        N = math.floor(N\
    \ / 2)\n        result = tostring(remainder) .. result\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsezq8jev.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpsezq8jev.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local rem = N % 2\n    sum =\
    \ sum + rem\n    binary = tostring(rem) .. binary\n    N = (N - rem) / 2\n  end\n\
    \  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rvxib4w.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp_rvxib4w.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = string.format(\"%b\", N)\n    local sum = 0\n    for i = 1, #bin do\n    \
    \    sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq17op0p5.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpq17op0p5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpq17op0p5.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        s = r .. s\n    \
    \    N = (N - r) / 2\n    end\n    return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1sh4eat.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpb1sh4eat.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  local t = {}\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N\
    \ / 2)\n    table.insert(t, r)\n  end\n  for i = #t, 1, -1 do\n    s = s .. t[i]\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzw53_jw.lua:31:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpqzw53_jw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdhn5ux3.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpsdhn5ux3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsrn7_kkl.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmpsrn7_kkl.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsrn7_kkl.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = \"\"\n  while N > 0 do\n    local rem = N % 2\n    bin = rem .. bin\n    N\
    \ = (N - rem) / 2\n  end\n  return bin\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41n6tbk_.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp41n6tbk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4ekzn95.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpq4ekzn95.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = string.format(\"%b\", N)\n  local sum = 0\n  for i = 1, #bin do\n    sum =\
    \ sum + tonumber(bin:sub(i, i))\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3nh4o9o.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpq3nh4o9o.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpq3nh4o9o.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = {}\n    local i = 1\n    while N > 0 do\n        binary[i] = N % 2\n     \
    \   N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug_atoo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpug_atoo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = \"\"\n  while N > 0 do\n    local r = N % 2\n    sum = sum\
    \ + r\n    bin = r .. bin\n    N = (N - r) / 2\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5esx8ha.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpr5esx8ha.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfghahym.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpyfghahym.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = \"\"\n    while N > 0 do\n        local remainder =\
    \ N % 2\n        sum = sum + remainder\n        binary = remainder .. binary\n\
    \        N = math.floor(N / 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2d7iz6j.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpj2d7iz6j.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = (N - r) /\
    \ 2\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal1srcwy.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpal1srcwy.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        sum = sum + remainder\n        binary = remainder .. binary\n \
    \       N = (N - remainder) / 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzf4nfdxv.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpzf4nfdxv.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv23zsdt2.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpv23zsdt2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = {}\n    local i = 1\n    while N > 0 do\n        result[i] = N % 2\n     \
    \   N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa604yhi9.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpa604yhi9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N / 2)\n   \
    \ result = r .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuma_st4x.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpuma_st4x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local b = \"\"\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N\
    \ / 2)\n    b = r .. b\n    sum = sum + r\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ok2iwk.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmph2ok2iwk.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = tostring(remainder)\
    \ .. binary\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lcnoed_.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp4lcnoed_.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  for i = 1, #N do\n    sum = sum + tonumber(N:sub(i, i))\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ic0m0fm.lua:16:\
    \ attempt to get length of a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7ic0m0fm.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp7ic0m0fm.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local t\
    \ = {}\n    local i = 1\n    while N > 0 do\n        t[i] = N % 2\n        N =\
    \ math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8wa_mtl.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpa8wa_mtl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy92r4ug.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpuy92r4ug.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  for i = 1, #bin do\n    sum\
    \ = sum + bin[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38kry22_.lua:32:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp38kry22_.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan745vvw.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpan745vvw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd_tp5b0.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpbd_tp5b0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = string.format(\"%b\", N)\n    local sum = 0\n    for i = 1, #bin do\n    \
    \    sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplg_87o2c.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmplg_87o2c.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplg_87o2c.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t8gv973.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp3t8gv973.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5jfn0ka.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpi5jfn0ka.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6lcytr6.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpv6lcytr6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplohbs0jh.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmplohbs0jh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = result .. tostring(r)\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac00gzof.lua:27:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpac00gzof.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tqdtqy2.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5tqdtqy2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygdsv60n.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpygdsv60n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  while N > 0 do\n    table.insert(bin, N % 2)\n    N = math.floor(N /\
    \ 2)\n  end\n  return table.concat(bin):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycfsr5hz.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpycfsr5hz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrbko1vs.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpzrbko1vs.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2srctzz.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpd2srctzz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  while N > 0 do\n    local r = N % 2\n    N = (N - r) / 2\n    table.insert(t,\
    \ r)\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5kcyd0g.lua:27:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmpe5kcyd0g.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ to_binary(n)\n        local t = {}\n        while n > 0 do\n            local\
    \ rest = math.fmod(n, 2)\n            t[#t+1] = rest\n            n = (n-rest)\
    \ / 2\n        end\n        return table.concat(t):reverse()\n    end\n    local\
    \ function sum_digits(n)\n        local sum = 0\n        while n > 0 do\n    \
    \        local rest = math.fmod(n, 10)\n            sum = sum + rest\n       \
    \     n = (n-rest) / 10\n        end\n        return sum\n    end\n    return\
    \ sum_digits(tonumber(to_binary(N)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5iw46d1.lua:26:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpe5iw46d1.lua:26:\
    \ in function </tmp/tmpe5iw46d1.lua:24>\n\t(...tail calls...)\n\t/tmp/tmpe5iw46d1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  local i = 1\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    binary[i] = remainder\n    N = (N - remainder) / 2\n    i = i +\
    \ 1\n  end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydh3icno.lua:33:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpydh3icno.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(N)\n    local bin = \"\"\n    while N > 0 do\n      local rest = N\
    \ % 2\n      bin = rest .. bin\n      N = (N - rest) / 2\n    end\n    return\
    \ bin\n  end\n  local function sum_digits(bin)\n    local sum = 0\n    for i =\
    \ 1, #bin do\n      sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\n\
    \  end\n  return sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77u7d6v1.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp77u7d6v1.lua:27:\
    \ in function </tmp/tmp77u7d6v1.lua:24>\n\t(...tail calls...)\n\t/tmp/tmp77u7d6v1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g2bsrqj.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp0g2bsrqj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_amurz8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp1_amurz8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    sum = sum\
    \ + r\n    bin = r .. bin\n    N = (N - r) / 2\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbpkewub.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmphbpkewub.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ybos98d.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp7ybos98d.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  while N > 0 do\n    sum = sum + N % 2\n    N = math.floor(N / 2)\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6op3546.lua:26:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp_6op3546.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(N)\n    local t = {}\n    while N > 0 do\n      local r = N % 2\n\
    \      table.insert(t, r)\n      N = (N - r) / 2\n    end\n    return t\n  end\n\
    \  local function sum_digits(t)\n    local sum = 0\n    for _, v in ipairs(t)\
    \ do\n      sum = sum + v\n    end\n    return sum\n  end\n  local t = to_binary(N)\n\
    \  return sum_digits(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajei5lgw.lua:38:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpajei5lgw.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxesxqt9b.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpxesxqt9b.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  table.insert(binary, remainder)\n    N = (N - remainder) / 2\n  end\n  for\
    \ i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvk4az2j.lua:31:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpjvk4az2j.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ \"\"\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N /\
    \ 2)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkarwszq.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpvkarwszq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = \"\"\n  while N > 0 do\n    local rem = N % 2\n    bin =\
    \ bin .. rem\n    N = (N - rem) / 2\n  end\n  for i = 1, #bin do\n    sum = sum\
    \ + tonumber(bin:sub(i, i))\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxz562nan.lua:23:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpxz562nan.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpxz562nan.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local bin = ''\n    while N > 0 do\n        local r = N % 2\n     \
    \   N = math.floor(N / 2)\n        sum = sum + r\n        bin = r .. bin\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo_mhpwl.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpxo_mhpwl.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  local result = 0\n  for i = 1, #binary do\n  \
    \  result = result + binary[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6gljuh7.lua:32:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmph6gljuh7.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  local i = 1\n  while N > 0 do\n    t[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6ogb_y_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmps6ogb_y_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ N:tobinary()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppb4qlbbi.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmppb4qlbbi.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppb4qlbbi.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw5fv77z.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmppw5fv77z.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ \"\"\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N /\
    \ 2)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm84t063u.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpm84t063u.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgj5r8qwb.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmpgj5r8qwb.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpgj5r8qwb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uxrffec.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp1uxrffec.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ to_binary(N)\n        local bin = \"\"\n        while N > 0 do\n           \
    \ bin = bin .. tostring(N % 2)\n            N = math.floor(N / 2)\n        end\n\
    \        return bin\n    end\n    local bin = to_binary(N)\n    local sum = 0\n\
    \    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i, i))\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkip_i5pe.lua:34:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpkip_i5pe.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_n_pk00.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpe_n_pk00.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjr_iads.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpxjr_iads.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtbvdzkd.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpdtbvdzkd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky6qxf1y.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpky6qxf1y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum\
    \ + rest\n    N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return\
    \ table.concat(bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ppnoc2v.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmp0ppnoc2v.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = (N - remainder) / 2\n    table.insert(binary, remainder)\n  end\n  for\
    \ i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhiutyvb.lua:31:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmplhiutyvb.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = (N - r) /\
    \ 2\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6fzwwwk.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpe6fzwwwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4yab5py.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpr4yab5py.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        result = r .. result\n\
    \        N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjigd_4cc.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpjigd_4cc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = 0\n  while N > 0 do\n    result = result + N % 2\n    N = math.floor(N / 2)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxaixhv5.lua:26:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpbxaixhv5.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local res\
    \ = {}\n    while N > 0 do\n        table.insert(res, N % 2)\n        N = math.floor(N\
    \ / 2)\n    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbv17zrv.lua:26:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpkbv17zrv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = \"\"\n  while N > 0 do\n    local remainder = N % 2\n\
    \    sum = sum + remainder\n    binary = remainder .. binary\n    N = math.floor(N\
    \ / 2)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gx828l5.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp2gx828l5.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = (N - r) /\
    \ 2\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprktsuoq6.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmprktsuoq6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local r = N % 2\n  \
    \      sum = sum + r\n        binary = tostring(r) .. binary\n        N = (N -\
    \ r) / 2\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0krb7wqh.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp0krb7wqh.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxqvj_qu.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpkxqvj_qu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = {}\n    local i = 1\n    while N > 0 do\n        local\
    \ remainder = N % 2\n        N = (N - remainder) / 2\n        binary[i] = remainder\n\
    \        i = i + 1\n    end\n    for i = 1, #binary do\n        sum = sum + binary[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzwcja5s.lua:33:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmplzwcja5s.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcpmdi37.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpjcpmdi37.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n_qhbi_.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp_n_qhbi_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxgg8gr9.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpnxgg8gr9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8havyw9n.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp8havyw9n.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin):reverse()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nwqjpz1.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp2nwqjpz1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj9mvrqj.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpgj9mvrqj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = result .. remainder\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi0ni_sx.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqi0ni_sx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum\
    \ + rest\n    N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return\
    \ table.concat(bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpm4sjhg.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmphpm4sjhg.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n   \
    \ N = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4_eaupt.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpz4_eaupt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfsgijsfm.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmpfsgijsfm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfsgijsfm.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ N:to_binary()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpskeqgwte.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmpskeqgwte.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpskeqgwte.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  repeat\n    remainder = N % 2\n    N = math.floor(N\
    \ / 2)\n    result = remainder .. result\n  until N == 0\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx58anr4a.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpx58anr4a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9stvu1c8.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp9stvu1c8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    binary = rest .. binary\n    N = (N - rest) / 2\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsf34faw.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpwsf34faw.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkoghdw4.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqkoghdw4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = {}\n  local i = 1\n  while N > 0 do\n    local rem = N %\
    \ 2\n    bin[i] = rem\n    N = (N - rem) / 2\n    i = i + 1\n  end\n  for i =\
    \ 1, #bin do\n    sum = sum + bin[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_8ivzo3.lua:33:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpn_8ivzo3.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    local rest = math.fmod(N,2)\n   \
    \ bin[i] = rest\n    N = (N-rest)/2\n    i = i+1\n  end\n  return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpljp8q8.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmpmpljp8q8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  while N > 0 do\n    local rest = N % 2\n    table.insert(binary, 1,\
    \ rest)\n    N = (N - rest) / 2\n  end\n  return table.concat(binary)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9j_wzon.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp_9j_wzon.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    binary = tostring(rest) .. binary\n    N = (N - rest) / 2\n\
    \  end\n  return tostring(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0qd3c6p.lua:29:\
    \ expected: \"1\"\nactual: \"6.0\"\nstack traceback:\n\t/tmp/tmpr0qd3c6p.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  local sum = 0\n  for i = 1, #bin do\n    sum =\
    \ sum + bin[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5le76_7g.lua:32:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp5le76_7g.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(N)\n    local result = ''\n    while N > 0 do\n      local r = N %\
    \ 2\n      result = r .. result\n      N = (N - r) / 2\n    end\n    return result\n\
    \  end\n  local function sum_digits(str)\n    local result = 0\n    for i = 1,\
    \ #str do\n      result = result + tonumber(str:sub(i, i))\n    end\n    return\
    \ result\n  end\n  return sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_nu8wdi.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpb_nu8wdi.lua:27:\
    \ in function </tmp/tmpb_nu8wdi.lua:24>\n\t(...tail calls...)\n\t/tmp/tmpb_nu8wdi.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4bjtsea.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpl4bjtsea.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6m7nt85.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpc6m7nt85.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujsqvvfi.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpujsqvvfi.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local quotient = N\n  local remainder = 0\n  while quotient > 0 do\n\
    \    remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    result\
    \ = remainder .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_n5of0e.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpw_n5of0e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = \"\"\n    while N > 0 do\n        bin = tostring(N % 2) .. bin\n        N\
    \ = math.floor(N / 2)\n    end\n    return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8llieu4.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpz8llieu4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      local rest = math.fmod(n,2)\n\
    \      t[#t+1] = rest\n      n = (n-rest)/2\n    end\n    return table.concat(t):reverse()\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i,i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ksfi8cx.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8ksfi8cx.lua:27:\
    \ in function </tmp/tmp8ksfi8cx.lua:24>\n\t(...tail calls...)\n\t/tmp/tmp8ksfi8cx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = math.floor(N\
    \ / 2)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa89g1y80.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpa89g1y80.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local sum = 0\n  local i = 0\n  while N > 0 do\n    binary[i] = N %\
    \ 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  for i = 0, #binary - 1\
    \ do\n    sum = sum + binary[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahis3x_t.lua:32:\
    \ expected: \"1\"\nactual: 5\nstack traceback:\n\t/tmp/tmpahis3x_t.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbp_uxngp.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpbp_uxngp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = result .. tostring(r)\n\
    \    N = (N - r) / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp274dgw8j.lua:27:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmp274dgw8j.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local rest = N % 2\n    bin = bin\
    \ .. tostring(rest)\n    N = (N - rest) / 2\n  end\n  for i = 1, #bin do\n   \
    \ result = result + tonumber(bin:sub(i, i))\n  end\n  return tostring(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqppluyy5.lua:23:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpqppluyy5.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpqppluyy5.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    while N > 0 do\n        table.insert(bin, N % 2)\n        N = math.floor(N\
    \ / 2)\n    end\n    return table.concat(bin)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtyrhu_q.lua:26:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpdtyrhu_q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi28l154q.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpi28l154q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = \"\"\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    N = (N\
    \ - rest) / 2\n    bin = bin .. rest\n    sum = sum + rest\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplep2xg9k.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmplep2xg9k.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsr5lmhft.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpsr5lmhft.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = {}\n    local sum = 0\n    while N > 0 do\n        local remainder = N % 2\n\
    \        N = (N - remainder) / 2\n        table.insert(binary, remainder)\n  \
    \  end\n    for i = 1, #binary do\n        sum = sum + binary[i]\n    end\n  \
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix9qmugi.lua:31:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpix9qmugi.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = \"\"\n    while N > 0 do\n        local r = N % 2\n        bin = r .. bin\n\
    \        N = (N - r) / 2\n    end\n    return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fcl3y22.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp3fcl3y22.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum\
    \ + rest\n    N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnjhv3ii.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpfnjhv3ii.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7jxmlhu.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpf7jxmlhu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  sum = sum + remainder\n    binary = remainder .. binary\n    N = math.floor(N\
    \ / 2)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl37mzm0p.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpl37mzm0p.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      local r = n % 2\n\
    \      t[#t + 1] = r\n      n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zz5nxz3.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp1zz5nxz3.lua:27:\
    \ in function </tmp/tmp1zz5nxz3.lua:24>\n\t(...tail calls...)\n\t/tmp/tmp1zz5nxz3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local r = N % 2\n    sum = sum\
    \ + r\n    binary = r .. binary\n    N = (N - r) / 2\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q6uzk6b.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp6q6uzk6b.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80p2bihz.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp80p2bihz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldb0yndt.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpldb0yndt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3_jd4lx.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpc3_jd4lx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbkr8nhg.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmplbkr8nhg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3vj4d35.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp_3vj4d35.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxly9bo3c.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpxly9bo3c.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        result = tostring(r)\
    \ .. result\n        N = math.floor(N / 2)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3j8mvrs.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpr3j8mvrs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywez8agc.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpywez8agc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9igo2dgn.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp9igo2dgn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    N = (N - r)\
    \ / 2\n    sum = sum + r\n    bin = tostring(r) .. bin\n  end\n  return bin, sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyeb3yga.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpnyeb3yga.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = \"\"\n  while N > 0 do\n    local r = N % 2\n    res = r .. res\n    N = (N\
    \ - r) / 2\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_hjxcbs.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpl_hjxcbs.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf9jvaoi.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmphf9jvaoi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybe9la1m.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpybe9la1m.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k9dgfgk.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp3k9dgfgk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local function to_binary_iter(n, acc)\n      if n == 0 then\n\
    \        return acc\n      else\n        return to_binary_iter(math.floor(n /\
    \ 2), n % 2 .. acc)\n      end\n    end\n    return to_binary_iter(n, \"\")\n\
    \  end\n  local function sum_digits(n)\n    local function sum_digits_iter(n,\
    \ acc)\n      if n == 0 then\n        return acc\n      else\n        return sum_digits_iter(math.floor(n\
    \ / 10), n % 10 + acc)\n      end\n    end\n    return sum_digits_iter(n, 0)\n\
    \  end\n  local function to_decimal(n)\n    local function to_decimal_iter(n,\
    \ acc)\n      if n == 0 then\n        return acc\n      else\n        return to_decimal_iter(math.floor(n\
    \ / 10), n % 10 + acc * 2)\n      end\n    end\n    return to_decimal_iter(n,\
    \ 0)\n  end\n  return to_binary(sum_digits(to_decimal(N)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86oa7kpi.lua:52:\
    \ expected: \"110\"\nactual: \"10\"\nstack traceback:\n\t/tmp/tmp86oa7kpi.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = ''\n  local sum = 0\n  while N > 0 do\n    local rem = N % 2\n    bin = bin\
    \ .. rem\n    sum = sum + rem\n    N = math.floor(N / 2)\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f3_v_u7.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp8f3_v_u7.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4ejdi7_.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpn4ejdi7_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  local n = N\n  while n > 0 do\n    res = tostring(n % 2) .. res\n  \
    \  n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa22e6j3m.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpa22e6j3m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgmi8ona.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpfgmi8ona.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = \"\"\n    local remainder = 0\n    while N > 0 do\n        remainder = N %\
    \ 2\n        N = math.floor(N / 2)\n        result = remainder .. result\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtydmiv3.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpgtydmiv3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = string.format(\"%b\", N)\n    local sum = 0\n    for i = 1, #bin do\n    \
    \    sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50of0zbm.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp50of0zbm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp50of0zbm.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = (N - remainder) / 2\n    table.insert(binary, remainder)\n  end\n  for\
    \ i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3p30bxq.lua:31:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpj3p30bxq.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(binary)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkqy4hf0.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpvkqy4hf0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = math.floor(N / 2)\n    binary = remainder .. binary\n    sum = sum + remainder\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j6euflu.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp1j6euflu.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(binary)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8l8hs4y.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpk8l8hs4y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    sum = sum\
    \ + r\n    bin = bin .. tostring(r)\n    N = math.floor(N / 2)\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehmsrn1p.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpehmsrn1p.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcingnsa.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpbcingnsa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ to_binary(N)\n        local res = ''\n        while N > 0 do\n            res\
    \ = tostring(N % 2) .. res\n            N = math.floor(N / 2)\n        end\n \
    \       return res\n    end\n    local function sum_digits(N)\n        local res\
    \ = 0\n        while N > 0 do\n            res = res + N % 10\n            N =\
    \ math.floor(N / 10)\n        end\n        return res\n    end\n    return tostring(sum_digits(tonumber(to_binary(N))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp7v57ar.lua:37:\
    \ expected: \"1\"\nactual: \"6\"\nstack traceback:\n\t/tmp/tmpzp7v57ar.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdxg56x0.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpsdxg56x0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = \"\"\n  while N > 0 do\n    bin = bin .. tostring(N % 2)\n    N = math.floor(N\
    \ / 2)\n  end\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2vlz21l.lua:26:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpm2vlz21l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kva8xl.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp24kva8xl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55vik33g.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp55vik33g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N / 2)\n \
    \   result = tostring(r) .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61oh6vb3.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp61oh6vb3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  local i = 1\n  while N > 0 do\n    local r = N % 2\n    t[i] = r\n   \
    \ N = (N - r) / 2\n    i = i + 1\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra33t0hj.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmpra33t0hj.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7wyza7a.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpu7wyza7a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    res = r .. res\n    N = (N\
    \ - r) / 2\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jiedc4u.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp1jiedc4u.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  local i = 0\n  while N > 0 do\n    i = i + 1\n    t[i] = N % 2\n    N\
    \ = math.floor(N / 2)\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd_mb6k0.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpcd_mb6k0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = {}\n    while N > 0 do\n        local rest = N % 2\n        table.insert(binary,\
    \ 1, rest)\n        N = (N - rest) / 2\n    end\n    return table.concat(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qlo9a00.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp3qlo9a00.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2uv11pj.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpf2uv11pj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8rz_mdn.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpa8rz_mdn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = string.format(\"%b\", N)\n  local sum = 0\n  for i = 1, #bin do\n    sum =\
    \ sum + tonumber(bin:sub(i, i))\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si32wv3.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp1si32wv3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1si32wv3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ toBinary(N)\n        local bin = \"\"\n        while N > 0 do\n            local\
    \ rest = N % 2\n            bin = bin .. tostring(rest)\n            N = (N -\
    \ rest) / 2\n        end\n        return bin\n    end\n    local bin = toBinary(N)\n\
    \    local sum = 0\n    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i,\
    \ i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpirld0pj_.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpirld0pj_.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpirld0pj_.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3qoe24x.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpc3qoe24x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9smyhi0q.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp9smyhi0q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  sum = sum + remainder\n    binary = remainder .. binary\n    N = math.floor(N\
    \ / 2)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt73txg50.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpt73txg50.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uxvfie5.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp0uxvfie5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    binary = tostring(rest) .. binary\n    N = (N - rest) / 2\n\
    \  end\n  return binary .. ' ' .. tostring(sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic85yaed.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00 6.0\"\nstack traceback:\n\
    \t/tmp/tmpic85yaed.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrmlopn6.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpvrmlopn6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local b =\
    \ ''\n  while N > 0 do\n    b = tostring(N % 2) .. b\n    N = math.floor(N / 2)\n\
    \  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbvnw77g.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpsbvnw77g.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        s = r .. s\n    \
    \    N = (N - r) / 2\n    end\n    return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2ms8mcp.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpx2ms8mcp.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptema0985.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmptema0985.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = {}\n    local i = 1\n    while N > 0 do\n        binary[i] = N % 2\n     \
    \   N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqe_mzf5f.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqe_mzf5f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0oyafl3.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpc0oyafl3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasf9c6va.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpasf9c6va.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fbqi2aj.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp2fbqi2aj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
