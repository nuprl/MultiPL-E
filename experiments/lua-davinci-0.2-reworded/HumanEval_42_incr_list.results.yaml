---
name: HumanEval_42_incr_list
language: lua
results:
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for _, v in ipairs(l) do
        table.insert(r, v + 1)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local t = {}
        for i, v in ipairs(l) do
            t[i] = v + 1
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local new_list = {}
      for i = 1, #l do
        new_list[i] = l[i] + 1
      end
      return new_list
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local t = {}
        for i, v in ipairs(l) do
            t[i] = v + 1
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local ret = {}
        for i, v in ipairs(l) do
            ret[i] = v + 1
        end
        return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local nl = {}
        for i, v in ipairs(l) do
            nl[i] = v + 1
        end
        return nl
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for _, v in ipairs(l) do
        table.insert(r, v + 1)
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local result = {}
        for i, v in ipairs(l) do
            result[i] = v + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local ret = {}
        for i, v in ipairs(l) do
            ret[i] = v + 1
        end
        return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local result = {}
      for i, v in ipairs(l) do
        result[i] = v + 1
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local ret = {}
      for i = 1, #l do
        ret[i] = l[i] + 1
      end
      return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local new_l = {}
      for i, v in ipairs(l) do
        new_l[i] = v + 1
      end
      return new_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for _, v in ipairs(l) do
        r[#r + 1] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local new_list = {}
      for _, v in ipairs(l) do
        table.insert(new_list, v + 1)
      end
      return new_list
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local t = {}
        for i, v in ipairs(l) do
            t[i] = v + 1
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local new_l = {}
      for _, v in ipairs(l) do
        table.insert(new_l, v + 1)
      end
      return new_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local incr_l = {}
        for i, v in ipairs(l) do
            incr_l[i] = v + 1
        end
        return incr_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i = 1, #l do
        res[i] = l[i] + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local new_l = {}
        for i, v in ipairs(l) do
            new_l[i] = v + 1
        end
        return new_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local result = {}
        for i, v in ipairs(l) do
            result[i] = v + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local new_l = {}
        for i = 1, #l do
            new_l[i] = l[i] + 1
        end
        return new_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for _, v in ipairs(l) do
            table.insert(res, v + 1)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i = 1, #l do
        r[i] = l[i] + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i, v in ipairs(l) do
            res[i] = v + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for _, v in ipairs(l) do
            table.insert(r, v + 1)
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i = 1, #l do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local new_list = {}
      for i, v in ipairs(l) do
        new_list[i] = v + 1
      end
      return new_list
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local n = #l
        local r = {}
        for i = 1, n do
            r[i] = l[i] + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local new_l = {}
      for i, v in ipairs(l) do
        new_l[i] = v + 1
      end
      return new_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local r = {}
      for i, v in ipairs(l) do
        r[i] = v + 1
      end
      return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local new_l = {}
        for i, v in ipairs(l) do
            new_l[i] = v + 1
        end
        return new_l
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local res = {}
        for i = 1, #l do
            res[i] = l[i] + 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
        local r = {}
        for i, v in ipairs(l) do
            r[i] = v + 1
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for i, v in ipairs(l) do
        res[i] = v + 1
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,
    2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,
    4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal res = {}\n\tfor
    i = 1, #l do\n\t\tres[i] = l[i] + 1\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),
    {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,
    2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table with elements incremented by 1.
    -- >>> incr_list({1, 2, 3})
    -- {2, 3, 4}
    -- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})
    -- {6, 4, 6, 3, 4, 4, 10, 1, 124}
    local function incr_list(l)
      local res = {}
      for _, v in ipairs(l) do
        table.insert(res, v + 1)
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = incr_list
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})
        lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
