---
name: HumanEval_73_smallest_change
language: lua
prompt: |
  -- Given a table arr of integers, find the minimum number of elements that
  -- need to be changed to make the table palindromic. A palindromic table is a table that
  -- is read the same backwards and forwards. In one change, you can change one element to any other element.
  -- For example:
  -- >>> smallest_change({1, 2, 3, 5, 4, 7, 9, 6})
  -- 4
  -- >>> smallest_change({1, 2, 3, 4, 3, 2, 2})
  -- 1
  -- >>> smallest_change({1, 2, 3, 2, 1})
  -- 0
  local function smallest_change(arr)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = smallest_change
      lu.assertEquals(candidate({1, 2, 3, 5, 4, 7, 9, 6}), 4)
      lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 2}), 1)
      lu.assertEquals(candidate({1, 4, 2}), 1)
      lu.assertEquals(candidate({1, 4, 4, 2}), 1)
      lu.assertEquals(candidate({1, 2, 3, 2, 1}), 0)
      lu.assertEquals(candidate({3, 1, 1, 3}), 0)
      lu.assertEquals(candidate({1}), 0)
      lu.assertEquals(candidate({0, 1}), 1)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  if arr[j] == arr[j + i] then
                      dp[j][j + i] = dp[j + 1][j + i - 1]
                  else
                      dp[j][j + i] = math.min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              dp[i][j] = arr[i] == arr[j] and dp[i + 1][j - 1] or (dp[i + 1][j] + 1 < dp[i][j - 1] + 1 and dp[i + 1][j] + 1 or dp[i][j - 1] + 1)
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n - i do
        if i == 1 then
          dp[j][j + i] = 0
        elseif i == 2 then
          dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
        else
          dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              local k = j + i
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k] + (arr[j] ~= arr[k]), dp[j][k - 1] + (arr[j] ~= arr[k]))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              dp[i][j] = arr[i] == arr[j] and dp[i + 1][j - 1] or (dp[i + 1][j] + 1 < dp[i][j - 1] + 1 and dp[i + 1][j] + 1 or dp[i][j - 1] + 1)
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i == j - 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for k = 3, n do
      for i = 1, n - k + 1 do
        local j = i + k - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len do
              if i == j then
                  dp[i][j] = 0
              elseif i > j then
                  dp[i][j] = dp[j][i]
              else
                  if arr[i] == arr[j] then
                      dp[i][j] = dp[i + 1][j - 1]
                  else
                      dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
                  end
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for l = 2, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local len = #arr
    local dp = {}
    for i = 1, len do
      dp[i] = {}
      for j = 1, len do
        dp[i][j] = 0
      end
    end
    for i = 1, len do
      for j = 1, len do
        if i == j then
          dp[i][j] = 0
        elseif i == j - 1 then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
        end
      end
    end
    return dp[1][len]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k] + (arr[j] ~= arr[k] and 1 or 0), dp[j][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i == j + 1 then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(
                      dp[i - 1][j] + (arr[i] ~= arr[i - 1] and 1 or 0),
                      dp[i][j - 1] + (arr[j] ~= arr[j - 1] and 1 or 0),
                      dp[i - 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0)
                  )
              end
          end
      end
      return dp[n][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  if arr[j] == arr[j + i] then
                      dp[j][j + i] = dp[j + 1][j + i - 1]
                  else
                      dp[j][j + i] = math.min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i > j then
                  dp[i][j] = dp[j][i]
              else
                  if arr[i] == arr[j] then
                      dp[i][j] = dp[i + 1][j - 1]
                  else
                      dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              if i == 1 then
                  dp[j][j + i - 1] = 0
              elseif i == 2 then
                  dp[j][j + i - 1] = arr[j] == arr[j + i - 1] and 0 or 1
              else
                  if arr[j] == arr[j + i - 1] then
                      dp[j][j + i - 1] = dp[j + 1][j + i - 2]
                  else
                      dp[j][j + i - 1] = math.min(dp[j + 1][j + i - 1], dp[j][j + i - 2]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i == j - 1 then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = math.huge
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i + 1][j] + (arr[i] ~= arr[j]), dp[i][j - 1] + (arr[i] ~= arr[j]))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 2, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 0, len do
          dp[i] = {}
          for j = 0, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len - i + 1 do
              local k = j + i - 1
              if j == k then
                  dp[j][k] = 0
              elseif j + 1 == k then
                  dp[j][k] = arr[j] == arr[k] and 0 or 1
              else
                  if arr[j] == arr[k] then
                      dp[j][k] = dp[j + 1][k - 1]
                  else
                      dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
                  end
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              if i == 1 then
                  dp[j][j + i - 1] = 0
              elseif i == 2 then
                  dp[j][j + i - 1] = arr[j] == arr[j + i - 1] and 0 or 1
              else
                  if arr[j] == arr[j + i - 1] then
                      dp[j][j + i - 1] = dp[j + 1][j + i - 2]
                  else
                      dp[j][j + i - 1] = math.min(dp[j + 1][j + i - 1], dp[j][j + i - 2]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 0, n do
      dp[i] = {}
      for j = 0, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i == j - 1 then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 2), dp[i + 1][j] + 1, dp[i][j - 1] + 1)
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              dp[j][k] = math.min(dp[j + 1][k] + (arr[j] ~= arr[k] and 1 or 0),
                                  dp[j][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for l = 1, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if i == j then
                  dp[i][j] = 0
              elseif arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = 3, n do
      for j = 1, n - i + 1 do
        local k = j + i - 1
        dp[j][k] = math.min(
          dp[j + 1][k] + (arr[j] ~= arr[k] and 1 or 0),
          dp[j][k - 1] + (arr[j] ~= arr[k] and 1 or 0)
        )
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 2),
                                      dp[i + 1][j] + 1,
                                      dp[i][j - 1] + 1)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for l = 2, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 2),
                                          dp[j + 1][j + i] + 1,
                                          dp[j][j + i - 1] + 1)
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for k = 3, n do
      for i = 1, n - k + 1 do
        local j = i + k - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  if arr[j] == arr[k] then
                      dp[j][k] = dp[j + 1][k - 1]
                  else
                      dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local len = #arr
      local min = len
      for i = 1, len do
          local change = 0
          for j = 1, len do
              if arr[j] ~= arr[len - j + 1] then
                  change = change + 1
              end
          end
          if change < min then
              min = change
          end
          table.insert(arr, 1, table.remove(arr))
      end
      return min
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = n - 2, 1, -1 do
      for j = i + 2, n do
        dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len do
              if i == j then
                  dp[i][j] = 0
              elseif i > j then
                  dp[i][j] = dp[j][i]
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              local k = j + i
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k] + 1, dp[j][k - 1] + 1, dp[j + 1][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  if arr[j] == arr[j + i] then
                      dp[j][j + i] = dp[j + 1][j + i - 1]
                  else
                      dp[j][j + i] = math.min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 0, len do
          dp[i] = {}
          for j = 0, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len do
              if i == j then
                  dp[i][j] = 0
              elseif i == j - 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = arr[i] == arr[j] and dp[i + 1][j - 1] or math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i == j - 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k] + 1, dp[j][k - 1] + 1, dp[j + 1][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = arr[i] == arr[j] and dp[i + 1][j - 1] or 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k] + 1, dp[j][k - 1] + 1, dp[j + 1][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = 3, n do
      for j = 1, n - i + 1 do
        local k = j + i - 1
        if arr[j] == arr[k] then
          dp[j][k] = dp[j + 1][k - 1]
        else
          dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      -- TODO: implement this function
      return 0
  end
- |2-
    local len = #arr
    local dp = {}
    for i = 0, len do
      dp[i] = {}
      for j = 0, len do
        dp[i][j] = 0
      end
    end
    for i = 1, len do
      for j = 1, len - i + 1 do
        local k = j + i - 1
        if i == 1 then
          dp[j][k] = 0
        elseif i == 2 then
          dp[j][k] = arr[j] ~= arr[k] and 1 or 0
        else
          if arr[j] == arr[k] then
            dp[j][k] = dp[j + 1][k - 1]
          else
            dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
          end
        end
      end
    end
    return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for k = 3, n do
      for i = 1, n - k + 1 do
        local j = i + k - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          dp[i][i] = 0
      end
      for i = 1, len - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, len do
          for j = 1, len - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if j == k then
                  dp[j][k] = 0
              elseif j + 1 == k then
                  dp[j][k] = arr[j] == arr[k] and 0 or 1
              else
                  dp[j][k] = math.min(dp[j][k - 1] + 1, dp[j + 1][k] + 1, dp[j + 1][k - 1] + (arr[j] == arr[k] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i == j - 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              local k = j + i
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i == j - 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i + 1][j] + (arr[i] ~= arr[i + 1] and 1 or 0),
                                      dp[i][j - 1] + (arr[j] ~= arr[j - 1] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local len = #arr
      local min_changes = 0
      for i = 1, len / 2 do
          if arr[i] ~= arr[len - i + 1] then
              min_changes = min_changes + 1
          end
      end
      return min_changes
  end
- |2-
    local len = #arr
    local i = 1
    local j = len
    local count = 0
    while i < j do
      if arr[i] ~= arr[j] then
        count = count + 1
      end
      i = i + 1
      j = j - 1
    end
    return count
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          dp[i][i] = 0
      end
      for i = 1, len - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for i = 3, len do
          for j = 1, len - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 1, len do
          dp[i] = {}
          for j = 1, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][len]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for k = 3, n do
      for i = 1, n - k + 1 do
        local j = i + k - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 0, n do
      dp[i] = {}
      for j = 0, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i == j - 1 then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 0, n do
      dp[i] = {}
      for j = 0, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for k = 3, n do
      for i = 1, n - k + 1 do
        local j = i + k - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = math.huge
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local len = #arr
    local dp = {}
    for i = 1, len do
      dp[i] = {}
      for j = 1, len do
        dp[i][j] = 0
      end
    end
    for i = 1, len do
      dp[i][i] = 0
    end
    for i = 1, len - 1 do
      if arr[i] ~= arr[i + 1] then
        dp[i][i + 1] = 1
      end
    end
    for l = 3, len do
      for i = 1, len - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif j == i + 1 then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        j = i + l - 1
        dp[i][j] = math.min(dp[i + 1][j] + (arr[i] ~= arr[j] and 1 or 0), dp[i][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = n - 1, 1, -1 do
      for j = i + 2, n do
        dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(
            dp[i + 1][j] + (arr[i] ~= arr[i + 1] and 1 or 0),
            dp[i][j - 1] + (arr[j] ~= arr[j - 1] and 1 or 0)
          )
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- "\tlocal n = #arr\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j
  = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tdp[i][i] =
  0\n\tend\n\tfor i = 1, n - 1 do\n\t\tif arr[i] ~= arr[i + 1] then\n\t\t\tdp[i][i
  + 1] = 1\n\t\tend\n\tend\n\tfor i = 3, n do\n\t\tfor j = 1, n - i + 1 do\n\t\t\tlocal
  k = j + i - 1\n\t\t\tif arr[j] == arr[k] then\n\t\t\t\tdp[j][k] = dp[j + 1][k -
  1]\n\t\t\telse\n\t\t\t\tdp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn
  dp[1][n]\nend"
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = n - 1, 1, -1 do
          for j = i + 1, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif j == i + 1 then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 0, n do
      dp[i] = {}
      for j = 0, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              dp[i][j] = arr[i] == arr[j] and dp[i + 1][j - 1] or math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = n - 1, 1, -1 do
      for j = i + 2, n do
        dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = 3, n do
      for j = 1, n - i + 1 do
        dp[j][j + i - 1] = math.min(dp[j + 1][j + i - 1] + (arr[j] ~= arr[j + i - 1] and 1 or 0),
                                    dp[j][j + i - 2] + (arr[j] ~= arr[j + i - 2] and 1 or 0))
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i == j - 1 then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 0, n do
      dp[i] = {}
      for j = 0, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n - i + 1 do
        local k = j + i - 1
        if i == 1 then
          dp[j][k] = 0
        elseif i == 2 then
          dp[j][k] = arr[j] ~= arr[k] and 1 or 0
        else
          dp[j][k] = math.min(dp[j + 1][k] + (arr[j] ~= arr[k] and 1 or 0),
                               dp[j][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for i = n - 1, 1, -1 do
      for j = i + 2, n do
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = n - 1, 1, -1 do
          for j = i + 2, n do
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 0, n do
      dp[i] = {}
      for j = 0, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i == j - 1 then
          dp[i][j] = arr[i] == arr[j] and 0 or 1
        else
          dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = dp[i][j] + math.abs(arr[i] - arr[j])
              else
                  dp[i][j] = math.min(dp[i][j - 1] + math.abs(arr[j] - arr[j - 1]), dp[i + 1][j] + math.abs(arr[i] - arr[i + 1]))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i > j then
          dp[i][j] = dp[j][i]
        else
          if arr[i] == arr[j] then
            dp[i][j] = dp[i + 1][j - 1]
          else
            dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
          end
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local len = #arr
      local dp = {}
      for i = 0, len do
          dp[i] = {}
          for j = 0, len do
              dp[i][j] = 0
          end
      end
      for i = 1, len do
          for j = 1, len - i + 1 do
              if i == 1 then
                  dp[j][j + i - 1] = 0
              elseif i == 2 then
                  dp[j][j + i - 1] = arr[j] == arr[j + i - 1] and 0 or 1
              else
                  if arr[j] == arr[j + i - 1] then
                      dp[j][j + i - 1] = dp[j + 1][j + i - 2]
                  else
                      dp[j][j + i - 1] = math.min(dp[j + 1][j + i - 1], dp[j][j + i - 2]) + 1
                  end
              end
          end
      end
      return dp[1][len]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 2), dp[i + 1][j] + 1, dp[i][j - 1] + 1)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              local k = j + i
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = math.huge
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for l = 3, n do
          for i = 1, n - l + 1 do
              local j = i + l - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i > j then
                  dp[i][j] = dp[j][i]
              else
                  if arr[i] == arr[j] then
                      dp[i][j] = dp[i + 1][j - 1]
                  else
                      dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i > j then
                  dp[i][j] = dp[j][i]
              else
                  if arr[i] == arr[j] then
                      dp[i][j] = dp[i + 1][j - 1]
                  else
                      dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
                  end
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 2, n do
          for j = 1, n - i + 1 do
              if arr[j] == arr[j + i - 1] then
                  dp[j][j + i - 1] = dp[j + 1][j + i - 2]
              else
                  dp[j][j + i - 1] = math.min(dp[j + 1][j + i - 1], dp[j][j + i - 2]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + (arr[j] ~= arr[k] and 1 or 0)
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for len = 3, n do
          for i = 1, n - len + 1 do
              local j = i + len - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 0, n do
          dp[i] = {}
          for j = 0, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if i == 1 then
                  dp[j][k] = 0
              elseif i == 2 then
                  dp[j][k] = arr[j] ~= arr[k] and 1 or 0
              else
                  dp[j][k] = math.min(dp[j + 1][k] + (arr[j] ~= arr[k] and 1 or 0), dp[j][k - 1] + (arr[j] ~= arr[k] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
      end
      for i = 3, n do
          for j = 1, n - i + 1 do
              local k = j + i - 1
              if arr[j] == arr[k] then
                  dp[j][k] = dp[j + 1][k - 1]
              else
                  dp[j][k] = math.min(dp[j + 1][k], dp[j][k - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n - i do
              if i == 1 then
                  dp[j][j + i] = 0
              elseif i == 2 then
                  dp[j][j + i] = arr[j] == arr[j + i] and 0 or 1
              else
                  dp[j][j + i] = math.min(dp[j + 1][j + i] + 1, dp[j][j + i - 1] + 1, dp[j + 1][j + i - 1] + (arr[j] == arr[j + i] and 0 or 1))
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      dp[i][i] = 0
    end
    for i = 1, n - 1 do
      dp[i][i + 1] = arr[i] ~= arr[i + 1] and 1 or 0
    end
    for l = 3, n do
      for i = 1, n - l + 1 do
        local j = i + l - 1
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif j == i + 1 then
                  dp[i][j] = arr[i] ~= arr[j] and 1 or 0
              else
                  dp[i][j] = math.min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + (arr[i] ~= arr[j] and 1 or 0))
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = 1 + math.min(dp[i + 1][j], dp[i][j - 1])
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          dp[i][i] = 0
      end
      for i = 1, n - 1 do
          if arr[i] ~= arr[i + 1] then
              dp[i][i + 1] = 1
          end
      end
      for k = 3, n do
          for i = 1, n - k + 1 do
              local j = i + k - 1
              if arr[i] == arr[j] then
                  dp[i][j] = dp[i + 1][j - 1]
              else
                  dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
              end
          end
      end
      return dp[1][n]
  end
- |2-
      local n = #arr
      local dp = {}
      for i = 1, n do
          dp[i] = {}
          for j = 1, n do
              dp[i][j] = 0
          end
      end
      for i = 1, n do
          for j = 1, n do
              if i == j then
                  dp[i][j] = 0
              elseif i + 1 == j then
                  dp[i][j] = arr[i] == arr[j] and 0 or 1
              else
                  dp[i][j] = math.min(dp[i + 1][j - 1] + (arr[i] == arr[j] and 0 or 2), dp[i + 1][j] + 1, dp[i][j - 1] + 1)
              end
          end
      end
      return dp[1][n]
  end
- |2-
    local len = #arr
    local dp = {}
    for i = 1, len do
      dp[i] = {}
      for j = 1, len do
        dp[i][j] = 0
      end
    end
    for i = 1, len do
      dp[i][i] = 0
    end
    for i = 1, len - 1 do
      dp[i][i + 1] = arr[i] == arr[i + 1] and 0 or 1
    end
    for i = len - 1, 1, -1 do
      for j = i + 2, len do
        if arr[i] == arr[j] then
          dp[i][j] = dp[i + 1][j - 1]
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + 1
        end
      end
    end
    return dp[1][len]
  end
- |2-
    local n = #arr
    local dp = {}
    for i = 1, n do
      dp[i] = {}
      for j = 1, n do
        dp[i][j] = 0
      end
    end
    for i = 1, n do
      for j = 1, n do
        if i == j then
          dp[i][j] = 0
        elseif i + 1 == j then
          dp[i][j] = arr[i] ~= arr[j] and 1 or 0
        else
          dp[i][j] = math.min(dp[i + 1][j], dp[i][j - 1]) + (arr[i] ~= arr[j] and 1 or 0)
        end
      end
    end
    return dp[1][n]
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
