---
name: HumanEval_118_get_closest_vowel
language: lua
prompt: "-- You are given a word. Your task is to find the closest vowel that stands
  between \n-- two consonants from the right side of the word (case sensitive).\n--
  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n--
  find any vowel met the above condition. \n-- You may assume that the given string
  contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n--
  'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n--
  ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = get_closest_vowel
      lu.assertEquals(candidate('yogurt'), 'u')
      lu.assertEquals(candidate('full'), 'u')
      lu.assertEquals(candidate('easy'), '')
      lu.assertEquals(candidate('eAsy'), '')
      lu.assertEquals(candidate('ali'), '')
      lu.assertEquals(candidate('bad'), 'a')
      lu.assertEquals(candidate('most'), 'o')
      lu.assertEquals(candidate('ab'), '')
      lu.assertEquals(candidate('ba'), '')
      lu.assertEquals(candidate('quick'), '')
      lu.assertEquals(candidate('anime'), 'i')
      lu.assertEquals(candidate('Asia'), '')
      lu.assertEquals(candidate('Above'), 'o')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    -- TODO: implement this function
  end
- |2-
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = string.len(word)
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local closest_vowel_index_2 = 0
      local closest_vowel_index_3 = 0
      local closest_consonant_index_3 = 0
      for i = 1, word_len do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  closest_vowel_index = i
                  closest_vowel = vowels[j]
              end
          end
          for k = 1, #consonants do
              if word:sub(i, i) == consonants[k] then
                  closest_consonant_index = i
              end
          end
          if closest_vowel_index > closest_consonant_index then
              closest_vowel_index_2 = closest_vowel_index
              closest_consonant_index_2 = closest_consonant_index
          end
          if closest_vowel_index_2 > closest_vowel_index_3 then
              closest_vowel_index_3 = closest_vowel_index_2
              closest_consonant_index_3 = closest_consonant_index_2
          end
      end
      if closest_vowel_index_3 > closest_consonant_index_3 then
          return closest_vowel
      else
          return ''
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local vowel_index = 0
      local consonant_index = 0
      local vowel_found = false
      local consonant_found = false
      for i = 1, #word do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  vowel_index = i
                  vowel_found = true
                  break
              end
          end
          if vowel_found then
              for k = 1, #consonants do
                  if word:sub(i + 1, i + 1) == consonants[k] then
                      consonant_index = i + 1
                      consonant_found = true
                      break
                  end
              end
          end
          if vowel_found and consonant_found then
              result = word:sub(vowel_index, vowel_index)
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      for i = #word, 1, -1 do
          if not table.contains(vowels, word:sub(i, i)) then
              for j = i - 1, 1, -1 do
                  if table.contains(vowels, word:sub(j, j)) then
                      result = word:sub(j, j)
                      break
                  end
              end
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = 1, #word do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
          elseif table.contains(consonants, word:sub(i, i)) then
              consonant_index = i
          end
          if vowel_index > 0 and consonant_index > 0 then
              if vowel_index > consonant_index then
                  closest_vowel = word:sub(vowel_index, vowel_index)
                  break
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          if not table.contains(vowels, word:sub(i, i)) then
              for j = i, 1, -1 do
                  if table.contains(vowels, word:sub(j, j)) then
                      if closest_vowel_index == 0 then
                          closest_vowel_index = j
                          closest_vowel = word:sub(j, j)
                      elseif j > closest_vowel_index then
                          closest_vowel_index = j
                          closest_vowel = word:sub(j, j)
                      end
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      local last_consonant = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if table.contains(vowels, c) then
              last_vowel = c
          else
              if last_vowel ~= '' then
                  return last_vowel
              end
              last_consonant = c
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          local char = word:sub(index, index)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              result = char
              break
          end
          index = index - 1
      end
      return result
  end
- |2-
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_index = 0
      local word_length = string.len(word)
      for i = 1, word_length do
          local letter = string.sub(word, i, i)
          if table.contains(vowels, letter) then
              local left_consonant = false
              local right_consonant = false
              if i > 1 then
                  local left_letter = string.sub(word, i - 1, i - 1)
                  if table.contains(consonants, left_letter) then
                      left_consonant = true
                  end
              end
              if i < word_length then
                  local right_letter = string.sub(word, i + 1, i + 1)
                  if table.contains(consonants, right_letter) then
                      right_consonant = true
                  end
              end
              if left_consonant and right_consonant then
                  if closest_index == 0 then
                      closest_index = i
                      closest_vowel = letter
                  elseif i < closest_index then
                      closest_index = i
                      closest_vowel = letter
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
              break
          end
      end
      for i = vowel_index, 1, -1 do
          if table.contains(consonants, word:sub(i, i)) then
              consonant_index = i
              break
          end
      end
      if vowel_index == 0 or consonant_index == 0 then
          return ''
      end
      return word:sub(vowel_index, vowel_index)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          else
              if last_vowel ~= '' then
                  result = last_vowel
                  break
              end
              last_consonant = char
          end
      end
      return result
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = #word, 1, -1 do
          local letter = word:sub(i, i)
          if table.contains(vowels, letter) then
              closest_vowel = letter
              closest_vowel_index = i
              break
          end
      end
      for i = closest_vowel_index, 1, -1 do
          local letter = word:sub(i, i)
          if table.contains(consonants, letter) then
              closest_consonant_index = i
              break
          end
      end
      if closest_vowel_index - closest_consonant_index == 1 then
          return ''
      else
          return closest_vowel
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
                  break
              end
          end
          for j = 1, #consonants do
              if word[i] == consonants[j] then
                  consonant_index = i
                  break
              end
          end
          if vowel_index > consonant_index then
              closest_vowel = word[vowel_index]
              break
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = nil
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
              break
          end
      end
      if vowel_index == nil then
          return ''
      end
      for i = vowel_index - 1, 1, -1 do
          if not table.contains(vowels, word:sub(i, i)) then
              return word:sub(vowel_index, vowel_index)
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_consonant_index = 0
      for i = #word, 1, -1 do
          if not table.contains(vowels, word:sub(i, i)) then
              last_consonant_index = i
              break
          end
      end
      for i = last_consonant_index, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              return word:sub(i, i)
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      for i = #word, 1, -1 do
          if table.indexof(vowels, word:sub(i, i)) ~= -1 then
              vowel_index = i
              break
          end
      end
      if vowel_index == 0 then
          return ''
      end
      local prev_char = word:sub(vowel_index - 1, vowel_index - 1)
      local next_char = word:sub(vowel_index + 1, vowel_index + 1)
      if table.indexof(vowels, prev_char) == -1 and table.indexof(vowels, next_char) == -1 then
          return word:sub(vowel_index, vowel_index)
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local word_length = string.len(word)
      for i = 1, word_length do
          local letter = string.sub(word, i, i)
          if table.contains(vowels, letter) then
              closest_vowel = letter
              closest_vowel_index = i
              break
          end
      end
      for i = word_length, 1, -1 do
          local letter = string.sub(word, i, i)
          if table.contains(consonants, letter) then
              closest_consonant_index = i
              break
          end
      end
      if closest_vowel_index > closest_consonant_index then
          return closest_vowel
      else
          return ''
      end
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
    local closest_vowel = ''
    local closest_distance = 0
    for i = 1, #word do
      local letter = word:sub(i, i)
      if table.contains(vowels, letter) then
        local distance = 0
        for j = i, #word do
          local letter = word:sub(j, j)
          if table.contains(consonants, letter) then
            distance = distance + 1
          elseif table.contains(vowels, letter) then
            break
          end
        end
        if distance > 0 and (closest_distance == 0 or distance < closest_distance) then
          closest_distance = distance
          closest_vowel = letter
        end
      end
    end
    return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_length = string.len(word)
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local closest_vowel_distance = 0
      local closest_consonant_distance = 0
      local closest_consonant_distance_2 = 0
      for i = 1, word_length do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  for k = 1, word_length do
                      for l = 1, #consonants do
                          if word:sub(word_length - k + 1, word_length - k + 1) == consonants[l] then
                              closest_consonant_index = word_length - k + 1
                              closest_consonant_distance = k
                              break
                          end
                      end
                      if closest_consonant_index ~= 0 then
                          break
                      end
                  end
                  for k = 1, word_length do
                      for l = 1, #consonants do
                          if word:sub(word_length - k + 1, word_length - k + 1) == consonants[l] then
                              closest_consonant_index_2 = word_length - k + 1
                              closest_consonant_distance_2 = k
                              break
                          end
                      end
                      if closest_consonant_index_2 ~= 0 then
                          break
                      end
                  end
                  if closest_consonant_index ~= 0 and closest_consonant_index_2 ~= 0 then
                      if closest_consonant_distance < closest_
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          if last_vowel == '' then
              for _, v in ipairs(vowels) do
                  if word:sub(i, i) == v then
                      last_vowel = v
                      break
                  end
              end
          else
              for _, v in ipairs(vowels) do
                  if word:sub(i, i) == v then
                      return last_vowel
                  end
              end
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = #word, 1, -1 do
          for _, v in ipairs(vowels) do
              if word:sub(i, i) == v then
                  vowel_index = i
              end
          end
          for _, v in ipairs(consonants) do
              if word:sub(i, i) == v then
                  consonant_index = i
              end
          end
          if vowel_index > consonant_index then
              closest_vowel = word:sub(vowel_index, vowel_index)
              break
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          elseif last_vowel ~= '' then
              result = last_vowel
              break
          end
      end
      return result
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local word_length = string.len(word)
      local i = 1
      while i <= word_length do
          local char = string.sub(word, i, i)
          if table.contains(vowels, char) then
              if i > closest_consonant_index and i < closest_consonant_index_2 then
                  closest_vowel = char
                  closest_vowel_index = i
              end
          elseif table.contains(consonants, char) then
              if i > closest_vowel_index then
                  closest_consonant_index_2 = i
              else
                  closest_consonant_index = i
              end
          end
          i = i + 1
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_vowel_index = -1
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel_index = i
              break
          end
      end
      if last_vowel_index == -1 then
          return ''
      end
      for i = last_vowel_index, 1, -1 do
          local char = word:sub(i, i)
          if not table.contains(vowels, char) then
              result = word:sub(i + 1, last_vowel_index)
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local word_length = string.len(word)
      for i = 1, word_length do
          local letter = string.sub(word, i, i)
          if table.contains(vowels, letter) then
              local vowel_index = i
              local consonant_index = 0
              for j = i, word_length do
                  local letter = string.sub(word, j, j)
                  if table.contains(consonants, letter) then
                      consonant_index = j
                      break
                  end
              end
              if consonant_index ~= 0 then
                  local distance = consonant_index - vowel_index
                  if closest_vowel_index == 0 or distance < closest_vowel_index then
                      closest_vowel_index = distance
                      closest_consonant_index = consonant_index
                      closest_vowel = letter
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_index = -1
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          for _, vowel in ipairs(vowels) do
              if char == vowel then
                  closest_vowel = char
                  closest_index = i
                  break
              end
          end
          if closest_index ~= -1 then
              break
          end
      end
      if closest_index == 1 or closest_index == #word then
          return ''
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
              break
          end
      end
      return last_vowel
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local last_consonant = nil
    local last_vowel = nil
    for i = #word, 1, -1 do
      local char = word:sub(i, i)
      if table.contains(vowels, char) then
        last_vowel = char
      else
        if last_vowel then
          return last_vowel
        end
      end
    end
    return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          if table.indexof(vowels, word:sub(index, index)) then
              result = word:sub(index, index)
              break
          end
          index = index - 1
      end
      return result
  end
- |2-
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = 1, #word do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
              end
          end
          for k = 1, #consonants do
              if word[i] == consonants[k] then
                  consonant_index = i
              end
          end
          if vowel_index ~= 0 and consonant_index ~= 0 then
              if vowel_index > consonant_index then
                  closest_vowel = word[vowel_index]
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          if table.indexof(vowels, word:sub(index, index)) then
              result = word:sub(index, index)
              break
          end
          index = index - 1
      end
      return result
  end
- "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal closest_vowel = ''\n\tlocal
  closest_vowel_distance = 0\n\tlocal vowel_distance = 0\n\tlocal last_consonant_index
  = 0\n\tfor i = 1, #word do\n\t\tlocal letter = word:sub(i, i)\n\t\tif table.contains(vowels,
  letter) then\n\t\t\tvowel_distance = i - last_consonant_index\n\t\t\tif vowel_distance
  > 1 and (vowel_distance < closest_vowel_distance or closest_vowel_distance == 0)
  then\n\t\t\t\tclosest_vowel = letter\n\t\t\t\tclosest_vowel_distance = vowel_distance\n\t\t\tend\n\t\telse\n\t\t\tlast_consonant_index
  = i\n\t\tend\n\tend\n\treturn closest_vowel\nend"
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              vowel_index = i
          else
              consonant_index = i
          end
          if vowel_index > 0 and consonant_index > 0 then
              closest_vowel = word:sub(vowel_index, vowel_index)
              break
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              if closest_vowel_index == 0 then
                  closest_vowel_index = i
              end
          elseif table.contains(consonants, char) then
              if closest_vowel_index > 0 and closest_consonant_index == 0 then
                  closest_consonant_index = i
              end
          end
      end
      if closest_vowel_index > 0 and closest_consonant_index > 0 then
          closest_vowel = word:sub(closest_vowel_index, closest_vowel_index)
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local vowel_index = 0
      local consonant_index = 0
      local word_length = string.len(word)
      local i = 1
      while i <= word_length do
          local current_letter = string.sub(word, i, i)
          if table.contains(vowels, current_letter) then
              vowel_index = i
          elseif table.contains(consonants, current_letter) then
              consonant_index = i
          end
          if vowel_index > 0 and consonant_index > 0 then
              if consonant_index - vowel_index == 1 then
                  result = string.sub(word, vowel_index, vowel_index)
              end
              vowel_index = 0
              consonant_index = 0
          end
          i = i + 1
      end
      return result
  end
- |2
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_list = {}
      local word_list_vowel = {}
      local word_list_consonant = {}
      local word_list_consonant_vowel = {}
      local word_list_vowel_consonant = {}
      for i = 1, #word do
          word_list[i] = word:sub(i, i)
      end
      for i = 1, #word_list do
          for j = 1, #vowels do
              if word_list[i] == vowels[j] then
                  table.insert(word_list_vowel, word_list[i])
              end
          end
      end
      for i = 1, #word_list do
          for j = 1, #consonants do
              if word_list[i] == consonants[j] then
                  table.insert(word_list_consonant, word_list[i])
              end
          end
      end
      for i = 1, #word_list_consonant do
          for j = 1, #word_list_vowel do
              if word_list_consonant[i] == word_list_vowel[j] then
                  table.insert(word_list_consonant_vowel, word_list_consonant[i])
              end
          end
      end
      for i = 1, #word_list_vowel do
          for j = 1, #word_list_consonant do
              if word_list_vowel[i] == word_list_consonant[j] then
                  table.insert(word_list_vowel_consonant, word_list_vowel[i])
- |2-
      -- your code here
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local is_vowel = false
      local is_consonant = false
      for i = #word, 1, -1 do
          for _, v in ipairs(vowels) do
              if word:sub(i, i) == v then
                  is_vowel = true
              end
          end
          for _, v in ipairs(consonants) do
              if word:sub(i, i) == v then
                  is_consonant = true
              end
          end
          if is_vowel and is_consonant then
              result = word:sub(i, i)
              break
          end
          is_vowel = false
          is_consonant = false
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_distance = 0
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              local distance = 0
              for j = i, #word do
                  local char = word:sub(j, j)
                  if table.contains(consonants, char) then
                      distance = distance + 1
                  elseif table.contains(vowels, char) then
                      break
                  end
              end
              if distance > closest_distance then
                  closest_distance = distance
                  closest_vowel = char
              end
          end
      end
      return closest_vowel
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_vowel_index = -1
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              last_vowel_index = i
              break
          end
      end
      if last_vowel_index == -1 then
          return ''
      end
      for i = last_vowel_index - 1, 1, -1 do
          local char = word:sub(i, i)
          if not table.indexof(vowels, char) then
              result = word:sub(last_vowel_index, last_vowel_index)
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
              break
          end
      end
      return last_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local vowel_index = 0
      local consonant_index = 0
      local vowel_found = false
      local consonant_found = false
      for i = 1, #word do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  vowel_index = i
                  vowel_found = true
                  break
              end
          end
          if vowel_found then
              for k = 1, #consonants do
                  if word:sub(i - 1, i - 1) == consonants[k] then
                      consonant_index = i - 1
                      consonant_found = true
                      break
                  end
              end
              if consonant_found then
                  result = word:sub(vowel_index, vowel_index)
                  break
              end
          end
      end
      return result
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local vowel_idx = 0
    local vowel_idx_list = {}
    for i = 1, #word do
      for j = 1, #vowels do
        if word:sub(i, i) == vowels[j] then
          vowel_idx_list[#vowel_idx_list + 1] = i
        end
      end
    end
    if #vowel_idx_list == 0 then
      return ''
    end
    local closest_vowel_idx = vowel_idx_list[#vowel_idx_list]
    for i = 1, #vowel_idx_list - 1 do
      if vowel_idx_list[i] > vowel_idx then
        closest_vowel_idx = vowel_idx_list[i]
      end
    end
    return word:sub(closest_vowel_idx, closest_vowel_idx)
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if table.indexof(vowels, c) then
              last_vowel = c
              break
          end
      end
      return last_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          local char = word:sub(index, index)
          if not table.contains(vowels, char) then
              if index < #word then
                  local next_char = word:sub(index + 1, index + 1)
                  if table.contains(vowels, next_char) then
                      result = next_char
                      break
                  end
              end
          end
          index = index - 1
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_distance = 0
      local word_length = #word
      for i = 1, word_length do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              local j = i + 1
              while j <= word_length do
                  local next_char = word:sub(j, j)
                  if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then
                      break
                  end
                  j = j + 1
              end
              if j - i > closest_vowel_distance then
                  closest_vowel = char
                  closest_vowel_distance = j - i
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_pos = {}
      local cons_pos = {}
      for i = 1, #word do
          local c = word:sub(i, i)
          if table.indexof(vowels, c) then
              table.insert(vowel_pos, i)
          else
              table.insert(cons_pos, i)
          end
      end
      for i = #cons_pos, 1, -1 do
          local c = cons_pos[i]
          for j = #vowel_pos, 1, -1 do
              local v = vowel_pos[j]
              if v > c then
                  return word:sub(v, v)
              end
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          if not table.contains(vowels, word:sub(index, index)) then
              for i = index - 1, 1, -1 do
                  if table.contains(vowels, word:sub(i, i)) then
                      result = word:sub(i, i)
                      break
                  end
              end
              break
          end
          index = index - 1
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local word_len = string.len(word)
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = word_len, 1, -1 do
          local char = string.sub(word, i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              closest_vowel = char
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 1 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          local char = string.sub(word, i, i)
          if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u' then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
    local result = ''
    local last_consonant = ''
    local last_vowel = ''
    for i = #word, 1, -1 do
      local char = word:sub(i, i)
      if table.contains(vowels, char) then
        last_vowel = char
      elseif table.contains(consonants, char) then
        if last_vowel ~= '' then
          result = last_vowel
          break
        end
        last_consonant = char
      end
    end
    return result
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local last_consonant = nil
    local last_vowel = nil
    for i = #word, 1, -1 do
      local c = word:sub(i, i)
      if last_consonant and table.contains(vowels, c) then
        return c
      end
      if not table.contains(vowels, c) then
        last_consonant = c
      else
        last_vowel = c
      end
    end
    return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local prev_char = ''
      local prev_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if prev_char == '' then
              prev_char = char
          else
              for _, v in ipairs(vowels) do
                  if char == v then
                      prev_vowel = char
                  end
              end
              if prev_vowel ~= '' then
                  for _, v in ipairs(vowels) do
                      if prev_char == v then
                          return prev_vowel
                      end
                  end
              end
              prev_char = char
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local found = false
      for i = #word, 1, -1 do
          if not found then
              for j = 1, #vowels do
                  if word:sub(i, i) == vowels[j] then
                      result = word:sub(i, i)
                      found = true
                      break
                  end
              end
          else
              for j = 1, #vowels do
                  if word:sub(i, i) == vowels[j] then
                      result = ''
                      found = false
                      break
                  end
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local consonant_index = 0
      local vowel_found = false
      for i = #word, 1, -1 do
          local letter = word:sub(i, i)
          if not vowel_found then
              for j = 1, #vowels do
                  if letter == vowels[j] then
                      vowel_index = i
                      vowel_found = true
                      break
                  end
              end
          else
              if not table.contains(vowels, letter) then
                  consonant_index = i
                  break
              end
          end
      end
      if vowel_index == 0 or consonant_index == 0 then
          return ''
      else
          return word:sub(vowel_index, vowel_index)
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = 1, #word do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
              end
          end
          for k = 1, #consonants do
              if word[i] == consonants[k] then
                  consonant_index = i
              end
          end
          if vowel_index > consonant_index then
              closest_vowel = word[vowel_index]
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  for k = 1, #consonants do
                      if word[i - 1] == consonants[k] and word[i + 1] == consonants[k] then
                          if closest_vowel_index == 0 then
                              closest_vowel_index = i
                              closest_consonant_index = i
                              closest_vowel = word[i]
                          elseif i - closest_consonant_index < closest_vowel_index - closest_consonant_index then
                              closest_vowel_index = i
                              closest_consonant_index = i
                              closest_vowel = word[i]
                          end
                      end
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local result = ''
    for i = #word, 1, -1 do
      if table.indexof(vowels, word:sub(i, i)) then
        result = word:sub(i, i)
        break
      end
    end
    return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      local last_consonant = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          else
              last_consonant = char
              break
          end
      end
      if last_vowel ~= '' and last_consonant ~= '' then
          return last_vowel
      else
          return ''
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      local last_consonant = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          else
              last_consonant = char
              if last_vowel ~= '' then
                  return last_vowel
              end
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          if table.contains(vowels, word:sub(i, i)) then
              for j = i, #word do
                  if table.contains(consonants, word:sub(j, j)) then
                      if j - i > closest_consonant_index - closest_vowel_index then
                          closest_vowel = word:sub(i, i)
                          closest_vowel_index = i
                          closest_consonant_index = j
                      end
                      break
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local word_length = string.len(word)
      local i = 1
      while i <= word_length do
          if is_in_array(vowels, string.sub(word, i, i)) then
              if closest_vowel_index == 0 then
                  closest_vowel_index = i
              end
          elseif is_in_array(consonants, string.sub(word, i, i)) then
              if closest_vowel_index ~= 0 then
                  closest_consonant_index = i
                  break
              end
          end
          i = i + 1
      end
      if closest_vowel_index ~= 0 and closest_consonant_index ~= 0 then
          closest_vowel = string.sub(word, closest_vowel_index, closest_vowel_index)
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_index = -1
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if not table.contains(vowels, char) then
              for j = 1, #vowels do
                  local vowel = vowels[j]
                  local index = word:find(vowel, i)
                  if index and (index < closest_index or closest_index == -1) then
                      closest_vowel = vowel
                      closest_index = index
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  if i == #word then
                      return ''
                  elseif i == 1 then
                      return ''
                  elseif word[i - 1] == 'a' then
                      return ''
                  elseif word[i - 1] == 'e' then
                      return ''
                  elseif word[i - 1] == 'i' then
                      return ''
                  elseif word[i - 1] == 'o' then
                      return ''
                  elseif word[i - 1] == 'u' then
                      return ''
                  elseif word[i + 1] == 'a' then
                      return ''
                  elseif word[i + 1] == 'e' then
                      return ''
                  elseif word[i + 1] == 'i' then
                      return ''
                  elseif word[i + 1] == 'o' then
                      return ''
                  elseif word[i + 1] == 'u' then
                      return ''
                  else
                      return word[i]
                  end
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local closest_vowel_distance = 0
      local closest_consonant_distance = 0
      local closest_consonant_distance_2 = 0
      local word_length = string.len(word)
      local i = 1
      local j = 1
      local k = 1
      local l = 1
      local m = 1
      local n = 1
      local o = 1
      local p = 1
      local q = 1
      local r = 1
      local s = 1
      local t = 1
      local u = 1
      local v = 1
      local w = 1
      local x = 1
      local y = 1
      local z = 1
      local a = 1
      local e = 1
      local i = 1
      local o = 1
      local u = 1
      local word_length = string.len(word)
      local i = 1
      local j = 1
      local k = 1
      local l = 1
      local m = 1
      local n = 1
      local o = 1
      local p = 1
      local q = 1
      local r = 1
      local s = 1
      local t = 1
      local u = 1
      local v = 1
      local w = 1
      local x = 1
      local y = 1
      local z = 1
      local a = 1
      local e = 1
      local i = 1
      local o = 1
      local u = 1
      local word_length = string.len(word)
      local i = 1
      local j = 1
      local k =
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local word_len = #word
      local vowel_idx = 0
      local vowel_pos = 0
      local vowel_found = false
      for i = word_len, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              vowel_idx = i
              vowel_found = true
              break
          end
      end
      if vowel_found then
          for i = vowel_idx, 1, -1 do
              local char = word:sub(i, i)
              if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u' then
                  vowel_pos = i
                  break
              end
          end
      end
      if vowel_pos == 0 then
          return ''
      else
          return word:sub(vowel_pos + 1, vowel_pos + 1)
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.index_of(vowels, char) ~= -1 then
              last_vowel = char
              break
          end
      end
      return last_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_idx = 0
      local word_len = string.len(word)
      for i = word_len, 1, -1 do
          if table.contains(vowels, string.sub(word, i, i)) then
              vowel_idx = i
              break
          end
      end
      if vowel_idx == 0 then
          return ''
      end
      for i = vowel_idx, 1, -1 do
          if not table.contains(vowels, string.sub(word, i, i)) then
              return string.sub(word, vowel_idx, vowel_idx)
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local word_len = string.len(word)
      local vowel_idx = 0
      local vowel_found = false
      for i = word_len, 1, -1 do
          local char = string.sub(word, i, i)
          if vowel_found then
              if not table.contains(vowels, char) then
                  return string.sub(word, vowel_idx, vowel_idx)
              end
          else
              if table.contains(vowels, char) then
                  vowel_idx = i
                  vowel_found = true
              end
          end
      end
      return ''
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local closest_vowel = ''
    local closest_index = 0
    for i = #word, 1, -1 do
      if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then
        closest_vowel = word:sub(i, i)
        closest_index = i
        break
      end
    end
    for i = closest_index - 1, 1, -1 do
      if word:sub(i, i) ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o' and word:sub(i, i) ~= 'u' then
        return closest_vowel
      end
    end
    return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          local char = word:sub(index, index)
          if table.contains(vowels, char) then
              result = char
              break
          end
          index = index - 1
      end
      return result
  end
- |2-
      local vowels = 'aeiouAEIOU'
      local cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
      local result = ''
      local last_cons = ''
      local last_vowel = ''
      for i = 1, #word do
          local char = word:sub(i, i)
          if vowels:find(char) then
              last_vowel = char
          elseif cons:find(char) then
              if last_vowel ~= '' then
                  result = last_vowel
              end
              last_cons = char
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local vowel_distance = 0
      local word_length = string.len(word)
      for i = word_length, 1, -1 do
          local char = string.sub(word, i, i)
          if table.contains(vowels, char) then
              vowel_index = i
              break
          end
      end
      if vowel_index == 0 then
          return ''
      end
      for i = vowel_index, word_length do
          local char = string.sub(word, i, i)
          if not table.contains(vowels, char) then
              vowel_distance = i - vowel_index
              break
          end
      end
      if vowel_distance == 0 then
          return ''
      end
      return string.sub(word, vowel_index, vowel_index)
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          local char = word:sub(index, index)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              result = char
              break
          end
          index = index - 1
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local i = #word
      while i > 0 do
          local c = word:sub(i, i)
          if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then
              result = c
              break
          end
          i = i - 1
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local word_length = #word
      local consonant_count = 0
      for i = word_length, 1, -1 do
          local char = word:sub(i, i)
          if not table.contains(vowels, char) then
              consonant_count = consonant_count + 1
          else
              vowel_index = i
              break
          end
      end
      if consonant_count >= 2 then
          return word:sub(vowel_index, vowel_index)
      else
          return ''
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_length = string.len(word)
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      for i = 1, word_length do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  for k = i, word_length do
                      for l = 1, #consonants do
                          if word:sub(k, k) == consonants[l] then
                              closest_consonant_index = k
                              break
                          end
                      end
                      if closest_consonant_index ~= 0 then
                          break
                      end
                  end
                  for m = i, 1, -1 do
                      for n = 1, #consonants do
                          if word:sub(m, m) == consonants[n] then
                              closest_consonant_index_2 = m
                              break
                          end
                      end
                      if closest_consonant_index_2 ~= 0 then
                          break
                      end
                  end
                  if closest_consonant_index ~= 0 and closest_consonant_index_2 ~= 0 then
                      if closest_consonant_index - i < i - closest_consonant_index_2 then
                          closest_vowel = word:sub(i, i)
                          closest_vowel_index = i
                      end
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local min_distance = math.huge
      for i = 1, #word do
          local c = word:sub(i, i)
          if c:match('[aeiou]') then
              local distance = #word - i
              if distance < min_distance then
                  min_distance = distance
                  result = c
              end
          end
      end
      return result
  end
- |2-
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel = ''
      for i = #word, 1, -1 do
          if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then
              vowel = word:sub(i, i)
              break
          end
      end
      return vowel
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local last_consonant = nil
    local closest_vowel = nil
    for i = #word, 1, -1 do
      local char = word:sub(i, i)
      if not table.contains(vowels, char) then
        last_consonant = char
      elseif last_consonant then
        closest_vowel = char
        break
      end
    end
    return closest_vowel or ''
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          if table.indexof(vowels, word:sub(i, i)) then
              closest_vowel = word:sub(i, i)
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 0 then
          return ''
      end
      for i = closest_vowel_index, #word do
          if table.indexof(consonants, word:sub(i, i)) then
              closest_consonant_index = i
              break
          end
      end
      if closest_consonant_index == 0 then
          return ''
      end
      for i = closest_consonant_index, #word do
          if table.indexof(consonants, word:sub(i, i)) then
              closest_consonant_index = i
          else
              break
          end
      end
      if closest_vowel_index < closest_consonant_index then
          return closest_vowel
      else
          return ''
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if last_consonant ~= '' and last_vowel ~= '' then
              result = last_vowel
              break
          end
          if last_consonant == '' and not table.contains(vowels, char) then
              last_consonant = char
          end
          if last_vowel == '' and table.contains(vowels, char) then
              last_vowel = char
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      local last_consonant = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          else
              last_consonant = char
              break
          end
      end
      return last_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = string.len(word)
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local i = 1
      while i <= word_len do
          local char = string.sub(word, i, i)
          if table.contains(vowels, char) then
              local j = i - 1
              while j > 0 do
                  local char_2 = string.sub(word, j, j)
                  if table.contains(consonants, char_2) then
                      closest_consonant_index = j
                      break
                  end
                  j = j - 1
              end
              local k = i + 1
              while k <= word_len do
                  local char_3 = string.sub(word, k, k)
                  if table.contains(consonants, char_3) then
                      closest_consonant_index_2 = k
                      break
                  end
                  k = k + 1
              end
              if closest_consonant_index ~= 0 and closest_consonant_index_2 ~= 0 then
                  if closest_consonant_index_2 - i < i - closest_consonant_index then
                      closest_vowel = char
                      closest_vowel_index = i
                  end
              end
          end
          i = i + 1
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local word_length = string.len(word)
      local word_table = {}
      for i = 1, word_length do
          word_table[i] = string.sub(word, i, i)
      end
      for i = 1, word_length do
          for j = 1, #vowels do
              if word_table[i] == vowels[j] then
                  local vowel_index = i
                  local consonant_index = 0
                  for k = 1, word_length do
                      for l = 1, #consonants do
                          if word_table[k] == consonants[l] then
                              consonant_index = k
                              break
                          end
                      end
                      if consonant_index ~= 0 then
                          break
                      end
                  end
                  if consonant_index < vowel_index then
                      break
                  end
                  if closest_vowel_index == 0 then
                      closest_vowel_index = vowel_index
                      closest_consonant_index = consonant_index
                      closest_vowel = word_table[i]
                  elseif vowel_index < closest_vowel_index and vowel_index > closest_consonant_index then
                      closest_vowel_index = vowel_index
                      closest_consonant_index = consonant_index
                      closest_vowel = word_table[i]
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              last_vowel = word:sub(i, i)
              break
          end
      end
      return last_vowel
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_vowel_distance = 0
      local word_length = string.len(word)
      local word_index = word_length
      while word_index > 0 do
          local letter = string.sub(word, word_index, word_index)
          if table.contains(vowels, letter) then
              local distance = word_length - word_index
              if distance > closest_vowel_distance then
                  closest_vowel = letter
                  closest_vowel_index = word_index
                  closest_vowel_distance = distance
              end
          end
          word_index = word_index - 1
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_consonant = ''
      local closest_vowel = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if not table.contains(vowels, c) then
              last_consonant = c
          else
              if last_consonant ~= '' then
                  closest_vowel = c
                  break
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = #word
      local vowel_idx = 0
      local consonant_idx = 0
      for i = 1, word_len do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              vowel_idx = i
          elseif table.indexof(consonants, char) then
              consonant_idx = i
          end
          if vowel_idx > 0 and consonant_idx > 0 then
              break
          end
      end
      if vowel_idx > 0 and consonant_idx > 0 then
          return word:sub(vowel_idx, vowel_idx)
      else
          return ''
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = string.len(word)
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = 1, word_len do
          local char = string.sub(word, i, i)
          if table.contains(vowels, char) then
              vowel_index = i
          elseif table.contains(consonants, char) then
              consonant_index = i
          end
          if vowel_index > 0 and consonant_index > 0 then
              if vowel_index > consonant_index then
                  closest_vowel = char
                  break
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if last_consonant ~= '' and last_vowel ~= '' then
              result = last_vowel
              break
          end
          if table.contains(vowels, c) then
              last_vowel = c
          elseif table.contains(consonants, c) then
              last_consonant = c
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          if not table.contains(vowels, word:sub(index, index)) then
              if index < #word and table.contains(vowels, word:sub(index + 1, index + 1)) then
                  result = word:sub(index + 1, index + 1)
                  break
              end
          end
          index = index - 1
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowels_set = {}
      for _, v in ipairs(vowels) do
          vowels_set[v] = true
      end
      local last_consonant = nil
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if vowels_set[c] then
              if last_consonant then
                  return c
              end
          else
              last_consonant = c
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if table.contains(vowels, c) then
              last_vowel = c
              break
          end
      end
      return last_vowel
  end
- "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',
  'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',
  'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n
  \   local closest_consonant_index = 0\n    local closest_consonant_index_2 = 0\n
  \   local vowel_index = 0\n    local consonant_index = 0\n    local consonant_index_2
  = 0\n    local word_length = string.len(word)\n    local i = 0\n    local j = 0\n
  \   local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o
  = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local
  t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n    local
  y = 0\n    local z = 0\n    for i = 1, word_length do\n        for j = 1, 5 do\n
  \           if word[i] == vowels[j] then\n                vowel_index = i\n                for
  k = 1, 21 do\n                    if word[i - 1] == consonants[k] then\n                        consonant_index
  = i - 1\n                        for l = 1, 21 do\n                            if
  word[i + 1] == consonants[l] then\n                                consonant_index_2
  = i + 1\n                                if consonant_index_2 - consonant_index
  > closest_consonant_index_2 - closest_consonant_index then\n                                    closest_vowel
  = word[i]\n                                    closest_vowel_index = i\n                                    closest_consonant_index
  = consonant_index\n                                    closest_consonant_index_2
  = consonant_index_2\n                                end\n                            end\n
  \                       end\n                   "
- "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal consonants = {'b', 'c', 'd',
  'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',
  'y', 'z'}\n\tlocal vowel = ''\n\tlocal consonant = ''\n\tlocal result = ''\n\tfor
  i = 1, #word do\n\t\tlocal letter = word:sub(i, i)\n\t\tif table.indexof(vowels,
  letter) then\n\t\t\tvowel = letter\n\t\telseif table.indexof(consonants, letter)
  then\n\t\t\tconsonant = letter\n\t\tend\n\t\tif vowel ~= '' and consonant ~= ''
  then\n\t\t\tresult = vowel\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend"
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local vowel_distance = 0
      local distance = 0
      local last_vowel_index = 0
      for i = #word, 1, -1 do
          if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then
              vowel_index = i
              distance = #word - vowel_index
              if distance > vowel_distance then
                  vowel_distance = distance
                  last_vowel_index = vowel_index
              end
          end
      end
      if vowel_distance == 0 then
          return ''
      else
          return word:sub(last_vowel_index, last_vowel_index)
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local closest_vowel_distance = 0
      local closest_consonant_distance = 0
      local closest_consonant_distance_2 = 0
      local word_length = string.len(word)
      for i = 1, word_length do
          local letter = string.sub(word, i, i)
          for j = 1, #vowels do
              if letter == vowels[j] then
                  closest_vowel = letter
                  closest_vowel_index = i
                  break
              end
          end
          for j = 1, #consonants do
              if letter == consonants[j] then
                  closest_consonant_index = i
                  break
              end
          end
          if closest_vowel_index ~= 0 and closest_consonant_index ~= 0 then
              closest_vowel_distance = closest_vowel_index - closest_consonant_index
              if closest_vowel_distance > 0 then
                  if closest_vowel_distance > closest_consonant_distance then
                      closest_consonant_distance = closest_vowel_distance
                      closest_consonant_index_2 = closest_consonant_index
                  end
              end
          end
      end
      for i = 1, word_length do
          local letter = string.sub(word, i, i)
          for j = 1, #vowels do
              if letter == vowels[j] then
                  closest_vowel = letter
                  closest_vowel_index =
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          elseif last_vowel ~= '' then
              result = last_vowel
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = 1, #word do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
              end
          end
          for k = 1, #consonants do
              if word[i] == consonants[k] then
                  consonant_index = i
              end
          end
          if vowel_index > consonant_index then
              closest_vowel = word[vowel_index]
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_pos = 0
      local word_len = string.len(word)
      for i = word_len, 1, -1 do
          local char = string.sub(word, i, i)
          if table.contains(vowels, char) then
              closest_vowel = char
              closest_vowel_pos = i
              break
          end
      end
      if closest_vowel_pos == 0 then
          return ''
      end
      for i = closest_vowel_pos - 1, 1, -1 do
          local char = string.sub(word, i, i)
          if not table.contains(vowels, char) then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_vowel_index = 0
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              last_vowel_index = i
              break
          end
      end
      for i = last_vowel_index, 1, -1 do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              if i > 1 and not table.indexof(vowels, word:sub(i - 1, i - 1)) then
                  result = char
                  break
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local word_length = string.len(word)
      for i = word_length, 1, -1 do
          local char = string.sub(word, i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              vowel_index = i
              break
          end
      end
      if vowel_index == 0 then
          return ''
      end
      local vowel = string.sub(word, vowel_index, vowel_index)
      local left_char = string.sub(word, vowel_index - 1, vowel_index - 1)
      local right_char = string.sub(word, vowel_index + 1, vowel_index + 1)
      if left_char ~= 'a' and left_char ~= 'e' and left_char ~= 'i' and left_char ~= 'o' and left_char ~= 'u' and right_char ~= 'a' and right_char ~= 'e' and right_char ~= 'i' and right_char ~= 'o' and right_char ~= 'u' then
          return vowel
      else
          return ''
      end
  end
- |2-
      -- YOUR CODE HERE
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  last_vowel = word:sub(i, i)
                  break
              end
          end
          if last_vowel ~= '' then
              break
          end
      end
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  return word:sub(i, i)
              end
          end
          if word:sub(i, i) ~= last_vowel then
              break
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_distance = math.huge
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              local distance = #word - i
              if distance < closest_distance then
                  closest_distance = distance
                  closest_vowel = char
              end
          end
      end
      return closest_vowel
  end
- |2-
      -- TODO: Implement this function.
      -- Hint: Use string.find() to find the first vowel from the right side.
      --       Use string.find() to find the first consonant from the right side.
      --       Use string.sub() to get the substring between the vowel and the consonant.
      --       Use string.find() to find the closest vowel in the substring.
      --       Use string.sub() to get the closest vowel.
      --       Use string.len() to get the length of the substring.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.sub() to get the closest vowel from the right side.
      --       Use string.reverse() to reverse the substring.
      --       Use string.find() to find the closest vowel in the reversed substring.
      --       Use string.sub() to get the closest vowel.
      --       Use string.len() to get the length of the substring.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.sub() to get the closest vowel from the left side.
      --       Use string.reverse() to reverse the closest vowel.
      --       Use string.sub() to get the closest vowel from the right side.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.sub() to get the closest vowel from the right side.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.sub() to get the closest vowel from the right side.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.sub() to get the closest vowel from the right side.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.len() to get the length of the closest vowel.
      --       Use string.sub() to
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local prev_char = ''
      local vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if prev_char ~= '' and table.contains(vowels, char) then
              vowel = char
              break
          end
          prev_char = char
      end
      return vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          local ch = word:sub(index, index)
          if table.indexof(vowels, ch) then
              if index == #word then
                  return ''
              elseif index == 1 then
                  return ''
              else
                  local prev = word:sub(index - 1, index - 1)
                  local next = word:sub(index + 1, index + 1)
                  if not table.indexof(vowels, prev) and not table.indexof(vowels, next) then
                      return ch
                  end
              end
          end
          index = index - 1
      end
      return result
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local result = ''
    local index = #word
    while index > 0 do
      local char = word:sub(index, index)
      if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
        result = char
        break
      end
      index = index - 1
    end
    return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.index_of(vowels, char) then
              last_vowel = char
          else
              if last_vowel ~= '' then
                  return last_vowel
              end
              last_consonant = char
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = #word
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = 1, word_len do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              if i == 1 then
                  if word:sub(i + 1, i + 1) == 'b' or word:sub(i + 1, i + 1) == 'c' or word:sub(i + 1, i + 1) == 'd' or word:sub(i + 1, i + 1) == 'f' or word:sub(i + 1, i + 1) == 'g' or word:sub(i + 1, i + 1) == 'h' or word:sub(i + 1, i + 1) == 'j' or word:sub(i + 1, i + 1) == 'k' or word:sub(i + 1, i + 1) == 'l' or word:sub(i + 1, i + 1) == 'm' or word:sub(i + 1, i + 1) == 'n' or word:sub(i + 1, i + 1) == 'p' or word:sub(i + 1, i + 1) == 'q' or word:sub(i + 1, i + 1) == 'r' or word:sub(i + 1, i + 1) == 's' or word:sub(i + 1, i + 1) == 't' or word:sub(i + 1, i + 1) == 'v' or word:sub(i + 1, i + 1) == 'w' or word:sub(i + 1, i + 1) == '
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = -1
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              closest_vowel = char
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == -1 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              return ''
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              vowel_index = i
          elseif table.contains(consonants, char) then
              consonant_index = i
              break
          end
      end
      if vowel_index > consonant_index then
          closest_vowel = word:sub(vowel_index, vowel_index)
      end
      return closest_vowel
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local i = #word
      local vowel = ''
      while i > 0 do
          local c = word:sub(i, i)
          if table.contains(vowels, c) then
              vowel = c
          elseif table.contains(consonants, c) then
              if vowel ~= '' then
                  return vowel
              end
          end
          i = i - 1
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = #word
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = 1, word_len do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              if i > 1 and i < word_len then
                  local prev_char = word:sub(i - 1, i - 1)
                  local next_char = word:sub(i + 1, i + 1)
                  if table.indexof(consonants, prev_char) and table.indexof(consonants, next_char) then
                      if closest_vowel_index == 0 then
                          closest_vowel = char
                          closest_vowel_index = i
                      else
                          if i > closest_vowel_index then
                              closest_vowel = char
                              closest_vowel_index = i
                          end
                      end
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local closest_vowel = ''
    local closest_distance = math.huge
    for i = 1, #word do
      local char = word:sub(i, i)
      if char:match('[aeiou]') then
        local distance = #word - i
        if distance < closest_distance then
          closest_distance = distance
          closest_vowel = char
        end
      end
    end
    return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_distance = 0
      local distance = 0
      for i = 1, #word do
          local letter = word:sub(i, i)
          if table.contains(vowels, letter) then
              distance = 0
              for j = i, 1, -1 do
                  local letter = word:sub(j, j)
                  if table.contains(consonants, letter) then
                      distance = i - j
                      break
                  end
              end
              if distance > closest_vowel_distance then
                  closest_vowel = letter
                  closest_vowel_distance = distance
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local prev_char = ''
      local next_char = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              if prev_char == '' then
                  break
              end
              if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then
                  break
              end
              if next_char == '' then
                  break
              end
              if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then
                  break
              end
              result = char
              break
          end
          prev_char = char
          next_char = word:sub(i + 1, i + 1)
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local word_len = #word
      for i = word_len, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              if i == word_len then
                  break
              end
              local next_char = word:sub(i + 1, i + 1)
              if next_char == 'b' or next_char == 'c' or next_char == 'd' or next_char == 'f' or next_char == 'g' or next_char == 'h' or next_char == 'j' or next_char == 'k' or next_char == 'l' or next_char == 'm' or next_char == 'n' or next_char == 'p' or next_char == 'q' or next_char == 'r' or next_char == 's' or next_char == 't' or next_char == 'v' or next_char == 'w' or next_char == 'x' or next_char == 'y' or next_char == 'z' then
                  result = char
                  break
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_vowel = ''
      local last_consonant = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if table.contains(vowels, c) then
              last_vowel = c
          else
              last_consonant = c
          end
          if last_vowel ~= '' and last_consonant ~= '' then
              result = last_vowel
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_consonant = nil
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if not table.contains(vowels, char) then
              last_consonant = i
          elseif last_consonant then
              return char
          end
      end
      return ''
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then
              closest_vowel = char
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 0 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          local char = word:sub(i, i)
          if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u' then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
              break
          end
      end
      for i = vowel_index, 1, -1 do
          if table.contains(consonants, word:sub(i, i)) then
              consonant_index = i
              break
          end
      end
      if vowel_index > 0 and consonant_index > 0 then
          closest_vowel = word:sub(vowel_index, vowel_index)
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              last_vowel = word:sub(i, i)
              break
          end
      end
      return last_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = nil
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
              break
          end
      end
      if vowel_index then
          local prev_char = word:sub(vowel_index - 1, vowel_index - 1)
          local next_char = word:sub(vowel_index + 1, vowel_index + 1)
          if prev_char and next_char and not table.contains(vowels, prev_char) and not table.contains(vowels, next_char) then
              return word:sub(vowel_index, vowel_index)
          end
      end
      return ''
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- your code here
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel = ''
      local consonant = ''
      local result = ''
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  vowel = word:sub(i, i)
              end
          end
          for j = 1, #consonants do
              if word:sub(i, i) == consonants[j] then
                  consonant = word:sub(i, i)
              end
          end
          if vowel ~= '' and consonant ~= '' then
              result = vowel
              break
          end
          vowel = ''
          consonant = ''
      end
      return result
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local closest_vowel = ''
    local closest_index = 0
    for i = #word, 1, -1 do
      local char = word:sub(i, i)
      if table.indexof(vowels, char) then
        closest_vowel = char
        closest_index = i
        break
      end
    end
    if closest_index == 0 then
      return ''
    end
    for i = closest_index - 1, 1, -1 do
      local char = word:sub(i, i)
      if not table.indexof(vowels, char) then
        return closest_vowel
      end
    end
    return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          if table.indexof(vowels, word:sub(i, i)) then
              last_vowel = word:sub(i, i)
              break
          end
      end
      for i = #word, 1, -1 do
          if table.indexof(vowels, word:sub(i, i)) then
              if last_vowel ~= word:sub(i, i) then
                  return word:sub(i, i)
              end
          end
      end
      return ''
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- your code here
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local cons = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest = ''
      local closest_dist = math.huge
      for i = 1, #word do
          local c = word:sub(i, i)
          if table.contains(vowels, c) then
              local prev = word:sub(i - 1, i - 1)
              local next = word:sub(i + 1, i + 1)
              if table.contains(cons, prev) and table.contains(cons, next) then
                  local dist = i - 1
                  if dist < closest_dist then
                      closest_dist = dist
                      closest = c
                  end
              end
          end
      end
      return closest
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          if table.contains(vowels, word:sub(i, i)) then
              closest_vowel = word:sub(i, i)
              closest_vowel_index = i
              for j = i, 1, -1 do
                  if table.contains(consonants, word:sub(j, j)) then
                      closest_consonant_index = j
                      break
                  end
              end
              for j = i, #word do
                  if table.contains(consonants, word:sub(j, j)) then
                      if j - closest_vowel_index < closest_vowel_index - closest_consonant_index then
                          closest_vowel = word:sub(i, i)
                          closest_vowel_index = i
                          closest_consonant_index = j
                      end
                      break
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then
              closest_vowel = word:sub(i, i)
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 1 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          if word:sub(i, i) ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o' and word:sub(i, i) ~= 'u' then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local word_len = #word
      local vowel_pos = -1
      for i = word_len, 1, -1 do
          if not is_consonant(word:sub(i, i)) then
              vowel_pos = i
              break
          end
      end
      if vowel_pos == -1 then
          return ''
      end
      local vowel = word:sub(vowel_pos, vowel_pos)
      for i = 1, #vowels do
          if vowel == vowels[i] then
              return vowel
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if last_consonant ~= '' and last_vowel ~= '' then
              result = last_vowel
              break
          end
          if char == last_consonant then
              last_consonant = ''
          elseif char == last_vowel then
              last_vowel = ''
          elseif table.contains(vowels, char) then
              last_vowel = char
          else
              last_consonant = char
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = -1
      local closest_consonant_index = -1
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              closest_vowel = char
              closest_vowel_index = i
          elseif closest_vowel_index > 0 then
              closest_consonant_index = i
              break
          end
      end
      if closest_vowel_index > 0 and closest_consonant_index > 0 then
          return closest_vowel
      end
      return ''
  end
- |2-
      -- YOUR CODE HERE
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_table = {}
      local word_table_vowel = {}
      local word_table_consonant = {}
      local word_table_vowel_consonant = {}
      local word_table_consonant_vowel = {}
      local word_table_vowel_consonant_vowel = {}
      local word_table_consonant_vowel_consonant = {}
      local word_table_vowel_consonant_vowel_consonant = {}
      local word_table_consonant_vowel_consonant_vowel = {}
      local word_table_vowel_consonant_vowel_consonant_vowel = {}
      local word_table_consonant_vowel_consonant_vowel_consonant = {}
      local word_table_vowel_consonant_vowel_consonant_vowel_consonant = {}
      local word_table_consonant_vowel_consonant_vowel_consonant_vowel = {}
      local word_table_vowel_consonant_vowel_consonant_vowel_consonant_vowel = {}
      local word_table_consonant_vowel_consonant_vowel_consonant_vowel_consonant = {}
      local word_table_vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant = {}
      local word_table_consonant_vowel_consonant_vowel_consonant_v
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then
              closest_vowel = word:sub(i, i)
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 0 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          if word:sub(i, i) ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o' and word:sub(i, i) ~= 'u' then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
      local vowels = 'aeiouAEIOU'
      local consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
      local closest_vowel = ''
      local closest_vowel_distance = 0
      local distance = 0
      for i = 1, #word do
          if string.find(vowels, word:sub(i, i)) then
              distance = 0
              for j = i, #word do
                  if string.find(consonants, word:sub(j, j)) then
                      distance = distance + 1
                  elseif string.find(vowels, word:sub(j, j)) then
                      break
                  end
              end
              if distance > closest_vowel_distance then
                  closest_vowel_distance = distance
                  closest_vowel = word:sub(i, i)
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      local closest_distance = 0
      for i = 1, #word do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
              for j = i, #word do
                  if table.contains(consonants, word:sub(j, j)) then
                      consonant_index = j
                      if closest_distance == 0 or closest_distance > consonant_index - vowel_index then
                          closest_distance = consonant_index - vowel_index
                          closest_vowel = word:sub(vowel_index, vowel_index)
                      end
                  end
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = #word, 1, -1 do
          if vowel_index == 0 and consonant_index == 0 then
              for j = 1, #vowels do
                  if word:sub(i, i) == vowels[j] then
                      vowel_index = i
                  end
              end
              for j = 1, #consonants do
                  if word:sub(i, i) == consonants[j] then
                      consonant_index = i
                  end
              end
          elseif vowel_index ~= 0 and consonant_index == 0 then
              for j = 1, #consonants do
                  if word:sub(i, i) == consonants[j] then
                      consonant_index = i
                  end
              end
          elseif vowel_index == 0 and consonant_index ~= 0 then
              for j = 1, #vowels do
                  if word:sub(i, i) == vowels[j] then
                      vowel_index = i
                  end
              end
          end
          if vowel_index ~= 0 and consonant_index ~= 0 then
              closest_vowel = word:sub(vowel_index, vowel_index)
              break
          end
      end
      return closest_vowel
  end
- |2-
      local vowel = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = {}
      local word_len = #word
      for i = 1, word_len do
          if table.indexof(vowel, word:sub(i, i)) then
              vowel_index[#vowel_index + 1] = i
          end
      end
      local vowel_len = #vowel_index
      if vowel_len == 0 then
          return ''
      end
      local closest_vowel = ''
      local closest_distance = 0
      for i = 1, vowel_len do
          local distance = word_len - vowel_index[i]
          if closest_distance == 0 or distance < closest_distance then
              closest_distance = distance
              closest_vowel = word:sub(vowel_index[i], vowel_index[i])
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = -1
      for i = 1, #word do
          local letter = word:sub(i, i)
          if table.contains(vowels, letter) then
              if i > closest_vowel_index then
                  closest_vowel = letter
                  closest_vowel_index = i
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local vowel_index = 0
      local consonant_index = 0
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
                  break
              end
          end
          for j = 1, #consonants do
              if word[i] == consonants[j] then
                  consonant_index = i
                  break
              end
          end
          if vowel_index ~= 0 and consonant_index ~= 0 then
              if vowel_index > consonant_index then
                  result = word[vowel_index]
                  break
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              vowel_index = i
              break
          end
      end
      if vowel_index == 0 then
          return ''
      end
      local prev_char = word:sub(vowel_index - 1, vowel_index - 1)
      local next_char = word:sub(vowel_index + 1, vowel_index + 1)
      if not table.contains(vowels, prev_char) and not table.contains(vowels, next_char) then
          return word:sub(vowel_index, vowel_index)
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local vowel_index = 0
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
                  break
              end
          end
          if vowel_index ~= 0 then
              break
          end
      end
      if vowel_index ~= 0 then
          for i = vowel_index, 1, -1 do
              for j = 1, #vowels do
                  if word[i] == vowels[j] then
                      result = word[i]
                      break
                  end
              end
              if result ~= '' then
                  break
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          else
              if last_vowel ~= '' then
                  result = last_vowel
                  break
              end
              last_consonant = char
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              closest_vowel = word:sub(i, i)
              closest_vowel_index = i
              break
          end
      end
      for i = closest_vowel_index, 1, -1 do
          if table.contains(consonants, word:sub(i, i)) then
              closest_consonant_index = i
              break
          end
      end
      if closest_vowel_index > closest_consonant_index then
          return closest_vowel
      else
          return ''
      end
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if table.contains(vowels, c) then
              last_vowel = c
          elseif table.contains(consonants, c) then
              if last_vowel ~= '' then
                  result = last_vowel
                  break
              end
              last_consonant = c
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local last_consonant = ''
      local last_vowel = ''
      for i = 1, #word do
          for _, v in ipairs(vowels) do
              if word[i] == v then
                  last_vowel = v
              end
          end
          for _, v in ipairs(consonants) do
              if word[i] == v then
                  last_consonant = v
              end
          end
      end
      if last_consonant ~= '' and last_vowel ~= '' then
          result = last_vowel
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local word_length = string.len(word)
      for i = 1, word_length do
          local current_letter = string.sub(word, i, i)
          if table.contains(vowels, current_letter) then
              closest_vowel = current_letter
              closest_vowel_index = i
          end
          if table.contains(consonants, current_letter) then
              closest_consonant_index = i
          end
          if closest_vowel_index > closest_consonant_index then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local prev_vowel = ''
      local prev_consonant = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              prev_vowel = char
          else
              if prev_vowel ~= '' then
                  return prev_vowel
              end
              prev_consonant = char
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = #word
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      for i = word_len, 1, -1 do
          local char = word:sub(i, i)
          if vowel_index == 0 and table.contains(vowels, char) then
              vowel_index = i
          end
          if consonant_index == 0 and table.contains(consonants, char) then
              consonant_index = i
          end
          if vowel_index ~= 0 and consonant_index ~= 0 then
              closest_vowel = word:sub(vowel_index, vowel_index)
              break
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              vowel_index = i
              if vowel_index > consonant_index and vowel_index - consonant_index > closest_vowel_index - closest_consonant_index then
                  closest_vowel = char
                  closest_vowel_index = vowel_index
                  closest_consonant_index = consonant_index
              end
          else
              consonant_index = i
          end
      end
      return closest_vowel
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local closest_vowel = ''
    local closest_index = 0
    for i = #word, 1, -1 do
      local char = word:sub(i, i)
      if char:match('[aeiou]') then
        closest_vowel = char
        closest_index = i
        break
      end
    end
    for i = closest_index - 1, 1, -1 do
      local char = word:sub(i, i)
      if char:match('[^aeiou]') then
        return closest_vowel
      end
    end
    return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      local last_consonant = ''
      for i = #word, 1, -1 do
          local c = word:sub(i, i)
          if last_vowel == '' and last_consonant ~= '' then
              for _, v in ipairs(vowels) do
                  if c == v then
                      last_vowel = c
                      break
                  end
              end
          elseif last_vowel ~= '' and last_consonant == '' then
              for _, v in ipairs(vowels) do
                  if c == v then
                      return last_vowel
                  end
              end
              last_consonant = c
          elseif last_vowel == '' and last_consonant == '' then
              for _, v in ipairs(vowels) do
                  if c == v then
                      last_vowel = c
                      break
                  end
              end
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              if closest_vowel_index == 0 then
                  closest_vowel_index = i
              end
          elseif table.contains(consonants, char) then
              if closest_vowel_index > 0 and closest_consonant_index == 0 then
                  closest_consonant_index = i
              end
          end
      end
      if closest_vowel_index > 0 and closest_consonant_index > 0 then
          closest_vowel = word:sub(closest_vowel_index, closest_vowel_index)
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local vowel_index = 0
      local vowel_distance = 0
      local word_length = string.len(word)
      for i = word_length, 1, -1 do
          local letter = string.sub(word, i, i)
          if vowel_index == 0 then
              for j = 1, #vowels do
                  if letter == vowels[j] then
                      vowel_index = i
                      vowel_distance = word_length - i
                  end
              end
          else
              for j = 1, #vowels do
                  if letter == vowels[j] then
                      if word_length - i < vowel_distance then
                          vowel_index = i
                          vowel_distance = word_length - i
                      end
                  end
              end
          end
      end
      return string.sub(word, vowel_index, vowel_index)
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local closest_vowel = ''
    local closest_vowel_index = -1
    for i = #word, 1, -1 do
      for _, v in ipairs(vowels) do
        if word:sub(i, i) == v then
          closest_vowel = v
          closest_vowel_index = i
          break
        end
      end
      if closest_vowel_index ~= -1 then
        break
      end
    end
    if closest_vowel_index == 1 or closest_vowel_index == #word then
      return ''
    end
    if closest_vowel_index == -1 then
      return ''
    end
    for i = closest_vowel_index - 1, 1, -1 do
      for _, v in ipairs(vowels) do
        if word:sub(i, i) == v then
          return ''
        end
      end
    end
    return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              last_vowel = word:sub(i, i)
              break
          end
      end
      return last_vowel
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
    local closest_vowel = ''
    local closest_vowel_index = 0
    local closest_consonant_index = 0
    local word_length = string.len(word)
    for i = 1, word_length do
      local current_letter = string.sub(word, i, i)
      if (current_letter == 'a' or current_letter == 'e' or current_letter == 'i' or current_letter == 'o' or current_letter == 'u') then
        local previous_letter = string.sub(word, i - 1, i - 1)
        local next_letter = string.sub(word, i + 1, i + 1)
        if (previous_letter == 'b' or previous_letter == 'c' or previous_letter == 'd' or previous_letter == 'f' or previous_letter == 'g' or previous_letter == 'h' or previous_letter == 'j' or previous_letter == 'k' or previous_letter == 'l' or previous_letter == 'm' or previous_letter == 'n' or previous_letter == 'p' or previous_letter == 'q' or previous_letter == 'r' or previous_letter == 's' or previous_letter == 't' or previous_letter == 'v' or previous_letter == 'w' or previous_letter == 'x' or previous_letter == 'y' or previous_letter == 'z') and (next_letter == 'b' or next_letter == 'c' or next_letter == 'd' or next_letter == 'f' or next_letter == 'g' or next_letter == 'h' or next_letter == 'j' or next_letter == 'k' or next_letter == 'l' or next_letter == 'm' or next_letter
- |2-
      local vowel = {'a', 'e', 'i', 'o', 'u'}
      local index = #word
      while index > 0 do
          if not vowel[word:sub(index, index)] then
              local i = index - 1
              while i > 0 do
                  if vowel[word:sub(i, i)] then
                      return word:sub(i, i)
                  end
                  i = i - 1
              end
          end
          index = index - 1
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = 0
      for i = #word, 1, -1 do
          if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then
              index = i
              break
          end
      end
      if index == 0 then
          return ''
      end
      for i = index, 1, -1 do
          if word:sub(i, i) ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o' and word:sub(i, i) ~= 'u' then
              result = word:sub(index, index)
              break
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      local closest_vowel = ''
      local closest_distance = 0
      for i = 1, #word do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
                  break
              end
          end
          for j = 1, #consonants do
              if word[i] == consonants[j] then
                  consonant_index = i
                  break
              end
          end
          if vowel_index ~= 0 and consonant_index ~= 0 then
              if closest_distance == 0 then
                  closest_distance = consonant_index - vowel_index
                  closest_vowel = word[vowel_index]
              elseif consonant_index - vowel_index < closest_distance then
                  closest_distance = consonant_index - vowel_index
                  closest_vowel = word[vowel_index]
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local vowel_index = 0
      local consonant_index = 0
      local i = #word
      while i > 0 do
          local char = word:sub(i, i)
          if table.indexof(vowels, char) then
              vowel_index = i
          elseif table.indexof(consonants, char) then
              consonant_index = i
              break
          end
          i = i - 1
      end
      if vowel_index > consonant_index then
          result = word:sub(vowel_index, vowel_index)
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = -1
      local closest_consonant_index = -1
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              if closest_vowel_index == -1 then
                  closest_vowel_index = i
              end
          elseif table.contains(consonants, char) then
              if closest_vowel_index ~= -1 and closest_consonant_index == -1 then
                  closest_consonant_index = i
              end
          end
      end
      if closest_vowel_index ~= -1 and closest_consonant_index ~= -1 then
          closest_vowel = word:sub(closest_vowel_index, closest_vowel_index)
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              closest_vowel = char
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 0 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          local char = word:sub(i, i)
          if not table.contains(vowels, char) then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = string.len(word)
      local vowel_index = 0
      local consonant_index = 0
      local vowel_found = false
      local consonant_found = false
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_vowel_distance = 0
      for i = word_len, 1, -1 do
          local char = string.sub(word, i, i)
          if vowel_found == false then
              for j = 1, #vowels do
                  if char == vowels[j] then
                      vowel_found = true
                      vowel_index = i
                  end
              end
          end
          if consonant_found == false then
              for j = 1, #consonants do
                  if char == consonants[j] then
                      consonant_found = true
                      consonant_index = i
                  end
              end
          end
          if vowel_found == true and consonant_found == true then
              if closest_vowel_distance == 0 then
                  closest_vowel_distance = consonant_index - vowel_index
                  closest_vowel_index = vowel_index
                  closest_vowel = string.sub(word, vowel_index, vowel_index)
              else
                  if consonant_index - vowel_index < closest_vowel_distance then
                      closest_vowel_distance = consonant_index - vowel_index
                      closest_vowel_index = vowel_index
                      closest_vowel = string.sub(word, vowel_index, vowel_index)
                  end
              end
              vowel_found = false
              consonant_found = false
          end
      end
      return closest_vowel
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local vowel_index = 0
    for i = #word, 1, -1 do
      for j = 1, #vowels do
        if word:sub(i, i) == vowels[j] then
          vowel_index = i
          break
        end
      end
      if vowel_index ~= 0 then
        break
      end
    end
    if vowel_index == 0 then
      return ''
    end
    local closest_vowel = ''
    local closest_vowel_index = 0
    for i = vowel_index, 1, -1 do
      for j = 1, #vowels do
        if word:sub(i, i) == vowels[j] then
          closest_vowel = word:sub(i, i)
          closest_vowel_index = i
          break
        end
      end
      if closest_vowel_index ~= 0 then
        break
      end
    end
    return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local last_vowel = ''
      for i = #word, 1, -1 do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
              break
          end
      end
      return last_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          for _, v in ipairs(vowels) do
              if word:sub(i, i) == v then
                  closest_vowel = v
                  closest_vowel_index = i
                  break
              end
          end
          if closest_vowel_index ~= 0 then
              break
          end
      end
      if closest_vowel_index == 1 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          for _, v in ipairs(vowels) do
              if word:sub(i, i) == v then
                  return ''
              end
          end
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  for k = 1, #consonants do
                      if word[i - 1] == consonants[k] and word[i + 1] == consonants[k] then
                          result = word[i]
                          break
                      end
                  end
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      local closest_consonant_index = 0
      local closest_consonant_index_2 = 0
      local word_length = string.len(word)
      for i = 1, word_length do
          local letter = string.sub(word, i, i)
          if table.contains(vowels, letter) then
              closest_vowel = letter
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 0 then
          return ''
      end
      for i = closest_vowel_index, word_length do
          local letter = string.sub(word, i, i)
          if table.contains(consonants, letter) then
              closest_consonant_index = i
              break
          end
      end
      for i = closest_consonant_index, word_length do
          local letter = string.sub(word, i, i)
          if table.contains(consonants, letter) then
              closest_consonant_index_2 = i
              break
          end
      end
      if closest_consonant_index_2 == 0 then
          return ''
      end
      return closest_vowel
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local vowel_index = 0
      local consonant_index = 0
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  vowel_index = i
                  break
              end
          end
          for j = 1, #consonants do
              if word[i] == consonants[j] then
                  consonant_index = i
                  break
              end
          end
          if vowel_index > 0 and consonant_index > 0 then
              return word[vowel_index]
          end
      end
      return ''
  end
- |2-
    -- your code here
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local prev_char = ''
      local next_char = ''
      local result = ''
      for i = #word, 1, -1 do
          if prev_char == '' then
              prev_char = word:sub(i, i)
          elseif next_char == '' then
              next_char = word:sub(i, i)
          end
          if prev_char ~= '' and next_char ~= '' then
              if table.contains(vowels, prev_char) and table.contains(consonants, next_char) then
                  result = prev_char
                  break
              elseif table.contains(consonants, prev_char) and table.contains(vowels, next_char) then
                  result = next_char
                  break
              else
                  prev_char = next_char
                  next_char = ''
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local word_len = #word
      local vowel_pos = 0
      local consonant_pos = 0
      local closest_vowel = ''
      for i = 1, word_len do
          local letter = word:sub(i, i)
          if table.contains(vowels, letter) then
              vowel_pos = i
          elseif table.contains(consonants, letter) then
              consonant_pos = i
          end
          if vowel_pos > 0 and consonant_pos > 0 then
              if vowel_pos > consonant_pos then
                  closest_vowel = letter
                  break
              end
          end
      end
      return closest_vowel
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- YOUR CODE HERE
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local index = 0
      local flag = false
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word[i] == vowels[j] then
                  flag = true
                  break
              end
          end
          if flag then
              index = i
              break
          end
      end
      if index ~= 0 then
          for i = index, 1, -1 do
              for j = 1, #consonants do
                  if word[i] == consonants[j] then
                      flag = true
                      break
                  end
              end
              if flag then
                  break
              end
          end
          if flag then
              for i = index, #word do
                  for j = 1, #consonants do
                      if word[i] == consonants[j] then
                          flag = true
                          break
                      end
                  end
                  if flag then
                      break
                  end
              end
              if flag then
                  result = word[index]
              end
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local result = ''
      local index = #word
      while index > 0 do
          local char = word:sub(index, index)
          if table.contains(vowels, char) then
              result = char
              break
          end
          index = index - 1
      end
      return result
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
    local closest_vowel = ''
    local prev_char = ''
    local curr_char = ''
    local next_char = ''
    local prev_char_is_consonant = false
    local curr_char_is_consonant = false
    local next_char_is_consonant = false
    local prev_char_is_vowel = false
    local curr_char_is_vowel = false
    local next_char_is_vowel = false
    for i = 1, #word do
      prev_char = curr_char
      curr_char = next_char
      next_char = word:sub(i, i)
      prev_char_is_consonant = false
      curr_char_is_consonant = false
      next_char_is_consonant = false
      prev_char_is_vowel = false
      curr_char_is_vowel = false
      next_char_is_vowel = false
      for j = 1, #vowels do
        if prev_char == vowels[j] then
          prev_char_is_vowel = true
        end
        if curr_char == vowels[j] then
          curr_char_is_vowel = true
        end
        if next_char == vowels[j] then
          next_char_is_vowel = true
        end
      end
      for j = 1, #consonants do
        if prev_char == consonants[j] then
          prev_char_is_consonant = true
        end
        if curr_char == consonants[j] then
          curr_char_is_consonant = true
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
      local result = ''
      local last_vowel = ''
      local last_consonant = ''
      for i = 1, #word do
          local char = word:sub(i, i)
          if table.contains(vowels, char) then
              last_vowel = char
          elseif table.contains(consonants, char) then
              if last_vowel ~= '' then
                  result = last_vowel
              end
              last_consonant = char
          end
      end
      return result
  end
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          if table.contains(vowels, word:sub(i, i)) then
              closest_vowel = word:sub(i, i)
              closest_vowel_index = i
              break
          end
      end
      if closest_vowel_index == 0 then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          if not table.contains(vowels, word:sub(i, i)) then
              return closest_vowel
          end
      end
      return ''
  end
- |2-
    local vowels = {'a', 'e', 'i', 'o', 'u'}
    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}
    local word_table = {}
    local word_table_vowels = {}
    local word_table_consonants = {}
    local word_table_vowels_index = {}
    local word_table_consonants_index = {}
    local word_table_vowels_index_diff = {}
    local word_table_consonants_index_diff = {}
    local word_table_vowels_index_diff_min = {}
    local word_table_consonants_index_diff_min = {}
    local word_table_vowels_index_diff_min_index = {}
    local word_table_consonants_index_diff_min_index = {}
    local word_table_vowels_index_diff_min_index_value = {}
    local word_table_consonants_index_diff_min_index_value = {}
    local word_table_vowels_index_diff_min_index_value_index = {}
    local word_table_consonants_index_diff_min_index_value_index = {}
    local word_table_vowels_index_diff_min_index_value_index_value = {}
    local word_table_consonants_index_diff_min_index_value_index_value = {}
    local word_table_vowels_index_diff_min_index_value_index_value_index = {}
    local word_table_consonants_index_diff_min_index_value_index_value_index = {}
    local word_table_vowels_index_diff_min_index_value_index_value_index_value = {}
    local word_table_consonants_index_diff_min_index_value
- |2-
      local vowels = {'a', 'e', 'i', 'o', 'u'}
      local closest_vowel = ''
      local closest_vowel_index = 0
      for i = #word, 1, -1 do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  closest_vowel = word:sub(i, i)
                  closest_vowel_index = i
                  break
              end
          end
          if closest_vowel_index ~= 0 then
              break
          end
      end
      if closest_vowel_index == 1 or closest_vowel_index == #word then
          return ''
      end
      for i = closest_vowel_index - 1, 1, -1 do
          for j = 1, #vowels do
              if word:sub(i, i) == vowels[j] then
                  return ''
              end
          end
      end
      return closest_vowel
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
