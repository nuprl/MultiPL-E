name: HumanEval_118_get_closest_vowel
language: lua
prompt: "-- You are given a word. Your task is to find the closest vowel that stands\
  \ between \n-- two consonants from the right side of the word (case sensitive).\n\
  -- Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n-- find any vowel met the above condition. \n-- You may assume that the\
  \ given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
  -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
  -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
  \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
  \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
  \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
  \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
  \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
  \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
  \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- TODO: implement this function\nend", "    -- your code here\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local word_len = string.len(word)\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index =\
    \ 0\n    local closest_consonant_index_2 = 0\n    local closest_vowel_index_2\
    \ = 0\n    local closest_vowel_index_3 = 0\n    local closest_consonant_index_3\
    \ = 0\n    for i = 1, word_len do\n        for j = 1, #vowels do\n           \
    \ if word:sub(i, i) == vowels[j] then\n                closest_vowel_index = i\n\
    \                closest_vowel = vowels[j]\n            end\n        end\n   \
    \     for k = 1, #consonants do\n            if word:sub(i, i) == consonants[k]\
    \ then\n                closest_consonant_index = i\n            end\n       \
    \ end\n        if closest_vowel_index > closest_consonant_index then\n       \
    \     closest_vowel_index_2 = closest_vowel_index\n            closest_consonant_index_2\
    \ = closest_consonant_index\n        end\n        if closest_vowel_index_2 > closest_vowel_index_3\
    \ then\n            closest_vowel_index_3 = closest_vowel_index_2\n          \
    \  closest_consonant_index_3 = closest_consonant_index_2\n        end\n    end\n\
    \    if closest_vowel_index_3 > closest_consonant_index_3 then\n        return\
    \ closest_vowel\n    else\n        return ''\n    end\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local result = ''\n    local vowel_index = 0\n    local consonant_index =\
    \ 0\n    local vowel_found = false\n    local consonant_found = false\n    for\
    \ i = 1, #word do\n        for j = 1, #vowels do\n            if word:sub(i, i)\
    \ == vowels[j] then\n                vowel_index = i\n                vowel_found\
    \ = true\n                break\n            end\n        end\n        if vowel_found\
    \ then\n            for k = 1, #consonants do\n                if word:sub(i +\
    \ 1, i + 1) == consonants[k] then\n                    consonant_index = i + 1\n\
    \                    consonant_found = true\n                    break\n     \
    \           end\n            end\n        end\n        if vowel_found and consonant_found\
    \ then\n            result = word:sub(vowel_index, vowel_index)\n            break\n\
    \        end\n    end\n    return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local result = ''\n    for i = #word, 1, -1 do\n       \
    \ if not table.contains(vowels, word:sub(i, i)) then\n            for j = i -\
    \ 1, 1, -1 do\n                if table.contains(vowels, word:sub(j, j)) then\n\
    \                    result = word:sub(j, j)\n                    break\n    \
    \            end\n            end\n            break\n        end\n    end\n \
    \   return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local closest_vowel = ''\n    for i = 1, #word do\n\
    \        if table.contains(vowels, word:sub(i, i)) then\n            vowel_index\
    \ = i\n        elseif table.contains(consonants, word:sub(i, i)) then\n      \
    \      consonant_index = i\n        end\n        if vowel_index > 0 and consonant_index\
    \ > 0 then\n            if vowel_index > consonant_index then\n              \
    \  closest_vowel = word:sub(vowel_index, vowel_index)\n                break\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if not table.contains(vowels,\
    \ word:sub(i, i)) then\n            for j = i, 1, -1 do\n                if table.contains(vowels,\
    \ word:sub(j, j)) then\n                    if closest_vowel_index == 0 then\n\
    \                        closest_vowel_index = j\n                        closest_vowel\
    \ = word:sub(j, j)\n                    elseif j > closest_vowel_index then\n\
    \                        closest_vowel_index = j\n                        closest_vowel\
    \ = word:sub(j, j)\n                    end\n                end\n           \
    \ end\n        end\n    end\n    return closest_vowel\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local last_consonant\
    \ = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n      \
    \  if table.contains(vowels, c) then\n            last_vowel = c\n        else\n\
    \            if last_vowel ~= '' then\n                return last_vowel\n   \
    \         end\n            last_consonant = c\n        end\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result =\
    \ ''\n    local index = #word\n    while index > 0 do\n        local char = word:sub(index,\
    \ index)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o'\
    \ or char == 'u' then\n            result = char\n            break\n        end\n\
    \        index = index - 1\n    end\n    return result\nend", "    -- your code\
    \ here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_index =\
    \ 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local letter = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ letter) then\n            local left_consonant = false\n            local right_consonant\
    \ = false\n            if i > 1 then\n                local left_letter = string.sub(word,\
    \ i - 1, i - 1)\n                if table.contains(consonants, left_letter) then\n\
    \                    left_consonant = true\n                end\n            end\n\
    \            if i < word_length then\n                local right_letter = string.sub(word,\
    \ i + 1, i + 1)\n                if table.contains(consonants, right_letter) then\n\
    \                    right_consonant = true\n                end\n           \
    \ end\n            if left_consonant and right_consonant then\n              \
    \  if closest_index == 0 then\n                    closest_index = i\n       \
    \             closest_vowel = letter\n                elseif i < closest_index\
    \ then\n                    closest_index = i\n                    closest_vowel\
    \ = letter\n                end\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            vowel_index = i\n            break\n     \
    \   end\n    end\n    for i = vowel_index, 1, -1 do\n        if table.contains(consonants,\
    \ word:sub(i, i)) then\n            consonant_index = i\n            break\n \
    \       end\n    end\n    if vowel_index == 0 or consonant_index == 0 then\n \
    \       return ''\n    end\n    return word:sub(vowel_index, vowel_index)\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if table.contains(vowels, char)\
    \ then\n            last_vowel = char\n        else\n            if last_vowel\
    \ ~= '' then\n                result = last_vowel\n                break\n   \
    \         end\n            last_consonant = char\n        end\n    end\n    return\
    \ result\nend", "    -- TODO: implement this function\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = #word, 1, -1 do\n        local letter = word:sub(i, i)\n  \
    \      if table.contains(vowels, letter) then\n            closest_vowel = letter\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    for i = closest_vowel_index, 1, -1 do\n        local letter = word:sub(i,\
    \ i)\n        if table.contains(consonants, letter) then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index - closest_consonant_index\
    \ == 1 then\n        return ''\n    else\n        return closest_vowel\n    end\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local consonant_index =\
    \ 0\n    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        for j\
    \ = 1, #vowels do\n            if word[i] == vowels[j] then\n                vowel_index\
    \ = i\n                break\n            end\n        end\n        for j = 1,\
    \ #consonants do\n            if word[i] == consonants[j] then\n             \
    \   consonant_index = i\n                break\n            end\n        end\n\
    \        if vowel_index > consonant_index then\n            closest_vowel = word[vowel_index]\n\
    \            break\n        end\n    end\n    return closest_vowel\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = nil\n   \
    \ for i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i, i)) then\n\
    \            vowel_index = i\n            break\n        end\n    end\n    if\
    \ vowel_index == nil then\n        return ''\n    end\n    for i = vowel_index\
    \ - 1, 1, -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n\
    \            return word:sub(vowel_index, vowel_index)\n        end\n    end\n\
    \    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ last_consonant_index = 0\n    for i = #word, 1, -1 do\n        if not table.contains(vowels,\
    \ word:sub(i, i)) then\n            last_consonant_index = i\n            break\n\
    \        end\n    end\n    for i = last_consonant_index, 1, -1 do\n        if\
    \ table.contains(vowels, word:sub(i, i)) then\n            return word:sub(i,\
    \ i)\n        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local vowel_index = 0\n    for i = #word, 1, -1 do\n   \
    \     if table.indexof(vowels, word:sub(i, i)) ~= -1 then\n            vowel_index\
    \ = i\n            break\n        end\n    end\n    if vowel_index == 0 then\n\
    \        return ''\n    end\n    local prev_char = word:sub(vowel_index - 1, vowel_index\
    \ - 1)\n    local next_char = word:sub(vowel_index + 1, vowel_index + 1)\n   \
    \ if table.indexof(vowels, prev_char) == -1 and table.indexof(vowels, next_char)\
    \ == -1 then\n        return word:sub(vowel_index, vowel_index)\n    end\n   \
    \ return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    local word_length = string.len(word)\n\
    \    for i = 1, word_length do\n        local letter = string.sub(word, i, i)\n\
    \        if table.contains(vowels, letter) then\n            closest_vowel = letter\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    for i = word_length, 1, -1 do\n        local letter = string.sub(word, i,\
    \ i)\n        if table.contains(consonants, letter) then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index > closest_consonant_index\
    \ then\n        return closest_vowel\n    else\n        return ''\n    end\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'}\n  local closest_vowel = ''\n  local closest_distance = 0\n  for i\
    \ = 1, #word do\n    local letter = word:sub(i, i)\n    if table.contains(vowels,\
    \ letter) then\n      local distance = 0\n      for j = i, #word do\n        local\
    \ letter = word:sub(j, j)\n        if table.contains(consonants, letter) then\n\
    \          distance = distance + 1\n        elseif table.contains(vowels, letter)\
    \ then\n          break\n        end\n      end\n      if distance > 0 and (closest_distance\
    \ == 0 or distance < closest_distance) then\n        closest_distance = distance\n\
    \        closest_vowel = letter\n      end\n    end\n  end\n  return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local word_length = string.len(word)\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index =\
    \ 0\n    local closest_consonant_index_2 = 0\n    local closest_vowel_distance\
    \ = 0\n    local closest_consonant_distance = 0\n    local closest_consonant_distance_2\
    \ = 0\n    for i = 1, word_length do\n        for j = 1, #vowels do\n        \
    \    if word:sub(i, i) == vowels[j] then\n                for k = 1, word_length\
    \ do\n                    for l = 1, #consonants do\n                        if\
    \ word:sub(word_length - k + 1, word_length - k + 1) == consonants[l] then\n \
    \                           closest_consonant_index = word_length - k + 1\n  \
    \                          closest_consonant_distance = k\n                  \
    \          break\n                        end\n                    end\n     \
    \               if closest_consonant_index ~= 0 then\n                       \
    \ break\n                    end\n                end\n                for k =\
    \ 1, word_length do\n                    for l = 1, #consonants do\n         \
    \               if word:sub(word_length - k + 1, word_length - k + 1) == consonants[l]\
    \ then\n                            closest_consonant_index_2 = word_length -\
    \ k + 1\n                            closest_consonant_distance_2 = k\n      \
    \                      break\n                        end\n                  \
    \  end\n                    if closest_consonant_index_2 ~= 0 then\n         \
    \               break\n                    end\n                end\n        \
    \        if closest_consonant_index ~= 0 and closest_consonant_index_2 ~= 0 then\n\
    \                    if closest_consonant_distance < closest_", "    -- TODO:\
    \ implement this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        if last_vowel\
    \ == '' then\n            for _, v in ipairs(vowels) do\n                if word:sub(i,\
    \ i) == v then\n                    last_vowel = v\n                    break\n\
    \                end\n            end\n        else\n            for _, v in ipairs(vowels)\
    \ do\n                if word:sub(i, i) == v then\n                    return\
    \ last_vowel\n                end\n            end\n        end\n    end\n   \
    \ return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local consonant_index\
    \ = 0\n    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        for\
    \ _, v in ipairs(vowels) do\n            if word:sub(i, i) == v then\n       \
    \         vowel_index = i\n            end\n        end\n        for _, v in ipairs(consonants)\
    \ do\n            if word:sub(i, i) == v then\n                consonant_index\
    \ = i\n            end\n        end\n        if vowel_index > consonant_index\
    \ then\n            closest_vowel = word:sub(vowel_index, vowel_index)\n     \
    \       break\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n   \
    \     if table.contains(vowels, char) then\n            last_vowel = char\n  \
    \      elseif last_vowel ~= '' then\n            result = last_vowel\n       \
    \     break\n        end\n    end\n    return result\nend", "    -- TODO: Implement\
    \ this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local word_length = string.len(word)\n    local i = 1\n    while i\
    \ <= word_length do\n        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            if i > closest_consonant_index and i < closest_consonant_index_2\
    \ then\n                closest_vowel = char\n                closest_vowel_index\
    \ = i\n            end\n        elseif table.contains(consonants, char) then\n\
    \            if i > closest_vowel_index then\n                closest_consonant_index_2\
    \ = i\n            else\n                closest_consonant_index = i\n       \
    \     end\n        end\n        i = i + 1\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n \
    \   local last_vowel_index = -1\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if table.contains(vowels, char) then\n           \
    \ last_vowel_index = i\n            break\n        end\n    end\n    if last_vowel_index\
    \ == -1 then\n        return ''\n    end\n    for i = last_vowel_index, 1, -1\
    \ do\n        local char = word:sub(i, i)\n        if not table.contains(vowels,\
    \ char) then\n            result = word:sub(i + 1, last_vowel_index)\n       \
    \     break\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local letter = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ letter) then\n            local vowel_index = i\n            local consonant_index\
    \ = 0\n            for j = i, word_length do\n                local letter = string.sub(word,\
    \ j, j)\n                if table.contains(consonants, letter) then\n        \
    \            consonant_index = j\n                    break\n                end\n\
    \            end\n            if consonant_index ~= 0 then\n                local\
    \ distance = consonant_index - vowel_index\n                if closest_vowel_index\
    \ == 0 or distance < closest_vowel_index then\n                    closest_vowel_index\
    \ = distance\n                    closest_consonant_index = consonant_index\n\
    \                    closest_vowel = letter\n                end\n           \
    \ end\n        end\n    end\n    return closest_vowel\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_index\
    \ = -1\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n   \
    \     for _, vowel in ipairs(vowels) do\n            if char == vowel then\n \
    \               closest_vowel = char\n                closest_index = i\n    \
    \            break\n            end\n        end\n        if closest_index ~=\
    \ -1 then\n            break\n        end\n    end\n    if closest_index == 1\
    \ or closest_index == #word then\n        return ''\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ table.contains(vowels, char) then\n            last_vowel = char\n         \
    \   break\n        end\n    end\n    return last_vowel\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = nil\n  local last_vowel\
    \ = nil\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      last_vowel = char\n    else\n      if last_vowel then\n  \
    \      return last_vowel\n      end\n    end\n  end\n  return ''\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local index =\
    \ #word\n    while index > 0 do\n        if table.indexof(vowels, word:sub(index,\
    \ index)) then\n            result = word:sub(index, index)\n            break\n\
    \        end\n        index = index - 1\n    end\n    return result\nend", " \
    \   -- your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local closest_vowel = ''\n    for i = 1, #word do\n\
    \        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n   \
    \             vowel_index = i\n            end\n        end\n        for k = 1,\
    \ #consonants do\n            if word[i] == consonants[k] then\n             \
    \   consonant_index = i\n            end\n        end\n        if vowel_index\
    \ ~= 0 and consonant_index ~= 0 then\n            if vowel_index > consonant_index\
    \ then\n                closest_vowel = word[vowel_index]\n            end\n \
    \       end\n    end\n    return closest_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local result = ''\n    local index = #word\n    while\
    \ index > 0 do\n        if table.indexof(vowels, word:sub(index, index)) then\n\
    \            result = word:sub(index, index)\n            break\n        end\n\
    \        index = index - 1\n    end\n    return result\nend", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal closest_vowel = ''\n\tlocal closest_vowel_distance\
    \ = 0\n\tlocal vowel_distance = 0\n\tlocal last_consonant_index = 0\n\tfor i =\
    \ 1, #word do\n\t\tlocal letter = word:sub(i, i)\n\t\tif table.contains(vowels,\
    \ letter) then\n\t\t\tvowel_distance = i - last_consonant_index\n\t\t\tif vowel_distance\
    \ > 1 and (vowel_distance < closest_vowel_distance or closest_vowel_distance ==\
    \ 0) then\n\t\t\t\tclosest_vowel = letter\n\t\t\t\tclosest_vowel_distance = vowel_distance\n\
    \t\t\tend\n\t\telse\n\t\t\tlast_consonant_index = i\n\t\tend\n\tend\n\treturn\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel = ''\n\
    \    for i = 1, #word do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            vowel_index = i\n        else\n            consonant_index\
    \ = i\n        end\n        if vowel_index > 0 and consonant_index > 0 then\n\
    \            closest_vowel = word:sub(vowel_index, vowel_index)\n            break\n\
    \        end\n    end\n    return closest_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = 1, #word do\n        local char = word:sub(i, i)\n        if\
    \ table.contains(vowels, char) then\n            if closest_vowel_index == 0 then\n\
    \                closest_vowel_index = i\n            end\n        elseif table.contains(consonants,\
    \ char) then\n            if closest_vowel_index > 0 and closest_consonant_index\
    \ == 0 then\n                closest_consonant_index = i\n            end\n  \
    \      end\n    end\n    if closest_vowel_index > 0 and closest_consonant_index\
    \ > 0 then\n        closest_vowel = word:sub(closest_vowel_index, closest_vowel_index)\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result\
    \ = ''\n    local vowel_index = 0\n    local consonant_index = 0\n    local word_length\
    \ = string.len(word)\n    local i = 1\n    while i <= word_length do\n       \
    \ local current_letter = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ current_letter) then\n            vowel_index = i\n        elseif table.contains(consonants,\
    \ current_letter) then\n            consonant_index = i\n        end\n       \
    \ if vowel_index > 0 and consonant_index > 0 then\n            if consonant_index\
    \ - vowel_index == 1 then\n                result = string.sub(word, vowel_index,\
    \ vowel_index)\n            end\n            vowel_index = 0\n            consonant_index\
    \ = 0\n        end\n        i = i + 1\n    end\n    return result\nend", "   \
    \ -- your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_list = {}\n    local word_list_vowel\
    \ = {}\n    local word_list_consonant = {}\n    local word_list_consonant_vowel\
    \ = {}\n    local word_list_vowel_consonant = {}\n    for i = 1, #word do\n  \
    \      word_list[i] = word:sub(i, i)\n    end\n    for i = 1, #word_list do\n\
    \        for j = 1, #vowels do\n            if word_list[i] == vowels[j] then\n\
    \                table.insert(word_list_vowel, word_list[i])\n            end\n\
    \        end\n    end\n    for i = 1, #word_list do\n        for j = 1, #consonants\
    \ do\n            if word_list[i] == consonants[j] then\n                table.insert(word_list_consonant,\
    \ word_list[i])\n            end\n        end\n    end\n    for i = 1, #word_list_consonant\
    \ do\n        for j = 1, #word_list_vowel do\n            if word_list_consonant[i]\
    \ == word_list_vowel[j] then\n                table.insert(word_list_consonant_vowel,\
    \ word_list_consonant[i])\n            end\n        end\n    end\n    for i =\
    \ 1, #word_list_vowel do\n        for j = 1, #word_list_consonant do\n       \
    \     if word_list_vowel[i] == word_list_consonant[j] then\n                table.insert(word_list_vowel_consonant,\
    \ word_list_vowel[i])\n", "    -- your code here\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ result = ''\n    local is_vowel = false\n    local is_consonant = false\n  \
    \  for i = #word, 1, -1 do\n        for _, v in ipairs(vowels) do\n          \
    \  if word:sub(i, i) == v then\n                is_vowel = true\n            end\n\
    \        end\n        for _, v in ipairs(consonants) do\n            if word:sub(i,\
    \ i) == v then\n                is_consonant = true\n            end\n       \
    \ end\n        if is_vowel and is_consonant then\n            result = word:sub(i,\
    \ i)\n            break\n        end\n        is_vowel = false\n        is_consonant\
    \ = false\n    end\n    return result\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local closest_distance = 0\n    for i = 1, #word do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      local distance = 0\n            for j = i, #word do\n                local\
    \ char = word:sub(j, j)\n                if table.contains(consonants, char) then\n\
    \                    distance = distance + 1\n                elseif table.contains(vowels,\
    \ char) then\n                    break\n                end\n            end\n\
    \            if distance > closest_distance then\n                closest_distance\
    \ = distance\n                closest_vowel = char\n            end\n        end\n\
    \    end\n    return closest_vowel\nend", "  -- TODO: implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n \
    \   local last_vowel_index = -1\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if table.indexof(vowels, char) then\n            last_vowel_index\
    \ = i\n            break\n        end\n    end\n    if last_vowel_index == -1\
    \ then\n        return ''\n    end\n    for i = last_vowel_index - 1, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if not table.indexof(vowels, char)\
    \ then\n            result = word:sub(last_vowel_index, last_vowel_index)\n  \
    \          break\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n\
    \    local vowel_index = 0\n    local consonant_index = 0\n    local vowel_found\
    \ = false\n    local consonant_found = false\n    for i = 1, #word do\n      \
    \  for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n  \
    \              vowel_index = i\n                vowel_found = true\n         \
    \       break\n            end\n        end\n        if vowel_found then\n   \
    \         for k = 1, #consonants do\n                if word:sub(i - 1, i - 1)\
    \ == consonants[k] then\n                    consonant_index = i - 1\n       \
    \             consonant_found = true\n                    break\n            \
    \    end\n            end\n            if consonant_found then\n             \
    \   result = word:sub(vowel_index, vowel_index)\n                break\n     \
    \       end\n        end\n    end\n    return result\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local vowel_idx = 0\n  local vowel_idx_list = {}\n\
    \  for i = 1, #word do\n    for j = 1, #vowels do\n      if word:sub(i, i) ==\
    \ vowels[j] then\n        vowel_idx_list[#vowel_idx_list + 1] = i\n      end\n\
    \    end\n  end\n  if #vowel_idx_list == 0 then\n    return ''\n  end\n  local\
    \ closest_vowel_idx = vowel_idx_list[#vowel_idx_list]\n  for i = 1, #vowel_idx_list\
    \ - 1 do\n    if vowel_idx_list[i] > vowel_idx then\n      closest_vowel_idx =\
    \ vowel_idx_list[i]\n    end\n  end\n  return word:sub(closest_vowel_idx, closest_vowel_idx)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if table.indexof(vowels,\
    \ c) then\n            last_vowel = c\n            break\n        end\n    end\n\
    \    return last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    local index = #word\n    while index > 0 do\n    \
    \    local char = word:sub(index, index)\n        if not table.contains(vowels,\
    \ char) then\n            if index < #word then\n                local next_char\
    \ = word:sub(index + 1, index + 1)\n                if table.contains(vowels,\
    \ next_char) then\n                    result = next_char\n                  \
    \  break\n                end\n            end\n        end\n        index = index\
    \ - 1\n    end\n    return result\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_distance = 0\n    local word_length = #word\n\
    \    for i = 1, word_length do\n        local char = word:sub(i, i)\n        if\
    \ char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\
    \            local j = i + 1\n            while j <= word_length do\n        \
    \        local next_char = word:sub(j, j)\n                if next_char == 'a'\
    \ or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char ==\
    \ 'u' then\n                    break\n                end\n                j\
    \ = j + 1\n            end\n            if j - i > closest_vowel_distance then\n\
    \                closest_vowel = char\n                closest_vowel_distance\
    \ = j - i\n            end\n        end\n    end\n    return closest_vowel\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_pos = {}\n    local\
    \ cons_pos = {}\n    for i = 1, #word do\n        local c = word:sub(i, i)\n \
    \       if table.indexof(vowels, c) then\n            table.insert(vowel_pos,\
    \ i)\n        else\n            table.insert(cons_pos, i)\n        end\n    end\n\
    \    for i = #cons_pos, 1, -1 do\n        local c = cons_pos[i]\n        for j\
    \ = #vowel_pos, 1, -1 do\n            local v = vowel_pos[j]\n            if v\
    \ > c then\n                return word:sub(v, v)\n            end\n        end\n\
    \    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    local index = #word\n    while index > 0 do\n    \
    \    if not table.contains(vowels, word:sub(index, index)) then\n            for\
    \ i = index - 1, 1, -1 do\n                if table.contains(vowels, word:sub(i,\
    \ i)) then\n                    result = word:sub(i, i)\n                    break\n\
    \                end\n            end\n            break\n        end\n      \
    \  index = index - 1\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local word_len = string.len(word)\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    for i = word_len, 1, -1 do\n  \
    \      local char = string.sub(word, i, i)\n        if char == 'a' or char ==\
    \ 'e' or char == 'i' or char == 'o' or char == 'u' then\n            closest_vowel\
    \ = char\n            closest_vowel_index = i\n            break\n        end\n\
    \    end\n    if closest_vowel_index == 1 then\n        return ''\n    end\n \
    \   for i = closest_vowel_index - 1, 1, -1 do\n        local char = string.sub(word,\
    \ i, i)\n        if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o'\
    \ and char ~= 'u' then\n            return closest_vowel\n        end\n    end\n\
    \    return ''\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n  local result = ''\n  local last_consonant =\
    \ ''\n  local last_vowel = ''\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if table.contains(vowels, char) then\n      last_vowel = char\n    elseif\
    \ table.contains(consonants, char) then\n      if last_vowel ~= '' then\n    \
    \    result = last_vowel\n        break\n      end\n      last_consonant = char\n\
    \    end\n  end\n  return result\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local last_consonant = nil\n  local last_vowel = nil\n  for i = #word,\
    \ 1, -1 do\n    local c = word:sub(i, i)\n    if last_consonant and table.contains(vowels,\
    \ c) then\n      return c\n    end\n    if not table.contains(vowels, c) then\n\
    \      last_consonant = c\n    else\n      last_vowel = c\n    end\n  end\n  return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_char\
    \ = ''\n    local prev_vowel = ''\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if prev_char == '' then\n            prev_char\
    \ = char\n        else\n            for _, v in ipairs(vowels) do\n          \
    \      if char == v then\n                    prev_vowel = char\n            \
    \    end\n            end\n            if prev_vowel ~= '' then\n            \
    \    for _, v in ipairs(vowels) do\n                    if prev_char == v then\n\
    \                        return prev_vowel\n                    end\n        \
    \        end\n            end\n            prev_char = char\n        end\n   \
    \ end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n  \
    \  local result = ''\n    local found = false\n    for i = #word, 1, -1 do\n \
    \       if not found then\n            for j = 1, #vowels do\n               \
    \ if word:sub(i, i) == vowels[j] then\n                    result = word:sub(i,\
    \ i)\n                    found = true\n                    break\n          \
    \      end\n            end\n        else\n            for j = 1, #vowels do\n\
    \                if word:sub(i, i) == vowels[j] then\n                    result\
    \ = ''\n                    found = false\n                    break\n       \
    \         end\n            end\n        end\n    end\n    return result\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local vowel_found = false\n    for i = #word, 1, -1\
    \ do\n        local letter = word:sub(i, i)\n        if not vowel_found then\n\
    \            for j = 1, #vowels do\n                if letter == vowels[j] then\n\
    \                    vowel_index = i\n                    vowel_found = true\n\
    \                    break\n                end\n            end\n        else\n\
    \            if not table.contains(vowels, letter) then\n                consonant_index\
    \ = i\n                break\n            end\n        end\n    end\n    if vowel_index\
    \ == 0 or consonant_index == 0 then\n        return ''\n    else\n        return\
    \ word:sub(vowel_index, vowel_index)\n    end\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel = ''\n\
    \    for i = 1, #word do\n        for j = 1, #vowels do\n            if word[i]\
    \ == vowels[j] then\n                vowel_index = i\n            end\n      \
    \  end\n        for k = 1, #consonants do\n            if word[i] == consonants[k]\
    \ then\n                consonant_index = i\n            end\n        end\n  \
    \      if vowel_index > consonant_index then\n            closest_vowel = word[vowel_index]\n\
    \        end\n    end\n    return closest_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = 1, #word do\n        for j = 1, #vowels do\n            if\
    \ word[i] == vowels[j] then\n                for k = 1, #consonants do\n     \
    \               if word[i - 1] == consonants[k] and word[i + 1] == consonants[k]\
    \ then\n                        if closest_vowel_index == 0 then\n           \
    \                 closest_vowel_index = i\n                            closest_consonant_index\
    \ = i\n                            closest_vowel = word[i]\n                 \
    \       elseif i - closest_consonant_index < closest_vowel_index - closest_consonant_index\
    \ then\n                            closest_vowel_index = i\n                \
    \            closest_consonant_index = i\n                            closest_vowel\
    \ = word[i]\n                        end\n                    end\n          \
    \      end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  for\
    \ i = #word, 1, -1 do\n    if table.indexof(vowels, word:sub(i, i)) then\n   \
    \   result = word:sub(i, i)\n      break\n    end\n  end\n  return result\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local\
    \ last_consonant = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.contains(vowels, char) then\n            last_vowel = char\n\
    \        else\n            last_consonant = char\n            break\n        end\n\
    \    end\n    if last_vowel ~= '' and last_consonant ~= '' then\n        return\
    \ last_vowel\n    else\n        return ''\n    end\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local last_consonant\
    \ = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n   \
    \     if table.contains(vowels, char) then\n            last_vowel = char\n  \
    \      else\n            last_consonant = char\n            if last_vowel ~= ''\
    \ then\n                return last_vowel\n            end\n        end\n    end\n\
    \    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    for i =\
    \ 1, #word do\n        if table.contains(vowels, word:sub(i, i)) then\n      \
    \      for j = i, #word do\n                if table.contains(consonants, word:sub(j,\
    \ j)) then\n                    if j - i > closest_consonant_index - closest_vowel_index\
    \ then\n                        closest_vowel = word:sub(i, i)\n             \
    \           closest_vowel_index = i\n                        closest_consonant_index\
    \ = j\n                    end\n                    break\n                end\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local\
    \ closest_consonant_index = 0\n    local word_length = string.len(word)\n    local\
    \ i = 1\n    while i <= word_length do\n        if is_in_array(vowels, string.sub(word,\
    \ i, i)) then\n            if closest_vowel_index == 0 then\n                closest_vowel_index\
    \ = i\n            end\n        elseif is_in_array(consonants, string.sub(word,\
    \ i, i)) then\n            if closest_vowel_index ~= 0 then\n                closest_consonant_index\
    \ = i\n                break\n            end\n        end\n        i = i + 1\n\
    \    end\n    if closest_vowel_index ~= 0 and closest_consonant_index ~= 0 then\n\
    \        closest_vowel = string.sub(word, closest_vowel_index, closest_vowel_index)\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local closest_vowel = ''\n    local closest_index = -1\n    for\
    \ i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if not table.contains(vowels,\
    \ char) then\n            for j = 1, #vowels do\n                local vowel =\
    \ vowels[j]\n                local index = word:find(vowel, i)\n             \
    \   if index and (index < closest_index or closest_index == -1) then\n       \
    \             closest_vowel = vowel\n                    closest_index = index\n\
    \                end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    -- your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local result = ''\n    for i = #word, 1, -1 do\n        for j = 1, #vowels\
    \ do\n            if word[i] == vowels[j] then\n                if i == #word\
    \ then\n                    return ''\n                elseif i == 1 then\n  \
    \                  return ''\n                elseif word[i - 1] == 'a' then\n\
    \                    return ''\n                elseif word[i - 1] == 'e' then\n\
    \                    return ''\n                elseif word[i - 1] == 'i' then\n\
    \                    return ''\n                elseif word[i - 1] == 'o' then\n\
    \                    return ''\n                elseif word[i - 1] == 'u' then\n\
    \                    return ''\n                elseif word[i + 1] == 'a' then\n\
    \                    return ''\n                elseif word[i + 1] == 'e' then\n\
    \                    return ''\n                elseif word[i + 1] == 'i' then\n\
    \                    return ''\n                elseif word[i + 1] == 'o' then\n\
    \                    return ''\n                elseif word[i + 1] == 'u' then\n\
    \                    return ''\n                else\n                    return\
    \ word[i]\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local closest_vowel_distance = 0\n    local closest_consonant_distance\
    \ = 0\n    local closest_consonant_distance_2 = 0\n    local word_length = string.len(word)\n\
    \    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local\
    \ m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n\
    \    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local\
    \ v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n\
    \    local a = 1\n    local e = 1\n    local i = 1\n    local o = 1\n    local\
    \ u = 1\n    local word_length = string.len(word)\n    local i = 1\n    local\
    \ j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n\
    \    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local\
    \ s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n\
    \    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local\
    \ e = 1\n    local i = 1\n    local o = 1\n    local u = 1\n    local word_length\
    \ = string.len(word)\n    local i = 1\n    local j = 1\n    local k =", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_len = #word\n    local vowel_idx\
    \ = 0\n    local vowel_pos = 0\n    local vowel_found = false\n    for i = word_len,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if char == 'a' or char\
    \ == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            vowel_idx\
    \ = i\n            vowel_found = true\n            break\n        end\n    end\n\
    \    if vowel_found then\n        for i = vowel_idx, 1, -1 do\n            local\
    \ char = word:sub(i, i)\n            if char ~= 'a' and char ~= 'e' and char ~=\
    \ 'i' and char ~= 'o' and char ~= 'u' then\n                vowel_pos = i\n  \
    \              break\n            end\n        end\n    end\n    if vowel_pos\
    \ == 0 then\n        return ''\n    else\n        return word:sub(vowel_pos +\
    \ 1, vowel_pos + 1)\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local char =\
    \ word:sub(i, i)\n        if table.index_of(vowels, char) ~= -1 then\n       \
    \     last_vowel = char\n            break\n        end\n    end\n    return last_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_idx = 0\n\
    \    local word_len = string.len(word)\n    for i = word_len, 1, -1 do\n     \
    \   if table.contains(vowels, string.sub(word, i, i)) then\n            vowel_idx\
    \ = i\n            break\n        end\n    end\n    if vowel_idx == 0 then\n \
    \       return ''\n    end\n    for i = vowel_idx, 1, -1 do\n        if not table.contains(vowels,\
    \ string.sub(word, i, i)) then\n            return string.sub(word, vowel_idx,\
    \ vowel_idx)\n        end\n    end\n    return ''\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local word_len = string.len(word)\n    local vowel_idx\
    \ = 0\n    local vowel_found = false\n    for i = word_len, 1, -1 do\n       \
    \ local char = string.sub(word, i, i)\n        if vowel_found then\n         \
    \   if not table.contains(vowels, char) then\n                return string.sub(word,\
    \ vowel_idx, vowel_idx)\n            end\n        else\n            if table.contains(vowels,\
    \ char) then\n                vowel_idx = i\n                vowel_found = true\n\
    \            end\n        end\n    end\n    return ''\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local closest_index\
    \ = 0\n  for i = #word, 1, -1 do\n    if word:sub(i, i) == 'a' or word:sub(i,\
    \ i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i)\
    \ == 'u' then\n      closest_vowel = word:sub(i, i)\n      closest_index = i\n\
    \      break\n    end\n  end\n  for i = closest_index - 1, 1, -1 do\n    if word:sub(i,\
    \ i) ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i,\
    \ i) ~= 'o' and word:sub(i, i) ~= 'u' then\n      return closest_vowel\n    end\n\
    \  end\n  return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local result = ''\n    local index = #word\n    while index > 0 do\n       \
    \ local char = word:sub(index, index)\n        if table.contains(vowels, char)\
    \ then\n            result = char\n            break\n        end\n        index\
    \ = index - 1\n    end\n    return result\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    local result\
    \ = ''\n    local last_cons = ''\n    local last_vowel = ''\n    for i = 1, #word\
    \ do\n        local char = word:sub(i, i)\n        if vowels:find(char) then\n\
    \            last_vowel = char\n        elseif cons:find(char) then\n        \
    \    if last_vowel ~= '' then\n                result = last_vowel\n         \
    \   end\n            last_cons = char\n        end\n    end\n    return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n\
    \    local vowel_distance = 0\n    local word_length = string.len(word)\n    for\
    \ i = word_length, 1, -1 do\n        local char = string.sub(word, i, i)\n   \
    \     if table.contains(vowels, char) then\n            vowel_index = i\n    \
    \        break\n        end\n    end\n    if vowel_index == 0 then\n        return\
    \ ''\n    end\n    for i = vowel_index, word_length do\n        local char = string.sub(word,\
    \ i, i)\n        if not table.contains(vowels, char) then\n            vowel_distance\
    \ = i - vowel_index\n            break\n        end\n    end\n    if vowel_distance\
    \ == 0 then\n        return ''\n    end\n    return string.sub(word, vowel_index,\
    \ vowel_index)\nend", "    -- TODO: implement this function\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local index =\
    \ #word\n    while index > 0 do\n        local char = word:sub(index, index)\n\
    \        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n            result = char\n            break\n        end\n      \
    \  index = index - 1\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local result = ''\n    local i = #word\n    while i\
    \ > 0 do\n        local c = word:sub(i, i)\n        if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n            result = c\n            break\n\
    \        end\n        i = i - 1\n    end\n    return result\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local word_length\
    \ = #word\n    local consonant_count = 0\n    for i = word_length, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if not table.contains(vowels, char)\
    \ then\n            consonant_count = consonant_count + 1\n        else\n    \
    \        vowel_index = i\n            break\n        end\n    end\n    if consonant_count\
    \ >= 2 then\n        return word:sub(vowel_index, vowel_index)\n    else\n   \
    \     return ''\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_length = string.len(word)\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_index_2 = 0\n    for i = 1, word_length do\n\
    \        for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n\
    \                for k = i, word_length do\n                    for l = 1, #consonants\
    \ do\n                        if word:sub(k, k) == consonants[l] then\n      \
    \                      closest_consonant_index = k\n                         \
    \   break\n                        end\n                    end\n            \
    \        if closest_consonant_index ~= 0 then\n                        break\n\
    \                    end\n                end\n                for m = i, 1, -1\
    \ do\n                    for n = 1, #consonants do\n                        if\
    \ word:sub(m, m) == consonants[n] then\n                            closest_consonant_index_2\
    \ = m\n                            break\n                        end\n      \
    \              end\n                    if closest_consonant_index_2 ~= 0 then\n\
    \                        break\n                    end\n                end\n\
    \                if closest_consonant_index ~= 0 and closest_consonant_index_2\
    \ ~= 0 then\n                    if closest_consonant_index - i < i - closest_consonant_index_2\
    \ then\n                        closest_vowel = word:sub(i, i)\n             \
    \           closest_vowel_index = i\n                    end\n               \
    \ end\n            end\n        end\n    end\n    return closest_vowel\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ min_distance = math.huge\n    for i = 1, #word do\n        local c = word:sub(i,\
    \ i)\n        if c:match('[aeiou]') then\n            local distance = #word -\
    \ i\n            if distance < min_distance then\n                min_distance\
    \ = distance\n                result = c\n            end\n        end\n    end\n\
    \    return result\nend", "    -- your code here\n    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local vowel = ''\n    for i = #word, 1, -1 do\n        if\
    \ word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i,\
    \ i) == 'o' or word:sub(i, i) == 'u' then\n            vowel = word:sub(i, i)\n\
    \            break\n        end\n    end\n    return vowel\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = nil\n  local closest_vowel\
    \ = nil\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if not\
    \ table.contains(vowels, char) then\n      last_consonant = char\n    elseif last_consonant\
    \ then\n      closest_vowel = char\n      break\n    end\n  end\n  return closest_vowel\
    \ or ''\nend", "    -- TODO: implement this function\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = 1, #word do\n        if table.indexof(vowels, word:sub(i, i))\
    \ then\n            closest_vowel = word:sub(i, i)\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index ==\
    \ 0 then\n        return ''\n    end\n    for i = closest_vowel_index, #word do\n\
    \        if table.indexof(consonants, word:sub(i, i)) then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    if closest_consonant_index\
    \ == 0 then\n        return ''\n    end\n    for i = closest_consonant_index,\
    \ #word do\n        if table.indexof(consonants, word:sub(i, i)) then\n      \
    \      closest_consonant_index = i\n        else\n            break\n        end\n\
    \    end\n    if closest_vowel_index < closest_consonant_index then\n        return\
    \ closest_vowel\n    else\n        return ''\n    end\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local last_consonant\
    \ = ''\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if last_consonant ~= '' and last_vowel ~= ''\
    \ then\n            result = last_vowel\n            break\n        end\n    \
    \    if last_consonant == '' and not table.contains(vowels, char) then\n     \
    \       last_consonant = char\n        end\n        if last_vowel == '' and table.contains(vowels,\
    \ char) then\n            last_vowel = char\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    local last_consonant = ''\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      last_vowel = char\n        else\n            last_consonant = char\n  \
    \          break\n        end\n    end\n    return last_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local word_len = string.len(word)\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n  \
    \  local closest_consonant_index_2 = 0\n    local i = 1\n    while i <= word_len\
    \ do\n        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            local j = i - 1\n            while j > 0 do\n      \
    \          local char_2 = string.sub(word, j, j)\n                if table.contains(consonants,\
    \ char_2) then\n                    closest_consonant_index = j\n            \
    \        break\n                end\n                j = j - 1\n            end\n\
    \            local k = i + 1\n            while k <= word_len do\n           \
    \     local char_3 = string.sub(word, k, k)\n                if table.contains(consonants,\
    \ char_3) then\n                    closest_consonant_index_2 = k\n          \
    \          break\n                end\n                k = k + 1\n           \
    \ end\n            if closest_consonant_index ~= 0 and closest_consonant_index_2\
    \ ~= 0 then\n                if closest_consonant_index_2 - i < i - closest_consonant_index\
    \ then\n                    closest_vowel = char\n                    closest_vowel_index\
    \ = i\n                end\n            end\n        end\n        i = i + 1\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index =\
    \ 0\n    local word_length = string.len(word)\n    local word_table = {}\n   \
    \ for i = 1, word_length do\n        word_table[i] = string.sub(word, i, i)\n\
    \    end\n    for i = 1, word_length do\n        for j = 1, #vowels do\n     \
    \       if word_table[i] == vowels[j] then\n                local vowel_index\
    \ = i\n                local consonant_index = 0\n                for k = 1, word_length\
    \ do\n                    for l = 1, #consonants do\n                        if\
    \ word_table[k] == consonants[l] then\n                            consonant_index\
    \ = k\n                            break\n                        end\n      \
    \              end\n                    if consonant_index ~= 0 then\n       \
    \                 break\n                    end\n                end\n      \
    \          if consonant_index < vowel_index then\n                    break\n\
    \                end\n                if closest_vowel_index == 0 then\n     \
    \               closest_vowel_index = vowel_index\n                    closest_consonant_index\
    \ = consonant_index\n                    closest_vowel = word_table[i]\n     \
    \           elseif vowel_index < closest_vowel_index and vowel_index > closest_consonant_index\
    \ then\n                    closest_vowel_index = vowel_index\n              \
    \      closest_consonant_index = consonant_index\n                    closest_vowel\
    \ = word_table[i]\n                end\n            end\n        end\n    end\n\
    \    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            last_vowel = word:sub(i, i)\n            break\n\
    \        end\n    end\n    return last_vowel\nend", "    -- TODO: implement this\
    \ function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_vowel_distance =\
    \ 0\n    local word_length = string.len(word)\n    local word_index = word_length\n\
    \    while word_index > 0 do\n        local letter = string.sub(word, word_index,\
    \ word_index)\n        if table.contains(vowels, letter) then\n            local\
    \ distance = word_length - word_index\n            if distance > closest_vowel_distance\
    \ then\n                closest_vowel = letter\n                closest_vowel_index\
    \ = word_index\n                closest_vowel_distance = distance\n          \
    \  end\n        end\n        word_index = word_index - 1\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ last_consonant = ''\n    local closest_vowel = ''\n    for i = #word, 1, -1\
    \ do\n        local c = word:sub(i, i)\n        if not table.contains(vowels,\
    \ c) then\n            last_consonant = c\n        else\n            if last_consonant\
    \ ~= '' then\n                closest_vowel = c\n                break\n     \
    \       end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local word_len = #word\n    local vowel_idx = 0\n    local consonant_idx\
    \ = 0\n    for i = 1, word_len do\n        local char = word:sub(i, i)\n     \
    \   if table.indexof(vowels, char) then\n            vowel_idx = i\n        elseif\
    \ table.indexof(consonants, char) then\n            consonant_idx = i\n      \
    \  end\n        if vowel_idx > 0 and consonant_idx > 0 then\n            break\n\
    \        end\n    end\n    if vowel_idx > 0 and consonant_idx > 0 then\n     \
    \   return word:sub(vowel_idx, vowel_idx)\n    else\n        return ''\n    end\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local word_len = string.len(word)\n    local vowel_index\
    \ = 0\n    local consonant_index = 0\n    local closest_vowel = ''\n    for i\
    \ = 1, word_len do\n        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            vowel_index = i\n        elseif table.contains(consonants,\
    \ char) then\n            consonant_index = i\n        end\n        if vowel_index\
    \ > 0 and consonant_index > 0 then\n            if vowel_index > consonant_index\
    \ then\n                closest_vowel = char\n                break\n        \
    \    end\n        end\n    end\n    return closest_vowel\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local result = ''\n    local last_consonant = ''\n    local last_vowel =\
    \ ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if\
    \ last_consonant ~= '' and last_vowel ~= '' then\n            result = last_vowel\n\
    \            break\n        end\n        if table.contains(vowels, c) then\n \
    \           last_vowel = c\n        elseif table.contains(consonants, c) then\n\
    \            last_consonant = c\n        end\n    end\n    return result\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ index = #word\n    while index > 0 do\n        if not table.contains(vowels,\
    \ word:sub(index, index)) then\n            if index < #word and table.contains(vowels,\
    \ word:sub(index + 1, index + 1)) then\n                result = word:sub(index\
    \ + 1, index + 1)\n                break\n            end\n        end\n     \
    \   index = index - 1\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local vowels_set = {}\n    for _, v in ipairs(vowels)\
    \ do\n        vowels_set[v] = true\n    end\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if vowels_set[c]\
    \ then\n            if last_consonant then\n                return c\n       \
    \     end\n        else\n            last_consonant = c\n        end\n    end\n\
    \    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ last_vowel = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if table.contains(vowels, c) then\n            last_vowel = c\n\
    \            break\n        end\n    end\n    return last_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local\
    \ closest_consonant_index = 0\n    local closest_consonant_index_2 = 0\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    local consonant_index_2\
    \ = 0\n    local word_length = string.len(word)\n    local i = 0\n    local j\
    \ = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n  \
    \  local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s\
    \ = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n  \
    \  local x = 0\n    local y = 0\n    local z = 0\n    for i = 1, word_length do\n\
    \        for j = 1, 5 do\n            if word[i] == vowels[j] then\n         \
    \       vowel_index = i\n                for k = 1, 21 do\n                  \
    \  if word[i - 1] == consonants[k] then\n                        consonant_index\
    \ = i - 1\n                        for l = 1, 21 do\n                        \
    \    if word[i + 1] == consonants[l] then\n                                consonant_index_2\
    \ = i + 1\n                                if consonant_index_2 - consonant_index\
    \ > closest_consonant_index_2 - closest_consonant_index then\n               \
    \                     closest_vowel = word[i]\n                              \
    \      closest_vowel_index = i\n                                    closest_consonant_index\
    \ = consonant_index\n                                    closest_consonant_index_2\
    \ = consonant_index_2\n                                end\n                 \
    \           end\n                        end\n                   ", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \tlocal vowel = ''\n\tlocal consonant = ''\n\tlocal result = ''\n\tfor i = 1,\
    \ #word do\n\t\tlocal letter = word:sub(i, i)\n\t\tif table.indexof(vowels, letter)\
    \ then\n\t\t\tvowel = letter\n\t\telseif table.indexof(consonants, letter) then\n\
    \t\t\tconsonant = letter\n\t\tend\n\t\tif vowel ~= '' and consonant ~= '' then\n\
    \t\t\tresult = vowel\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend", "  \
    \  -- TODO: implement this function\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowel_index = 0\n    local vowel_distance = 0\n    local\
    \ distance = 0\n    local last_vowel_index = 0\n    for i = #word, 1, -1 do\n\
    \        if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) ==\
    \ 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then\n            vowel_index\
    \ = i\n            distance = #word - vowel_index\n            if distance > vowel_distance\
    \ then\n                vowel_distance = distance\n                last_vowel_index\
    \ = vowel_index\n            end\n        end\n    end\n    if vowel_distance\
    \ == 0 then\n        return ''\n    else\n        return word:sub(last_vowel_index,\
    \ last_vowel_index)\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n\
    \    local closest_consonant_index_2 = 0\n    local closest_vowel_distance = 0\n\
    \    local closest_consonant_distance = 0\n    local closest_consonant_distance_2\
    \ = 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local letter = string.sub(word, i, i)\n        for j = 1, #vowels do\n\
    \            if letter == vowels[j] then\n                closest_vowel = letter\n\
    \                closest_vowel_index = i\n                break\n            end\n\
    \        end\n        for j = 1, #consonants do\n            if letter == consonants[j]\
    \ then\n                closest_consonant_index = i\n                break\n \
    \           end\n        end\n        if closest_vowel_index ~= 0 and closest_consonant_index\
    \ ~= 0 then\n            closest_vowel_distance = closest_vowel_index - closest_consonant_index\n\
    \            if closest_vowel_distance > 0 then\n                if closest_vowel_distance\
    \ > closest_consonant_distance then\n                    closest_consonant_distance\
    \ = closest_vowel_distance\n                    closest_consonant_index_2 = closest_consonant_index\n\
    \                end\n            end\n        end\n    end\n    for i = 1, word_length\
    \ do\n        local letter = string.sub(word, i, i)\n        for j = 1, #vowels\
    \ do\n            if letter == vowels[j] then\n                closest_vowel =\
    \ letter\n                closest_vowel_index =", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local result = ''\n    local last_vowel = ''\n    for i\
    \ = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            last_vowel = char\n        elseif last_vowel ~= '' then\n\
    \            result = last_vowel\n            break\n        end\n    end\n  \
    \  return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local closest_vowel = ''\n    for i = 1, #word do\n\
    \        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n   \
    \             vowel_index = i\n            end\n        end\n        for k = 1,\
    \ #consonants do\n            if word[i] == consonants[k] then\n             \
    \   consonant_index = i\n            end\n        end\n        if vowel_index\
    \ > consonant_index then\n            closest_vowel = word[vowel_index]\n    \
    \    end\n    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_pos =\
    \ 0\n    local word_len = string.len(word)\n    for i = word_len, 1, -1 do\n \
    \       local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            closest_vowel = char\n            closest_vowel_pos\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_pos == 0\
    \ then\n        return ''\n    end\n    for i = closest_vowel_pos - 1, 1, -1 do\n\
    \        local char = string.sub(word, i, i)\n        if not table.contains(vowels,\
    \ char) then\n            return closest_vowel\n        end\n    end\n    return\
    \ ''\nend", "    -- TODO: implement this function\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local result = ''\n    local last_vowel_index = 0\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ table.indexof(vowels, char) then\n            last_vowel_index = i\n       \
    \     break\n        end\n    end\n    for i = last_vowel_index, 1, -1 do\n  \
    \      local char = word:sub(i, i)\n        if table.indexof(vowels, char) then\n\
    \            if i > 1 and not table.indexof(vowels, word:sub(i - 1, i - 1)) then\n\
    \                result = char\n                break\n            end\n     \
    \   end\n    end\n    return result\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowel_index = 0\n    local word_length = string.len(word)\n\
    \    for i = word_length, 1, -1 do\n        local char = string.sub(word, i, i)\n\
    \        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    if vowel_index == 0 then\n        return ''\n    end\n    local vowel = string.sub(word,\
    \ vowel_index, vowel_index)\n    local left_char = string.sub(word, vowel_index\
    \ - 1, vowel_index - 1)\n    local right_char = string.sub(word, vowel_index +\
    \ 1, vowel_index + 1)\n    if left_char ~= 'a' and left_char ~= 'e' and left_char\
    \ ~= 'i' and left_char ~= 'o' and left_char ~= 'u' and right_char ~= 'a' and right_char\
    \ ~= 'e' and right_char ~= 'i' and right_char ~= 'o' and right_char ~= 'u' then\n\
    \        return vowel\n    else\n        return ''\n    end\nend", "    -- YOUR\
    \ CODE HERE\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        for j = 1, #vowels do\n         \
    \   if word:sub(i, i) == vowels[j] then\n                last_vowel = word:sub(i,\
    \ i)\n                break\n            end\n        end\n        if last_vowel\
    \ ~= '' then\n            break\n        end\n    end\n    for i = #word, 1, -1\
    \ do\n        for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j]\
    \ then\n                return word:sub(i, i)\n            end\n        end\n\
    \        if word:sub(i, i) ~= last_vowel then\n            break\n        end\n\
    \    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local closest_vowel = ''\n    local closest_distance = math.huge\n    for\
    \ i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if char ==\
    \ 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n     \
    \       local distance = #word - i\n            if distance < closest_distance\
    \ then\n                closest_distance = distance\n                closest_vowel\
    \ = char\n            end\n        end\n    end\n    return closest_vowel\nend",
  "    -- TODO: Implement this function.\n    -- Hint: Use string.find() to find the\
    \ first vowel from the right side.\n    --       Use string.find() to find the\
    \ first consonant from the right side.\n    --       Use string.sub() to get the\
    \ substring between the vowel and the consonant.\n    --       Use string.find()\
    \ to find the closest vowel in the substring.\n    --       Use string.sub() to\
    \ get the closest vowel.\n    --       Use string.len() to get the length of the\
    \ substring.\n    --       Use string.len() to get the length of the closest vowel.\n\
    \    --       Use string.sub() to get the closest vowel from the right side.\n\
    \    --       Use string.reverse() to reverse the substring.\n    --       Use\
    \ string.find() to find the closest vowel in the reversed substring.\n    -- \
    \      Use string.sub() to get the closest vowel.\n    --       Use string.len()\
    \ to get the length of the substring.\n    --       Use string.len() to get the\
    \ length of the closest vowel.\n    --       Use string.sub() to get the closest\
    \ vowel from the left side.\n    --       Use string.reverse() to reverse the\
    \ closest vowel.\n    --       Use string.sub() to get the closest vowel from\
    \ the right side.\n    --       Use string.len() to get the length of the closest\
    \ vowel.\n    --       Use string.len() to get the length of the closest vowel.\n\
    \    --       Use string.sub() to get the closest vowel from the right side.\n\
    \    --       Use string.len() to get the length of the closest vowel.\n    --\
    \       Use string.len() to get the length of the closest vowel.\n    --     \
    \  Use string.sub() to get the closest vowel from the right side.\n    --    \
    \   Use string.len() to get the length of the closest vowel.\n    --       Use\
    \ string.len() to get the length of the closest vowel.\n    --       Use string.sub()\
    \ to get the closest vowel from the right side.\n    --       Use string.len()\
    \ to get the length of the closest vowel.\n    --       Use string.len() to get\
    \ the length of the closest vowel.\n    --       Use string.sub() to", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_char = ''\n    local vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n   \
    \     if prev_char ~= '' and table.contains(vowels, char) then\n            vowel\
    \ = char\n            break\n        end\n        prev_char = char\n    end\n\
    \    return vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ result = ''\n    local index = #word\n    while index > 0 do\n        local\
    \ ch = word:sub(index, index)\n        if table.indexof(vowels, ch) then\n   \
    \         if index == #word then\n                return ''\n            elseif\
    \ index == 1 then\n                return ''\n            else\n             \
    \   local prev = word:sub(index - 1, index - 1)\n                local next =\
    \ word:sub(index + 1, index + 1)\n                if not table.indexof(vowels,\
    \ prev) and not table.indexof(vowels, next) then\n                    return ch\n\
    \                end\n            end\n        end\n        index = index - 1\n\
    \    end\n    return result\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local result = ''\n  local index = #word\n  while index > 0 do\n    local char\
    \ = word:sub(index, index)\n    if char == 'a' or char == 'e' or char == 'i' or\
    \ char == 'o' or char == 'u' then\n      result = char\n      break\n    end\n\
    \    index = index - 1\n  end\n  return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n    local last_vowel = ''\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ table.index_of(vowels, char) then\n            last_vowel = char\n        else\n\
    \            if last_vowel ~= '' then\n                return last_vowel\n   \
    \         end\n            last_consonant = char\n        end\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_len = #word\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    for i = 1, word_len do\n      \
    \  local char = word:sub(i, i)\n        if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n            if i == 1 then\n    \
    \            if word:sub(i + 1, i + 1) == 'b' or word:sub(i + 1, i + 1) == 'c'\
    \ or word:sub(i + 1, i + 1) == 'd' or word:sub(i + 1, i + 1) == 'f' or word:sub(i\
    \ + 1, i + 1) == 'g' or word:sub(i + 1, i + 1) == 'h' or word:sub(i + 1, i + 1)\
    \ == 'j' or word:sub(i + 1, i + 1) == 'k' or word:sub(i + 1, i + 1) == 'l' or\
    \ word:sub(i + 1, i + 1) == 'm' or word:sub(i + 1, i + 1) == 'n' or word:sub(i\
    \ + 1, i + 1) == 'p' or word:sub(i + 1, i + 1) == 'q' or word:sub(i + 1, i + 1)\
    \ == 'r' or word:sub(i + 1, i + 1) == 's' or word:sub(i + 1, i + 1) == 't' or\
    \ word:sub(i + 1, i + 1) == 'v' or word:sub(i + 1, i + 1) == 'w' or word:sub(i\
    \ + 1, i + 1) == '", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = -1\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if char == 'a' or char ==\
    \ 'e' or char == 'i' or char == 'o' or char == 'u' then\n            closest_vowel\
    \ = char\n            closest_vowel_index = i\n            break\n        end\n\
    \    end\n    if closest_vowel_index == -1 then\n        return ''\n    end\n\
    \    for i = closest_vowel_index - 1, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n            return ''\n        end\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local consonant_index =\
    \ 0\n    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      vowel_index = i\n        elseif table.contains(consonants, char) then\n\
    \            consonant_index = i\n            break\n        end\n    end\n  \
    \  if vowel_index > consonant_index then\n        closest_vowel = word:sub(vowel_index,\
    \ vowel_index)\n    end\n    return closest_vowel\nend", "    -- TODO: Implement\
    \ this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local i = #word\n    local vowel\
    \ = ''\n    while i > 0 do\n        local c = word:sub(i, i)\n        if table.contains(vowels,\
    \ c) then\n            vowel = c\n        elseif table.contains(consonants, c)\
    \ then\n            if vowel ~= '' then\n                return vowel\n      \
    \      end\n        end\n        i = i - 1\n    end\n    return ''\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local word_len = #word\n    local closest_vowel = ''\n \
    \   local closest_vowel_index = 0\n    for i = 1, word_len do\n        local char\
    \ = word:sub(i, i)\n        if table.indexof(vowels, char) then\n            if\
    \ i > 1 and i < word_len then\n                local prev_char = word:sub(i -\
    \ 1, i - 1)\n                local next_char = word:sub(i + 1, i + 1)\n      \
    \          if table.indexof(consonants, prev_char) and table.indexof(consonants,\
    \ next_char) then\n                    if closest_vowel_index == 0 then\n    \
    \                    closest_vowel = char\n                        closest_vowel_index\
    \ = i\n                    else\n                        if i > closest_vowel_index\
    \ then\n                            closest_vowel = char\n                   \
    \         closest_vowel_index = i\n                        end\n             \
    \       end\n                end\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel\
    \ = ''\n  local closest_distance = math.huge\n  for i = 1, #word do\n    local\
    \ char = word:sub(i, i)\n    if char:match('[aeiou]') then\n      local distance\
    \ = #word - i\n      if distance < closest_distance then\n        closest_distance\
    \ = distance\n        closest_vowel = char\n      end\n    end\n  end\n  return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_distance = 0\n    local distance = 0\n    for i = 1, #word do\n\
    \        local letter = word:sub(i, i)\n        if table.contains(vowels, letter)\
    \ then\n            distance = 0\n            for j = i, 1, -1 do\n          \
    \      local letter = word:sub(j, j)\n                if table.contains(consonants,\
    \ letter) then\n                    distance = i - j\n                    break\n\
    \                end\n            end\n            if distance > closest_vowel_distance\
    \ then\n                closest_vowel = letter\n                closest_vowel_distance\
    \ = distance\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local result = ''\n    local prev_char = ''\n    local\
    \ next_char = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n            if prev_char == '' then\n                break\n  \
    \          end\n            if prev_char == 'a' or prev_char == 'e' or prev_char\
    \ == 'i' or prev_char == 'o' or prev_char == 'u' then\n                break\n\
    \            end\n            if next_char == '' then\n                break\n\
    \            end\n            if next_char == 'a' or next_char == 'e' or next_char\
    \ == 'i' or next_char == 'o' or next_char == 'u' then\n                break\n\
    \            end\n            result = char\n            break\n        end\n\
    \        prev_char = char\n        next_char = word:sub(i + 1, i + 1)\n    end\n\
    \    return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n    local word_len\
    \ = #word\n    for i = word_len, 1, -1 do\n        local char = word:sub(i, i)\n\
    \        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n            if i == word_len then\n                break\n       \
    \     end\n            local next_char = word:sub(i + 1, i + 1)\n            if\
    \ next_char == 'b' or next_char == 'c' or next_char == 'd' or next_char == 'f'\
    \ or next_char == 'g' or next_char == 'h' or next_char == 'j' or next_char ==\
    \ 'k' or next_char == 'l' or next_char == 'm' or next_char == 'n' or next_char\
    \ == 'p' or next_char == 'q' or next_char == 'r' or next_char == 's' or next_char\
    \ == 't' or next_char == 'v' or next_char == 'w' or next_char == 'x' or next_char\
    \ == 'y' or next_char == 'z' then\n                result = char\n           \
    \     break\n            end\n        end\n    end\n    return result\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_vowel = ''\n    local last_consonant = ''\n    for i = #word, 1, -1 do\n\
    \        local c = word:sub(i, i)\n        if table.contains(vowels, c) then\n\
    \            last_vowel = c\n        else\n            last_consonant = c\n  \
    \      end\n        if last_vowel ~= '' and last_consonant ~= '' then\n      \
    \      result = last_vowel\n            break\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant\
    \ = nil\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n  \
    \      if not table.contains(vowels, char) then\n            last_consonant =\
    \ i\n        elseif last_consonant then\n            return char\n        end\n\
    \    end\n    return ''\nend", "    -- TODO: implement this function\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n \
    \   local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i'\
    \ or char == 'o' or char == 'u' then\n            closest_vowel = char\n     \
    \       closest_vowel_index = i\n            break\n        end\n    end\n   \
    \ if closest_vowel_index == 0 then\n        return ''\n    end\n    for i = closest_vowel_index\
    \ - 1, 1, -1 do\n        local char = word:sub(i, i)\n        if char ~= 'a' and\
    \ char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u' then\n         \
    \   return closest_vowel\n        end\n    end\n    return ''\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i,\
    \ i)) then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    for i = vowel_index, 1, -1 do\n        if table.contains(consonants, word:sub(i,\
    \ i)) then\n            consonant_index = i\n            break\n        end\n\
    \    end\n    if vowel_index > 0 and consonant_index > 0 then\n        closest_vowel\
    \ = word:sub(vowel_index, vowel_index)\n    end\n    return closest_vowel\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for\
    \ i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local vowel_index = nil\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            vowel_index = i\n            break\n     \
    \   end\n    end\n    if vowel_index then\n        local prev_char = word:sub(vowel_index\
    \ - 1, vowel_index - 1)\n        local next_char = word:sub(vowel_index + 1, vowel_index\
    \ + 1)\n        if prev_char and next_char and not table.contains(vowels, prev_char)\
    \ and not table.contains(vowels, next_char) then\n            return word:sub(vowel_index,\
    \ vowel_index)\n        end\n    end\n    return ''\nend", "    -- TODO: implement\
    \ this function\nend", "    -- your code here\n    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel\
    \ = ''\n    local consonant = ''\n    local result = ''\n    for i = #word, 1,\
    \ -1 do\n        for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j]\
    \ then\n                vowel = word:sub(i, i)\n            end\n        end\n\
    \        for j = 1, #consonants do\n            if word:sub(i, i) == consonants[j]\
    \ then\n                consonant = word:sub(i, i)\n            end\n        end\n\
    \        if vowel ~= '' and consonant ~= '' then\n            result = vowel\n\
    \            break\n        end\n        vowel = ''\n        consonant = ''\n\
    \    end\n    return result\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local closest_vowel = ''\n  local closest_index = 0\n  for i = #word, 1, -1\
    \ do\n    local char = word:sub(i, i)\n    if table.indexof(vowels, char) then\n\
    \      closest_vowel = char\n      closest_index = i\n      break\n    end\n \
    \ end\n  if closest_index == 0 then\n    return ''\n  end\n  for i = closest_index\
    \ - 1, 1, -1 do\n    local char = word:sub(i, i)\n    if not table.indexof(vowels,\
    \ char) then\n      return closest_vowel\n    end\n  end\n  return ''\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for\
    \ i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i,\
    \ i)) then\n            if last_vowel ~= word:sub(i, i) then\n               \
    \ return word:sub(i, i)\n            end\n        end\n    end\n    return ''\n\
    end", "    -- TODO: implement this function\nend", "    -- your code here\nend",
  "    -- TODO: implement this function\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local cons = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest =\
    \ ''\n    local closest_dist = math.huge\n    for i = 1, #word do\n        local\
    \ c = word:sub(i, i)\n        if table.contains(vowels, c) then\n            local\
    \ prev = word:sub(i - 1, i - 1)\n            local next = word:sub(i + 1, i +\
    \ 1)\n            if table.contains(cons, prev) and table.contains(cons, next)\
    \ then\n                local dist = i - 1\n                if dist < closest_dist\
    \ then\n                    closest_dist = dist\n                    closest =\
    \ c\n                end\n            end\n        end\n    end\n    return closest\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, #word do\n      \
    \  if table.contains(vowels, word:sub(i, i)) then\n            closest_vowel =\
    \ word:sub(i, i)\n            closest_vowel_index = i\n            for j = i,\
    \ 1, -1 do\n                if table.contains(consonants, word:sub(j, j)) then\n\
    \                    closest_consonant_index = j\n                    break\n\
    \                end\n            end\n            for j = i, #word do\n     \
    \           if table.contains(consonants, word:sub(j, j)) then\n             \
    \       if j - closest_vowel_index < closest_vowel_index - closest_consonant_index\
    \ then\n                        closest_vowel = word:sub(i, i)\n             \
    \           closest_vowel_index = i\n                        closest_consonant_index\
    \ = j\n                    end\n                    break\n                end\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if word:sub(i,\
    \ i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i)\
    \ == 'o' or word:sub(i, i) == 'u' then\n            closest_vowel = word:sub(i,\
    \ i)\n            closest_vowel_index = i\n            break\n        end\n  \
    \  end\n    if closest_vowel_index == 1 then\n        return ''\n    end\n   \
    \ for i = closest_vowel_index - 1, 1, -1 do\n        if word:sub(i, i) ~= 'a'\
    \ and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o'\
    \ and word:sub(i, i) ~= 'u' then\n            return closest_vowel\n        end\n\
    \    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local word_len = #word\n    local vowel_pos = -1\n    for i = word_len, 1,\
    \ -1 do\n        if not is_consonant(word:sub(i, i)) then\n            vowel_pos\
    \ = i\n            break\n        end\n    end\n    if vowel_pos == -1 then\n\
    \        return ''\n    end\n    local vowel = word:sub(vowel_pos, vowel_pos)\n\
    \    for i = 1, #vowels do\n        if vowel == vowels[i] then\n            return\
    \ vowel\n        end\n    end\n    return ''\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local result = ''\n    local last_consonant = ''\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local char =\
    \ word:sub(i, i)\n        if last_consonant ~= '' and last_vowel ~= '' then\n\
    \            result = last_vowel\n            break\n        end\n        if char\
    \ == last_consonant then\n            last_consonant = ''\n        elseif char\
    \ == last_vowel then\n            last_vowel = ''\n        elseif table.contains(vowels,\
    \ char) then\n            last_vowel = char\n        else\n            last_consonant\
    \ = char\n        end\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = -1\n    local closest_consonant_index = -1\n    for i = #word, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if table.contains(vowels, char)\
    \ then\n            closest_vowel = char\n            closest_vowel_index = i\n\
    \        elseif closest_vowel_index > 0 then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index > 0\
    \ and closest_consonant_index > 0 then\n        return closest_vowel\n    end\n\
    \    return ''\nend", "    -- YOUR CODE HERE\n    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_table\
    \ = {}\n    local word_table_vowel = {}\n    local word_table_consonant = {}\n\
    \    local word_table_vowel_consonant = {}\n    local word_table_consonant_vowel\
    \ = {}\n    local word_table_vowel_consonant_vowel = {}\n    local word_table_consonant_vowel_consonant\
    \ = {}\n    local word_table_vowel_consonant_vowel_consonant = {}\n    local word_table_consonant_vowel_consonant_vowel\
    \ = {}\n    local word_table_vowel_consonant_vowel_consonant_vowel = {}\n    local\
    \ word_table_consonant_vowel_consonant_vowel_consonant = {}\n    local word_table_vowel_consonant_vowel_consonant_vowel_consonant\
    \ = {}\n    local word_table_consonant_vowel_consonant_vowel_consonant_vowel =\
    \ {}\n    local word_table_vowel_consonant_vowel_consonant_vowel_consonant_vowel\
    \ = {}\n    local word_table_consonant_vowel_consonant_vowel_consonant_vowel_consonant\
    \ = {}\n    local word_table_vowel_consonant_vowel_consonant_vowel_consonant_vowel_consonant\
    \ = {}\n    local word_table_consonant_vowel_consonant_vowel_consonant_v", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n \
    \   local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if word:sub(i,\
    \ i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i)\
    \ == 'o' or word:sub(i, i) == 'u' then\n            closest_vowel = word:sub(i,\
    \ i)\n            closest_vowel_index = i\n            break\n        end\n  \
    \  end\n    if closest_vowel_index == 0 then\n        return ''\n    end\n   \
    \ for i = closest_vowel_index - 1, 1, -1 do\n        if word:sub(i, i) ~= 'a'\
    \ and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o'\
    \ and word:sub(i, i) ~= 'u' then\n            return closest_vowel\n        end\n\
    \    end\n    return ''\nend", "    local vowels = 'aeiouAEIOU'\n    local consonants\
    \ = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    local closest_vowel = ''\n\
    \    local closest_vowel_distance = 0\n    local distance = 0\n    for i = 1,\
    \ #word do\n        if string.find(vowels, word:sub(i, i)) then\n            distance\
    \ = 0\n            for j = i, #word do\n                if string.find(consonants,\
    \ word:sub(j, j)) then\n                    distance = distance + 1\n        \
    \        elseif string.find(vowels, word:sub(j, j)) then\n                   \
    \ break\n                end\n            end\n            if distance > closest_vowel_distance\
    \ then\n                closest_vowel_distance = distance\n                closest_vowel\
    \ = word:sub(i, i)\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local consonant_index =\
    \ 0\n    local closest_vowel = ''\n    local closest_distance = 0\n    for i =\
    \ 1, #word do\n        if table.contains(vowels, word:sub(i, i)) then\n      \
    \      vowel_index = i\n            for j = i, #word do\n                if table.contains(consonants,\
    \ word:sub(j, j)) then\n                    consonant_index = j\n            \
    \        if closest_distance == 0 or closest_distance > consonant_index - vowel_index\
    \ then\n                        closest_distance = consonant_index - vowel_index\n\
    \                        closest_vowel = word:sub(vowel_index, vowel_index)\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index\
    \ = 0\n    local consonant_index = 0\n    local closest_vowel = ''\n    for i\
    \ = #word, 1, -1 do\n        if vowel_index == 0 and consonant_index == 0 then\n\
    \            for j = 1, #vowels do\n                if word:sub(i, i) == vowels[j]\
    \ then\n                    vowel_index = i\n                end\n           \
    \ end\n            for j = 1, #consonants do\n                if word:sub(i, i)\
    \ == consonants[j] then\n                    consonant_index = i\n           \
    \     end\n            end\n        elseif vowel_index ~= 0 and consonant_index\
    \ == 0 then\n            for j = 1, #consonants do\n                if word:sub(i,\
    \ i) == consonants[j] then\n                    consonant_index = i\n        \
    \        end\n            end\n        elseif vowel_index == 0 and consonant_index\
    \ ~= 0 then\n            for j = 1, #vowels do\n                if word:sub(i,\
    \ i) == vowels[j] then\n                    vowel_index = i\n                end\n\
    \            end\n        end\n        if vowel_index ~= 0 and consonant_index\
    \ ~= 0 then\n            closest_vowel = word:sub(vowel_index, vowel_index)\n\
    \            break\n        end\n    end\n    return closest_vowel\nend", "  \
    \  local vowel = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = {}\n    local\
    \ word_len = #word\n    for i = 1, word_len do\n        if table.indexof(vowel,\
    \ word:sub(i, i)) then\n            vowel_index[#vowel_index + 1] = i\n      \
    \  end\n    end\n    local vowel_len = #vowel_index\n    if vowel_len == 0 then\n\
    \        return ''\n    end\n    local closest_vowel = ''\n    local closest_distance\
    \ = 0\n    for i = 1, vowel_len do\n        local distance = word_len - vowel_index[i]\n\
    \        if closest_distance == 0 or distance < closest_distance then\n      \
    \      closest_distance = distance\n            closest_vowel = word:sub(vowel_index[i],\
    \ vowel_index[i])\n        end\n    end\n    return closest_vowel\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n   \
    \ local closest_vowel_index = -1\n    for i = 1, #word do\n        local letter\
    \ = word:sub(i, i)\n        if table.contains(vowels, letter) then\n         \
    \   if i > closest_vowel_index then\n                closest_vowel = letter\n\
    \                closest_vowel_index = i\n            end\n        end\n    end\n\
    \    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n \
    \   local vowel_index = 0\n    local consonant_index = 0\n    for i = #word, 1,\
    \ -1 do\n        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n\
    \                vowel_index = i\n                break\n            end\n   \
    \     end\n        for j = 1, #consonants do\n            if word[i] == consonants[j]\
    \ then\n                consonant_index = i\n                break\n         \
    \   end\n        end\n        if vowel_index ~= 0 and consonant_index ~= 0 then\n\
    \            if vowel_index > consonant_index then\n                result = word[vowel_index]\n\
    \                break\n            end\n        end\n    end\n    return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n\
    \    for i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i, i))\
    \ then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    if vowel_index == 0 then\n        return ''\n    end\n    local prev_char\
    \ = word:sub(vowel_index - 1, vowel_index - 1)\n    local next_char = word:sub(vowel_index\
    \ + 1, vowel_index + 1)\n    if not table.contains(vowels, prev_char) and not\
    \ table.contains(vowels, next_char) then\n        return word:sub(vowel_index,\
    \ vowel_index)\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local result = ''\n    local vowel_index = 0\n    for i = #word,\
    \ 1, -1 do\n        for j = 1, #vowels do\n            if word[i] == vowels[j]\
    \ then\n                vowel_index = i\n                break\n            end\n\
    \        end\n        if vowel_index ~= 0 then\n            break\n        end\n\
    \    end\n    if vowel_index ~= 0 then\n        for i = vowel_index, 1, -1 do\n\
    \            for j = 1, #vowels do\n                if word[i] == vowels[j] then\n\
    \                    result = word[i]\n                    break\n           \
    \     end\n            end\n            if result ~= '' then\n               \
    \ break\n            end\n        end\n    end\n    return result\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local last_consonant\
    \ = ''\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      last_vowel = char\n        else\n            if last_vowel ~= '' then\n\
    \                result = last_vowel\n                break\n            end\n\
    \            last_consonant = char\n        end\n    end\n    return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = #word, 1, -1 do\n  \
    \      if table.contains(vowels, word:sub(i, i)) then\n            closest_vowel\
    \ = word:sub(i, i)\n            closest_vowel_index = i\n            break\n \
    \       end\n    end\n    for i = closest_vowel_index, 1, -1 do\n        if table.contains(consonants,\
    \ word:sub(i, i)) then\n            closest_consonant_index = i\n            break\n\
    \        end\n    end\n    if closest_vowel_index > closest_consonant_index then\n\
    \        return closest_vowel\n    else\n        return ''\n    end\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local result = ''\n    local last_consonant = ''\n    local\
    \ last_vowel = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if table.contains(vowels, c) then\n            last_vowel = c\n\
    \        elseif table.contains(consonants, c) then\n            if last_vowel\
    \ ~= '' then\n                result = last_vowel\n                break\n   \
    \         end\n            last_consonant = c\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n    local last_consonant\
    \ = ''\n    local last_vowel = ''\n    for i = 1, #word do\n        for _, v in\
    \ ipairs(vowels) do\n            if word[i] == v then\n                last_vowel\
    \ = v\n            end\n        end\n        for _, v in ipairs(consonants) do\n\
    \            if word[i] == v then\n                last_consonant = v\n      \
    \      end\n        end\n    end\n    if last_consonant ~= '' and last_vowel ~=\
    \ '' then\n        result = last_vowel\n    end\n    return result\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    local word_length = string.len(word)\n\
    \    for i = 1, word_length do\n        local current_letter = string.sub(word,\
    \ i, i)\n        if table.contains(vowels, current_letter) then\n            closest_vowel\
    \ = current_letter\n            closest_vowel_index = i\n        end\n       \
    \ if table.contains(consonants, current_letter) then\n            closest_consonant_index\
    \ = i\n        end\n        if closest_vowel_index > closest_consonant_index then\n\
    \            return closest_vowel\n        end\n    end\n    return ''\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_vowel = ''\n    local\
    \ prev_consonant = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.indexof(vowels, char) then\n            prev_vowel = char\n\
    \        else\n            if prev_vowel ~= '' then\n                return prev_vowel\n\
    \            end\n            prev_consonant = char\n        end\n    end\n  \
    \  return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_len = #word\n    local vowel_index\
    \ = 0\n    local consonant_index = 0\n    local closest_vowel = ''\n    for i\
    \ = word_len, 1, -1 do\n        local char = word:sub(i, i)\n        if vowel_index\
    \ == 0 and table.contains(vowels, char) then\n            vowel_index = i\n  \
    \      end\n        if consonant_index == 0 and table.contains(consonants, char)\
    \ then\n            consonant_index = i\n        end\n        if vowel_index ~=\
    \ 0 and consonant_index ~= 0 then\n            closest_vowel = word:sub(vowel_index,\
    \ vowel_index)\n            break\n        end\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n\
    \    local consonant_index = 0\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, #word do\n      \
    \  local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            vowel_index = i\n            if vowel_index > consonant_index and\
    \ vowel_index - consonant_index > closest_vowel_index - closest_consonant_index\
    \ then\n                closest_vowel = char\n                closest_vowel_index\
    \ = vowel_index\n                closest_consonant_index = consonant_index\n \
    \           end\n        else\n            consonant_index = i\n        end\n\
    \    end\n    return closest_vowel\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local closest_vowel = ''\n  local closest_index = 0\n  for i = #word,\
    \ 1, -1 do\n    local char = word:sub(i, i)\n    if char:match('[aeiou]') then\n\
    \      closest_vowel = char\n      closest_index = i\n      break\n    end\n \
    \ end\n  for i = closest_index - 1, 1, -1 do\n    local char = word:sub(i, i)\n\
    \    if char:match('[^aeiou]') then\n      return closest_vowel\n    end\n  end\n\
    \  return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    local last_consonant = ''\n    for i = #word, 1, -1 do\n        local\
    \ c = word:sub(i, i)\n        if last_vowel == '' and last_consonant ~= '' then\n\
    \            for _, v in ipairs(vowels) do\n                if c == v then\n \
    \                   last_vowel = c\n                    break\n              \
    \  end\n            end\n        elseif last_vowel ~= '' and last_consonant ==\
    \ '' then\n            for _, v in ipairs(vowels) do\n                if c ==\
    \ v then\n                    return last_vowel\n                end\n       \
    \     end\n            last_consonant = c\n        elseif last_vowel == '' and\
    \ last_consonant == '' then\n            for _, v in ipairs(vowels) do\n     \
    \           if c == v then\n                    last_vowel = c\n             \
    \       break\n                end\n            end\n        end\n    end\n  \
    \  return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, #word do\n      \
    \  local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            if closest_vowel_index == 0 then\n                closest_vowel_index\
    \ = i\n            end\n        elseif table.contains(consonants, char) then\n\
    \            if closest_vowel_index > 0 and closest_consonant_index == 0 then\n\
    \                closest_consonant_index = i\n            end\n        end\n \
    \   end\n    if closest_vowel_index > 0 and closest_consonant_index > 0 then\n\
    \        closest_vowel = word:sub(closest_vowel_index, closest_vowel_index)\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowel_index = 0\n    local vowel_distance = 0\n    local\
    \ word_length = string.len(word)\n    for i = word_length, 1, -1 do\n        local\
    \ letter = string.sub(word, i, i)\n        if vowel_index == 0 then\n        \
    \    for j = 1, #vowels do\n                if letter == vowels[j] then\n    \
    \                vowel_index = i\n                    vowel_distance = word_length\
    \ - i\n                end\n            end\n        else\n            for j =\
    \ 1, #vowels do\n                if letter == vowels[j] then\n               \
    \     if word_length - i < vowel_distance then\n                        vowel_index\
    \ = i\n                        vowel_distance = word_length - i\n            \
    \        end\n                end\n            end\n        end\n    end\n   \
    \ return string.sub(word, vowel_index, vowel_index)\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local closest_vowel_index\
    \ = -1\n  for i = #word, 1, -1 do\n    for _, v in ipairs(vowels) do\n      if\
    \ word:sub(i, i) == v then\n        closest_vowel = v\n        closest_vowel_index\
    \ = i\n        break\n      end\n    end\n    if closest_vowel_index ~= -1 then\n\
    \      break\n    end\n  end\n  if closest_vowel_index == 1 or closest_vowel_index\
    \ == #word then\n    return ''\n  end\n  if closest_vowel_index == -1 then\n \
    \   return ''\n  end\n  for i = closest_vowel_index - 1, 1, -1 do\n    for _,\
    \ v in ipairs(vowels) do\n      if word:sub(i, i) == v then\n        return ''\n\
    \      end\n    end\n  end\n  return closest_vowel\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for i = #word, 1,\
    \ -1 do\n        if table.contains(vowels, word:sub(i, i)) then\n            last_vowel\
    \ = word:sub(i, i)\n            break\n        end\n    end\n    return last_vowel\n\
    end", "    -- TODO: Implement this function\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local closest_vowel\
    \ = ''\n  local closest_vowel_index = 0\n  local closest_consonant_index = 0\n\
    \  local word_length = string.len(word)\n  for i = 1, word_length do\n    local\
    \ current_letter = string.sub(word, i, i)\n    if (current_letter == 'a' or current_letter\
    \ == 'e' or current_letter == 'i' or current_letter == 'o' or current_letter ==\
    \ 'u') then\n      local previous_letter = string.sub(word, i - 1, i - 1)\n  \
    \    local next_letter = string.sub(word, i + 1, i + 1)\n      if (previous_letter\
    \ == 'b' or previous_letter == 'c' or previous_letter == 'd' or previous_letter\
    \ == 'f' or previous_letter == 'g' or previous_letter == 'h' or previous_letter\
    \ == 'j' or previous_letter == 'k' or previous_letter == 'l' or previous_letter\
    \ == 'm' or previous_letter == 'n' or previous_letter == 'p' or previous_letter\
    \ == 'q' or previous_letter == 'r' or previous_letter == 's' or previous_letter\
    \ == 't' or previous_letter == 'v' or previous_letter == 'w' or previous_letter\
    \ == 'x' or previous_letter == 'y' or previous_letter == 'z') and (next_letter\
    \ == 'b' or next_letter == 'c' or next_letter == 'd' or next_letter == 'f' or\
    \ next_letter == 'g' or next_letter == 'h' or next_letter == 'j' or next_letter\
    \ == 'k' or next_letter == 'l' or next_letter == 'm' or next_letter", "    local\
    \ vowel = {'a', 'e', 'i', 'o', 'u'}\n    local index = #word\n    while index\
    \ > 0 do\n        if not vowel[word:sub(index, index)] then\n            local\
    \ i = index - 1\n            while i > 0 do\n                if vowel[word:sub(i,\
    \ i)] then\n                    return word:sub(i, i)\n                end\n \
    \               i = i - 1\n            end\n        end\n        index = index\
    \ - 1\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local result = ''\n    local index = 0\n    for i = #word, 1, -1 do\n\
    \        if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) ==\
    \ 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then\n            index\
    \ = i\n            break\n        end\n    end\n    if index == 0 then\n     \
    \   return ''\n    end\n    for i = index, 1, -1 do\n        if word:sub(i, i)\
    \ ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i)\
    \ ~= 'o' and word:sub(i, i) ~= 'u' then\n            result = word:sub(index,\
    \ index)\n            break\n        end\n    end\n    return result\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local vowel_index = 0\n    local consonant_index = 0\n \
    \   local closest_vowel = ''\n    local closest_distance = 0\n    for i = 1, #word\
    \ do\n        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n\
    \                vowel_index = i\n                break\n            end\n   \
    \     end\n        for j = 1, #consonants do\n            if word[i] == consonants[j]\
    \ then\n                consonant_index = i\n                break\n         \
    \   end\n        end\n        if vowel_index ~= 0 and consonant_index ~= 0 then\n\
    \            if closest_distance == 0 then\n                closest_distance =\
    \ consonant_index - vowel_index\n                closest_vowel = word[vowel_index]\n\
    \            elseif consonant_index - vowel_index < closest_distance then\n  \
    \              closest_distance = consonant_index - vowel_index\n            \
    \    closest_vowel = word[vowel_index]\n            end\n        end\n    end\n\
    \    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n \
    \   local vowel_index = 0\n    local consonant_index = 0\n    local i = #word\n\
    \    while i > 0 do\n        local char = word:sub(i, i)\n        if table.indexof(vowels,\
    \ char) then\n            vowel_index = i\n        elseif table.indexof(consonants,\
    \ char) then\n            consonant_index = i\n            break\n        end\n\
    \        i = i - 1\n    end\n    if vowel_index > consonant_index then\n     \
    \   result = word:sub(vowel_index, vowel_index)\n    end\n    return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = -1\n    local closest_consonant_index = -1\n    for i = 1, #word do\n    \
    \    local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            if closest_vowel_index == -1 then\n                closest_vowel_index\
    \ = i\n            end\n        elseif table.contains(consonants, char) then\n\
    \            if closest_vowel_index ~= -1 and closest_consonant_index == -1 then\n\
    \                closest_consonant_index = i\n            end\n        end\n \
    \   end\n    if closest_vowel_index ~= -1 and closest_consonant_index ~= -1 then\n\
    \        closest_vowel = word:sub(closest_vowel_index, closest_vowel_index)\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ table.contains(vowels, char) then\n            closest_vowel = char\n      \
    \      closest_vowel_index = i\n            break\n        end\n    end\n    if\
    \ closest_vowel_index == 0 then\n        return ''\n    end\n    for i = closest_vowel_index\
    \ - 1, 1, -1 do\n        local char = word:sub(i, i)\n        if not table.contains(vowels,\
    \ char) then\n            return closest_vowel\n        end\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_len = string.len(word)\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    local vowel_found = false\n\
    \    local consonant_found = false\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_vowel_distance = 0\n    for i = word_len, 1, -1 do\n\
    \        local char = string.sub(word, i, i)\n        if vowel_found == false\
    \ then\n            for j = 1, #vowels do\n                if char == vowels[j]\
    \ then\n                    vowel_found = true\n                    vowel_index\
    \ = i\n                end\n            end\n        end\n        if consonant_found\
    \ == false then\n            for j = 1, #consonants do\n                if char\
    \ == consonants[j] then\n                    consonant_found = true\n        \
    \            consonant_index = i\n                end\n            end\n     \
    \   end\n        if vowel_found == true and consonant_found == true then\n   \
    \         if closest_vowel_distance == 0 then\n                closest_vowel_distance\
    \ = consonant_index - vowel_index\n                closest_vowel_index = vowel_index\n\
    \                closest_vowel = string.sub(word, vowel_index, vowel_index)\n\
    \            else\n                if consonant_index - vowel_index < closest_vowel_distance\
    \ then\n                    closest_vowel_distance = consonant_index - vowel_index\n\
    \                    closest_vowel_index = vowel_index\n                    closest_vowel\
    \ = string.sub(word, vowel_index, vowel_index)\n                end\n        \
    \    end\n            vowel_found = false\n            consonant_found = false\n\
    \        end\n    end\n    return closest_vowel\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local vowel_index = 0\n  for i = #word, 1, -1 do\n  \
    \  for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j] then\n        vowel_index\
    \ = i\n        break\n      end\n    end\n    if vowel_index ~= 0 then\n     \
    \ break\n    end\n  end\n  if vowel_index == 0 then\n    return ''\n  end\n  local\
    \ closest_vowel = ''\n  local closest_vowel_index = 0\n  for i = vowel_index,\
    \ 1, -1 do\n    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j] then\n\
    \        closest_vowel = word:sub(i, i)\n        closest_vowel_index = i\n   \
    \     break\n      end\n    end\n    if closest_vowel_index ~= 0 then\n      break\n\
    \    end\n  end\n  return closest_vowel\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n   \
    \     local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            last_vowel = char\n            break\n        end\n    end\n    return\
    \ last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n     \
    \   for _, v in ipairs(vowels) do\n            if word:sub(i, i) == v then\n \
    \               closest_vowel = v\n                closest_vowel_index = i\n \
    \               break\n            end\n        end\n        if closest_vowel_index\
    \ ~= 0 then\n            break\n        end\n    end\n    if closest_vowel_index\
    \ == 1 then\n        return ''\n    end\n    for i = closest_vowel_index - 1,\
    \ 1, -1 do\n        for _, v in ipairs(vowels) do\n            if word:sub(i,\
    \ i) == v then\n                return ''\n            end\n        end\n    end\n\
    \    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n \
    \   for i = #word, 1, -1 do\n        for j = 1, #vowels do\n            if word[i]\
    \ == vowels[j] then\n                for k = 1, #consonants do\n             \
    \       if word[i - 1] == consonants[k] and word[i + 1] == consonants[k] then\n\
    \                        result = word[i]\n                        break\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n\
    \    local closest_consonant_index_2 = 0\n    local word_length = string.len(word)\n\
    \    for i = 1, word_length do\n        local letter = string.sub(word, i, i)\n\
    \        if table.contains(vowels, letter) then\n            closest_vowel = letter\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    if closest_vowel_index == 0 then\n        return ''\n    end\n    for i =\
    \ closest_vowel_index, word_length do\n        local letter = string.sub(word,\
    \ i, i)\n        if table.contains(consonants, letter) then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    for i = closest_consonant_index,\
    \ word_length do\n        local letter = string.sub(word, i, i)\n        if table.contains(consonants,\
    \ letter) then\n            closest_consonant_index_2 = i\n            break\n\
    \        end\n    end\n    if closest_consonant_index_2 == 0 then\n        return\
    \ ''\n    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    for i = #word, 1, -1 do\n\
    \        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n   \
    \             vowel_index = i\n                break\n            end\n      \
    \  end\n        for j = 1, #consonants do\n            if word[i] == consonants[j]\
    \ then\n                consonant_index = i\n                break\n         \
    \   end\n        end\n        if vowel_index > 0 and consonant_index > 0 then\n\
    \            return word[vowel_index]\n        end\n    end\n    return ''\nend",
  "  -- your code here\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local prev_char = ''\n    local\
    \ next_char = ''\n    local result = ''\n    for i = #word, 1, -1 do\n       \
    \ if prev_char == '' then\n            prev_char = word:sub(i, i)\n        elseif\
    \ next_char == '' then\n            next_char = word:sub(i, i)\n        end\n\
    \        if prev_char ~= '' and next_char ~= '' then\n            if table.contains(vowels,\
    \ prev_char) and table.contains(consonants, next_char) then\n                result\
    \ = prev_char\n                break\n            elseif table.contains(consonants,\
    \ prev_char) and table.contains(vowels, next_char) then\n                result\
    \ = next_char\n                break\n            else\n                prev_char\
    \ = next_char\n                next_char = ''\n            end\n        end\n\
    \    end\n    return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_len = #word\n\
    \    local vowel_pos = 0\n    local consonant_pos = 0\n    local closest_vowel\
    \ = ''\n    for i = 1, word_len do\n        local letter = word:sub(i, i)\n  \
    \      if table.contains(vowels, letter) then\n            vowel_pos = i\n   \
    \     elseif table.contains(consonants, letter) then\n            consonant_pos\
    \ = i\n        end\n        if vowel_pos > 0 and consonant_pos > 0 then\n    \
    \        if vowel_pos > consonant_pos then\n                closest_vowel = letter\n\
    \                break\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    -- TODO: implement this function\nend", "    -- YOUR CODE HERE\n  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local result = ''\n    local index = 0\n    local flag =\
    \ false\n    for i = #word, 1, -1 do\n        for j = 1, #vowels do\n        \
    \    if word[i] == vowels[j] then\n                flag = true\n             \
    \   break\n            end\n        end\n        if flag then\n            index\
    \ = i\n            break\n        end\n    end\n    if index ~= 0 then\n     \
    \   for i = index, 1, -1 do\n            for j = 1, #consonants do\n         \
    \       if word[i] == consonants[j] then\n                    flag = true\n  \
    \                  break\n                end\n            end\n            if\
    \ flag then\n                break\n            end\n        end\n        if flag\
    \ then\n            for i = index, #word do\n                for j = 1, #consonants\
    \ do\n                    if word[i] == consonants[j] then\n                 \
    \       flag = true\n                        break\n                    end\n\
    \                end\n                if flag then\n                    break\n\
    \                end\n            end\n            if flag then\n            \
    \    result = word[index]\n            end\n        end\n    end\n    return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n \
    \   local index = #word\n    while index > 0 do\n        local char = word:sub(index,\
    \ index)\n        if table.contains(vowels, char) then\n            result = char\n\
    \            break\n        end\n        index = index - 1\n    end\n    return\
    \ result\nend", "    -- TODO: implement this function\nend", "    -- TODO: implement\
    \ this function\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n  local closest_vowel = ''\n  local prev_char\
    \ = ''\n  local curr_char = ''\n  local next_char = ''\n  local prev_char_is_consonant\
    \ = false\n  local curr_char_is_consonant = false\n  local next_char_is_consonant\
    \ = false\n  local prev_char_is_vowel = false\n  local curr_char_is_vowel = false\n\
    \  local next_char_is_vowel = false\n  for i = 1, #word do\n    prev_char = curr_char\n\
    \    curr_char = next_char\n    next_char = word:sub(i, i)\n    prev_char_is_consonant\
    \ = false\n    curr_char_is_consonant = false\n    next_char_is_consonant = false\n\
    \    prev_char_is_vowel = false\n    curr_char_is_vowel = false\n    next_char_is_vowel\
    \ = false\n    for j = 1, #vowels do\n      if prev_char == vowels[j] then\n \
    \       prev_char_is_vowel = true\n      end\n      if curr_char == vowels[j]\
    \ then\n        curr_char_is_vowel = true\n      end\n      if next_char == vowels[j]\
    \ then\n        next_char_is_vowel = true\n      end\n    end\n    for j = 1,\
    \ #consonants do\n      if prev_char == consonants[j] then\n        prev_char_is_consonant\
    \ = true\n      end\n      if curr_char == consonants[j] then\n        curr_char_is_consonant\
    \ = true", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n    local last_vowel =\
    \ ''\n    local last_consonant = ''\n    for i = 1, #word do\n        local char\
    \ = word:sub(i, i)\n        if table.contains(vowels, char) then\n           \
    \ last_vowel = char\n        elseif table.contains(consonants, char) then\n  \
    \          if last_vowel ~= '' then\n                result = last_vowel\n   \
    \         end\n            last_consonant = char\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n     \
    \   if table.contains(vowels, word:sub(i, i)) then\n            closest_vowel\
    \ = word:sub(i, i)\n            closest_vowel_index = i\n            break\n \
    \       end\n    end\n    if closest_vowel_index == 0 then\n        return ''\n\
    \    end\n    for i = closest_vowel_index - 1, 1, -1 do\n        if not table.contains(vowels,\
    \ word:sub(i, i)) then\n            return closest_vowel\n        end\n    end\n\
    \    return ''\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n  local word_table = {}\n  local word_table_vowels\
    \ = {}\n  local word_table_consonants = {}\n  local word_table_vowels_index =\
    \ {}\n  local word_table_consonants_index = {}\n  local word_table_vowels_index_diff\
    \ = {}\n  local word_table_consonants_index_diff = {}\n  local word_table_vowels_index_diff_min\
    \ = {}\n  local word_table_consonants_index_diff_min = {}\n  local word_table_vowels_index_diff_min_index\
    \ = {}\n  local word_table_consonants_index_diff_min_index = {}\n  local word_table_vowels_index_diff_min_index_value\
    \ = {}\n  local word_table_consonants_index_diff_min_index_value = {}\n  local\
    \ word_table_vowels_index_diff_min_index_value_index = {}\n  local word_table_consonants_index_diff_min_index_value_index\
    \ = {}\n  local word_table_vowels_index_diff_min_index_value_index_value = {}\n\
    \  local word_table_consonants_index_diff_min_index_value_index_value = {}\n \
    \ local word_table_vowels_index_diff_min_index_value_index_value_index = {}\n\
    \  local word_table_consonants_index_diff_min_index_value_index_value_index =\
    \ {}\n  local word_table_vowels_index_diff_min_index_value_index_value_index_value\
    \ = {}\n  local word_table_consonants_index_diff_min_index_value", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        for j = 1, #vowels\
    \ do\n            if word:sub(i, i) == vowels[j] then\n                closest_vowel\
    \ = word:sub(i, i)\n                closest_vowel_index = i\n                break\n\
    \            end\n        end\n        if closest_vowel_index ~= 0 then\n    \
    \        break\n        end\n    end\n    if closest_vowel_index == 1 or closest_vowel_index\
    \ == #word then\n        return ''\n    end\n    for i = closest_vowel_index -\
    \ 1, 1, -1 do\n        for j = 1, #vowels do\n            if word:sub(i, i) ==\
    \ vowels[j] then\n                return ''\n            end\n        end\n  \
    \  end\n    return closest_vowel\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
