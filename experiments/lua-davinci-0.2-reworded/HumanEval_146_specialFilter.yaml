---
name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes a table of numbers as input and returns \n--
  the number of elements in the table that are greater than 10 and both \n-- first
  and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>> specialFilter({15,
  -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2, -3, 45, 21, 109})\n-- 2\nlocal
  function specialFilter(nums)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = specialFilter
      lu.assertEquals(candidate({5, -2, 1, -5}), 0)
      lu.assertEquals(candidate({15, -73, 14, -15}), 1)
      lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)
      lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)
      lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)
      lu.assertEquals(candidate({1}), 0)
      lu.assertEquals(candidate({}), 0)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for k, v in pairs(nums) do
          if v > 10 and v % 2 == 1 and math.floor(v / 10) % 2 == 1 and v % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and (num % 2 == 1) and (math.floor(num / 10) % 2 == 1) then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and isOdd(num % 10) and isOdd(num // 10) then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and v % 2 == 1 and math.floor(v / 10) % 2 == 1 and v % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tlocal num = nums[i]\n\t\tif num >
  10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n\t\t\tcount = count +
  1\n\t\tend\n\tend\n\treturn count\nend"
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          if nums[i] > 10 and nums[i] % 2 == 1 and math.floor(nums[i] / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 then
              local first = num % 10
              local last = num // 10
              if first % 2 == 1 and last % 2 == 1 then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and v % 2 == 1 and math.floor(v / 10) % 2 == 1 and v % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    -- your code here
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 and math.abs(num)
  % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n\t\t\tcount = count
  + 1\n\t\tend\n\tend\n\treturn count\nend"
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for k, v in pairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      if nums[i] > 10 and math.abs(nums[i]) % 2 == 1 and math.abs(nums[i] % 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, v in ipairs(nums) do
      if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and isOdd(num % 10) and isOdd(num // 10) then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and isFirstAndLastDigitsOdd(num) then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(nums) do
          if v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, num in ipairs(nums) do
          if num > 10 and isOdd(num) and isOdd(num % 10) then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local n = nums[i]
          if n > 10 and n % 2 == 1 and (n % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          if nums[i] > 10 and math.fmod(nums[i], 2) == 1 and math.fmod(math.floor(nums[i] / 10), 2) == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          local num = nums[i]
          if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #nums do
      local num = nums[i]
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(nums) do
          if num > 10 and num % 2 == 1 and num // 10 % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #nums do
          if nums[i] > 10 and nums[i] % 2 == 1 and math.floor(nums[i] / 10) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(nums) do
      if num > 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
