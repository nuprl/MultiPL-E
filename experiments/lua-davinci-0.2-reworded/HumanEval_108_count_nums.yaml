---
name: HumanEval_108_count_nums
language: lua
prompt: |
  -- Write a function count_nums which takes a table of integers and returns
  -- the number of elements which has a sum of digits > 0.
  -- If a number is negative, then its first signed digit will be negative:
  -- e.g. -123 has signed digits -1, 2, and 3.
  -- >>> count_nums({})
  -- 0
  -- >>> count_nums({-1, 11, -11})
  -- 1
  -- >>> count_nums({1, 1, 2})
  -- 3
  local function count_nums(arr)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = count_nums
      lu.assertEquals(candidate({}), 0)
      lu.assertEquals(candidate({-1, -2, 0}), 0)
      lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)
      lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)
      lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)
      lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)
      lu.assertEquals(candidate({0, 1}), 1)
      lu.assertEquals(candidate({1}), 1)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if v > 0 then
              local sum = 0
              while v > 0 do
                  sum = sum + v % 10
                  v = math.floor(v / 10)
              end
              if sum > 0 then
                  count = count + 1
              end
          elseif v < 0 then
              local sum = 0
              while v < 0 do
                  sum = sum + v % 10
                  v = math.floor(v / 10)
              end
              if sum < 0 then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          local sum = 0
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              local digit = tonumber(tostring(v):sub(i, i))
              if v < 0 then
                  digit = -digit
              end
              sum = sum + digit
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              local d = n % 10
              if d < 0 then
                  d = -d
              end
              sum = sum + d
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              sum = sum + 1
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local x = v
          while x ~= 0 do
              sum = sum + (x % 10)
              x = math.floor(x / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      if n < 0 then
        n = -n
      end
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = math.abs(v)
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, num in ipairs(arr) do
      local sum = 0
      for _, digit in ipairs(to_digits(num)) do
        sum = sum + digit
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for _, d in ipairs(digits(v)) do
        sum = sum + d
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      if num < 0 then
        num = -num
        sum = -1
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch('[-%d]') do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        local digit = num % 10
        num = math.floor(num / 10)
        sum = sum + digit
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          local sum = 0
          local n = num
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = n // 10
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      if sum_digits(v) > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if v < 0 then
              v = -v
          end
          local sum = 0
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if v > 0 then
              local sum = 0
              while v > 0 do
                  sum = sum + v % 10
                  v = math.floor(v / 10)
              end
              if sum > 0 then
                  count = count + 1
              end
          elseif v < 0 then
              local sum = 0
              while v < 0 do
                  sum = sum + v % 10
                  v = math.floor(v / 10)
              end
              if sum < 0 then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = math.abs(v)
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("[-]?%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for i = 1, #tostring(v) do
        local digit = tonumber(tostring(v):sub(i, i))
        if v < 0 then
          digit = -digit
        end
        sum = sum + digit
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      if sum_digits(arr[i]) > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              sum = sum + 1
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          if sum_digits(arr[i]) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(split_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          if sum_digits(num) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + math.abs(num % 10)
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(i, i))
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(string.to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(string.to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for d in tostring(v):gmatch("[-%d]") do
        sum = sum + tonumber(d)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      if sum_digits(v) > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("[-]?%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          local sum = 0
          if num < 0 then
              sum = sum - 1
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = num // 10
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(i, i))
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("[-]?%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for _, d in ipairs(to_digits(v)) do
        sum = sum + d
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for i = 1, #tostring(v) do
        sum = sum + tonumber(tostring(v):sub(i, i))
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(i, i))
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(i, i))
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch('%d') do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              sum = sum + 1
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i, v in ipairs(arr) do
      if sum_digits(v) > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          if sum_digits(arr[i]) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch('[-]?%d') do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch('%d') do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          while v ~= 0 do
              sum = sum + v % 10
              v = v // 10
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          local sum = 0
          local n = v
          if v < 0 then
              n = -v
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + math.abs(num % 10)
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          local sum = 0
          for digit in tostring(math.abs(num)):gmatch("%d") do
              sum = sum + tonumber(digit)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = math.abs(v)
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = math.abs(v)
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local num = v
          while num ~= 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          if sum_digits(arr[i]) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          if v > 0 then
              local sum = 0
              while v > 0 do
                  sum = sum + v % 10
                  v = math.floor(v / 10)
              end
              if sum > 0 then
                  count = count + 1
              end
          else
              if v < 0 then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for _, d in ipairs(split_digits(v)) do
        sum = sum + d
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("[-]?%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = math.abs(v)
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              local digit = tonumber(tostring(v):sub(i, i))
              if digit ~= nil then
                  sum = sum + digit
              end
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              local d = n % 10
              sum = sum + d
              n = (n - d) / 10
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("[-]?%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local num = v
      while num ~= 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      if num < 0 then
        num = -num
        sum = -1
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              sum = sum + 1
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              local digit = num % 10
              sum = sum + digit
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              sum = sum + tonumber(tostring(v):sub(i, i))
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          local sum = 0
          for digit in tostring(num):gmatch("[-]?%d") do
              sum = sum + tonumber(digit)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = math.abs(v)
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          local sum = 0
          for digit in tostring(num):gmatch("%d") do
              sum = sum + tonumber(digit)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local sum = 0
      local num = arr[i]
      if num < 0 then
        num = -num
      end
      while num > 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for i = 1, #tostring(v) do
        sum = sum + tonumber(tostring(v):sub(i, i))
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          if v < 0 then
              v = -v
          end
          while v > 0 do
              sum = sum + v % 10
              v = math.floor(v / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, num in ipairs(arr) do
      local sum = 0
      for digit in tostring(num):gmatch("[-]?%d") do
        sum = sum + tonumber(digit)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i, v in ipairs(arr) do
      local sum = 0
      for _, d in ipairs(to_digits(v)) do
        sum = sum + d
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      while n ~= 0 do
        sum = sum + (n % 10)
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if v > 0 then
              local sum = 0
              for d in tostring(v):gmatch("%d") do
                  sum = sum + tonumber(d)
              end
              if sum > 0 then
                  count = count + 1
              end
          elseif v < 0 then
              local sum = 0
              for d in tostring(v):gmatch("%d") do
                  sum = sum + tonumber(d)
              end
              if sum < 0 then
                  count = count + 1
              end
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for d in tostring(v):gmatch('[-%d]') do
        sum = sum + tonumber(d)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      if v < 0 then
        v = -v
      end
      local sum = 0
      while v > 0 do
        sum = sum + v % 10
        v = math.floor(v / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for i = 1, #arr do
      local num = arr[i]
      local sum = 0
      while num ~= 0 do
        sum = sum + num % 10
        num = math.floor(num / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, num in ipairs(arr) do
          local sum = 0
          local n = num
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for i = 1, #tostring(v) do
              local digit = tonumber(tostring(v):sub(i, i))
              if v < 0 then
                  digit = -digit
              end
              sum = sum + digit
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      if n < 0 then
        n = -n
      end
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, val in ipairs(arr) do
          local sum = 0
          local n = val
          while n ~= 0 do
              local d = n % 10
              sum = sum + d
              n = (n - d) / 10
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          if sum_digits(arr[i]) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          local sum = 0
          local num = v
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _,v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      if n < 0 then
        n = -n
      end
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local num = arr[i]
          if num < 0 then
              num = -num
          end
          while num > 0 do
              sum = sum + num % 10
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          local sum = 0
          local n = v
          if v < 0 then
              n = -v
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(split_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for d in tostring(v):gmatch("%d") do
              sum = sum + tonumber(d)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      if sum_digits(v) > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local sum = 0
          local n = arr[i]
          if n < 0 then
              n = -n
          end
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      for _, d in ipairs(to_digits(v)) do
        sum = sum + d
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for i = 1, #arr do
          local num = arr[i]
          local sum = 0
          while num ~= 0 do
              sum = sum + math.abs(num % 10)
              num = math.floor(num / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          for _, d in ipairs(to_digits(v)) do
              sum = sum + d
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for i, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      if n < 0 then
        n = -n
      end
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          if sum_digits(v) > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = math.abs(v)
      while n > 0 do
        sum = sum + (n % 10)
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local count = 0
      for _, v in ipairs(arr) do
          local sum = 0
          local n = v
          while n ~= 0 do
              sum = sum + math.abs(n % 10)
              n = math.floor(n / 10)
          end
          if sum > 0 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      if n < 0 then
        n = -n
      end
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
- |2-
    local count = 0
    for _, v in ipairs(arr) do
      local sum = 0
      local n = v
      if n < 0 then
        n = -n
      end
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      if sum > 0 then
        count = count + 1
      end
    end
    return count
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
