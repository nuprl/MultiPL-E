---
name: HumanEval_68_pluck
language: lua
prompt: |
  -- "Given a table representing a branch of a tree that has non-negative integer nodes
  -- your task is to pluck one of the nodes and return it.
  -- The plucked node should be the node with the smallest even value.
  -- If multiple nodes with the same smallest even value are found return the node that has smallest index.
  -- The plucked node should be returned in a table, [ smalest_value, its index ],
  -- If there are no even values or the given table is empty, return [].
  -- Example 1:
  -- >>> pluck({4, 2, 3})
  -- {2, 1}
  -- Explanation: 2 has the smallest even value, and 2 has the smallest index.
  -- Example 2:
  -- >>> pluck({1, 2, 3})
  -- {2, 1}
  -- Explanation: 2 has the smallest even value, and 2 has the smallest index.
  -- Example 3:
  -- >>> pluck({})
  -- {}
  -- Example 4:
  -- >>> pluck({5, 0, 3, 0, 4, 2})
  -- {0, 1}
  -- Explanation: 0 is the smallest value, but  there are two zeros,
  -- so we will choose the first zero, which has the smallest index.
  -- Constraints:
  -- * 1 <= nodes.length <= 10000
  -- * 0 <= node.value
  local function pluck(arr)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = pluck
      lu.assertEquals(candidate({4, 2, 3}), {2, 1})
      lu.assertEquals(candidate({1, 2, 3}), {2, 1})
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})
      lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0, 3})
      lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})
      lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})
      lu.assertEquals(candidate({7, 9, 7, 1}), {})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local min_even, min_even_idx
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if not min_even or v < min_even then
          min_even = v
          min_even_idx = i
        end
      end
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = nil
    local min_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min == nil or v < min then
          min = v
          min_index = i
        end
      end
    end
    if min == nil then
      return {}
    else
      return {min, min_index}
    end
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min_value = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_value then
        min_value = v
        min_index = i
      end
    end
    if min_value == math.huge then
      return {}
    end
    return {min_value, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min_even, min_even_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even, min_even_idx = v, i
      end
    end
    return min_even == math.huge and {} or {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min_even, min_even_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even, min_even_idx = v, i
      end
    end
    return min_even == math.huge and {} or {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for idx, val in ipairs(arr) do
      if val % 2 == 0 and val < min then
        min = val
        min_idx = idx
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
      local min = nil
      local min_idx = nil
      for i, v in ipairs(arr) do
          if v % 2 == 0 then
              if min == nil or v < min then
                  min = v
                  min_idx = i
              end
          end
      end
      if min == nil then
          return {}
      else
          return {min, min_idx}
      end
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min_even = nil
    local min_even_idx = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min_even == nil or v < min_even then
          min_even = v
          min_even_idx = i
        end
      end
    end
    if min_even == nil then
      return {}
    else
      return {min_even, min_even_idx}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_index = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_index}
  end
- |2-
    local smallest_even = math.huge
    local smallest_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < smallest_even then
        smallest_even = v
        smallest_even_index = i
      end
    end
    if smallest_even == math.huge then
      return {}
    end
    return {smallest_even, smallest_even_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min_even, min_even_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even, min_even_idx = v, i
      end
    end
    return min_even == math.huge and {} or {min_even, min_even_idx}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even = nil
    local min_even_idx = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min_even == nil or v < min_even then
          min_even = v
          min_even_idx = i
        end
      end
    end
    if min_even == nil then
      return {}
    else
      return {min_even, min_even_idx}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = nil
    local min_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min == nil or v < min then
          min = v
          min_index = i
        end
      end
    end
    if min == nil then
      return {}
    else
      return {min, min_index}
    end
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even, min_even_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even, min_even_idx = v, i
      end
    end
    return min_even == math.huge and {} or {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min_even, min_index = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even, min_index = v, i
      end
    end
    return min_even == math.huge and {} or {min_even, min_index}
  end
- |2-
    local smallest_even = nil
    local smallest_even_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest_even == nil or v < smallest_even then
          smallest_even = v
          smallest_even_index = i
        end
      end
    end
    if smallest_even == nil then
      return {}
    else
      return {smallest_even, smallest_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even_value, min_even_index = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min_even_val, min_even_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_val then
        min_even_val = v
        min_even_idx = i
      end
    end
    return min_even_val == math.huge and {} or {min_even_val, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
      local smallest = math.huge
      local smallest_index = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < smallest then
              smallest = v
              smallest_index = i
          end
      end
      if smallest == math.huge then
          return {}
      end
      return {smallest, smallest_index}
  end
- |2-
      local min_even_value = math.huge
      local min_even_index = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min_even_value then
              min_even_value = v
              min_even_index = i
          end
      end
      if min_even_value == math.huge then
          return {}
      end
      return {min_even_value, min_even_index}
  end
- |2-
    local min = math.huge
    local idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallest = nil
    local smallest_idx = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_idx = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_idx}
    end
  end
- |2-
    local min = nil
    local min_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min == nil or v < min then
          min = v
          min_index = i
        end
      end
    end
    if min == nil then
      return {}
    else
      return {min, min_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    -- your code here
    local smallest = {}
    local smallest_index = {}
    local smallest_value = {}
    for i,v in ipairs(arr) do
      if v%2 == 0 then
        smallest[#smallest+1] = v
        smallest_index[#smallest_index+1] = i
      end
    end
    if #smallest == 0 then
      return {}
    else
      smallest_value = smallest[1]
      smallest_index = smallest_index[1]
      for i,v in ipairs(smallest) do
        if v < smallest_value then
          smallest_value = v
          smallest_index = smallest_index[i]
        end
      end
      return {smallest_value, smallest_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min_even_value, min_even_index = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
      local min = math.huge
      local index = 0
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min then
              min = v
              index = i
          end
      end
      if min == math.huge then
          return {}
      end
      return {min, index}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even_val = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_val then
        min_even_val = v
        min_even_idx = i
      end
    end
    if min_even_val == math.huge then
      return {}
    else
      return {min_even_val, min_even_idx}
    end
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest ~= nil then
      return {smallest, smallest_index}
    else
      return {}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min, min_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min, min_idx = v, i
      end
    end
    return min == math.huge and {} or {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
      local min = math.huge
      local min_i = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min then
              min = v
              min_i = i
          end
      end
      if min == math.huge then
          return {}
      end
      return {min, min_i}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
      local smallest_even_value = math.huge
      local smallest_even_value_index = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < smallest_even_value then
              smallest_even_value = v
              smallest_even_value_index = i
          end
      end
      if smallest_even_value == math.huge then
          return {}
      end
      return {smallest_even_value, smallest_even_value_index}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min, min_i = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min, min_i = v, i
      end
    end
    return min == math.huge and {} or {min, min_i}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min_even, min_even_index
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if not min_even or v < min_even then
          min_even = v
          min_even_index = i
        end
      end
    end
    return min_even and {min_even, min_even_index} or {}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min_value, min_index
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if not min_value or v < min_value then
          min_value = v
          min_index = i
        end
      end
    end
    return min_value and {min_value, min_index} or {}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallest_even_value = math.huge
    local smallest_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < smallest_even_value then
        smallest_even_value = v
        smallest_even_index = i
      end
    end
    if smallest_even_value == math.huge then
      return {}
    end
    return {smallest_even_value, smallest_even_index}
  end
- |2-
    local smallest = math.huge
    local smallest_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < smallest then
        smallest = v
        smallest_index = i
      end
    end
    if smallest == math.huge then
      return {}
    end
    return {smallest, smallest_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
      local min = math.huge
      local min_idx = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min then
              min = v
              min_idx = i
          end
      end
      if min == math.huge then
          return {}
      end
      return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallest = math.huge
    local smallest_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < smallest then
        smallest = v
        smallest_index = i
      end
    end
    if smallest == math.huge then
      return {}
    end
    return {smallest, smallest_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min, min_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min, min_idx = v, i
      end
    end
    return min == math.huge and {} or {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min = math.huge
    local minIndex = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        minIndex = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, minIndex}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
      local min = math.huge
      local min_index = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min then
              min = v
              min_index = i
          end
      end
      if min == math.huge then
          return {}
      end
      return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = nil
    local min_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min == nil or v < min then
          min = v
          min_index = i
        end
      end
    end
    if min == nil then
      return {}
    else
      return {min, min_index}
    end
  end
- |2-
    local min_even_value, min_even_index = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local smallest = {nil, nil}
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest[1] == nil or v < smallest[1] then
          smallest = {v, i}
        end
      end
    end
    return smallest
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local smallest_even = math.huge
    local smallest_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < smallest_even then
        smallest_even = v
        smallest_even_index = i
      end
    end
    if smallest_even == math.huge then
      return {}
    end
    return {smallest_even, smallest_even_index}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
      local min = math.huge
      local min_idx = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min then
              min = v
              min_idx = i
          end
      end
      if min == math.huge then
          return {}
      end
      return {min, min_idx}
  end
- |2-
    local min, min_idx = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min, min_idx = v, i
      end
    end
    return min == math.huge and {} or {min, min_idx}
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallestEven = nil
    local smallestEvenIndex = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallestEven == nil or v < smallestEven then
          smallestEven = v
          smallestEvenIndex = i
        end
      end
    end
    if smallestEven == nil then
      return {}
    else
      return {smallestEven, smallestEvenIndex}
    end
  end
- |2-
      local min_even = math.huge
      local min_even_index = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min_even then
              min_even = v
              min_even_index = i
          end
      end
      if min_even == math.huge then
          return {}
      end
      return {min_even, min_even_index}
  end
- |2-
    local min = math.huge
    local index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even_val = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_val then
        min_even_val = v
        min_even_idx = i
      end
    end
    if min_even_val == math.huge then
      return {}
    else
      return {min_even_val, min_even_idx}
    end
  end
- |2-
      local min_even = math.huge
      local min_even_idx = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min_even then
              min_even = v
              min_even_idx = i
          end
      end
      if min_even == math.huge then
          return {}
      end
      return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local smallest = nil
    local smallest_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if smallest == nil or v < smallest then
          smallest = v
          smallest_index = i
        end
      end
    end
    if smallest == nil then
      return {}
    else
      return {smallest, smallest_index}
    end
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local min_even = nil
    local min_even_idx = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min_even == nil or v < min_even then
          min_even = v
          min_even_idx = i
        end
      end
    end
    if min_even == nil then
      return {}
    else
      return {min_even, min_even_idx}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_index}
  end
- |2-
    local smallest = math.huge
    local index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < smallest then
        smallest = v
        index = i
      end
    end
    if smallest == math.huge then
      return {}
    end
    return {smallest, index}
  end
- |2-
    local min = nil
    local min_index = nil
    for i, v in ipairs(arr) do
      if v % 2 == 0 then
        if min == nil or v < min then
          min = v
          min_index = i
        end
      end
    end
    if min == nil then
      return {}
    else
      return {min, min_index}
    end
  end
- |2-
    local min = math.huge
    local index = -1
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if index == -1 then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_i = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_i = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_i}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min_even_value, min_even_index = math.huge, math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
      local min_even = math.huge
      local min_even_idx = math.huge
      for i, v in ipairs(arr) do
          if v % 2 == 0 and v < min_even then
              min_even = v
              min_even_idx = i
          end
      end
      if min_even == math.huge then
          return {}
      end
      return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local idx = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, idx}
  end
- |2-
    local min = math.huge
    local index = 0
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        index = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, index}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
- |2-
    local min_even_value = math.huge
    local min_even_index = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even_value then
        min_even_value = v
        min_even_index = i
      end
    end
    if min_even_value == math.huge then
      return {}
    else
      return {min_even_value, min_even_index}
    end
  end
- |2-
    local min_even = math.huge
    local min_even_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min_even then
        min_even = v
        min_even_idx = i
      end
    end
    if min_even == math.huge then
      return {}
    end
    return {min_even, min_even_idx}
  end
- |2-
    local min = math.huge
    local min_idx = math.huge
    for i, v in ipairs(arr) do
      if v % 2 == 0 and v < min then
        min = v
        min_idx = i
      end
    end
    if min == math.huge then
      return {}
    end
    return {min, min_idx}
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
