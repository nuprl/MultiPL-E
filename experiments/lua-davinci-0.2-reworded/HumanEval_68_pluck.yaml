name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given a table representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a table, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given table is empty, return [].\n\
  -- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- >>> pluck({1, 2, 3})\n-- {2, 1}\n-- >>> pluck({})\n\
  -- {}\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Constraints:\n-- * 1 <= nodes.length\
  \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local min = math.huge\n  local min_idx = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx\
    \ = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  else\n   \
    \ return {min, min_idx}\n  end\nend", "  local min = math.huge\n  local min_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min =\
    \ math.huge\n  local min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n\
    \  if min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min_even = math.huge\n  local min_even_idx = -1\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even\
    \ = v\n      min_even_idx = i\n    end\n  end\n  if min_even_idx == -1 then\n\
    \    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend", "  local\
    \ min_even, min_even_index = math.huge, math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_index\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_index}\n  end\nend", "  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  else\n    return {min, min_idx}\n  end\n\
    end", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      evens[#evens + 1] = {v, i}\n    end\n  end\n  if #evens == 0 then\n   \
    \ return {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\n\
    end", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min = math.huge\n  local idx = 0\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n\
    \      idx = i\n    end\n  end\n  return min == math.huge and {} or {min, idx}\n\
    end", "  local min, min_index = math.huge, math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min, min_index = v, i\n    end\n\
    \  end\n  return min == math.huge and {} or {min, min_index}\nend", "  local min\
    \ = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  else\n    return {min, min_idx}\n  end\n\
    end", "  local min, min_idx = math.huge, math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min, min_idx = v, i\n    end\n\
    \  end\n  return min == math.huge and {} or {min, min_idx}\nend", "  local min\
    \ = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  else\n    return {min, min_idx}\n\
    \  end\nend", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 then\n      table.insert(evens, {v, i})\n    end\n  end\n  if #evens ==\
    \ 0 then\n    return {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1]\
    \ == b[1] then\n      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n\
    \  return evens[1]\nend", "  local min = math.huge\n  local index = 0\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  else\n\
    \    return {min, index}\n  end\nend", "  local smallest_even = nil\n  local smallest_even_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if smallest_even\
    \ == nil or v < smallest_even then\n        smallest_even = v\n        smallest_even_index\
    \ = i\n      end\n    end\n  end\n  if smallest_even == nil then\n    return {}\n\
    \  else\n    return {smallest_even, smallest_even_index}\n  end\nend", "  local\
    \ min_even_value = math.huge\n  local min_even_value_index = math.huge\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n    \
    \  min_even_value = v\n      min_even_value_index = i\n    end\n  end\n  if min_even_value\
    \ == math.huge then\n    return {}\n  else\n    return {min_even_value, min_even_value_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n \
    \ else\n    return {min, min_idx}\n  end\nend", "    local min = math.huge\n \
    \   local min_idx = math.huge\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min then\n            min = v\n            min_idx = i\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_idx}\nend", "  local min = math.huge\n  local min_idx =\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min_even\
    \ = nil\n  local min_even_index = nil\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 then\n      if min_even == nil or v < min_even then\n        min_even\
    \ = v\n        min_even_index = i\n      end\n    end\n  end\n  if min_even ==\
    \ nil then\n    return {}\n  else\n    return {min_even, min_even_index}\n  end\n\
    end", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, {v, i})\n    end\n  end\n  if #evens == 0 then\n  \
    \  return {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\n\
    end", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "    local min = math.huge\n    local min_index\
    \ = math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min\
    \ then\n            min = v\n            min_index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    end\n    return {min, min_index}\n\
    end", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min_even = math.huge\n  local min_even_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "  local min_even = math.huge\n  local min_even_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n     \
    \ min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even == math.huge\
    \ then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend",
  "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "  local min_even_value, min_even_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_value then\n      min_even_value = v\n      min_even_index = i\n\
    \    end\n  end\n  return min_even_value == math.huge and {} or {min_even_value,\
    \ min_even_index}\nend", "  local min = math.huge\n  local index = 0\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  else\n\
    \    return {min, index}\n  end\nend", "  local smallest_even = nil\n  local smallest_even_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if smallest_even\
    \ == nil or v < smallest_even then\n        smallest_even = v\n        smallest_even_index\
    \ = i\n      end\n    end\n  end\n  if smallest_even == nil then\n    return {}\n\
    \  else\n    return {smallest_even, smallest_even_index}\n  end\nend", "  if #arr\
    \ == 0 then return {} end\n  local min = math.huge\n  local min_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then return {} end\n\
    \  return {min, min_idx}\nend", "    local min = math.huge\n    local min_index\
    \ = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min then\n\
    \            min = v\n            min_index = i\n        end\n    end\n    if\
    \ min == math.huge then\n        return {}\n    else\n        return {min, min_index}\n\
    \    end\nend", "    local min_even = nil\n    local min_even_idx = nil\n    for\
    \ idx, val in ipairs(arr) do\n        if val % 2 == 0 then\n            if min_even\
    \ == nil or val < min_even then\n                min_even = val\n            \
    \    min_even_idx = idx\n            end\n        end\n    end\n    if min_even\
    \ == nil then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend", "  local min_even = math.huge\n  local min_even_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n     \
    \ min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even == math.huge\
    \ then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend",
  "    local min_even = nil\n    local min_even_index = nil\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if min_even == nil or v < min_even\
    \ then\n                min_even = v\n                min_even_index = i\n   \
    \         end\n        end\n    end\n    if min_even == nil then\n        return\
    \ {}\n    else\n        return {min_even, min_even_index}\n    end\nend", "  local\
    \ evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ {v, i})\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n\
    \    return a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local min = math.huge\n\
    \  local index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, index}\n  end\nend", "    local\
    \ min_even = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    end\n    return {min_even, min_even_idx}\nend",
  "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "    local min_even = math.huge\n\
    \    local min_even_idx = math.huge\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 and v < min_even then\n            min_even = v\n            min_even_idx\
    \ = i\n        end\n    end\n    if min_even == math.huge then\n        return\
    \ {}\n    end\n    return {min_even, min_even_idx}\nend", "    local min = math.huge\n\
    \    local min_index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min then\n            min = v\n            min_index = i\n       \
    \ end\n    end\n    if min == math.huge then\n        return {}\n    else\n  \
    \      return {min, min_index}\n    end\nend", "  local min = math.huge\n  local\
    \ min_index = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_index = i\n    end\n  end\n  if min_index ==\
    \ -1 then\n    return {}\n  else\n    return {min, min_index}\n  end\nend", " \
    \   local min = math.huge\n    local min_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min then\n            min = v\n          \
    \  min_idx = i\n        end\n    end\n    if min == math.huge then\n        return\
    \ {}\n    else\n        return {min, min_idx}\n    end\nend", "  local min_even_value\
    \ = math.huge\n  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_value then\n      min_even_value = v\n   \
    \   min_even_index = i\n    end\n  end\n  if min_even_value == math.huge then\n\
    \    return {}\n  else\n    return {min_even_value, min_even_index}\n  end\nend",
  "  local min_even = math.huge\n  local min_even_index = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n\
    \      min_even_index = i\n    end\n  end\n  if min_even == math.huge then\n \
    \   return {}\n  else\n    return {min_even, min_even_index}\n  end\nend", " \
    \ local min = math.huge\n  local index = 0\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 and v < min then\n      min = v\n      index = i\n    end\n  end\n\
    \  if min == math.huge then\n    return {}\n  else\n    return {min, index}\n\
    \  end\nend", "  local min = math.huge\n  local index = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      index = i\n   \
    \ end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return {min,\
    \ index}\n  end\nend", "  local evens = {}\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 then\n      evens[#evens + 1] = {v, i}\n    end\n  end\n  if #evens\
    \ == 0 then\n    return {}\n  end\n  table.sort(evens, function(a, b)\n    if\
    \ a[1] == b[1] then\n      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n\
    \  end)\n  return evens[1]\nend", "  local min = math.huge\n  local idx = -1\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      idx = i\n    end\n  end\n  if idx == -1 then\n    return {}\n  else\n\
    \    return {min, idx}\n  end\nend", "  local min = nil\n  local min_index = nil\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min == nil or\
    \ v < min then\n        min = v\n        min_index = i\n      end\n    end\n \
    \ end\n  if min == nil then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min_even = math.huge\n  local min_even_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n \
    \ else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n  local\
    \ min_index = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_index = i\n    end\n  end\n  if min_index ==\
    \ -1 then\n    return {}\n  else\n    return {min, min_index}\n  end\nend", " \
    \ local min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min = math.huge\n  local min_idx = 0\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n\
    \  local min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_i}\n  end\nend", "  local\
    \ min = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n\
    \  if min == math.huge then\n    return {}\n  else\n    return {min, min_idx}\n\
    \  end\nend", "  local min = math.huge\n  local min_index = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min_even = math.huge\n  local min_even_index\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_index = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  else\n    return {min_even, min_even_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = -1\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min_idx == -1 then\n    return {}\n  else\n    return {min,\
    \ min_idx}\n  end\nend", "  local min = math.huge\n  local min_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min_even = math.huge\n  local min_even_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n     \
    \ min_even = v\n      min_even_index = i\n    end\n  end\n  if min_even == math.huge\
    \ then\n    return {}\n  else\n    return {min_even, min_even_index}\n  end\n\
    end", "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even\
    \ = v\n      min_even_idx = i\n    end\n  end\n  if min_even == math.huge then\n\
    \    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend", "  local\
    \ min_even, min_even_idx = math.huge, math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even then\n      min_even, min_even_idx = v, i\n\
    \    end\n  end\n  return min_even == math.huge and {} or {min_even, min_even_idx}\n\
    end", "  local min_even_value = math.huge\n  local min_even_value_index = -1\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n\
    \      min_even_value = v\n      min_even_value_index = i\n    end\n  end\n  if\
    \ min_even_value == math.huge then\n    return {}\n  else\n    return {min_even_value,\
    \ min_even_value_index}\n  end\nend", "  local min = math.huge\n  local min_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min =\
    \ math.huge\n  local min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n\
    \  if min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "    local min_even = nil\n    local min_even_idx = nil\n    for\
    \ i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min_even\
    \ == nil or v < min_even then\n                min_even = v\n                min_even_idx\
    \ = i\n            end\n        end\n    end\n    if min_even == nil then\n  \
    \      return {}\n    else\n        return {min_even, min_even_idx}\n    end\n\
    end", "  local min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min = math.huge\n  local min_idx = 0\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  else\n    return {min, min_idx}\n  end\n\
    end", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      evens[#evens + 1] = {v, i}\n    end\n  end\n  if #evens == 0 then\n   \
    \ return {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\n\
    end", "  local min_even = nil\n  local min_even_idx = nil\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if min_even == nil or v < min_even then\n\
    \        min_even = v\n        min_even_idx = i\n      end\n    end\n  end\n \
    \ if min_even == nil then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "  local min_even_value = math.huge\n  local min_even_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n\
    \      min_even_value = v\n      min_even_index = i\n    end\n  end\n  if min_even_value\
    \ == math.huge then\n    return {}\n  else\n    return {min_even_value, min_even_index}\n\
    \  end\nend", "  local min_even = math.huge\n  local min_even_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n     \
    \ min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even == math.huge\
    \ then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend",
  "  local min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min_even = math.huge\n  local min_even_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "    local min = math.huge\n    local min_index = 0\n    for i,\
    \ v in ipairs(arr) do\n        if v % 2 == 0 and v < min then\n            min\
    \ = v\n            min_index = i\n        end\n    end\n    if min == math.huge\
    \ then\n        return {}\n    else\n        return {min, min_index}\n    end\n\
    end", "  local min = math.huge\n  local min_index = nil\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min_even, min_even_idx = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even, min_even_idx = v, i\n    end\n  end\n  return min_even\
    \ == math.huge and {} or {min_even, min_even_idx}\nend", "  local evens = {}\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ {v, i})\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n\
    \    return a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local min_even =\
    \ nil\n  local min_even_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 then\n      if min_even == nil or v < min_even then\n        min_even =\
    \ v\n        min_even_idx = i\n      end\n    end\n  end\n  if min_even == nil\
    \ then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend",
  "  local min_even = math.huge\n  local min_even_index = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n\
    \      min_even_index = i\n    end\n  end\n  if min_even == math.huge then\n \
    \   return {}\n  else\n    return {min_even, min_even_index}\n  end\nend", " \
    \ local min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return {min,\
    \ min_index}\nend", "  local min = math.huge\n  local index = 0\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n      index\
    \ = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  else\n   \
    \ return {min, index}\n  end\nend", "  local min_even = math.huge\n  local min_even_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "  local smallest = math.huge\n  local smallest_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest then\n     \
    \ smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest == math.huge\
    \ then\n    return {}\n  else\n    return {smallest, smallest_idx}\n  end\nend",
  "  local min = math.huge\n  local min_index = 0\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n \
    \ else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n  local\
    \ idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      idx = i\n    end\n  end\n  return min == math.huge and {}\
    \ or {min, idx}\nend", "  local min_even = nil\n  local min_even_index = nil\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if min_even == nil\
    \ or v < min_even then\n        min_even = v\n        min_even_index = i\n   \
    \   end\n    end\n  end\n  if min_even == nil then\n    return {}\n  else\n  \
    \  return {min_even, min_even_index}\n  end\nend", "  local evens = {}\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens, {v,\
    \ i})\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] < b[1] then\n      return true\n    elseif a[1]\
    \ == b[1] then\n      return a[2] < b[2]\n    else\n      return false\n    end\n\
    \  end)\n  return evens[1]\nend", "  local min = math.huge\n  local idx = 0\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      idx = i\n    end\n  end\n  return min == math.huge and {} or {min,\
    \ idx}\nend", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 then\n      evens[#evens + 1] = {v, i}\n    end\n  end\n  table.sort(evens,\
    \ function(a, b) return a[1] < b[1] end)\n  return evens[1] or {}\nend", "  local\
    \ min = math.huge\n  local index = 0\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min then\n      min = v\n      index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  else\n    return {min, index}\n  end\n\
    end", "    local min_even = math.huge\n    local min_even_idx = 0\n    for i,\
    \ v in ipairs(arr) do\n        if v % 2 == 0 and v < min_even then\n         \
    \   min_even = v\n            min_even_idx = i\n        end\n    end\n    if min_even\
    \ == math.huge then\n        return {}\n    else\n        return {min_even, min_even_idx}\n\
    \    end\nend", "  local min = math.huge\n  local min_idx = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n \
    \ else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  else\n    return {min, min_index}\n  end\n\
    end", "  local min_even = nil\n  local min_even_idx = nil\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if min_even == nil or v < min_even then\n\
    \        min_even = v\n        min_even_idx = i\n      end\n    end\n  end\n \
    \ if min_even == nil then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min_even, min_even_idx = math.huge, math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n     \
    \ min_even, min_even_idx = v, i\n    end\n  end\n  return min_even == math.huge\
    \ and {} or {min_even, min_even_idx}\nend", "  local smallest_even = math.huge\n\
    \  local smallest_even_idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < smallest_even then\n      smallest_even = v\n      smallest_even_idx\
    \ = i\n    end\n  end\n  if smallest_even_idx == -1 then\n    return {}\n  else\n\
    \    return {smallest_even, smallest_even_idx}\n  end\nend", "  local min_even_val\
    \ = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_val then\n      min_even_val = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even_val == math.huge then\n    return {}\n  else\n\
    \    return {min_even_val, min_even_idx}\n  end\nend", "  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for idx, val in ipairs(arr) do\n    if val\
    \ % 2 == 0 and val < min_even then\n      min_even = val\n      min_even_idx =\
    \ idx\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n    return\
    \ {min_even, min_even_idx}\n  end\nend", "  local min_even = math.huge\n  local\
    \ min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n\
    \  if min_even == math.huge then\n    return {}\n  else\n    return {min_even,\
    \ min_even_idx}\n  end\nend", "  local min = math.huge\n  local index = 0\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n\
    \      index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n\
    \  else\n    return {min, index}\n  end\nend", "  local evens = {}\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens, {v, i})\n\
    \    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n\
    \    return a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local evens = {}\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ {v, i})\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] < b[1] then\n      return true\n    elseif a[1]\
    \ == b[1] then\n      return a[2] < b[2]\n    else\n      return false\n    end\n\
    \  end)\n  return evens[1]\nend", "    local min = math.huge\n    local min_index\
    \ = -1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min then\n\
    \            min = v\n            min_index = i\n        end\n    end\n    if\
    \ min == math.huge then\n        return {}\n    else\n        return {min, min_index}\n\
    \    end\nend", "  local min = math.huge\n  local min_index = nil\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n     \
    \ min_index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n \
    \ else\n    return {min, min_index}\n  end\nend", "  local min, min_index\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min or v < min\
    \ then\n        min = v\n        min_index = i\n      end\n    end\n  end\n  return\
    \ min and {min, min_index} or {}\nend", "    local evens = {}\n    local min =\
    \ math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n    \
    \        evens[#evens + 1] = {v, i}\n            if v < min then\n           \
    \     min = v\n            end\n        end\n    end\n    if #evens == 0 then\n\
    \        return {}\n    end\n    for _, v in ipairs(evens) do\n        if v[1]\
    \ == min then\n            return v\n        end\n    end\nend", "  local evens\
    \ = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      evens[#evens\
    \ + 1] = {v, i}\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n\
    \  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n      return a[2]\
    \ < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\nend", " \
    \ local min_even_value = math.huge\n  local min_even_index = math.huge\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n    \
    \  min_even_value = v\n      min_even_index = i\n    end\n  end\n  if min_even_value\
    \ == math.huge then\n    return {}\n  else\n    return {min_even_value, min_even_index}\n\
    \  end\nend", "  local min_even, min_even_idx = math.huge, math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even,\
    \ min_even_idx = v, i\n    end\n  end\n  return min_even == math.huge and {} or\
    \ {min_even, min_even_idx}\nend", "  local evens = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, {v, i})\n    end\n  end\n\
    \  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens, function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n    return\
    \ a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local min = math.huge\n  local\
    \ idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      idx = i\n    end\n  end\n  return min == math.huge and {}\
    \ or {min, idx}\nend", "  local min = math.huge\n  local index = 0\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n     \
    \ index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  else\n\
    \    return {min, index}\n  end\nend", "  local min = math.huge\n  local idx =\
    \ 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min\
    \ = v\n      idx = i\n    end\n  end\n  return min == math.huge and {} or {min,\
    \ idx}\nend", "  local min_even = nil\n  local min_even_idx = nil\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 then\n      if min_even == nil or v < min_even\
    \ then\n        min_even = v\n        min_even_idx = i\n      end\n    end\n \
    \ end\n  if min_even == nil then\n    return {}\n  else\n    return {min_even,\
    \ min_even_idx}\n  end\nend", "  local min = math.huge\n  local min_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n\
    \  local min_idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local\
    \ min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "  if #arr == 0 then return\
    \ {} end\n  local min = math.huge\n  local min_i = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_i = i\n   \
    \ end\n  end\n  if min == math.huge then return {} end\n  return {min, min_i}\n\
    end", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min = math.huge\n  local min_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min_even = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even then\n      min_even = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n    return\
    \ {min_even, min_even_index}\n  end\nend", "  local min_even = math.huge\n  local\
    \ min_even_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min_even then\n      min_even = v\n      min_even_index = i\n    end\n  end\n\
    \  if min_even == math.huge then\n    return {}\n  else\n    return {min_even,\
    \ min_even_index}\n  end\nend", "  local evens = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, {v, i})\n    end\n  end\n\
    \  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens, function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n    return\
    \ a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local min_even, min_even_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even = v\n      min_even_index = i\n    end\n \
    \ end\n  return min_even == math.huge and {} or {min_even, min_even_index}\nend",
  "  local min_even = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_index\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_index}\n  end\nend", "  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  else\n    return {min, min_index}\n  end\n\
    end", "  local min_even = nil\n  local min_even_index = nil\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if min_even == nil or v < min_even then\n\
    \        min_even = v\n        min_even_index = i\n      end\n    end\n  end\n\
    \  if min_even == nil then\n    return {}\n  else\n    return {min_even, min_even_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_index = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   min_index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n\
    \  else\n    return {min, min_index}\n  end\nend", "  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n    return\
    \ {min_even, min_even_idx}\n  end\nend", "  local min_even = math.huge\n  local\
    \ min_even_idx = -1\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even_idx\
    \ == -1 then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\n\
    end", "  local min = math.huge\n  local min_index = math.huge\n  local min_even\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if\
    \ v < min_even then\n        min_even = v\n        min_index = i\n      end\n\
    \    end\n    if v < min then\n      min = v\n    end\n  end\n  if min_even ==\
    \ math.huge then\n    return {}\n  end\n  return {min_even, min_index}\nend",
  "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "    local min = math.huge\n\
    \    local min_index = math.huge\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < min then\n            min = v\n            min_index = i\n\
    \        end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, min_index}\nend", "  local min_even = math.huge\n  local min_even_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  else\n    return {min_even, min_even_idx}\n\
    \  end\nend", "  local min = math.huge\n  local min_index = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n   \
    \   min_index = i\n    end\n  end\n  if min == math.huge then\n    return {}\n\
    \  else\n    return {min, min_index}\n  end\nend", "  local min_even_val, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_val then\n      min_even_val, min_even_idx = v, i\n    end\n  end\n\
    \  return min_even_val == math.huge and {} or {min_even_val, min_even_idx}\nend",
  "  local min = math.huge\n  local idx = 0\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 and v < min then\n      min = v\n      idx = i\n    end\n  end\n\
    \  return min == math.huge and {} or {min, idx}\nend", "  local min = math.huge\n\
    \  local min_idx = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local\
    \ min_even = math.huge\n  local min_even_idx = -1\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even_idx == -1 then\n    return {}\n  else\n \
    \   return {min_even, min_even_idx}\n  end\nend", "  local min_even = math.huge\n\
    \  local min_even_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n   \
    \ end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n    return\
    \ {min_even, min_even_idx}\n  end\nend", "  local evens = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      table.insert(evens, {v, i})\n    end\n  end\n\
    \  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens, function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n    return\
    \ a[1] < b[1]\n  end)\n  return evens[1]\nend", "    local min = math.huge\n \
    \   local index = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < min then\n            min = v\n            index = i\n        end\n    end\n\
    \    if min == math.huge then\n        return {}\n    else\n        return {min,\
    \ index}\n    end\nend", "  local min = math.huge\n  local min_idx = 0\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n\
    \      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n\
    \  else\n    return {min, min_idx}\n  end\nend", "  local min_even = math.huge\n\
    \  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < min_even then\n      min_even = v\n      min_even_index = i\n\
    \    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n    return\
    \ {min_even, min_even_index}\n  end\nend", "  local min = math.huge\n  local min_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n\
    \    return {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min,\
    \ min_i = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min, min_i = v, i\n    end\n  end\n  return min ==\
    \ math.huge and {} or {min, min_i}\nend", "  local min_even_val, min_even_idx\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even_val then\n      min_even_val, min_even_idx = v, i\n    end\n  end\n\
    \  return min_even_val == math.huge and {} or {min_even_val, min_even_idx}\nend",
  "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "  local evens = {}\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      evens[#evens + 1] = {v,\
    \ i}\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n\
    \    return a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local min_even =\
    \ nil\n  local min_even_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 then\n      if min_even == nil or v < min_even then\n        min_even =\
    \ v\n        min_even_idx = i\n      end\n    end\n  end\n  if min_even == nil\
    \ then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend",
  "  local min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min = math.huge\n  local min_idx = 0\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min_even = nil\n\
    \  local min_even_index = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ then\n      if min_even == nil or v < min_even then\n        min_even = v\n\
    \        min_even_index = i\n      end\n    end\n  end\n  if min_even == nil then\n\
    \    return {}\n  else\n    return {min_even, min_even_index}\n  end\nend", " \
    \ local min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n\
    \      min_even_idx = i\n    end\n  end\n  if min_even == math.huge then\n   \
    \ return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend", "  local\
    \ evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens,\
    \ {v, i})\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n  table.sort(evens,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    end\n\
    \    return a[1] < b[1]\n  end)\n  return evens[1]\nend", "  local min_even =\
    \ math.huge\n  local min_even_idx = 0\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx = i\n\
    \    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n    return\
    \ {min_even, min_even_idx}\n  end\nend", "    local evens = {}\n    local min_even\
    \ = math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n  \
    \          evens[#evens + 1] = {v, i}\n            if v < min_even then\n    \
    \            min_even = v\n            end\n        end\n    end\n    if #evens\
    \ == 0 then\n        return {}\n    end\n    local min_even_idx = math.huge\n\
    \    local min_even_val = math.huge\n    for _, v in ipairs(evens) do\n      \
    \  if v[1] == min_even then\n            if v[2] < min_even_idx then\n       \
    \         min_even_idx = v[2]\n                min_even_val = v[1]\n         \
    \   end\n        end\n    end\n    return {min_even_val, min_even_idx}\nend",
  "    local min = math.huge\n    local index = 0\n    for i, v in ipairs(arr) do\n\
    \        if v % 2 == 0 and v < min then\n            min = v\n            index\
    \ = i\n        end\n    end\n    if min == math.huge then\n        return {}\n\
    \    else\n        return {min, index}\n    end\nend", "    local min_even = math.huge\n\
    \    local min_even_index = 0\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min_even then\n            min_even = v\n            min_even_index\
    \ = i\n        end\n    end\n    if min_even == math.huge then\n        return\
    \ {}\n    else\n        return {min_even, min_even_index}\n    end\nend", "  local\
    \ evens = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      evens[#evens\
    \ + 1] = {v, i}\n    end\n  end\n  if #evens == 0 then\n    return {}\n  end\n\
    \  table.sort(evens, function(a, b)\n    if a[1] == b[1] then\n      return a[2]\
    \ < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return evens[1]\nend", " \
    \ local smallest = math.huge\n  local index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < smallest then\n      smallest = v\n      index\
    \ = i\n    end\n  end\n  if smallest == math.huge then\n    return {}\n  end\n\
    \  return {smallest, index}\nend", "  local smallest_value = math.huge\n  local\
    \ smallest_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < smallest_value then\n      smallest_value = v\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == math.huge then\n    return {}\n\
    \  else\n    return {smallest_value, smallest_index}\n  end\nend", "  local min\
    \ = math.huge\n  local index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      index = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  else\n    return {min, index}\n  end\nend",
  "  local min = math.huge\n  local min_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min_even = math.huge\n  local min_even_idx = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n     \
    \ min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even == math.huge\
    \ then\n    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend",
  "  local min = math.huge\n  local min_index = 0\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min_even_value = math.huge\n  local min_even_index\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value\
    \ then\n      min_even_value = v\n      min_even_index = i\n    end\n  end\n \
    \ if min_even_value == math.huge then\n    return {}\n  else\n    return {min_even_value,\
    \ min_even_index}\n  end\nend", "  local min = math.huge\n  local min_idx = 0\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_idx}\n  end\nend", "  local min = math.huge\n\
    \  local min_index = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      min = v\n      min_index = i\n    end\n  end\n  if\
    \ min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min = math.huge\n  local min_idx = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_idx}\n  end\nend", "  local min = math.huge\n  local min_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_index}\n  end\nend", "  local min_even_value\
    \ = math.huge\n  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_value then\n      min_even_value = v\n   \
    \   min_even_index = i\n    end\n  end\n  if min_even_value == math.huge then\n\
    \    return {}\n  else\n    return {min_even_value, min_even_index}\n  end\nend",
  "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_even_idx\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_even_idx}\n  end\nend", "    local smallest = nil\n\
    \    local smallest_index = nil\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 then\n            if smallest == nil or v < smallest then\n       \
    \         smallest = v\n                smallest_index = i\n            end\n\
    \        end\n    end\n    if smallest == nil then\n        return {}\n    else\n\
    \        return {smallest, smallest_index}\n    end\nend", "    local min_even\
    \ = math.huge\n    local min_even_idx = math.huge\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < min_even then\n            min_even = v\n\
    \            min_even_idx = i\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    end\n    return {min_even, min_even_idx}\nend",
  "  local min_even_value = math.huge\n  local min_even_index = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n      min_even_value\
    \ = v\n      min_even_index = i\n    end\n  end\n  if min_even_value == math.huge\
    \ then\n    return {}\n  else\n    return {min_even_value, min_even_index}\n \
    \ end\nend", "  local min = math.huge\n  local min_i = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_i = i\n   \
    \ end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return {min,\
    \ min_i}\n  end\nend", "  local min = math.huge\n  local min_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_index}\n  end\nend", "  local min_even = nil\n\
    \  local min_even_idx = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if min_even == nil or v < min_even then\n        min_even = v\n       \
    \ min_even_idx = i\n      end\n    end\n  end\n  if min_even == nil then\n   \
    \ return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend", "    local\
    \ min_even = math.huge\n    local min_even_index = math.huge\n    for i, v in\
    \ ipairs(arr) do\n        if v % 2 == 0 and v < min_even then\n            min_even\
    \ = v\n            min_even_index = i\n        end\n    end\n    if min_even ==\
    \ math.huge then\n        return {}\n    else\n        return {min_even, min_even_index}\n\
    \    end\nend", "  local min_even = math.huge\n  local min_even_idx = -1\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even\
    \ = v\n      min_even_idx = i\n    end\n  end\n  if min_even_idx == -1 then\n\
    \    return {}\n  else\n    return {min_even, min_even_idx}\n  end\nend", "  local\
    \ min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local min = math.huge\n  local idx = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      idx = i\n    end\n\
    \  end\n  return min == math.huge and {} or {min, idx}\nend", "  local smallest\
    \ = math.huge\n  local smallest_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < smallest then\n      smallest = v\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest == math.huge then\n    return {}\n  end\n\
    \  return {smallest, smallest_index}\nend", "  local min_even, min_index = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even, min_index = v, i\n    end\n  end\n  return min_even ==\
    \ math.huge and {} or {min_even, min_index}\nend", "  local min = math.huge\n\
    \  local min_index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v\
    \ < min then\n      min = v\n      min_index = i\n    end\n  end\n  if min ==\
    \ math.huge then\n    return {}\n  else\n    return {min, min_index}\n  end\n\
    end", "  local min = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n\
    \    end\n  end\n  if min == math.huge then\n    return {}\n  else\n    return\
    \ {min, min_index}\n  end\nend", "  local min = math.huge\n  local min_index =\
    \ 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min\
    \ = v\n      min_index = i\n    end\n  end\n  if min == math.huge then\n    return\
    \ {}\n  else\n    return {min, min_index}\n  end\nend", "  local min_even_value\
    \ = math.huge\n  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_value then\n      min_even_value = v\n   \
    \   min_even_index = i\n    end\n  end\n  if min_even_value == math.huge then\n\
    \    return {}\n  else\n    return {min_even_value, min_even_index}\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
