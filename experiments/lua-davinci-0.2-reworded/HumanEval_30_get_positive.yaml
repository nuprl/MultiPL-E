---
name: HumanEval_30_get_positive
language: lua
prompt: |
  -- Return only positive numbers in the table.
  -- >>> get_positive({-1, 2, -4, 5, 6})
  -- {2, 5, 6}
  -- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
  -- {5, 3, 2, 3, 9, 123, 1}
  local function get_positive(l)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = get_positive
      lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})
      lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})
      lu.assertEquals(candidate({-1, -2}), {})
      lu.assertEquals(candidate({}), {})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local res = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local res = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(t, v)
          end
      end
      return t
  end
- "\tlocal res = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res,
  v)\n\t\tend\n\tend\n\treturn res\nend"
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local result = {}
    for i = 1, #l do
      if l[i] > 0 then
        result[#result + 1] = l[i]
      end
    end
    return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local t = {}
    for i, v in ipairs(l) do
      if v > 0 then
        t[#t + 1] = v
      end
    end
    return t
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(t, v)
      end
    end
    return t
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local ret = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(ret, v)
          end
      end
      return ret
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local t = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
      local res = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #l do
          if l[i] > 0 then
              t[#t + 1] = l[i]
          end
      end
      return t
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #l do
          if l[i] > 0 then
              res[#res + 1] = l[i]
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for i, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(t, v)
      end
    end
    return t
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(t, v)
          end
      end
      return t
  end
- |2-
      local ret = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(ret, v)
          end
      end
      return ret
  end
- |2-
      local res = {}
      for i = 1, #l do
          if l[i] > 0 then
              res[#res + 1] = l[i]
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local t = {}
    for i, v in ipairs(l) do
      if v > 0 then
        t[#t + 1] = v
      end
    end
    return t
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(r, v)
          end
      end
      return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local t = {}
    for i, v in ipairs(l) do
      if v > 0 then
        t[#t + 1] = v
      end
    end
    return t
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for i = 1, #l do
      if l[i] > 0 then
        res[#res + 1] = l[i]
      end
    end
    return res
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local result = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(result, v)
      end
    end
    return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local r = {}
    for _, v in ipairs(l) do
      if v > 0 then
        r[#r + 1] = v
      end
    end
    return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local r = {}
      for _, v in ipairs(l) do
          if v > 0 then
              r[#r + 1] = v
          end
      end
      return r
  end
- |2-
    local res = {}
    for _, v in ipairs(l) do
      if v > 0 then
        table.insert(res, v)
      end
    end
    return res
  end
- |2-
    local t = {}
    for i, v in ipairs(l) do
      if v > 0 then
        t[#t+1] = v
      end
    end
    return t
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local ret = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(ret, v)
          end
      end
      return ret
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(res,
  v)\n\t\tend\n\tend\n\treturn res\nend"
- |2-
      local result = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(result, v)
          end
      end
      return result
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
- |2-
      local res = {}
      for _, v in ipairs(l) do
          if v > 0 then
              table.insert(res, v)
          end
      end
      return res
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
