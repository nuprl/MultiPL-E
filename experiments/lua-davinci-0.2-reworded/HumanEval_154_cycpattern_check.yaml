name: HumanEval_154_cycpattern_check
language: lua
prompt: "-- You are given 2 words. You need to return true if the second word or any\
  \ of its rotations is a substring in the first word\n-- >>> cycpattern_check('abcd',\
  \ 'abd')\n-- false\n-- >>> cycpattern_check('hello', 'ell')\n-- true\n-- >>> cycpattern_check('whassup',\
  \ 'psus')\n-- false\n-- >>> cycpattern_check('abab', 'baa')\n-- true\n-- >>> cycpattern_check('efef',\
  \ 'eeff')\n-- false\n-- >>> cycpattern_check('himenss', 'simen')\n-- true\nlocal\
  \ function cycpattern_check(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n\
  \    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello',\
  \ 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef',\
  \ 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt',\
  \ 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local len = #b\n  for i = 1, len do\n    local c = string.sub(b,\
    \ i, len) .. string.sub(b, 1, i - 1)\n    if string.find(a, c) then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local len = #b\n    for i =\
    \ 1, len do\n        if string.sub(a, i, i + len - 1) == b then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    local len = #b\n  \
    \  local s = b .. b\n    return s:find(a) ~= nil\nend", "    local len = #b\n\
    \    for i = 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n \
    \       if a:find(c) then\n            return true\n        end\n    end\n   \
    \ return false\nend", "    local len_a = #a\n    local len_b = #b\n    if len_a\
    \ < len_b then\n        return false\n    end\n    local b_first_char = b:sub(1,\
    \ 1)\n    local b_last_char = b:sub(len_b, len_b)\n    local b_first_char_pos\
    \ = a:find(b_first_char)\n    local b_last_char_pos = a:find(b_last_char)\n  \
    \  if b_first_char_pos == nil or b_last_char_pos == nil then\n        return false\n\
    \    end\n    local b_first_char_pos_in_a = b_first_char_pos\n    local b_last_char_pos_in_a\
    \ = b_last_char_pos\n    while true do\n        local b_first_char_pos_in_a_next\
    \ = b_first_char_pos_in_a + 1\n        if b_first_char_pos_in_a_next > len_a then\n\
    \            b_first_char_pos_in_a_next = 1\n        end\n        if b_first_char_pos_in_a_next\
    \ == b_last_char_pos_in_a then\n            break\n        end\n        b_first_char_pos_in_a\
    \ = b_first_char_pos_in_a_next\n    end\n    local b_last_char_pos_in_a_next =\
    \ b_last_char_pos_in_a + 1\n    if b_last_char_pos_in_a_next > len_a then\n  \
    \      b_last_char_pos_in_a_next = 1\n    end\n    if b_last_char_pos_in_a_next\
    \ == b_first_char_pos_in_a then\n        return false\n    end\n    local a_sub_str\
    \ = a:sub(b_first_char_pos_in_a, b_last_char_pos_in_a)\n    if a_sub_str == b\
    \ then\n        return true\n    end\n    return false\nend", "  local len = #b\n\
    \  for i = 1, len do\n    local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c)\
    \ then\n      return true\n    end\n  end\n  return false\nend", "  local len\
    \ = #b\n  for i = 1, len do\n    local c = b:sub(i) .. b:sub(1, i - 1)\n    if\
    \ a:find(c) then\n      return true\n    end\n  end\n  return false\nend", " \
    \   local len = #b\n    local b_rotated = b\n    for i = 1, len do\n        if\
    \ string.find(a, b_rotated) then\n            return true\n        end\n     \
    \   b_rotated = string.sub(b_rotated, 2) .. string.sub(b_rotated, 1, 1)\n    end\n\
    \    return false\nend", "  local n = #a\n  local m = #b\n  if n < m then return\
    \ false end\n  local b_ = b .. b\n  return b_:find(a, 1, true) ~= nil\nend", " \
    \ local len = #b\n  local b = b..b\n  for i = 1, len do\n    if b:sub(i, i+len-1)\
    \ == a then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ len = #b\n  for i = 1, len do\n    local c = b:sub(i, len) .. b:sub(1, i - 1)\n\
    \    if a:find(c) then\n      return true\n    end\n  end\n  return false\nend",
  "    local len = #b\n    local i = 1\n    while i <= len do\n        if string.sub(a,\
    \ i, i + len - 1) == b then\n            return true\n        end\n        i =\
    \ i + 1\n    end\n    return false\nend", "  local len = #b\n  for i = 1, len\
    \ do\n    local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)\n    if string.find(a,\
    \ c) then\n      return true\n    end\n  end\n  return false\nend", "  if #a <\
    \ #b then return false end\n  local b_len = #b\n  local a_len = #a\n  local b_hash\
    \ = hash(b)\n  local a_hash = hash(a:sub(1, b_len))\n  local a_hash_prev = a_hash\n\
    \  for i = 1, a_len - b_len do\n    a_hash = hash(a:sub(i + 1, i + b_len), a_hash_prev,\
    \ a:sub(i, i))\n    if a_hash == b_hash then\n      return true\n    end\n   \
    \ a_hash_prev = a_hash\n  end\n  return false\nend", "    local len = #b\n   \
    \ local b = b .. b\n    for i = 1, len do\n        if string.find(a, b:sub(i,\
    \ i + len - 1)) then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local len = #b\n    for i = 1, len do\n        if string.sub(a,\
    \ i, i + len - 1) == b then\n            return true\n        end\n    end\n \
    \   return false\nend", "  local len = #b\n  for i = 1, len do\n    local c =\
    \ b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local len = #b\n  for i = 1, len do\n\
    \    if a:find(b) then\n      return true\n    end\n    b = b:sub(2) .. b:sub(1,\
    \ 1)\n  end\n  return false\nend", "  local b_len = #b\n  local a_len = #a\n \
    \ if b_len > a_len then\n    return false\n  end\n  local b_first = b:sub(1, 1)\n\
    \  local b_last = b:sub(b_len, b_len)\n  local b_first_idx = a:find(b_first)\n\
    \  local b_last_idx = a:find(b_last)\n  if b_first_idx == nil or b_last_idx ==\
    \ nil then\n    return false\n  end\n  if b_first_idx > b_last_idx then\n    return\
    \ false\n  end\n  local a_sub = a:sub(b_first_idx, b_last_idx)\n  local a_sub_len\
    \ = #a_sub\n  if a_sub_len < b_len then\n    return false\n  end\n  local a_sub_rot\
    \ = a_sub:sub(b_len - a_sub_len + 1, a_sub_len)\n  if a_sub_rot == b then\n  \
    \  return true\n  end\n  return false\nend", "    local len = #b\n    for i =\
    \ 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n        if a:find(c)\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local b_len = #b\n    local a_len = #a\n    local a_sub = a:sub(1, b_len)\n\
    \    if a_sub == b then\n        return true\n    end\n    for i = 1, a_len -\
    \ b_len do\n        a_sub = a_sub:sub(2) .. a:sub(i + b_len, i + b_len)\n    \
    \    if a_sub == b then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local len = #b\n    local b = b .. b\n    return b:find(a)\
    \ ~= nil\nend", "  local len = #b\n  for i = 1, len do\n    local c = b:sub(i,\
    \ len) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local len = #b\n  for i = 1, len do\n    local\
    \ c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local a_len = #a\n  local b_len = #b\n\
    \  if a_len < b_len then\n    return false\n  end\n  local a_idx = 1\n  local\
    \ b_idx = 1\n  while a_idx <= a_len do\n    if a:sub(a_idx, a_idx + b_len - 1)\
    \ == b then\n      return true\n    end\n    a_idx = a_idx + 1\n  end\n  return\
    \ false\nend", "  local len_a = #a\n  local len_b = #b\n  if len_a < len_b then\n\
    \    return false\n  end\n  local b_first = b:sub(1, 1)\n  local b_last = b:sub(len_b,\
    \ len_b)\n  local b_first_pos = a:find(b_first)\n  local b_last_pos = a:find(b_last)\n\
    \  if b_first_pos == nil or b_last_pos == nil then\n    return false\n  end\n\
    \  if b_first_pos > b_last_pos then\n    return false\n  end\n  local a_sub =\
    \ a:sub(b_first_pos, b_last_pos)\n  local a_sub_len = #a_sub\n  if a_sub_len <\
    \ len_b then\n    return false\n  end\n  local a_sub_first = a_sub:sub(1, 1)\n\
    \  local a_sub_last = a_sub:sub(a_sub_len, a_sub_len)\n  if a_sub_first ~= b_first\
    \ or a_sub_last ~= b_last then\n    return false\n  end\n  local a_sub_mid = a_sub:sub(2,\
    \ a_sub_len - 1)\n  local b_mid = b:sub(2, len_b - 1)\n  return a_sub_mid:find(b_mid)\
    \ ~= nil\nend", "    local len = #b\n    for i = 1, len do\n        if string.sub(a,\
    \ i, i + len - 1) == b then\n            return true\n        end\n    end\n \
    \   return false\nend", "  local len = #b\n  for i = 1, len do\n    local c =\
    \ b:sub(i) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local len = #b\n  for i = 1, len do\n    if a:find(b)\
    \ then\n      return true\n    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n \
    \ return false\nend", "    local len = #b\n    local b = b .. b\n    for i = 1,\
    \ len do\n        if b:sub(i, i + len - 1) == a then\n            return true\n\
    \        end\n    end\n    return false\nend", "  local len = #b\n  local function\
    \ check(s)\n    return string.find(a, s)\n  end\n  for i = 1, len do\n    if check(b)\
    \ then return true end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n  return false\n\
    end", "  local len = #b\n  local bb = b .. b\n  return bb:find(a, 1, true) ~=\
    \ nil\nend", "  local len = #b\n  local b = b .. b\n  for i = 1, len do\n    if\
    \ b:sub(i, i + len - 1) == a then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local len = #b\n  local b = b..b\n  local i = 1\n  while i <=\
    \ len do\n    if string.find(a, b:sub(i, i+len-1)) then\n      return true\n \
    \   end\n    i = i + 1\n  end\n  return false\nend", "  local len = #b\n  for\
    \ i = 1, len do\n    local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)\n\
    \    if string.find(a, c) then\n      return true\n    end\n  end\n  return false\n\
    end", "  local len = #b\n  local b = b .. b\n  return b:find(a) ~= nil\nend",
  "  local len = #b\n  local bb = b..b\n  return bb:find(a, 1, true) ~= nil\nend",
  "    local len = #b\n    local c = b .. b\n    return c:find(a) ~= nil\nend", " \
    \ local len = #b\n  local bb = b .. b\n  local i = 1\n  while i <= len do\n  \
    \  local j = 1\n    local k = i\n    while j <= len and bb:sub(k, k) == b:sub(j,\
    \ j) do\n      j = j + 1\n      k = k + 1\n    end\n    if j > len then\n    \
    \  return true\n    end\n    i = i + 1\n  end\n  return false\nend", "    local\
    \ len_a = #a\n    local len_b = #b\n    if len_a < len_b then\n        return\
    \ false\n    end\n    local b_rot = b\n    for i = 1, len_b do\n        if string.find(a,\
    \ b_rot) then\n            return true\n        end\n        b_rot = string.sub(b_rot,\
    \ 2) .. string.sub(b_rot, 1, 1)\n    end\n    return false\nend", "    local len\
    \ = #b\n    for i = 1, len do\n        local c = string.sub(b, i, len) .. string.sub(b,\
    \ 1, i - 1)\n        if string.find(a, c) then\n            return true\n    \
    \    end\n    end\n    return false\nend", "    if #a < #b then\n        return\
    \ false\n    end\n    local b_len = #b\n    for i = 1, #a - b_len + 1 do\n   \
    \     if a:sub(i, i + b_len - 1) == b then\n            return true\n        end\n\
    \    end\n    return false\nend", "  local len = #b\n  for i = 1, len do\n   \
    \ local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local len = #b\n  local function\
    \ rotate(s)\n    return s:sub(2, len) .. s:sub(1, 1)\n  end\n  for i = 1, len\
    \ do\n    if a:find(b) then\n      return true\n    end\n    b = rotate(b)\n \
    \ end\n  return false\nend", "    local len = #b\n    for i = 1, len do\n    \
    \    if a:find(b, 1, true) then\n            return true\n        end\n      \
    \  b = b:sub(2) .. b:sub(1, 1)\n    end\n    return false\nend", "    local a_len\
    \ = #a\n    local b_len = #b\n    if a_len < b_len then\n        return false\n\
    \    end\n    local a_hash = 0\n    local b_hash = 0\n    local hash_base = 256\n\
    \    local hash_mod = 2^32 - 1\n    local hash_pow = 1\n    for i = 1, b_len do\n\
    \        a_hash = (a_hash * hash_base + a:byte(i)) % hash_mod\n        b_hash\
    \ = (b_hash * hash_base + b:byte(i)) % hash_mod\n        hash_pow = (hash_pow\
    \ * hash_base) % hash_mod\n    end\n    for i = 1, a_len - b_len + 1 do\n    \
    \    if a_hash == b_hash then\n            local j = 1\n            while j <=\
    \ b_len and a:byte(i + j - 1) == b:byte(j) do\n                j = j + 1\n   \
    \         end\n            if j > b_len then\n                return true\n  \
    \          end\n        end\n        if i < a_len - b_len + 1 then\n         \
    \   a_hash = (a_hash * hash_base - a:byte(i) * hash_pow + a:byte(i + b_len)) %\
    \ hash_mod\n        end\n    end\n    return false\nend", "    local len = #b\n\
    \    local i = 1\n    while i <= len do\n        if string.find(a, b) then\n \
    \           return true\n        end\n        b = string.sub(b, 2) .. string.sub(b,\
    \ 1, 1)\n        i = i + 1\n    end\n    return false\nend", "  local function\
    \ rotate(s)\n    return s:sub(2) .. s:sub(1, 1)\n  end\n  local function is_substring(a,\
    \ b)\n    return a:find(b) ~= nil\n  end\n  local function is_rotation(a, b)\n\
    \    return is_substring(a, b)\n  end\n  local function is_any_rotation(a, b)\n\
    \    local r = b\n    for i = 1, #b do\n      if is_rotation(a, r) then\n    \
    \    return true\n      end\n      r = rotate(r)\n    end\n    return false\n\
    \  end\n  return is_any_rotation(a, b)\nend", "    local len = #b\n    local b\
    \ = b .. b\n    for i = 1, len do\n        if b:sub(i, i + len - 1) == a then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ function rotate(a)\n    return a:sub(2) .. a:sub(1, 1)\n  end\n  local function\
    \ is_substring(a, b)\n    return a:find(b) ~= nil\n  end\n  local function is_rotation(a,\
    \ b)\n    return is_substring(a, b) or is_substring(a, rotate(b))\n  end\n  return\
    \ is_rotation(a, b)\nend", "    local len = #b\n    for i = 1, len do\n      \
    \  if string.sub(a, i, i + len - 1) == b then\n            return true\n     \
    \   end\n    end\n    return false\nend", "  local function is_substring(a, b)\n\
    \    local function is_prefix(a, b)\n      return string.sub(a, 1, string.len(b))\
    \ == b\n    end\n    return is_prefix(a, b) or is_substring(string.sub(a, 2),\
    \ b)\n  end\n  local function rotate(a)\n    return string.sub(a, 2) .. string.sub(a,\
    \ 1, 1)\n  end\n  local function is_rotation(a, b)\n    return is_substring(a,\
    \ b) or is_rotation(rotate(a), b)\n  end\n  return is_rotation(a, b)\nend", " \
    \ local function rotate(str)\n    return string.sub(str, 2) .. string.sub(str,\
    \ 1, 1)\n  end\n  local function is_substring(a, b)\n    return string.find(a,\
    \ b) ~= nil\n  end\n  local function is_rotation(a, b)\n    if #a ~= #b then\n\
    \      return false\n    end\n    for i = 1, #a do\n      if is_substring(a, b)\
    \ then\n        return true\n      end\n      b = rotate(b)\n    end\n    return\
    \ false\n  end\n  return is_rotation(a, b)\nend", "    local len = #b\n    for\
    \ i = 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n        if\
    \ a:find(c) then\n            return true\n        end\n    end\n    return false\n\
    end", "    local len = string.len(b)\n    local b = b .. b\n    return string.find(a,\
    \ b) ~= nil\nend", "  local len = #b\n  for i = 1, len do\n    if string.sub(a,\
    \ i, i + len - 1) == b then\n      return true\n    end\n  end\n  return false\n\
    end", "  local len = #b\n  local a_len = #a\n  local b_len = #b\n  local b_rot\
    \ = b\n  for i = 1, len do\n    if string.find(a, b_rot) then\n      return true\n\
    \    end\n    b_rot = string.sub(b_rot, 2, b_len) .. string.sub(b_rot, 1, 1)\n\
    \  end\n  return false\nend", "  local len = #b\n  local a_len = #a\n  if len\
    \ > a_len then\n    return false\n  end\n  local a_sub = a:sub(1, len)\n  if a_sub\
    \ == b then\n    return true\n  end\n  local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1,\
    \ 1)\n  return cycpattern_check(a:sub(2), b) or cycpattern_check(a:sub(2), a_sub_rot)\n\
    end", "    local len = #b\n    for i = 1, len do\n        if string.sub(a, 1,\
    \ len) == b then\n            return true\n        end\n        b = string.sub(b,\
    \ 2) .. string.sub(b, 1, 1)\n    end\n    return false\nend", "    local len =\
    \ #b\n    local b = b .. b\n    return b:find(a) ~= nil\nend", "    local len\
    \ = #b\n    for i = 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i -\
    \ 1)\n        if a:find(c) then\n            return true\n        end\n    end\n\
    \    return false\nend", "  local len = #b\n  for i = 1, len do\n    local c =\
    \ string.sub(b, i, len) .. string.sub(b, 1, i - 1)\n    if string.find(a, c) then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local len = #b\n\
    \    for i = 1, len do\n        if a:find(b, 1, true) then\n            return\
    \ true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n    end\n    return\
    \ false\nend", "    local b_len = #b\n    local a_len = #a\n    local a_sub =\
    \ a:sub(1, b_len)\n    local a_sub_len = #a_sub\n    local a_sub_rot = a_sub:sub(a_sub_len,\
    \ a_sub_len) .. a_sub:sub(1, a_sub_len - 1)\n    local a_sub_rot_len = #a_sub_rot\n\
    \    local a_sub_rot_sub = a_sub_rot:sub(1, b_len)\n    local a_sub_rot_sub_len\
    \ = #a_sub_rot_sub\n    local a_sub_rot_sub_rot = a_sub_rot_sub:sub(a_sub_rot_sub_len,\
    \ a_sub_rot_sub_len) .. a_sub_rot_sub:sub(1, a_sub_rot_sub_len - 1)\n    local\
    \ a_sub_rot_sub_rot_len = #a_sub_rot_sub_rot\n    local a_sub_rot_sub_rot_sub\
    \ = a_sub_rot_sub_rot:sub(1, b_len)\n    local a_sub_rot_sub_rot_sub_len = #a_sub_rot_sub_rot_sub\n\
    \    local a_sub_rot_sub_rot_sub_rot = a_sub_rot_sub_rot_sub:sub(a_sub_rot_sub_rot_sub_len,\
    \ a_sub_rot_sub_rot_sub_len) .. a_sub_rot_sub_rot_sub:sub(1, a_sub_rot_sub_rot_sub_len\
    \ - 1)\n    local a_sub_rot_sub_rot_sub_rot_len = #a_sub_rot_sub_rot_sub_rot\n\
    \    local a_sub_rot_sub_rot_sub_rot_sub = a_sub_rot_sub_rot_sub_rot:sub(1, b_len)\n\
    \    local a_sub_rot_sub_rot_sub_rot_sub_len = #a_sub_rot_sub_rot_sub_rot_", " \
    \   local len = #b\n    for i = 1, len do\n        if string.sub(a, 1, len) ==\
    \ b then\n            return true\n        end\n        b = string.sub(b, 2) ..\
    \ string.sub(b, 1, 1)\n    end\n    return false\nend", "    local len = #b\n\
    \    for i = 1, len do\n        if string.sub(a, i, i + len - 1) == b then\n \
    \           return true\n        end\n    end\n    return false\nend", "    local\
    \ len_a = #a\n    local len_b = #b\n    local c = b .. b\n    local i = 1\n  \
    \  while i <= len_a do\n        local j = 1\n        while j <= len_b do\n   \
    \         if a:sub(i, i + j - 1) == c:sub(j, j + j - 1) then\n               \
    \ return true\n            end\n            j = j + 1\n        end\n        i\
    \ = i + 1\n    end\n    return false\nend", "  local len = #b\n  for i = 1, len\
    \ do\n    local s = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(s) then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local len = #b\n\
    \  for i = 1, len do\n    local s = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(s)\
    \ then\n      return true\n    end\n  end\n  return false\nend", "    local len\
    \ = #b\n    for i = 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i -\
    \ 1)\n        if a:find(c) then\n            return true\n        end\n    end\n\
    \    return false\nend", "  local len = #b\n  for i = 1, len do\n    if string.sub(a,\
    \ 1, len) == b then\n      return true\n    end\n    b = string.sub(b, 2) .. string.sub(b,\
    \ 1, 1)\n  end\n  return false\nend", "    local len = #b\n    local b_rot = b\n\
    \    for i = 1, len do\n        if string.find(a, b_rot) then\n            return\
    \ true\n        end\n        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot,\
    \ 1, 1)\n    end\n    return false\nend", "  local len = #b\n  for i = 1, len\
    \ do\n    if string.sub(a, i, i + len - 1) == b then\n      return true\n    end\n\
    \  end\n  return false\nend", "    local len = #b\n    for i = 1, len do\n   \
    \     local c = b:sub(i, len) .. b:sub(1, i - 1)\n        if a:find(c) then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ len_a = #a\n  local len_b = #b\n  if len_a < len_b then\n    return false\n\
    \  end\n  local b_rot = b\n  for i = 1, len_b do\n    if string.find(a, b_rot)\
    \ then\n      return true\n    end\n    b_rot = string.sub(b_rot, 2) .. string.sub(b_rot,\
    \ 1, 1)\n  end\n  return false\nend", "  local len = #b\n  for i = 1, len do\n\
    \    local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n     \
    \ return true\n    end\n  end\n  return false\nend", "  local len = #b\n  local\
    \ a_len = #a\n  if len > a_len then\n    return false\n  end\n  local a_sub =\
    \ a:sub(1, len)\n  local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1, 1)\n  if a_sub\
    \ == b then\n    return true\n  end\n  local i = 1\n  while i < a_len do\n   \
    \ if a_sub_rot == b then\n      return true\n    end\n    i = i + 1\n    a_sub_rot\
    \ = a_sub_rot:sub(2) .. a_sub_rot:sub(1, 1)\n  end\n  return false\nend", "  local\
    \ len = #b\n  local b_rot = b\n  for i = 1, len do\n    b_rot = b_rot:sub(2) ..\
    \ b_rot:sub(1, 1)\n    if a:find(b_rot) then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local len = #b\n  local a_len = #a\n  if len > a_len\
    \ then\n    return false\n  end\n  local a_sub = a:sub(1, len)\n  if a_sub ==\
    \ b then\n    return true\n  end\n  local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1,\
    \ 1)\n  return cycpattern_check(a:sub(2), b) or cycpattern_check(a_sub_rot ..\
    \ a:sub(len + 1), b)\nend", "    local len = #b\n    local first = b:sub(1, 1)\n\
    \    local last = b:sub(len, len)\n    local new_b = last .. b:sub(1, len - 1)\n\
    \    if a:find(new_b) then\n        return true\n    end\n    return cycpattern_check(a,\
    \ new_b)\nend", "  local len = #b\n  for i = 1, len do\n    if a:find(b, 1, true)\
    \ then\n      return true\n    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n \
    \ return false\nend", "    if #a < #b then\n        return false\n    end\n  \
    \  local b_len = #b\n    local b_first = b:sub(1, 1)\n    local b_last = b:sub(b_len,\
    \ b_len)\n    local b_first_idx = a:find(b_first)\n    local b_last_idx = a:find(b_last)\n\
    \    if b_first_idx == nil or b_last_idx == nil then\n        return false\n \
    \   end\n    local a_len = #a\n    local a_first = a:sub(1, 1)\n    local a_last\
    \ = a:sub(a_len, a_len)\n    local a_first_idx = b:find(a_first)\n    local a_last_idx\
    \ = b:find(a_last)\n    if a_first_idx == nil or a_last_idx == nil then\n    \
    \    return false\n    end\n    if b_first_idx < b_last_idx then\n        if a_first_idx\
    \ < a_last_idx then\n            return a:find(b) ~= nil\n        else\n     \
    \       return a:find(b:sub(a_last_idx, b_len) .. b:sub(1, a_first_idx - 1)) ~=\
    \ nil\n        end\n    else\n        if a_first_idx < a_last_idx then\n     \
    \       return a:find(b:sub(b_last_idx, b_len) .. b:sub(1, b_first_idx - 1)) ~=\
    \ nil\n        else\n            return a:find(b) ~= nil\n        end\n    end\n\
    end", "    local function is_substring(a, b)\n        return a:find(b) ~= nil\n\
    \    end\n    local function rotate(a)\n        return a:sub(2) .. a:sub(1, 1)\n\
    \    end\n    local function rotate_n(a, n)\n        for i = 1, n do\n       \
    \     a = rotate(a)\n        end\n        return a\n    end\n    local function\
    \ rotate_until(a, b)\n        local n = 0\n        while not is_substring(a, b)\
    \ do\n            a = rotate(a)\n            n = n + 1\n        end\n        return\
    \ n\n    end\n    local function rotate_until_substring(a, b)\n        local n\
    \ = 0\n        while not is_substring(a, b) do\n            a = rotate(a)\n  \
    \          n = n + 1\n        end\n        return n, a\n    end\n    local function\
    \ rotate_until_substring_or_end(a, b)\n        local n = 0\n        while not\
    \ is_substring(a, b) and n < #a do\n            a = rotate(a)\n            n =\
    \ n + 1\n        end\n        return n, a\n    end\n    local function rotate_until_substring_or_end_or_substring(a,\
    \ b)\n        local n = 0\n        while not is_substring(a, b) and n < #a do\n\
    \            a = rotate(a)\n            n = n + 1\n        end\n        return\
    \ n, a\n    end\n    local function rotate_until_substring_or_end_or_substring_or_end(a,\
    \ b)\n        local n = 0\n        while not is_substring(a, b) and n < #a do\n\
    \            a = rotate(a)\n            n = n + 1\n        end\n        return\
    \ n, a\n    end\n    local function rotate_until_substring_or_end_or_substring_or_end_or_substring(a,\
    \ b)\n        local n = 0\n        while not is_substring(a, b) and n < #a do\n\
    \            a = rotate(a)\n            n =", "    local len = #b\n    local bb\
    \ = b .. b\n    return bb:find(a, 1, true) ~= nil\nend", "  local len = #b\n \
    \ for i = 1, len do\n    if string.sub(a, i, i + len - 1) == b then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local len = #b\n    for i =\
    \ 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n        if a:find(c)\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    if #a < #b then\n        return false\n    end\n    local b_len = #b\n    local\
    \ b_first = b:sub(1, 1)\n    local b_last = b:sub(b_len, b_len)\n    local b_first_pos\
    \ = a:find(b_first)\n    local b_last_pos = a:find(b_last)\n    if b_first_pos\
    \ == nil or b_last_pos == nil then\n        return false\n    end\n    if b_first_pos\
    \ > b_last_pos then\n        local b_first_pos_1 = a:find(b_first, b_last_pos)\n\
    \        if b_first_pos_1 == nil then\n            return false\n        end\n\
    \        b_first_pos = b_first_pos_1\n    end\n    local a_sub = a:sub(b_first_pos,\
    \ b_last_pos)\n    if a_sub == b then\n        return true\n    end\n    local\
    \ a_sub_len = #a_sub\n    local a_sub_first = a_sub:sub(1, 1)\n    local a_sub_last\
    \ = a_sub:sub(a_sub_len, a_sub_len)\n    local a_sub_first_pos = b:find(a_sub_first)\n\
    \    local a_sub_last_pos = b:find(a_sub_last)\n    if a_sub_first_pos == nil\
    \ or a_sub_last_pos == nil then\n        return false\n    end\n    if a_sub_first_pos\
    \ > a_sub_last_pos then\n        local a_sub_first_pos_1 = b:find(a_sub_first,\
    \ a_sub_last_pos)\n        if a_sub_first_pos_1 == nil then\n            return\
    \ false\n        end\n        a_sub_first_pos = a_sub_first_pos_1\n    end\n \
    \   local b_sub = b:sub(a_sub_first_pos, a_sub_last_pos)\n    if b_sub == a_sub\
    \ then\n        return true\n    end\n    return false\nend", "    local len =\
    \ #b\n    local a_len = #a\n    if len > a_len then\n        return false\n  \
    \  end\n    local b_first = b:sub(1, 1)\n    local b_last = b:sub(len, len)\n\
    \    local a_first = a:sub(1, 1)\n    local a_last = a:sub(a_len, a_len)\n   \
    \ if b_first == a_first and b_last == a_last then\n        local a_sub = a:sub(2,\
    \ a_len - 1)\n        local b_sub = b:sub(2, len - 1)\n        if a_sub:find(b_sub)\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  local len = #b\n  local b = b .. b\n  for i = 1, len do\n    if string.find(a,\
    \ string.sub(b, i, i + len - 1)) then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local len = #b\n    for i = 1, len do\n        local c = b:sub(i,\
    \ len) .. b:sub(1, i - 1)\n        if a:find(c) then\n            return true\n\
    \        end\n    end\n    return false\nend", "  local len = #b\n  local b =\
    \ b .. b\n  for i = 1, len do\n    if string.find(a, string.sub(b, i, i + len\
    \ - 1)) then\n      return true\n    end\n  end\n  return false\nend", "    local\
    \ len = #b\n    for i = 1, len do\n        if string.sub(a, i, i + len - 1) ==\
    \ b then\n            return true\n        end\n    end\n    return false\nend",
  "    local len_a = #a\n    local len_b = #b\n    if len_a < len_b then\n       \
    \ return false\n    end\n    local i = 1\n    while i <= len_a do\n        local\
    \ j = 1\n        while j <= len_b do\n            if a:sub(i, i) ~= b:sub(j, j)\
    \ then\n                break\n            end\n            i = i + 1\n      \
    \      j = j + 1\n            if i > len_a then\n                i = 1\n     \
    \       end\n            if j > len_b then\n                return true\n    \
    \        end\n        end\n        i = i + 1\n    end\n    return false\nend",
  "    local b_len = #b\n    for i = 1, b_len do\n        if a:find(b, 1, true) then\n\
    \            return true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n \
    \   end\n    return false\nend", "    local len = #b\n    for i = 1, len do\n\
    \        local sub = string.sub(b, i, len) .. string.sub(b, 1, i - 1)\n      \
    \  if string.find(a, sub) then\n            return true\n        end\n    end\n\
    \    return false\nend", "    local len = #b\n    for i = 1, len do\n        if\
    \ a:find(b) then\n            return true\n        end\n        b = b:sub(2) ..\
    \ b:sub(1, 1)\n    end\n    return false\nend", "  local len = #b\n  local a =\
    \ a:sub(1, len)\n  if a == b then\n    return true\n  end\n  for i = 1, len do\n\
    \    a = a:sub(2) .. a:sub(1, 1)\n    if a == b then\n      return true\n    end\n\
    \  end\n  return false\nend", "    local len = string.len(b)\n    local b = b\
    \ .. b\n    return string.find(a, b) ~= nil\nend", "    local l = #b\n    for\
    \ i = 1, l do\n        if string.sub(a, i, i + l - 1) == b then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local len_a = #a\n  local\
    \ len_b = #b\n  if len_a < len_b then\n    return false\n  end\n  local b_first\
    \ = b:sub(1, 1)\n  local b_last = b:sub(len_b, len_b)\n  local b_middle = b:sub(2,\
    \ len_b - 1)\n  local b_first_idx = a:find(b_first)\n  if b_first_idx == nil then\n\
    \    return false\n  end\n  local b_last_idx = a:find(b_last, b_first_idx + 1)\n\
    \  if b_last_idx == nil then\n    return false\n  end\n  local b_middle_idx =\
    \ a:find(b_middle, b_first_idx + 1)\n  if b_middle_idx == nil then\n    return\
    \ false\n  end\n  if b_middle_idx < b_last_idx then\n    return true\n  end\n\
    \  local b_first_idx_2 = a:find(b_first, b_last_idx + 1)\n  if b_first_idx_2 ==\
    \ nil then\n    return false\n  end\n  local b_last_idx_2 = a:find(b_last, b_first_idx_2\
    \ + 1)\n  if b_last_idx_2 == nil then\n    return false\n  end\n  local b_middle_idx_2\
    \ = a:find(b_middle, b_first_idx_2 + 1)\n  if b_middle_idx_2 == nil then\n   \
    \ return false\n  end\n  if b_middle_idx_2 < b_last_idx_2 then\n    return true\n\
    \  end\n  return false\nend", "    local len = #b\n    for i = 1, len do\n   \
    \     if a:find(b, 1, true) then\n            return true\n        end\n     \
    \   b = b:sub(2) .. b:sub(1, 1)\n    end\n    return false\nend", "    local b_len\
    \ = #b\n    local a_len = #a\n    if b_len > a_len then\n        return false\n\
    \    end\n    local a_sub = a:sub(1, b_len)\n    if a_sub == b then\n        return\
    \ true\n    end\n    local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1, 1)\n    return\
    \ cycpattern_check(a:sub(2), b) or cycpattern_check(a_sub_rot .. a:sub(b_len +\
    \ 1), b)\nend", "    local len_a = #a\n    local len_b = #b\n    if len_a < len_b\
    \ then\n        return false\n    end\n    local b_rot = b\n    for i = 1, len_b\
    \ do\n        if string.find(a, b_rot) then\n            return true\n       \
    \ end\n        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n    end\n\
    \    return false\nend", "  local len = #b\n  local b = b .. b\n  return b:find(a)\
    \ ~= nil\nend", "    local len = #b\n    for i = 1, len do\n        if a:find(b)\
    \ then\n            return true\n        end\n        b = b:sub(2) .. b:sub(1,\
    \ 1)\n    end\n    return false\nend", "  local len = #b\n  for i = 1, len do\n\
    \    local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n     \
    \ return true\n    end\n  end\n  return false\nend", "    local len = #b\n   \
    \ for i = 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n    \
    \    if a:find(c) then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local len = #b\n    for i = 1, len do\n        local c = string.sub(b,\
    \ i, len) .. string.sub(b, 1, i - 1)\n        if string.find(a, c) then\n    \
    \        return true\n        end\n    end\n    return false\nend", "    local\
    \ len = string.len(b)\n    local b = b .. b\n    return string.find(a, b) ~= nil\n\
    end", "  local len = #b\n  for i = 1, len do\n    if a:find(b) then\n      return\
    \ true\n    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n  return false\nend",
  "  local len = #b\n  for i = 1, len do\n    local c = b:sub(i, len) .. b:sub(1,\
    \ i - 1)\n    if a:find(c) then\n      return true\n    end\n  end\n  return false\n\
    end", "  local len = #b\n  for i = 1, len do\n    if string.sub(a, 1, len) ==\
    \ b then\n      return true\n    end\n    b = string.sub(b, 2) .. string.sub(b,\
    \ 1, 1)\n  end\n  return false\nend", "    local len = #b\n    for i = 1, len\
    \ do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n        if a:find(c)\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    local m, n = #a, #b\n    if m < n then return false end\n    local function\
    \ rotate(s)\n        return s:sub(2) .. s:sub(1, 1)\n    end\n    for i = 1, n\
    \ do\n        if a:find(b) then return true end\n        b = rotate(b)\n    end\n\
    \    return false\nend", "  local len = #b\n  for i = 1, len do\n    if a:find(b)\
    \ then\n      return true\n    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n \
    \ return false\nend", "    local function rotate(str)\n        return str:sub(2)\
    \ .. str:sub(1, 1)\n    end\n    local function is_substring(a, b)\n        return\
    \ a:find(b) ~= nil\n    end\n    local function is_rotation(a, b)\n        local\
    \ rotated = b\n        for i = 1, #b do\n            if is_substring(a, rotated)\
    \ then\n                return true\n            end\n            rotated = rotate(rotated)\n\
    \        end\n        return false\n    end\n    return is_rotation(a, b)\nend",
  "    local b_len = #b\n    local b_rot = b\n    for i = 1, b_len do\n        if\
    \ string.find(a, b_rot) then\n            return true\n        end\n        b_rot\
    \ = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n    end\n    return false\n\
    end", "  local len = #b\n  for i = 1, len do\n    local c = b:sub(i, len) .. b:sub(1,\
    \ i - 1)\n    if a:find(c) then\n      return true\n    end\n  end\n  return false\n\
    end", "    if #a < #b then\n        return false\n    end\n    for i = 1, #a do\n\
    \        if a:sub(i, i + #b - 1) == b then\n            return true\n        end\n\
    \    end\n    return false\nend", "  local len = #b\n  for i = 1, len do\n   \
    \ if a:find(b) then\n      return true\n    end\n    b = b:sub(2) .. b:sub(1,\
    \ 1)\n  end\n  return false\nend", "  local len = #b\n  for i = 1, len do\n  \
    \  local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local len_a = #a\n  local len_b\
    \ = #b\n  if len_a < len_b then\n    return false\n  end\n  local b_first = b:sub(1,\
    \ 1)\n  local b_last = b:sub(len_b, len_b)\n  local b_first_pos = a:find(b_first)\n\
    \  local b_last_pos = a:find(b_last)\n  if b_first_pos == nil or b_last_pos ==\
    \ nil then\n    return false\n  end\n  if b_first_pos > b_last_pos then\n    return\
    \ false\n  end\n  local a_sub = a:sub(b_first_pos, b_last_pos)\n  if len_a - len_b\
    \ > 0 then\n    a_sub = a_sub .. a:sub(1, len_a - len_b)\n  end\n  return a_sub:find(b)\
    \ ~= nil\nend", "    local len = #b\n    for i = 1, len do\n        if a:find(b,\
    \ 1, true) then\n            return true\n        end\n        b = b:sub(2) ..\
    \ b:sub(1, 1)\n    end\n    return false\nend", "    local len = #b\n    local\
    \ b = b .. b\n    return b:find(a) ~= nil\nend", "    local len = #b\n    for\
    \ i = 1, len do\n        local c = string.sub(b, i, len) .. string.sub(b, 1, i\
    \ - 1)\n        if string.find(a, c) then\n            return true\n        end\n\
    \    end\n    return false\nend", "    local b_len = #b\n    for i = 1, b_len\
    \ do\n        local b_rot = b:sub(i, b_len) .. b:sub(1, i - 1)\n        if a:find(b_rot)\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  local len = #b\n  for i = 1, len do\n    if a:find(b) then\n      return true\n\
    \    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n  return false\nend", "    local\
    \ len = #b\n    for i = 1, len do\n        local c = b:sub(i, len) .. b:sub(1,\
    \ i - 1)\n        if a:find(c) then\n            return true\n        end\n  \
    \  end\n    return false\nend", "  local len = #b\n  local b = b .. b\n  for i\
    \ = 1, len do\n    if b:sub(i, i + len - 1) == a then\n      return true\n   \
    \ end\n  end\n  return false\nend", "  local len_a = #a\n  local len_b = #b\n\
    \  if len_a < len_b then\n    return false\n  end\n  local b_first = b:sub(1,\
    \ 1)\n  local b_last = b:sub(len_b, len_b)\n  local b_first_pos = a:find(b_first)\n\
    \  local b_last_pos = a:find(b_last)\n  if b_first_pos == nil or b_last_pos ==\
    \ nil then\n    return false\n  end\n  local b_first_pos_next = b_first_pos +\
    \ 1\n  local b_last_pos_next = b_last_pos + 1\n  if b_first_pos_next > len_a then\n\
    \    b_first_pos_next = 1\n  end\n  if b_last_pos_next > len_a then\n    b_last_pos_next\
    \ = 1\n  end\n  local a_sub = a:sub(b_first_pos_next, b_last_pos_next)\n  if a_sub\
    \ == b then\n    return true\n  end\n  return cycpattern_check(a, b:sub(2, len_b)\
    \ .. b:sub(1, 1))\nend", "  local len = #b\n  local b = b .. b\n  for i = 1, len\
    \ do\n    if b:sub(i, i + len - 1) == a then\n      return true\n    end\n  end\n\
    \  return false\nend", "    local len = #b\n    local b = b..b\n    for i = 1,\
    \ len do\n        if b:sub(i, i+len-1) == a then\n            return true\n  \
    \      end\n    end\n    return false\nend", "  local len = #b\n  for i = 1, len\
    \ do\n    local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local len = #b\n\
    \  local first = b:sub(1, 1)\n  local last = b:sub(len, len)\n  local b_rot =\
    \ b:sub(2, len) .. first\n  local b_rot_2 = b:sub(len - 1, len) .. b:sub(1, len\
    \ - 2)\n  local b_rot_3 = b:sub(len - 2, len) .. b:sub(1, len - 3)\n  local b_rot_4\
    \ = b:sub(len - 3, len) .. b:sub(1, len - 4)\n  local b_rot_5 = b:sub(len - 4,\
    \ len) .. b:sub(1, len - 5)\n  local b_rot_6 = b:sub(len - 5, len) .. b:sub(1,\
    \ len - 6)\n  local b_rot_7 = b:sub(len - 6, len) .. b:sub(1, len - 7)\n  local\
    \ b_rot_8 = b:sub(len - 7, len) .. b:sub(1, len - 8)\n  local b_rot_9 = b:sub(len\
    \ - 8, len) .. b:sub(1, len - 9)\n  local b_rot_10 = b:sub(len - 9, len) .. b:sub(1,\
    \ len - 10)\n  local b_rot_11 = b:sub(len - 10, len) .. b:sub(1, len - 11)\n \
    \ local b_rot_12 = b:sub(len - 11, len) .. b:sub(1, len - 12)\n  local b_rot_13\
    \ = b:sub(len - 12, len) .. b:sub(1, len - 13)\n  local b_rot_14 = b:sub(len -\
    \ 13, len) .. b:sub(1, len - 14)\n  local b_rot_15 = b:sub(len - 14, len) .. b:sub(1,\
    \ len - 15)\n  local b_rot_16 = b:sub(len - 15, len) .. b:sub(1, len - 16)\n \
    \ local b_rot_17 = b:sub", "  local len = #b\n  local b_rot = b\n  for i = 1,\
    \ len do\n    b_rot = b_rot:sub(2) .. b_rot:sub(1, 1)\n    if a:find(b_rot) then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local function rotate(str)\n\
    \    return str:sub(2) .. str:sub(1, 1)\n  end\n  if a:find(b) then\n    return\
    \ true\n  else\n    local rotated = rotate(b)\n    while rotated ~= b do\n   \
    \   if a:find(rotated) then\n        return true\n      end\n      rotated = rotate(rotated)\n\
    \    end\n  end\n  return false\nend", "    local len_a = #a\n    local len_b\
    \ = #b\n    if len_a < len_b then\n        return false\n    end\n    local i\
    \ = 1\n    while i <= len_a do\n        local j = 1\n        while j <= len_b\
    \ do\n            if a:sub(i, i) ~= b:sub(j, j) then\n                break\n\
    \            end\n            i = i + 1\n            j = j + 1\n            if\
    \ i > len_a then\n                i = 1\n            end\n            if j > len_b\
    \ then\n                return true\n            end\n        end\n        i =\
    \ i + 1\n    end\n    return false\nend", "    local len_a = #a\n    local len_b\
    \ = #b\n    if len_a < len_b then\n        return false\n    end\n    for i =\
    \ 1, len_a do\n        if a:sub(i, i + len_b - 1) == b then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    if #a < #b then\n \
    \       return false\n    end\n    local b_len = #b\n    local a_len = #a\n  \
    \  local b_start = 1\n    local b_end = b_len\n    local a_start = 1\n    local\
    \ a_end = a_len\n    local b_rot = b\n    while b_end <= a_len do\n        if\
    \ string.sub(a, a_start, a_end) == b_rot then\n            return true\n     \
    \   end\n        b_start = b_start + 1\n        b_end = b_end + 1\n        a_start\
    \ = a_start + 1\n        a_end = a_end + 1\n        b_rot = string.sub(b, b_start,\
    \ b_end) .. string.sub(b, 1, b_start - 1)\n    end\n    return false\nend", " \
    \ local b_len = #b\n  local a_len = #a\n  if b_len > a_len then\n    return false\n\
    \  end\n  for i = 1, a_len do\n    local sub = a:sub(i, i + b_len - 1)\n    if\
    \ sub == b then\n      return true\n    end\n  end\n  return false\nend", "  \
    \  local len = #b\n    local s = b .. b\n    return s:find(a) ~= nil\nend", " \
    \ local len = #b\n  for i = 1, len do\n    if a:find(b) then\n      return true\n\
    \    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n  return false\nend", "    local\
    \ n = #a\n    local m = #b\n    local i = 1\n    local j = 1\n    local k = 1\n\
    \    local l = 1\n    local flag = 0\n    while i <= n do\n        if a:sub(i,\
    \ i) == b:sub(j, j) then\n            j = j + 1\n            i = i + 1\n     \
    \       if j == m + 1 then\n                return true\n            end\n   \
    \     else\n            i = i + 1\n            j = 1\n        end\n    end\n \
    \   return false\nend", "  local len = #b\n  for i = 1, len do\n    local c =\
    \ b:sub(i, len) .. b:sub(1, i - 1)\n    if a:find(c) then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local function check(a, b)\n    local\
    \ function check_substr(a, b)\n      local function check_char(a, b)\n       \
    \ local function check_char_substr(a, b)\n          if #b == 0 then\n        \
    \    return true\n          elseif #a == 0 then\n            return false\n  \
    \        elseif a:sub(1, 1) == b:sub(1, 1) then\n            return check_char_substr(a:sub(2),\
    \ b:sub(2))\n          else\n            return check_char_substr(a:sub(2), b)\n\
    \          end\n        end\n        return check_char_substr(a, b)\n      end\n\
    \      if #b == 0 then\n        return true\n      elseif #a == 0 then\n     \
    \   return false\n      elseif check_char(a, b:sub(1, 1)) then\n        return\
    \ check_substr(a, b:sub(2))\n      else\n        return check_substr(a, b)\n \
    \     end\n    end\n    return check_substr(a, b)\n  end\n  if #a < #b then\n\
    \    return false\n  elseif check(a, b) then\n    return true\n  else\n    return\
    \ cycpattern_check(a:sub(2), b)\n  end\nend", "    local a_len = #a\n    local\
    \ b_len = #b\n    if a_len < b_len then\n        return false\n    end\n    local\
    \ b_first_char = b:sub(1, 1)\n    local b_last_char = b:sub(b_len, b_len)\n  \
    \  local b_first_char_idx = a:find(b_first_char)\n    local b_last_char_idx =\
    \ a:find(b_last_char)\n    if b_first_char_idx == nil or b_last_char_idx == nil\
    \ then\n        return false\n    end\n    local b_first_char_idx_end = b_first_char_idx\
    \ + b_len - 1\n    local b_last_char_idx_end = b_last_char_idx + b_len - 1\n \
    \   if b_first_char_idx_end > a_len then\n        b_first_char_idx_end = b_first_char_idx_end\
    \ - a_len\n    end\n    if b_last_char_idx_end > a_len then\n        b_last_char_idx_end\
    \ = b_last_char_idx_end - a_len\n    end\n    local b_first_char_idx_end_str =\
    \ a:sub(b_first_char_idx, b_first_char_idx_end)\n    local b_last_char_idx_end_str\
    \ = a:sub(b_last_char_idx, b_last_char_idx_end)\n    if b_first_char_idx_end_str\
    \ == b or b_last_char_idx_end_str == b then\n        return true\n    end\n  \
    \  return false\nend", "  local len = #b\n  for i = 1, len do\n    local c = string.sub(b,\
    \ i, len) .. string.sub(b, 1, i - 1)\n    if string.find(a, c) then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local len = #b\n  for i = 1,\
    \ len do\n    if a:find(b) then\n      return true\n    end\n    b = b:sub(2)\
    \ .. b:sub(1, 1)\n  end\n  return false\nend", "    local len = #b\n    for i\
    \ = 1, len do\n        local c = b:sub(i, len) .. b:sub(1, i - 1)\n        if\
    \ a:find(c) then\n            return true\n        end\n    end\n    return false\n\
    end", "    local len = #b\n    for i = 1, len do\n        if string.sub(a, i,\
    \ i + len - 1) == b then\n            return true\n        end\n    end\n    return\
    \ false\nend", "  local len = #b\n  local b = b .. b\n  return b:find(a) ~= nil\n\
    end", "    if a:len() < b:len() then\n        return false\n    end\n    local\
    \ b_len = b:len()\n    local a_len = a:len()\n    local a_sub = a:sub(1, b_len)\n\
    \    local a_sub_len = a_sub:len()\n    local a_sub_rot = a_sub:sub(2, a_sub_len)\
    \ .. a_sub:sub(1, 1)\n    if a_sub == b or a_sub_rot == b then\n        return\
    \ true\n    end\n    for i = 2, a_len - b_len do\n        a_sub = a_sub:sub(2,\
    \ a_sub_len) .. a:sub(i + b_len - 1, i + b_len - 1)\n        a_sub_rot = a_sub:sub(2,\
    \ a_sub_len) .. a_sub:sub(1, 1)\n        if a_sub == b or a_sub_rot == b then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ len = #b\n  for i = 1, len do\n    local c = string.sub(b, i, len) .. string.sub(b,\
    \ 1, i - 1)\n    if string.find(a, c) then\n      return true\n    end\n  end\n\
    \  return false\nend", "    local len = #b\n    local a = a:lower()\n    local\
    \ b = b:lower()\n    for i = 1, len do\n        if a:find(b, 1, true) then\n \
    \           return true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n  \
    \  end\n    return false\nend", "  local len = #b\n  local a_len = #a\n  local\
    \ a_sub = a:sub(1, len)\n  if a_sub == b then\n    return true\n  end\n  for i\
    \ = 1, a_len - len do\n    a_sub = a_sub:sub(2) .. a:sub(i + len, i + len)\n \
    \   if a_sub == b then\n      return true\n    end\n  end\n  return false\nend",
  "    local len_a = #a\n    local len_b = #b\n    if len_a < len_b then\n       \
    \ return false\n    end\n    local b_rot = b\n    for i = 1, len_b do\n      \
    \  if string.find(a, b_rot) then\n            return true\n        end\n     \
    \   b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n    end\n    return\
    \ false\nend", "    local len = #b\n    for i = 1, len do\n        local c = b:sub(i,\
    \ len) .. b:sub(1, i - 1)\n        if a:find(c) then\n            return true\n\
    \        end\n    end\n    return false\nend", "  local len = #b\n  for i = 1,\
    \ len do\n    local c = b:sub(i, len) .. b:sub(1, i - 1)\n    if c == a then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local len_a = #a\n\
    \    local len_b = #b\n    if len_a < len_b then\n        return false\n    end\n\
    \    local b_rot = b\n    for i = 1, len_b do\n        if string.find(a, b_rot)\
    \ then\n            return true\n        end\n        b_rot = string.sub(b_rot,\
    \ 2) .. string.sub(b_rot, 1, 1)\n    end\n    return false\nend", "    local len\
    \ = #b\n    for i = 1, len do\n        local c = b:sub(i) .. b:sub(1, i - 1)\n\
    \        if a:find(c) then\n            return true\n        end\n    end\n  \
    \  return false\nend", "    local len_a = #a\n    local len_b = #b\n    if len_a\
    \ < len_b then\n        return false\n    end\n    local i = 1\n    while i <=\
    \ len_a do\n        if a:sub(i, i + len_b - 1) == b then\n            return true\n\
    \        end\n        i = i + 1\n    end\n    return false\nend", "  local len\
    \ = #b\n  local bb = b .. b\n  return bb:find(a, 1, true) ~= nil\nend", "    local\
    \ len = #b\n    for i = 1, len do\n        if a:find(b, 1, true) then\n      \
    \      return true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n    end\n\
    \    return false\nend", "    local len = #b\n    local a_len = #a\n    if len\
    \ > a_len then\n        return false\n    end\n    local b_first = b:sub(1, 1)\n\
    \    local b_last = b:sub(len, len)\n    local a_first = a:sub(1, 1)\n    local\
    \ a_last = a:sub(a_len, a_len)\n    if b_first == a_first and b_last == a_last\
    \ then\n        local b_first_pos = a:find(b_first)\n        local b_last_pos\
    \ = a:find(b_last)\n        if b_first_pos < b_last_pos then\n            local\
    \ b_sub = a:sub(b_first_pos, b_last_pos)\n            if b_sub == b then\n   \
    \             return true\n            end\n        end\n    end\n    return false\n\
    end", "  local b_len = #b\n  local a_len = #a\n  local b_rot = b\n  for i = 1,\
    \ b_len do\n    if string.find(a, b_rot) then\n      return true\n    end\n  \
    \  b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n  end\n  return false\n\
    end", "    local len = #b\n    local b_rot = b\n    for i = 1, len do\n      \
    \  if string.find(a, b_rot) then\n            return true\n        end\n     \
    \   b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n    end\n    return\
    \ false\nend", "    local len = #b\n    local a_len = #a\n    local b_len = #b\n\
    \    local b_first = b:sub(1, 1)\n    local b_last = b:sub(b_len, b_len)\n   \
    \ local b_middle = b:sub(2, b_len - 1)\n    if a_len < b_len then\n        return\
    \ false\n    end\n    if a:find(b) then\n        return true\n    end\n    for\
    \ i = 1, a_len do\n        local a_first = a:sub(i, i)\n        if a_first ==\
    \ b_first then\n            local a_middle = a:sub(i + 1, i + b_len - 1)\n   \
    \         local a_last = a:sub(i + b_len, i + b_len)\n            if a_middle\
    \ == b_middle and a_last == b_last then\n                return true\n       \
    \     end\n        end\n    end\n    return false\nend", "    if #a < #b then\n\
    \        return false\n    end\n    local bb = b .. b\n    return string.find(bb,\
    \ a) ~= nil\nend", "  local len = #b\n  for i = 1, len do\n    if a:find(b) then\n\
    \      return true\n    end\n    b = b:sub(2) .. b:sub(1, 1)\n  end\n  return\
    \ false\nend", "  local l = string.len(b)\n  local s = string.sub(b, 2, l) ..\
    \ string.sub(b, 1, 1)\n  while s ~= b do\n    if string.find(a, s) then\n    \
    \  return true\n    end\n    s = string.sub(s, 2, l) .. string.sub(s, 1, 1)\n\
    \  end\n  return false\nend", "    local n = #a\n    local m = #b\n    if n <\
    \ m then\n        return false\n    end\n    local i = 1\n    while i <= n do\n\
    \        if a:sub(i, i + m - 1) == b then\n            return true\n        end\n\
    \        i = i + 1\n    end\n    return false\nend", "    local len = #b\n   \
    \ local b_rot = b\n    for i = 1, len do\n        if string.find(a, b_rot) then\n\
    \            return true\n        end\n        b_rot = string.sub(b_rot, 2) ..\
    \ string.sub(b_rot, 1, 1)\n    end\n    return false\nend", "  local len = #b\n\
    \  for i = 1, len do\n    local c = string.sub(b, i, len) .. string.sub(b, 1,\
    \ i - 1)\n    if string.find(a, c) then\n      return true\n    end\n  end\n \
    \ return false\nend", "    local function rotate(str)\n        return str:sub(2)\
    \ .. str:sub(1, 1)\n    end\n    local function is_substring(str, substr)\n  \
    \      return str:find(substr) ~= nil\n    end\n    local function is_substring_rotated(str,\
    \ substr)\n        local rotated = rotate(substr)\n        while rotated ~= substr\
    \ do\n            if is_substring(str, rotated) then\n                return true\n\
    \            end\n            rotated = rotate(rotated)\n        end\n       \
    \ return false\n    end\n    return is_substring_rotated(a, b)\nend", "  local\
    \ len = #b\n  local bb = b .. b\n  return bb:find(a, 1, true) ~= nil\nend", " \
    \   local len = #b\n    local a = a..a\n    for i = 1, len do\n        local sub\
    \ = string.sub(b, i, i+len-1)\n        if string.find(a, sub) then\n         \
    \   return true\n        end\n    end\n    return false\nend", "    local len\
    \ = #b\n    local b = b .. b\n    for i = 1, len do\n        if string.find(a,\
    \ b:sub(i, i + len - 1)) then\n            return true\n        end\n    end\n\
    \    return false\nend", "    local len = #b\n    local c = b .. b\n    return\
    \ c:find(a) ~= nil\nend", "  local len = #b\n  local b_rot = b\n  for i = 1, len\
    \ do\n    if string.find(a, b_rot) then\n      return true\n    end\n    b_rot\
    \ = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n  end\n  return false\nend",
  "  local a_len = #a\n  local b_len = #b\n  if a_len < b_len then\n    return false\n\
    \  end\n  local b_first = b:sub(1, 1)\n  local b_last = b:sub(b_len, b_len)\n\
    \  local b_first_idx = a:find(b_first)\n  local b_last_idx = a:find(b_last)\n\
    \  if b_first_idx == nil or b_last_idx == nil then\n    return false\n  end\n\
    \  local a_sub = a:sub(b_first_idx, b_last_idx)\n  if a_sub == b then\n    return\
    \ true\n  end\n  local a_sub_len = #a_sub\n  if a_sub_len < b_len then\n    return\
    \ false\n  end\n  local a_sub_first = a_sub:sub(1, 1)\n  local a_sub_last = a_sub:sub(a_sub_len,\
    \ a_sub_len)\n  local a_sub_first_idx = a_sub:find(a_sub_first)\n  local a_sub_last_idx\
    \ = a_sub:find(a_sub_last)\n  if a_sub_first_idx == nil or a_sub_last_idx == nil\
    \ then\n    return false\n  end\n  local a_sub_sub = a_sub:sub(a_sub_first_idx,\
    \ a_sub_last_idx)\n  if a_sub_sub == b then\n    return true\n  end\n  return\
    \ false\nend", "    local len = #b\n    for i = 1, len do\n        local c = b:sub(i,\
    \ len) .. b:sub(1, i - 1)\n        if a:find(c) then\n            return true\n\
    \        end\n    end\n    return false\nend", "  local n = #a\n  local m = #b\n\
    \  if n ~= m then return false end\n  local i = 1\n  while i <= n do\n    if a:sub(i,\
    \ i+m-1) == b then return true end\n    i = i + 1\n  end\n  return false\nend",
  "    local len = #b\n    for i = 1, len do\n        if string.sub(a, i, i + len\
    \ - 1) == b then\n            return true\n        end\n    end\n    return false\n\
    end", "    local len = #b\n    for i = 1, len do\n        local c = b:sub(i, len)\
    \ .. b:sub(1, i - 1)\n        if a:find(c) then\n            return true\n   \
    \     end\n    end\n    return false\nend", "    local len = string.len(b)\n \
    \   local b = b .. b\n    for i = 1, len do\n        if string.find(a, string.sub(b,\
    \ i, i + len - 1)) then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local len = #b\n    local b_rot = b\n    for i = 1, len do\n\
    \        if string.find(a, b_rot) then\n            return true\n        end\n\
    \        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n    end\n  \
    \  return false\nend", "    local function rotate(str)\n        return str:sub(2)\
    \ .. str:sub(1, 1)\n    end\n    local function is_substring(a, b)\n        return\
    \ a:find(b) ~= nil\n    end\n    local function is_rotation(a, b)\n        local\
    \ rotated = b\n        for i = 1, #b do\n            if is_substring(a, rotated)\
    \ then\n                return true\n            end\n            rotated = rotate(rotated)\n\
    \        end\n        return false\n    end\n    return is_rotation(a, b)\nend",
  "    local len = #b\n    for i = 1, len do\n        if a:find(b) then\n        \
    \    return true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n    end\n\
    \    return false\nend", "    local len = #b\n    for i = 1, len do\n        if\
    \ string.sub(a, 1, len) == b then\n            return true\n        end\n    \
    \    b = string.sub(b, 2) .. string.sub(b, 1, 1)\n    end\n    return false\n\
    end", "    local len = #b\n    for i = 1, len do\n        if a:find(b) then\n\
    \            return true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n \
    \   end\n    return false\nend", "    local len_a = #a\n    local len_b = #b\n\
    \    if len_a < len_b then\n        return false\n    end\n    local b_i = 1\n\
    \    for i = 1, len_a do\n        if a:sub(i, i) == b:sub(b_i, b_i) then\n   \
    \         b_i = b_i + 1\n            if b_i > len_b then\n                return\
    \ true\n            end\n        else\n            b_i = 1\n        end\n    end\n\
    \    return false\nend", "  local len = #b\n  if len == 0 then return true end\n\
    \  local bb = b .. b\n  return string.find(bb, a, 1, true) ~= nil\nend", "   \
    \ local n = #a\n    local m = #b\n    local i = 1\n    local j = 1\n    while\
    \ i <= n and j <= m do\n        if a:sub(i, i) == b:sub(j, j) then\n         \
    \   i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n\
    \            j = 1\n        end\n    end\n    if j > m then\n        return true\n\
    \    else\n        return false\n    end\nend", "    local len_a = #a\n    local\
    \ len_b = #b\n    if len_a < len_b then\n        return false\n    end\n    local\
    \ b_first = string.sub(b, 1, 1)\n    local b_last = string.sub(b, len_b, len_b)\n\
    \    local b_first_pos = string.find(a, b_first)\n    local b_last_pos = string.find(a,\
    \ b_last)\n    if b_first_pos == nil or b_last_pos == nil then\n        return\
    \ false\n    end\n    local b_first_pos_end = b_first_pos + len_b - 1\n    local\
    \ b_last_pos_end = b_last_pos + len_b - 1\n    if b_first_pos_end > len_a then\n\
    \        b_first_pos_end = b_first_pos_end - len_a\n    end\n    if b_last_pos_end\
    \ > len_a then\n        b_last_pos_end = b_last_pos_end - len_a\n    end\n   \
    \ local b_first_sub = string.sub(a, b_first_pos, b_first_pos_end)\n    local b_last_sub\
    \ = string.sub(a, b_last_pos, b_last_pos_end)\n    if b_first_sub == b or b_last_sub\
    \ == b then\n        return true\n    end\n    return false\nend", "    local\
    \ b_len = #b\n    for i = 1, b_len do\n        if a:find(b) then\n           \
    \ return true\n        end\n        b = b:sub(2) .. b:sub(1, 1)\n    end\n   \
    \ return false\nend", "    local len = #b\n    for i = 1, len do\n        local\
    \ c = b:sub(i, len) .. b:sub(1, i - 1)\n        if a:find(c) then\n          \
    \  return true\n        end\n    end\n    return false\nend", "  local len = #b\n\
    \  local aa = a .. a\n  for i = 1, len do\n    if aa:sub(i, i + len - 1) == b\
    \ then\n      return true\n    end\n  end\n  return false\nend", "  local len\
    \ = #b\n  for i = 1, len do\n    local c = b:sub(i, len) .. b:sub(1, i - 1)\n\
    \    if a:find(c) then\n      return true\n    end\n  end\n  return false\nend",
  "  local len = #b\n  for i = 1, len do\n    local c = string.sub(b, i, len) .. string.sub(b,\
    \ 1, i - 1)\n    if string.find(a, c) then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local len = #b\n  for i = 1, len do\n    if string.sub(a,\
    \ i, i + len - 1) == b then\n      return true\n    end\n  end\n  return false\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
