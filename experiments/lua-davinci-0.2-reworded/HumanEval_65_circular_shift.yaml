---
name: HumanEval_65_circular_shift
language: lua
prompt: |
  -- Circular shift the digits of the integer x, shift the digits right by shift
  -- and return the result as a string.
  -- If shift > number of digits, return digits reversed.
  -- >>> circular_shift(12, 1)
  -- '21'
  -- >>> circular_shift(12, 2)
  -- '12'
  local function circular_shift(x, shift)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = circular_shift
      lu.assertEquals(candidate(100, 2), '001')
      lu.assertEquals(candidate(12, 2), '12')
      lu.assertEquals(candidate(97, 8), '79')
      lu.assertEquals(candidate(12, 1), '21')
      lu.assertEquals(candidate(11, 101), '11')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[1]
          for j = 1, n - 1 do
              digits[j] = digits[j + 1]
          end
          digits[n] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result, '')
  end
- |2-
      local s = tostring(x)
      local l = #s
      if shift > l then
          return string.reverse(s)
      end
      return string.sub(s, l - shift + 1) .. string.sub(s, 1, l - shift)
  end
- |2-
      local digits = {}
      local s = tostring(x)
      for i = 1, #s do
          digits[i] = s:sub(i, i)
      end
      for i = 1, shift do
          table.insert(digits, 1, table.remove(digits))
      end
      return table.concat(digits)
  end
- |2-
      local s = tostring(x)
      local l = #s
      if shift > l then
          return string.reverse(s)
      end
      return string.sub(s, l - shift + 1) .. string.sub(s, 1, l - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local s = tostring(x)
      if shift > #s then
          return s:reverse()
      end
      return s:sub(shift + 1) .. s:sub(1, shift)
  end
- |2-
    local s = tostring(x)
    local n = #s
    if shift > n then
      return string.reverse(s)
    end
    local r = string.sub(s, n - shift + 1, n) .. string.sub(s, 1, n - shift)
    return r
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      local shift = shift % len
      if shift == 0 then
          return digits
      elseif shift > len then
          return string.reverse(digits)
      else
          return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
      end
  end
- |2-
    local digits = {}
    local n = 0
    while x > 0 do
      n = n + 1
      digits[n] = x % 10
      x = math.floor(x / 10)
    end
    if shift > n then
      return string.reverse(table.concat(digits))
    end
    local result = {}
    for i = 1, n do
      result[i] = digits[(i + shift - 1) % n + 1]
    end
    return table.concat(result)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
  end
- |2-
    local digits = {}
    local i = 0
    while x > 0 do
      i = i + 1
      digits[i] = x % 10
      x = math.floor(x / 10)
    end
    if shift > i then
      shift = i
    end
    local result = {}
    for j = 1, i do
      result[j] = digits[(j + shift - 1) % i + 1]
    end
    return table.concat(result)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return digits:reverse()
      end
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return string.reverse(table.concat(digits))
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local s = tostring(x)
      if shift > #s then
          return s:reverse()
      end
      return s:sub(shift + 1) .. s:sub(1, shift)
  end
- |2-
      local s = tostring(x)
      if shift > #s then
          return string.reverse(s)
      end
      return s:sub(shift + 1) .. s:sub(1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return table.concat(digits, '')
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      return table.concat(digits, '')
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      local shift = shift % n
      local s = string.sub(digits, n - shift + 1, n) .. string.sub(digits, 1, n - shift)
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return string.reverse(s)
      end
      return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      if shift > #s then
          return s:reverse()
      end
      return s:sub(shift + 1) .. s:sub(1, shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      local a = string.sub(digits, 1, shift)
      local b = string.sub(digits, shift + 1, n)
      return b .. a
  end
- |2-
      local s = tostring(x)
      local l = #s
      if shift > l then
          return s:reverse()
      end
      return s:sub(l - shift + 1) .. s:sub(1, l - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
    local digits = {}
    local n = 0
    while x > 0 do
      n = n + 1
      digits[n] = x % 10
      x = math.floor(x / 10)
    end
    if shift > n then
      return table.concat(digits, '')
    end
    local result = {}
    for i = 1, n do
      result[i] = digits[(i + shift - 1) % n + 1]
    end
    return table.concat(result, '')
  end
- |2-
      local digits = tostring(x)
      local result = digits
      if shift > 0 then
          local n = #digits
          if shift < n then
              result = digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
          else
              result = digits:reverse()
          end
      end
      return result
  end
- |2-
      local digits = string.reverse(tostring(x))
      local n = #digits
      if shift > n then
          return digits
      end
      local first = string.sub(digits, 1, shift)
      local last = string.sub(digits, shift + 1, n)
      return string.reverse(last .. first)
  end
- |2-
    local digits = {}
    for digit in tostring(x):gmatch('.') do
      table.insert(digits, digit)
    end
    local n = #digits
    if shift > n then
      return table.concat(digits, '')
    end
    local result = {}
    for i = 1, n do
      local j = (i + shift - 1) % n + 1
      result[i] = digits[j]
    end
    return table.concat(result, '')
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      local a = string.sub(digits, 1, shift)
      local b = string.sub(digits, shift + 1, len)
      return b .. a
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return string.reverse(s)
      end
      local a = string.sub(s, 1, shift)
      local b = string.sub(s, shift + 1, n)
      return b .. a
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n-shift+1) .. s:sub(1, n-shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      if shift > #digits then
          return digits:reverse()
      end
      local left = digits:sub(1, shift)
      local right = digits:sub(shift + 1)
      return right .. left
  end
- |2-
      local digits = {}
      while x > 0 do
          table.insert(digits, x % 10)
          x = math.floor(x / 10)
      end
      local n = #digits
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          table.insert(digits, 1, table.remove(digits))
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
    local digits = {}
    local n = 0
    while x > 0 do
      n = n + 1
      digits[n] = x % 10
      x = math.floor(x / 10)
    end
    shift = shift % n
    for i = 1, shift do
      local d = digits[n]
      for j = n, 2, -1 do
        digits[j] = digits[j - 1]
      end
      digits[1] = d
    end
    local s = ''
    for i = 1, n do
      s = s .. tostring(digits[i])
    end
    return s
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      local s = tostring(x)
      for i = 1, #s do
          n = n + 1
          digits[n] = s:sub(i, i)
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      return table.concat(digits)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result, '')
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n + 1] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      shift = shift % n
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local s = tostring(x)
      local n = #s
      local r = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)
      return r
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, n - shift + 1) .. string.sub(digits, 1, n - shift)
  end
- |2-
      local x_str = tostring(x)
      local x_len = #x_str
      local x_shift = shift % x_len
      return x_str:sub(x_shift + 1) .. x_str:sub(1, x_shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      local shifted = string.sub(digits, n - shift + 1) .. string.sub(digits, 1, n - shift)
      return shifted
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      local a = string.sub(digits, 1, shift)
      local b = string.sub(digits, shift + 1, n)
      return b .. a
  end
- |2-
      local digits = {}
      local n = 0
      local s = tostring(x)
      for i = 1, #s do
          digits[i] = s:sub(i, i)
          n = n + 1
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      return table.concat(digits)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n - 1]
          for j = n - 1, 1, -1 do
              digits[j] = digits[j - 1]
          end
          digits[0] = d
      end
      local s = ""
      for i = 0, n - 1 do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return digits:reverse()
      end
      return digits:sub(len - shift + 1) .. digits:sub(1, len - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      local a = s:sub(1, shift)
      local b = s:sub(shift + 1)
      return b .. a
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      local s = shift % n
      return digits:sub(n - s + 1) .. digits:sub(1, n - s)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
    local digits = tostring(x)
    local n = #digits
    if shift > n then
      return string.reverse(digits)
    end
    local a = string.sub(digits, 1, shift)
    local b = string.sub(digits, shift + 1, n)
    return b .. a
  end
- |2-
    local digits = {}
    local n = 0
    while x > 0 do
      n = n + 1
      digits[n] = x % 10
      x = math.floor(x / 10)
    end
    if shift > n then
      return table.concat(digits, '')
    end
    local result = {}
    for i = 1, n do
      result[i] = digits[(i + shift - 1) % n + 1]
    end
    return table.concat(result, '')
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[1]
          for j = 1, n - 1 do
              digits[j] = digits[j + 1]
          end
          digits[n] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. digits[i]
      end
      return s
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, n - shift + 1) .. string.sub(digits, 1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      if shift > #digits then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return table.concat(digits, '')
      end
      local i = 1
      while i <= shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
          i = i + 1
      end
      return table.concat(digits, '')
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local last = digits[n - 1]
          for j = n - 1, 1, -1 do
              digits[j] = digits[j - 1]
          end
          digits[0] = last
      end
      local s = ''
      for i = 0, n - 1 do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local len = #s
      if shift > len then
          return string.reverse(s)
      end
      local a = string.sub(s, 1, shift)
      local b = string.sub(s, shift + 1, len)
      return b .. a
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift >= n then
          for i = 1, n do
              x = x * 10 + digits[i]
          end
          return tostring(x)
      end
      for i = 1, shift do
          x = x * 10 + digits[i]
      end
      for i = shift + 1, n do
          x = x * 10 + digits[i]
      end
      return tostring(x)
  end
- |2-
      local n = #tostring(x)
      if shift > n then
          return string.reverse(tostring(x))
      end
      local s = tostring(x)
      local a = string.sub(s, 1, shift)
      local b = string.sub(s, shift + 1, n)
      return b .. a
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return digits:reverse()
      end
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      local shift = shift % n
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ""
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return table.concat(digits, '')
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      return table.concat(digits, '')
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      local a = string.sub(s, 1, shift)
      local b = string.sub(s, shift + 1, n)
      return b .. a
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      local i = n - shift
      if i <= 0 then
          return string.reverse(s)
      end
      return string.sub(s, i + 1) .. string.sub(s, 1, i)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          table.insert(digits, 1, table.remove(digits))
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          return table.concat(digits, '')
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result, '')
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local digits = {}
      while x > 0 do
          table.insert(digits, x % 10)
          x = math.floor(x / 10)
      end
      local n = #digits
      shift = shift % n
      for i = 1, shift do
          table.insert(digits, 1, table.remove(digits))
      end
      local s = ''
      for i = 1, n do
          s = s .. digits[i]
      end
      return s
  end
- |2-
      local digits = {}
      local i = 0
      while x > 0 do
          i = i + 1
          digits[i] = x % 10
          x = math.floor(x / 10)
      end
      if shift > i then
          shift = i
      end
      local j = 1
      while shift > 0 do
          digits[i + j] = digits[j]
          j = j + 1
          shift = shift - 1
      end
      local result = ""
      for k = i + j - 1, j, -1 do
          result = result .. digits[k]
      end
      return result
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      local shift = shift % n
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      local i = n - shift + 1
      if i <= 0 then
          return string.reverse(s)
      end
      return string.sub(s, i, n) .. string.sub(s, 1, i - 1)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      local y = x
      while y > 0 do
          n = n + 1
          digits[n] = y % 10
          y = math.floor(y / 10)
      end
      if shift > n then
          shift = shift % n
      end
      local s = ''
      for i = 1, n do
          s = s .. digits[(i + shift - 1) % n + 1]
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = {}
      for i = 1, n do
          s[i] = tostring(digits[i])
      end
      return table.concat(s)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      local a = string.sub(s, 1, shift)
      local b = string.sub(s, shift + 1, n)
      return b .. a
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local len = #s
      if shift > len then
          return s:reverse()
      end
      local t = {}
      for i = 1, len do
          t[i] = s:sub(i, i)
      end
      for i = 1, shift do
          table.insert(t, 1, table.remove(t))
      end
      return table.concat(t)
  end
- |2-
      local s = tostring(x)
      local n = #s
      local i = shift % n
      return s:sub(i + 1) .. s:sub(1, i)
  end
- |2-
    local digits = tostring(x)
    local n = #digits
    if shift > n then
      return digits:reverse()
    end
    return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          local d = digits[1]
          for j = 1, n - 1 do
              digits[j] = digits[j + 1]
          end
          digits[n] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return digits:reverse()
      end
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n + 1] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          digits[n + i] = digits[i]
      end
      local s = ''
      for i = 1, n + shift do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      local a = s:sub(1, n - shift)
      local b = s:sub(n - shift + 1, n)
      return b .. a
  end
- |2-
      local s = tostring(x)
      local n = #s
      local shift = shift % n
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ""
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n + 1] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      shift = shift % n
      for i = 1, shift do
          local tmp = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = tmp
      end
      local result = ''
      for i = 1, n do
          result = result .. tostring(digits[i])
      end
      return result
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      if shift > n then
          shift = n
      end
      local result = {}
      for i = 0, n - 1 do
          result[i] = digits[(i + shift) % n]
      end
      return table.concat(result)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      local a = string.sub(digits, 1, shift)
      local b = string.sub(digits, shift + 1, n)
      return b .. a
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          for i = 1, n do
              x = x * 10 + digits[i]
          end
          return tostring(x)
      end
      for i = 1, shift do
          table.insert(digits, 1, table.remove(digits))
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
    local digits = {}
    local n = 0
    while x > 0 do
      n = n + 1
      digits[n] = x % 10
      x = math.floor(x / 10)
    end
    if shift > n then
      return table.concat(digits, '')
    end
    local result = {}
    for i = 1, n do
      result[i] = digits[(i + shift - 1) % n + 1]
    end
    return table.concat(result, '')
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n-shift+1) .. s:sub(1, n-shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local str = tostring(x)
      local len = #str
      if shift >= len then
          return string.reverse(str)
      end
      return string.sub(str, shift + 1) .. string.sub(str, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n-shift+1) .. s:sub(1, n-shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return digits:reverse()
      end
      local a = digits:sub(1, n - shift)
      local b = digits:sub(n - shift + 1, n)
      return b .. a
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      if shift > n then
          return table.concat(digits, '')
      end
      for i = 1, shift do
          local d = digits[n - 1]
          for j = n - 1, 1, -1 do
              digits[j] = digits[j - 1]
          end
          digits[0] = d
      end
      return table.concat(digits, '')
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
  end
- |2-
      local x_str = tostring(x)
      local x_len = #x_str
      if shift > x_len then
          return string.reverse(x_str)
      end
      return string.sub(x_str, shift + 1) .. string.sub(x_str, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
    local digits = {}
    local n = 0
    while x > 0 do
      n = n + 1
      digits[n] = x % 10
      x = math.floor(x / 10)
    end
    if shift > n then
      shift = shift % n
    end
    for i = 1, shift do
      local d = digits[n]
      for j = n, 2, -1 do
        digits[j] = digits[j - 1]
      end
      digits[1] = d
    end
    local s = ''
    for i = 1, n do
      s = s .. tostring(digits[i])
    end
    return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      local result = {}
      for i = 1, n do
          result[i] = digits[(i + shift - 1) % n + 1]
      end
      return table.concat(result)
  end
- |2-
      local s = tostring(x)
      local len = #s
      if shift > len then
          return s:reverse()
      end
      return s:sub(len - shift + 1) .. s:sub(1, len - shift)
  end
- |2-
      local digits = {}
      local i = 0
      while x > 0 do
          i = i + 1
          digits[i] = x % 10
          x = math.floor(x / 10)
      end
      if shift > i then
          return table.concat(digits, '')
      end
      local result = {}
      for j = 1, i do
          result[j] = digits[(j + shift - 1) % i + 1]
      end
      return table.concat(result, '')
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          table.insert(digits, 1, table.remove(digits))
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[1]
          for j = 1, n - 1 do
              digits[j] = digits[j + 1]
          end
          digits[n] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local d = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = d
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return digits:reverse()
      end
      return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          digits[n] = x % 10
          x = math.floor(x / 10)
          n = n + 1
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local digit = digits[n - 1]
          table.remove(digits, n - 1)
          table.insert(digits, 1, digit)
      end
      local result = ""
      for i = 1, n do
          result = result .. tostring(digits[i])
      end
      return result
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      local a = s:sub(1, shift)
      local b = s:sub(shift + 1)
      return b .. a
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      local d = string.sub(digits, shift + 1, n)
      local e = string.sub(digits, 1, shift)
      return d .. e
  end
- |2-
      local digits = {}
      local i = 0
      while x > 0 do
          i = i + 1
          digits[i] = x % 10
          x = math.floor(x / 10)
      end
      if shift > i then
          return table.concat(digits, "")
      end
      local j = 1
      while shift > 0 do
          local tmp = digits[i]
          for k = i, 2, -1 do
              digits[k] = digits[k - 1]
          end
          digits[1] = tmp
          shift = shift - 1
      end
      return table.concat(digits, "")
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n-shift+1) .. s:sub(1, n-shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = n
      end
      for i = 1, shift do
          local digit = digits[n]
          for j = n, 2, -1 do
              digits[j] = digits[j - 1]
          end
          digits[1] = digit
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift >= n then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, n)
      return right .. left
  end
- |2-
      local digits = string.reverse(tostring(x))
      local n = #digits
      if shift > n then
          return digits
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
    local s = tostring(x)
    local len = #s
    if shift > len then
      return string.reverse(s)
    end
    return string.sub(s, len - shift + 1) .. string.sub(s, 1, len - shift)
  end
- |2-
      local digits = {}
      local n = 0
      while x > 0 do
          n = n + 1
          digits[n] = x % 10
          x = math.floor(x / 10)
      end
      if shift > n then
          shift = shift % n
      end
      if shift > 0 then
          local temp = {}
          for i = 1, n do
              temp[i] = digits[i]
          end
          for i = 1, n do
              digits[i] = temp[(i + shift - 1) % n + 1]
          end
      end
      local s = ''
      for i = 1, n do
          s = s .. tostring(digits[i])
      end
      return s
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      local a = string.sub(digits, 1, shift)
      local b = string.sub(digits, shift + 1, n)
      return b .. a
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      local left = string.sub(digits, 1, shift)
      local right = string.sub(digits, shift + 1, len)
      return right .. left
  end
- |2-
      local s = tostring(x)
      if shift > #s then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1) .. string.sub(s, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      local result = digits:sub(n - shift + 1, n) .. digits:sub(1, n - shift)
      return result
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local digits = tostring(x)
      local n = #digits
      if shift > n then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = {}
      while x > 0 do
          digits[#digits + 1] = x % 10
          x = math.floor(x / 10)
      end
      if shift > #digits then
          return table.concat(digits, '')
      end
      local result = {}
      for i = 1, #digits do
          result[i] = digits[(i + shift - 1) % #digits + 1]
      end
      return table.concat(result, '')
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      local shift = shift % n
      if shift == 0 then
          return s
      elseif shift > n then
          return s:reverse()
      else
          return s:sub(n - shift + 1) .. s:sub(1, n - shift)
      end
  end
- |2-
      local digits = {}
      while x > 0 do
          table.insert(digits, 1, x % 10)
          x = math.floor(x / 10)
      end
      if shift > #digits then
          return table.concat(digits)
      end
      local shifted = {}
      for i = 1, #digits do
          shifted[i] = digits[(i + shift - 1) % #digits + 1]
      end
      return table.concat(shifted)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift > n then
          return string.reverse(s)
      end
      return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      local i = shift % n
      return s:sub(i + 1) .. s:sub(1, i)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift > len then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local digits = tostring(x)
      local len = #digits
      if shift >= len then
          return string.reverse(digits)
      end
      return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)
  end
- |2-
      local s = tostring(x)
      local n = #s
      if shift >= n then
          return s:reverse()
      end
      return s:sub(n - shift + 1) .. s:sub(1, n - shift)
  end
- |2-
      local str = tostring(x)
      local len = #str
      if shift > len then
          return str:reverse()
      end
      return str:sub(len - shift + 1) .. str:sub(1, len - shift)
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
