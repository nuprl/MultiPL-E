name: HumanEval_63_fibfib
language: lua
results:
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq1gpuiq.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprq1gpuiq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 2, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ymcs62l.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3ymcs62l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 1, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    -- TODO: implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjin4son.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpbjin4son.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n <= 1 then\n        return 0\n    elseif\
    \ n == 2 then\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal a, b, c = 0, 0, 1\n\tfor i = 3, n do\n\
    \t\ta, b, c = b, c, a + b + c\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphum86pne.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphum86pne.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rzyvwde.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1rzyvwde.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1m1x9t3.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo1m1x9t3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4qjjr00.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj4qjjr00.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 2, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanp96fvx.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpanp96fvx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1c03kv1.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpt1c03kv1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeygjn2_8.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeygjn2_8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnvbdug8.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphnvbdug8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return nil\n  end\n  if\
    \ n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 0\n  end\n  if\
    \ n == 2 then\n    return 1\n  end\n  local a, b, c = 0, 0, 1\n  for i = 3, n\
    \ do\n    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n - 1\n   \
    \ end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9ysi3wr.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx9ysi3wr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtz4fur9.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqtz4fur9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 1, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n - 1\n   \
    \ end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 1, n do\n\
    \    a, b, c = b, c, c + b + a\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiz296xr.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqiz296xr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv1eun6t.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpiv1eun6t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n\tlocal a, b, c = 0, 0, 1\n\tfor i = 3, n do\n\
    \t\ta, b, c = b, c, a + b + c\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperjjynha.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmperjjynha.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk0467sx.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyk0467sx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 3 then\n    return n - 1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a + b + c\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85qvvrlj.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp85qvvrlj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n-1\n    end\n\
    \    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b, c, a+b+c\n\
    \    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumkl2mke.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpumkl2mke.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_fcq_dn.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa_fcq_dn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3r5hjoh9.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3r5hjoh9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp995nghbc.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp995nghbc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 0 then\n        return nil\n    end\n\
    \    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return\
    \ 0\n    end\n    if n == 2 then\n        return 1\n    end\n    local a, b, c\
    \ = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b, c, a + b + c\n    end\n\
    \    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  local a, b, c = 0, 0, 1\n  for i = 3, n do\n\
    \    a, b, c = b, c, a + b + c\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyopcpur0.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyopcpur0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 3 then\n    return n - 1\n  end\n  local\
    \ a, b, c = 0, 0, 1\n  for i = 3, n do\n    a, b, c = b, c, a + b + c\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s0g1dwx.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0s0g1dwx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 2, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj153p2fg.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj153p2fg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tdxlcpt.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_tdxlcpt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 1, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n < 3 then\n        return n - 1\n   \
    \ end\n    local a, b, c = 0, 0, 1\n    for i = 3, n do\n        a, b, c = b,\
    \ c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    local a, b, c = 0, 0, 1\n    for i = 3, n\
    \ do\n        a, b, c = b, c, a + b + c\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37ig88o6.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp37ig88o6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n    if n == 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n  \
    \  else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
