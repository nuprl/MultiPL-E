name: HumanEval_104_unique_digits
language: lua
results:
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local has_even = false\n    while v > 0 do\n      local d = v % 10\n    \
    \  if d % 2 == 0 then\n        has_even = true\n        break\n      end\n   \
    \   v = math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtku3n17.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpwtku3n17.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local flag = true\n        while num > 0 do\n\
    \            if num % 2 == 0 then\n                flag = false\n            \
    \    break\n            end\n            num = math.floor(num / 10)\n        end\n\
    \        if flag then\n            table.insert(res, x[i])\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        local n = x[i]\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            n = math.floor(n / 10)\n        end\n\
    \        if not has_even then\n            table.insert(result, x[i])\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local even = false\n        for d in tostring(v):gmatch('%d') do\n  \
    \          if tonumber(d) % 2 == 0 then\n                even = true\n       \
    \         break\n            end\n        end\n        if not even then\n    \
    \        table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local s = tostring(x[i])\n        local has_even = false\n        for j =\
    \ 1, #s do\n            if tonumber(s:sub(j, j)) % 2 == 0 then\n             \
    \   has_even = true\n                break\n            end\n        end\n   \
    \     if not has_even then\n            table.insert(t, x[i])\n        end\n \
    \   end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even = false\n    while v > 0 do\n      local d = v % 10\n\
    \      if d % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      v = (v - d) / 10\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedayjczy.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpedayjczy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for i = 1, #tostring(v) do\n        \
    \    if tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n                flag =\
    \ false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_unique = true\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local flag = true\n        for j = 1, #x[i] do\n            if (x[i] %\
    \ 2 == 0) then\n                flag = false\n                break\n        \
    \    end\n        end\n        if flag then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh1_4hip.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmphh1_4hip.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphh1_4hip.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function is_unique(n)\n        while\
    \ n > 0 do\n            if n % 2 == 0 then\n                return false\n   \
    \         end\n            n = math.floor(n / 10)\n        end\n        return\
    \ true\n    end\n    local res = {}\n    for _, v in ipairs(x) do\n        if\
    \ is_unique(v) then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            if (v\
    \ % 10) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(result, x[i])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsshlwr3t.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpsshlwr3t.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local is_unique = true\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for i = 1, #tostring(v) do\n        \
    \    if (tonumber(tostring(v):sub(i, i)) % 2 == 0) then\n                flag\
    \ = false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local has_even = false\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local has_even = false\n    local number = x[i]\n    while number > 0 do\n \
    \     local digit = number % 10\n      if digit % 2 == 0 then\n        has_even\
    \ = true\n        break\n      end\n      number = math.floor(number / 10)\n \
    \   end\n    if not has_even then\n      table.insert(result, x[i])\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local flag = true\n        for j = 1, #tostring(v) do\n            if\
    \ tonumber(tostring(v):sub(j, j)) % 2 == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp820s8di5.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp820s8di5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r2t238m.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp4r2t238m.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08dpke7v.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp08dpke7v.lua:12: in local 'candidate'\n\t/tmp/tmp08dpke7v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        if not string.find(tostring(v), '[02468]') then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local unique = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(unique, v)\n        end\n    end\n    table.sort(unique)\n\
    \    return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function is_unique(n)\n        while\
    \ n > 0 do\n            if n % 2 == 0 then\n                return false\n   \
    \         end\n            n = math.floor(n / 10)\n        end\n        return\
    \ true\n    end\n    local res = {}\n    for _, v in ipairs(x) do\n        if\
    \ is_unique(v) then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_unique = true\n        local str = tostring(v)\n      \
    \  for i = 1, #str do\n            if tonumber(str:sub(i, i)) % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \       end\n        if is_unique then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local is_unique = true\n        for j = 1, #x[i] do\n            if x[i][j]\
    \ % 2 == 0 then\n                is_unique = false\n                break\n  \
    \          end\n        end\n        if is_unique then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jbo6ze8.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp4jbo6ze8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4jbo6ze8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local digits = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(digits, v)\n        end\n    end\n    table.sort(digits)\n\
    \    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg3s9wbu.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgg3s9wbu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xiw9m_4.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp8xiw9m_4.lua:12: in local 'candidate'\n\t/tmp/tmp8xiw9m_4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not v:find(\"%d*[02468]%d*\") then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7ztnbts.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmph7ztnbts.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmph7ztnbts.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local has_even = false\n        for j = 1, #tostring(x[i]) do\n       \
    \     if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even then\n            table.insert(res, x[i])\n        end\n    end\n \
    \   table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wqynek8.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp9wqynek8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_unique = true\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93lc1owp.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp93lc1owp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local flag = true\n        while num > 0 do\n\
    \            if num % 2 == 0 then\n                flag = false\n            \
    \    break\n            end\n            num = math.floor(num / 10)\n        end\n\
    \        if flag then\n            table.insert(result, x[i])\n        end\n \
    \   end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local is_unique = true\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \           num = math.floor(num / 10)\n        end\n        if is_unique then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function is_unique(n)\n        while\
    \ n > 0 do\n            if n % 2 == 0 then\n                return false\n   \
    \         end\n            n = math.floor(n / 10)\n        end\n        return\
    \ true\n    end\n    local result = {}\n    for _, v in ipairs(x) do\n       \
    \ if is_unique(v) then\n            table.insert(result, v)\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcpj7055.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpwcpj7055.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgn_ysoqu.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpgn_ysoqu.lua:12: in local 'candidate'\n\t/tmp/tmpgn_ysoqu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(ret, v)\n\
    \        end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj2f556h.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpzj2f556h.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            if num % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x)\
    \ do\n        local flag = true\n        local tmp = v\n        while tmp > 0\
    \ do\n            if tmp % 2 == 0 then\n                flag = false\n       \
    \         break\n            end\n            tmp = math.floor(tmp / 10)\n   \
    \     end\n        if flag then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for c in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(c) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        if not has_even_digit(x[i]) then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8sglc5o.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpl8sglc5o.lua:12: in local 'candidate'\n\t/tmp/tmpl8sglc5o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvnn5dp_h.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpvnn5dp_h.lua:12: in local 'candidate'\n\t/tmp/tmpvnn5dp_h.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp390kj5xu.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp390kj5xu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dtnas6y.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp8dtnas6y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xgj1y7n.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp6xgj1y7n.lua:12: in local 'candidate'\n\t/tmp/tmp6xgj1y7n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for _, v in ipairs(x) do\n\
    \    local even = false\n    for d in tostring(v):gmatch('%d') do\n      if tonumber(d)\
    \ % 2 == 0 then\n        even = true\n        break\n      end\n    end\n    if\
    \ not even then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local has_even = false\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0_ycx5f.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpw0_ycx5f.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local has_even = false\n    while v > 0 do\n      local d = v % 10\n    \
    \  if d % 2 == 0 then\n        has_even = true\n        break\n      end\n   \
    \   v = math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0n9447k.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpp0n9447k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local flag = true\n        for i = 1, #tostring(v) do\n            if\
    \ tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn44bdhnn.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpn44bdhnn.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even = false\n    while v > 0 do\n      local d = v % 10\n\
    \      if d % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      v = math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0oomw5g.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpy0oomw5g.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph9fwhyd.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpph9fwhyd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpms4yim4j.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpms4yim4j.lua:12: in local 'candidate'\n\t/tmp/tmpms4yim4j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local has_even = false\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt2w0y07.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpmt2w0y07.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local str = tostring(x[i])\n        local has_even = false\n        for\
    \ j = 1, #str do\n            if tonumber(str:sub(j, j)) % 2 == 0 then\n     \
    \           has_even = true\n                break\n            end\n        end\n\
    \        if not has_even then\n            table.insert(res, x[i])\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_unique = true\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                is_unique = false\n\
    \                break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even = false\n    for c in tostring(v):gmatch(\"%d\") do\n\
    \      if tonumber(c) % 2 == 0 then\n        has_even = true\n        break\n\
    \      end\n    end\n    if not has_even then\n      table.insert(result, v)\n\
    \    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    local\
    \ n = x[i]\n    local even = false\n    while n > 0 do\n      local d = n % 10\n\
    \      if d % 2 == 0 then\n        even = true\n        break\n      end\n   \
    \   n = math.floor(n / 10)\n    end\n    if not even then\n      t[#t + 1] = x[i]\n\
    \    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = (v - d) / 10\n      \
    \  end\n        if not has_even then\n            table.insert(res, v)\n     \
    \   end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyx08e47.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpnyx08e47.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rvmc978.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp7rvmc978.lua:12: in local 'candidate'\n\t/tmp/tmp7rvmc978.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function is_unique(n)\n        while\
    \ n > 0 do\n            if n % 2 == 0 then\n                return false\n   \
    \         end\n            n = math.floor(n / 10)\n        end\n        return\
    \ true\n    end\n    local t = {}\n    for _, v in ipairs(x) do\n        if is_unique(v)\
    \ then\n            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local is_unique = true\n        local n = x[i]\n        while n > 0 do\n\
    \            local digit = n % 10\n            if digit % 2 == 0 then\n      \
    \          is_unique = false\n                break\n            end\n       \
    \     n = math.floor(n / 10)\n        end\n        if is_unique then\n       \
    \     table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\
    \tlocal s = tostring(v)\n\t\tlocal has_even = false\n\t\tfor i = 1, #s do\n\t\t\
    \tif tonumber(s:sub(i, i)) % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(t, v)\n\t\tend\n\
    \tend\n\ttable.sort(t)\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local has_even = false\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local n = x[i]\n        local has_even_digit = false\n        while n > 0\
    \ do\n            local d = n % 10\n            if d % 2 == 0 then\n         \
    \       has_even_digit = true\n                break\n            end\n      \
    \      n = (n - d) / 10\n        end\n        if not has_even_digit then\n   \
    \         t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyv0dk_s.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcyv0dk_s.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_unique = true\n        local s = tostring(v)\n        for\
    \ i = 1, #s do\n            if tonumber(s:sub(i, i)) % 2 == 0 then\n         \
    \       is_unique = false\n                break\n            end\n        end\n\
    \        if is_unique then\n            table.insert(res, v)\n        end\n  \
    \  end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local is_unique = true\n        for j = 1, #tostring(v) do\n   \
    \         if (tonumber(tostring(v):sub(j, j)) % 2 == 0) then\n               \
    \ is_unique = false\n                break\n            end\n        end\n   \
    \     if is_unique then\n            table.insert(result, v)\n        end\n  \
    \  end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even_digit = false\n    local v_str = tostring(v)\n    for\
    \ i = 1, #v_str do\n      local digit = tonumber(v_str:sub(i, i))\n      if digit\
    \ % 2 == 0 then\n        has_even_digit = true\n        break\n      end\n   \
    \ end\n    if not has_even_digit then\n      table.insert(result, v)\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            if (v\
    \ % 10) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(result, x[i])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        if not v:find(\"%d*[02468]%d*\") then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp75mi1p1x.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmp75mi1p1x.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp75mi1p1x.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpack_qeq5.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpack_qeq5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even = false\n        while v > 0 do\n            local d =\
    \ v % 10\n            if d % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            v = math.floor(v / 10)\n  \
    \      end\n        if not has_even then\n            table.insert(t, v)\n   \
    \     end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92jmcyt_.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp92jmcyt_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    local\
    \ n = x[i]\n    local has_even = false\n    while n > 0 do\n      local d = n\
    \ % 10\n      if d % 2 == 0 then\n        has_even = true\n        break\n   \
    \   end\n      n = math.floor(n / 10)\n    end\n    if not has_even then\n   \
    \   t[#t + 1] = x[i]\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        if not has_even_digit(v) then\n            table.insert(t, v)\n     \
    \   end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhyilx5m.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpwhyilx5m.lua:12: in local 'candidate'\n\t/tmp/tmpwhyilx5m.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local\
    \ has_even = false\n    for j = 1, #tostring(x[i]) do\n      if tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(res, x[i])\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for j = 1, #tostring(x[i]) do\n     \
    \       if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzkgqd81.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpyzkgqd81.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for i = 1, #tostring(v) do\n        \
    \    if tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n                flag =\
    \ false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local has_even = false\n    while v > 0 do\n      local d = v % 10\n    \
    \  if d % 2 == 0 then\n        has_even = true\n        break\n      end\n   \
    \   v = math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y5sib9s.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp6y5sib9s.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbffjg4ev.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpbffjg4ev.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplviognio.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmplviognio.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local n = x[i]\n        local has_even = false\n        while n > 0 do\n\
    \            local digit = n % 10\n            if digit % 2 == 0 then\n      \
    \          has_even = true\n                break\n            end\n         \
    \   n = math.floor(n / 10)\n        end\n        if not has_even then\n      \
    \      table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i,v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for j = 1, #tostring(x[i]) do\n     \
    \       if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function has_even_digit(n)\n      \
    \  while n > 0 do\n            if n % 2 == 0 then\n                return true\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        return\
    \ false\n    end\n    local result = {}\n    for _, v in ipairs(x) do\n      \
    \  if not has_even_digit(v) then\n            table.insert(result, v)\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v2enu2b.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp2v2enu2b.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhk9p5ak.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpkhk9p5ak.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for c in tostring(v):gmatch('.')\
    \ do\n            if tonumber(c) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local has_even = false\n        for c in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(c) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local flag = true\n        for j = 1, #tostring(v) do\n            if\
    \ (tonumber(tostring(v):sub(j, j)) % 2 == 0) then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nbe3i8p.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp0nbe3i8p.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr4wzzho.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpnr4wzzho.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local has_even = false\n    local num = x[i]\n    while num > 0 do\n      local\
    \ digit = num % 10\n      if digit % 2 == 0 then\n        has_even = true\n  \
    \      break\n      end\n      num = math.floor(num / 10)\n    end\n    if not\
    \ has_even then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local even = false\n    while v > 0 do\n      if (v % 10) % 2 == 0 then\n\
    \        even = true\n        break\n      end\n      v = math.floor(v / 10)\n\
    \    end\n    if not even then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbkp6s7z.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpsbkp6s7z.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcmldfdb.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmprcmldfdb.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiro8nylg.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpiro8nylg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local s = tostring(x[i])\n        local has_even = false\n        for j =\
    \ 1, #s do\n            if tonumber(s:sub(j, j)) % 2 == 0 then\n             \
    \   has_even = true\n                break\n            end\n        end\n   \
    \     if not has_even then\n            table.insert(t, x[i])\n        end\n \
    \   end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local s = tostring(x[i])\n        local has_even = false\n        for j =\
    \ 1, #s do\n            if tonumber(s:sub(j, j)) % 2 == 0 then\n             \
    \   has_even = true\n                break\n            end\n        end\n   \
    \     if not has_even then\n            table.insert(t, x[i])\n        end\n \
    \   end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local flag = true\n        while num > 0 do\n\
    \            if num % 2 == 0 then\n                flag = false\n            \
    \    break\n            end\n            num = math.floor(num / 10)\n        end\n\
    \        if flag then\n            table.insert(result, x[i])\n        end\n \
    \   end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i, v in ipairs(x)\
    \ do\n    if not has_even_digit(v) then\n      table.insert(result, v)\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpednbrklw.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpednbrklw.lua:12: in local 'candidate'\n\t/tmp/tmpednbrklw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local is_unique = true\n    for c in tostring(v):gmatch(\"%d\") do\n\
    \      if tonumber(c) % 2 == 0 then\n        is_unique = false\n        break\n\
    \      end\n    end\n    if is_unique then\n      table.insert(result, v)\n  \
    \  end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ has_even = false\n\t\tlocal num = x[i]\n\t\twhile num > 0 do\n\t\t\tlocal digit\
    \ = num % 10\n\t\t\tif digit % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\t\
    break\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif not has_even\
    \ then\n\t\t\ttable.insert(res, x[i])\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for j = 1, #tostring(x[i]) do\n     \
    \       if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local n = x[i]\n        local has_even = false\n        while n > 0 do\n\
    \            local d = n % 10\n            if d % 2 == 0 then\n              \
    \  has_even = true\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if not has_even then\n            res[#res + 1]\
    \ = x[i]\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjuh3h64.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpyjuh3h64.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local is_unique = true\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \           num = math.floor(num / 10)\n        end\n        if is_unique then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function has_even_digit(n)\n      \
    \  while n > 0 do\n            if n % 2 == 0 then\n                return true\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        return\
    \ false\n    end\n    local res = {}\n    for _, v in ipairs(x) do\n        if\
    \ not has_even_digit(v) then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            if num % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local\
    \ num = x[i]\n    local is_unique = true\n    while num > 0 do\n      local digit\
    \ = num % 10\n      if digit % 2 == 0 then\n        is_unique = false\n      \
    \  break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_unique\
    \ then\n      table.insert(res, x[i])\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tfor i, v in ipairs(x) do\n\t\
    \tlocal s = tostring(v)\n\t\tlocal flag = true\n\t\tfor j = 1, #s do\n\t\t\tif\
    \ tonumber(s:sub(j, j)) % 2 == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\
    \ttable.sort(t)\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k_smy_l.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp5k_smy_l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local has_even = false\n    for d in tostring(v):gmatch(\"%d\") do\n    \
    \  if tonumber(d) % 2 == 0 then\n        has_even = true\n        break\n    \
    \  end\n    end\n    if not has_even then\n      table.insert(res, v)\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomufguq_.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpomufguq_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngdcvx5e.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpngdcvx5e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function has_even_digit(n)\n      \
    \  while n > 0 do\n            if n % 2 == 0 then\n                return true\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        return\
    \ false\n    end\n    local res = {}\n    for i = 1, #x do\n        if not has_even_digit(x[i])\
    \ then\n            res[#res + 1] = x[i]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsywlre71.lua:31:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpsywlre71.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local flag = true\n        while num > 0 do\n\
    \            if num % 2 == 0 then\n                flag = false\n            \
    \    break\n            end\n            num = math.floor(num / 10)\n        end\n\
    \        if flag then\n            table.insert(res, x[i])\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local is_unique = true\n    for d in tostring(v):gmatch(\"%d\") do\n    \
    \  if d % 2 == 0 then\n        is_unique = false\n        break\n      end\n \
    \   end\n    if is_unique then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local has_even = false\n    while v > 0 do\n      local d = v % 10\n    \
    \  if d % 2 == 0 then\n        has_even = true\n        break\n      end\n   \
    \   v = math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwqbmz1n.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpxwqbmz1n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    if not string.find(tostring(v), '[02468]') then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ s = tostring(x[i])\n\t\tlocal flag = true\n\t\tfor j = 1, #s do\n\t\t\tif tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif flag then\n\t\t\ttable.insert(t, x[i])\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local str = tostring(x[i])\n        local is_unique = true\n        for\
    \ j = 1, #str do\n            if tonumber(str:sub(j, j)) % 2 == 0 then\n     \
    \           is_unique = false\n                break\n            end\n      \
    \  end\n        if is_unique then\n            table.insert(res, x[i])\n     \
    \   end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x)\
    \ do\n        local flag = true\n        for j = 1, #tostring(v) do\n        \
    \    if tonumber(tostring(v):sub(j, j)) % 2 == 0 then\n                flag =\
    \ false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for d in tostring(v):gmatch('%d') do\n\
    \            if tonumber(d) % 2 == 0 then\n                flag = false\n    \
    \            break\n            end\n        end\n        if flag then\n     \
    \       table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local flag = true\n        for j = 1, #tostring(x[i]) do\n            if\
    \ tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ho5828v.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp0ho5828v.lua:12: in local 'candidate'\n\t/tmp/tmp0ho5828v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_unique = true\n        for i = 1, #tostring(v) do\n   \
    \         if (tonumber(tostring(v):sub(i, i)) % 2 == 0) then\n               \
    \ is_unique = false\n                break\n            end\n        end\n   \
    \     if is_unique then\n            table.insert(result, v)\n        end\n  \
    \  end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for i = 1, #tostring(v) do\n        \
    \    if tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n                flag =\
    \ false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local is_unique = true\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \           num = math.floor(num / 10)\n        end\n        if is_unique then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for i = 1, #tostring(v) do\n        \
    \    if tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n                flag =\
    \ false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3f9lmel.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpd3f9lmel.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7saxycyt.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp7saxycyt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136h2k7k.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp136h2k7k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ _)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpl7pxtp.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmphpl7pxtp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local digits = {}\n  for i = 1, #x do\n   \
    \ local num = x[i]\n    local has_even = false\n    while num > 0 do\n      local\
    \ digit = num % 10\n      if digit % 2 == 0 then\n        has_even = true\n  \
    \      break\n      end\n      num = math.floor(num / 10)\n    end\n    if not\
    \ has_even then\n      table.insert(digits, x[i])\n    end\n  end\n  table.sort(digits)\n\
    \  return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i, v in ipairs(x) do\n\
    \    if not has_even_digit(v) then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzthqvado.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpzthqvado.lua:12: in local 'candidate'\n\t/tmp/tmpzthqvado.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            if (num % 10) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            if (v\
    \ % 10) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(result, x[i])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function has_even_digit(n)\n      \
    \  while n > 0 do\n            if n % 2 == 0 then\n                return true\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        return\
    \ false\n    end\n    local result = {}\n    for _, v in ipairs(x) do\n      \
    \  if not has_even_digit(v) then\n            table.insert(result, v)\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local unique = true\n        for d in tostring(v):gmatch('%d') do\n\
    \            if tonumber(d) % 2 == 0 then\n                unique = false\n  \
    \              break\n            end\n        end\n        if unique then\n \
    \           table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    if not v:find(\"[02468]\") then\n      table.insert(result, v)\n   \
    \ end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73iz3h8n.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmp73iz3h8n.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp73iz3h8n.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local unique = true\n    for d in tostring(v):gmatch('%d') do\n      if tonumber(d)\
    \ % 2 == 0 then\n        unique = false\n        break\n      end\n    end\n \
    \   if unique then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local has_even = false\n        while num > 0\
    \ do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local has_even = false\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vysx8o_.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp9vysx8o_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local num = x[i]\n        local unique = true\n        while num > 0 do\n\
    \            local digit = num % 10\n            if digit % 2 == 0 then\n    \
    \            unique = false\n                break\n            end\n        \
    \    num = (num - digit) / 10\n        end\n        if unique then\n         \
    \   res[#res + 1] = x[i]\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even = false\n        while v > 0 do\n            local d =\
    \ v % 10\n            if d % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            v = math.floor(v / 10)\n  \
    \      end\n        if not has_even then\n            table.insert(t, v)\n   \
    \     end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qfcgh4p.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp8qfcgh4p.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlvetsri.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmphlvetsri.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local has_even = false\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = math.floor(num / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local flag = true\n        for j = 1, #tostring(x[i]) do\n            if\
    \ tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local even = false\n        for d in tostring(v):gmatch('%d') do\n  \
    \          if tonumber(d) % 2 == 0 then\n                even = true\n       \
    \         break\n            end\n        end\n        if not even then\n    \
    \        table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local is_unique = true\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \           num = math.floor(num / 10)\n        end\n        if is_unique then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = (num - digit) / 10\n        end\n        if not has_even then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local is_unique = true\n        local num = x[i]\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \           num = math.floor(num / 10)\n        end\n        if is_unique then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local has_even = false\n    local num = x[i]\n    while num > 0 do\n      local\
    \ digit = num % 10\n      if digit % 2 == 0 then\n        has_even = true\n  \
    \      break\n      end\n      num = math.floor(num / 10)\n    end\n    if not\
    \ has_even then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            if (v\
    \ % 10) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(result, x[i])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local s = tostring(x[i])\n        local flag = true\n        for j = 1, #s\
    \ do\n            if tonumber(s:sub(j, j)) % 2 == 0 then\n                flag\
    \ = false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(t, x[i])\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      if not x[i]:find(\"%d+\") then\n            res[#res + 1] = x[i]\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5xdq50hr.lua:12:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp5xdq50hr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5xdq50hr.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local flag = true\n        for j = 1, #tostring(x[i]) do\n            if\
    \ tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local flag = true\n        for i = 1, #tostring(v) do\n        \
    \    if tonumber(tostring(v):sub(i, i)) % 2 == 0 then\n                flag =\
    \ false\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local is_unique = true\n    for d in tostring(v):gmatch('%d') do\n      if\
    \ tonumber(d) % 2 == 0 then\n        is_unique = false\n        break\n      end\n\
    \    end\n    if is_unique then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for digit in tostring(x[i]):gmatch('%d')\
    \ do\n            if tonumber(digit) % 2 == 0 then\n                has_even =\
    \ true\n                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzmkqx5t.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpzzmkqx5t.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6it4n2g.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpn6it4n2g.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local unique_digits = {}\n  for i = 1, #x do\n\
    \    local unique = true\n    local num = x[i]\n    while num > 0 do\n      if\
    \ num % 2 == 0 then\n        unique = false\n        break\n      end\n      num\
    \ = math.floor(num / 10)\n    end\n    if unique then\n      table.insert(unique_digits,\
    \ x[i])\n    end\n  end\n  table.sort(unique_digits)\n  return unique_digits\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local has_even = false\n        local num = x[i]\n        while num > 0\
    \ do\n            if num % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local flag = true\n        for j = 1, #tostring(v) do\n            if\
    \ tonumber(tostring(v):sub(j, j)) % 2 == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ d = v % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gfkbth1.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp8gfkbth1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even = false\n        while v > 0 do\n            local d =\
    \ v % 10\n            if d % 2 == 0 then\n                has_even = true\n  \
    \              break\n            end\n            v = math.floor(v / 10)\n  \
    \      end\n        if not has_even then\n            table.insert(t, v)\n   \
    \     end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hwiko1a.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp_hwiko1a.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for j = 1, #tostring(x[i]) do\n     \
    \       if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even = false\n    while v > 0 do\n      local d = v % 10\n\
    \      if d % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      v = math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddoihfrk.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpddoihfrk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local num = x[i]\n        local is_unique = true\n        while num >\
    \ 0 do\n            local digit = num % 10\n            if digit % 2 == 0 then\n\
    \                is_unique = false\n                break\n            end\n \
    \           num = math.floor(num / 10)\n        end\n        if is_unique then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
