name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
results:
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = string.sub(txt,\
    \ -1)\n    if last_char == ' ' then\n        return false\n    end\n    if string.match(last_char,\
    \ '%a') then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ejc_6y9.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4ejc_6y9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j78vyck.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6j78vyck.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    return last_char:match('%a') and not txt:sub(-2):match('%a')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3c0clqx5.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3c0clqx5.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  local last_char = txt:sub(-1)\n\
    \  if last_char:match('%a') and not last_char:match('%w') then\n    return true\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_gkh10t.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb_gkh10t.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    local last_char_is_letter = last_char:match('%a')\n    local last_char_is_not_part_of_word\
    \ = txt:sub(-2, -2) == ' '\n    return last_char_is_letter and last_char_is_not_part_of_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppsce19s0.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppsce19s0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgj_fb_q.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpjgj_fb_q.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06nfit35.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp06nfit35.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    local last_char = txt:sub(-1)\n    local last_char_is_letter = last_char:match(\"\
    %a\")\n    local last_char_is_not_part_of_word = txt:sub(-2, -2) == \" \"\n  \
    \  return last_char_is_letter and last_char_is_not_part_of_word\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnrolhzy.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbnrolhzy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdsk67cx.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpvdsk67cx.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbteeoedd.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpbteeoedd.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4_6lm_s.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpt4_6lm_s.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dve6i_1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp9dve6i_1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghk8fimg.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpghk8fimg.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_yecx2i.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpj_yecx2i.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgaypuup.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpjgaypuup.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match function to check\n    -- if the last\
    \ character is an alphabetical character.\n    -- Hint: You can use the string.find\
    \ function to check\n    -- if the last character is a part of a word.\n    --\
    \ Hint: You can use the string.sub function to get the\n    -- last character\
    \ of a string.\n    -- Hint: You can use the string.len function to get the\n\
    \    -- length of a string.\n    -- Hint: You can use the string.find function\
    \ to check\n    -- if the last character is a part of a word.\n    -- Hint: You\
    \ can use the string.sub function to get the\n    -- last character of a string.\n\
    \    -- Hint: You can use the string.len function to get the\n    -- length of\
    \ a string.\n    -- Hint: You can use the string.find function to check\n    --\
    \ if the last character is a part of a word.\n    -- Hint: You can use the string.sub\
    \ function to get the\n    -- last character of a string.\n    -- Hint: You can\
    \ use the string.len function to get the\n    -- length of a string.\n    -- Hint:\
    \ You can use the string.find function to check\n    -- if the last character\
    \ is a part of a word.\n    -- Hint: You can use the string.sub function to get\
    \ the\n    -- last character of a string.\n    -- Hint: You can use the string.len\
    \ function to get the\n    -- length of a string.\n    -- Hint: You can use the\
    \ string.find function to check\n    -- if the last character is a part of a word.\n\
    \    -- Hint: You can use the string.sub function to get the\n    -- last character\
    \ of a string.\n    -- Hint: You can use the string.len function to get the\n\
    \    -- length of a string.\n    -- Hint: You can use the string.find function\
    \ to check\n    -- if the last character is a part of a word.\n    -- Hint: You\
    \ can use the string.sub function to get the\n    -- last character of a string.\n\
    \    -- Hint: You can use the string.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4bapr4yw.lua:69: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.match() and string.find() functions.\n    -- Hint: Use\
    \ the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n\
    \    -- %w+%s*$\n    -- Hint: Use the following pattern:\n    -- %w+%s*$\n   \
    \ -- Hint: Use the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following\
    \ pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n    -- %w+%s*$\n\
    \    -- Hint: Use the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the\
    \ following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n\
    \    -- %w+%s*$\n    -- Hint: Use the following pattern:\n    -- %w+%s*$\n   \
    \ -- Hint: Use the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following\
    \ pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n    -- %w+%s*$\n\
    \    -- Hint: Use the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the\
    \ following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n\
    \    -- %w+%s*$\n    -- Hint: Use the following pattern:\n    -- %w+%s*$\n   \
    \ -- Hint: Use the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following\
    \ pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n    -- %w+%s*$\n\
    \    -- Hint: Use the following pattern:\n    -- %w+%s*$\n    -- Hint: Use the\
    \ following pattern:\n    -- %w+%s*$\n    -- Hint: Use the following pattern:\n\
    \    -- %w+%s*$\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4tlz9_qo.lua:80: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk76f2ks.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzk76f2ks.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih887_b1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpih887_b1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3dr7fxc.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_3dr7fxc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo561rd8.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfo561rd8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwlggr8l.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgwlggr8l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmatwqor0.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmatwqor0.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You may need to use string.match() function.\n    -- Hint: You may\
    \ need to use string.find() function.\n    -- Hint: You may need to use string.sub()\
    \ function.\n    -- Hint: You may need to use string.len() function.\n    -- Hint:\
    \ You may need to use string.gsub() function.\n    -- Hint: You may need to use\
    \ string.gmatch() function.\n    -- Hint: You may need to use string.match() function.\n\
    \    -- Hint: You may need to use string.match() function.\n    -- Hint: You may\
    \ need to use string.match() function.\n    -- Hint: You may need to use string.match()\
    \ function.\n    -- Hint: You may need to use string.match() function.\n    --\
    \ Hint: You may need to use string.match() function.\n    -- Hint: You may need\
    \ to use string.match() function.\n    -- Hint: You may need to use string.match()\
    \ function.\n    -- Hint: You may need to use string.match() function.\n    --\
    \ Hint: You may need to use string.match() function.\n    -- Hint: You may need\
    \ to use string.match() function.\n    -- Hint: You may need to use string.match()\
    \ function.\n    -- Hint: You may need to use string.match() function.\n    --\
    \ Hint: You may need to use string.match() function.\n    -- Hint: You may need\
    \ to use string.match() function.\n    -- Hint: You may need to use string.match()\
    \ function.\n    -- Hint: You may need to use string.match() function.\n    --\
    \ Hint: You may need to use string.match() function.\n    -- Hint: You may need\
    \ to use string.match() function.\n    -- Hint: You may need to use string.match()\
    \ function.\n    -- Hint: You may need to use string.match() function.\n    --\
    \ Hint: You may need to use string.match() function.\n    -- Hint: You may need\
    \ to use string.match() function.\n    -- Hint: You\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpduuwl0le.lua:62: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjyraa8wz.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpjyraa8wz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uwrv5s1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp9uwrv5s1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7th480m.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpo7th480m.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprigy0ruo.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprigy0ruo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplw3f906n.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplw3f906n.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs6p_up5.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmprs6p_up5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use string.find() to find a pattern in a string.\n    --\
    \ Hint: You can use string.match() to match a pattern in a string.\n    -- Hint:\
    \ You can use string.sub() to get a substring from a string.\n    -- Hint: You\
    \ can use string.len() to get the length of a string.\n    -- Hint: You can use\
    \ string.gmatch() to iterate over all characters in a string.\n    -- Hint: You\
    \ can use string.gsub() to replace all occurrences of a pattern in a string.\n\
    \    -- Hint: You can use string.upper() to convert a string to uppercase.\n \
    \   -- Hint: You can use string.lower() to convert a string to lowercase.\n  \
    \  -- Hint: You can use string.reverse() to reverse a string.\n    -- Hint: You\
    \ can use string.format() to format a string.\n    -- Hint: You can use string.char()\
    \ to convert a number to a character.\n    -- Hint: You can use string.byte()\
    \ to convert a character to a number.\n    -- Hint: You can use string.rep() to\
    \ repeat a string.\n    -- Hint: You can use string.dump() to dump a function\
    \ as a string.\n    -- Hint: You can use string.gfind() to iterate over all occurrences\
    \ of a pattern in a string.\n    -- Hint: You can use string.find() to find a\
    \ pattern in a string.\n    -- Hint: You can use string.match() to match a pattern\
    \ in a string.\n    -- Hint: You can use string.gsub() to replace all occurrences\
    \ of a pattern in a string.\n    -- Hint: You can use string.gmatch() to iterate\
    \ over all characters in a string.\n    -- Hint: You can use string.len() to get\
    \ the length of a string.\n    -- Hint: You can use string.sub() to get a substring\
    \ from a string.\n    -- Hint: You can use string.upper() to convert a string\
    \ to uppercase.\n    -- Hint: You can use string.lower() to convert a string to\
    \ lowercase.\n    -- H\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8qncmi7y.lua:56: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumlpwgo1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpumlpwgo1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcktyhwtq.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcktyhwtq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  if txt:sub(-1):match(\"%a\"\
    ) and not txt:sub(-1):match(\"%w\") then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6xdzl5n.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv6xdzl5n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx12nnuv.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsx12nnuv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre4f_u61.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpre4f_u61.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokf431kj.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpokf431kj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use the string.match function.\n    -- Hint: Use the string.find\
    \ function.\n    -- Hint: Use the string.sub function.\n    -- Hint: Use the string.len\
    \ function.\n    -- Hint: Use the string.gmatch function.\n    -- Hint: Use the\
    \ string.gsub function.\n    -- Hint: Use the string.lower function.\n    -- Hint:\
    \ Use the string.upper function.\n    -- Hint: Use the string.reverse function.\n\
    \    -- Hint: Use the string.format function.\n    -- Hint: Use the string.char\
    \ function.\n    -- Hint: Use the string.byte function.\n    -- Hint: Use the\
    \ string.rep function.\n    -- Hint: Use the string.gfind function.\n    -- Hint:\
    \ Use the string.dump function.\n    -- Hint: Use the string.len function.\n \
    \   -- Hint: Use the string.find function.\n    -- Hint: Use the string.sub function.\n\
    \    -- Hint: Use the string.match function.\n    -- Hint: Use the string.gsub\
    \ function.\n    -- Hint: Use the string.gmatch function.\n    -- Hint: Use the\
    \ string.reverse function.\n    -- Hint: Use the string.lower function.\n    --\
    \ Hint: Use the string.upper function.\n    -- Hint: Use the string.format function.\n\
    \    -- Hint: Use the string.char function.\n    -- Hint: Use the string.byte\
    \ function.\n    -- Hint: Use the string.rep function.\n    -- Hint: Use the string.dump\
    \ function.\n    -- Hint: Use the string.gfind function.\n    -- Hint: Use the\
    \ string.gsub function.\n    -- Hint: Use the string.gmatch function.\n    --\
    \ Hint: Use the string.reverse function.\n    -- Hint: Use the string.lower function.\n\
    \    -- Hint: Use the string.upper function.\n    -- Hint: Use the string.format\
    \ function.\n    -- Hint: Use the string.char function.\n    -- Hint: Use the\
    \ string.byte function.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg7gmkzqo.lua:70: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.match() and string.find() functions.\n    -- Hint: Use\
    \ string.len() function.\n    -- Hint: Use string.sub() function.\n    -- Hint:\
    \ Use string.find() function.\n    -- Hint: Use string.match() function.\n   \
    \ -- Hint: Use string.find() function.\n    -- Hint: Use string.len() function.\n\
    \    -- Hint: Use string.sub() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.match() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.len() function.\n    -- Hint: Use string.sub() function.\n\
    \    -- Hint: Use string.find() function.\n    -- Hint: Use string.match() function.\n\
    \    -- Hint: Use string.find() function.\n    -- Hint: Use string.len() function.\n\
    \    -- Hint: Use string.sub() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.match() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.len() function.\n    -- Hint: Use string.sub() function.\n\
    \    -- Hint: Use string.find() function.\n    -- Hint: Use string.match() function.\n\
    \    -- Hint: Use string.find() function.\n    -- Hint: Use string.len() function.\n\
    \    -- Hint: Use string.sub() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.match() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.len() function.\n    -- Hint: Use string.sub() function.\n\
    \    -- Hint: Use string.find() function.\n    -- Hint: Use string.match() function.\n\
    \    -- Hint: Use string.find() function.\n    -- Hint: Use string.len() function.\n\
    \    -- Hint: Use string.sub() function.\n    --\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9bh54kne.lua:71: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxcxvkg8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkxcxvkg8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvn9sgkkz.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpvn9sgkkz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use string.match() function.\n    -- Hint: You can use string.find()\
    \ function.\n    -- Hint: You can use string.sub() function.\n    -- Hint: You\
    \ can use string.len() function.\n    -- Hint: You can use string.gmatch() function.\n\
    \    -- Hint: You can use string.gsub() function.\n    -- Hint: You can use string.reverse()\
    \ function.\n    -- Hint: You can use string.lower() function.\n    -- Hint: You\
    \ can use string.upper() function.\n    -- Hint: You can use string.byte() function.\n\
    \    -- Hint: You can use string.char() function.\n    -- Hint: You can use string.dump()\
    \ function.\n    -- Hint: You can use string.format() function.\n    -- Hint:\
    \ You can use string.rep() function.\n    -- Hint: You can use string.gfind()\
    \ function.\n    -- Hint: You can use string.find() function.\n    -- Hint: You\
    \ can use string.match() function.\n    -- Hint: You can use string.gsub() function.\n\
    \    -- Hint: You can use string.reverse() function.\n    -- Hint: You can use\
    \ string.lower() function.\n    -- Hint: You can use string.upper() function.\n\
    \    -- Hint: You can use string.len() function.\n    -- Hint: You can use string.byte()\
    \ function.\n    -- Hint: You can use string.char() function.\n    -- Hint: You\
    \ can use string.dump() function.\n    -- Hint: You can use string.format() function.\n\
    \    -- Hint: You can use string.rep() function.\n    -- Hint: You can use string.gfind()\
    \ function.\n    -- Hint: You can use string.gmatch() function.\n    -- Hint:\
    \ You can use string.find() function.\n    -- Hint: You can use string.match()\
    \ function.\n    -- Hint: You can use string.gsub() function.\n    -- Hint: You\
    \ can use string.reverse() function.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvdg2tf3v.lua:65: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Write your code here\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyz9zsyu.lua:22:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpbyz9zsyu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j04dgj6.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_j04dgj6.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv2rsadq.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpqv2rsadq.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hql68m8.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_hql68m8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98l03d9p.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp98l03d9p.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: use string.find() and string.match()\n    -- Hint: use string.find()\
    \ and string.match()\n    local last_char = string.sub(txt, -1)\n    if string.find(last_char,\
    \ \"%a\") then\n        if string.find(txt, \"%s\"..last_char) then\n        \
    \    return false\n        else\n            return true\n        end\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6x37mym.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph6x37mym.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2_n6e66.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpz2_n6e66.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1yafn9g.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpj1yafn9g.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.find function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use the string.find function to find\n  \
    \  -- the last word of a string.\n    -- Hint: You can use the string.find function\
    \ to find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\n    -- Hint:\
    \ You can use the string.find function to find\n    -- the last character of the\
    \ last word of a string.\n    -- Hint: You can use the string.find function to\
    \ find\n    -- the last character of the last word of a string.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn86ct4lb.lua:66: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.match() function.\n    -- Hint: Use string.sub() function.\n\
    \    -- Hint: Use string.len() function.\n    -- Hint: Use string.find() function.\n\
    \    -- Hint: Use string.byte() function.\n    -- Hint: Use string.char() function.\n\
    \    -- Hint: Use string.gmatch() function.\n    -- Hint: Use string.gsub() function.\n\
    \    -- Hint: Use string.match() function.\n    -- Hint: Use string.reverse()\
    \ function.\n    -- Hint: Use string.upper() function.\n    -- Hint: Use string.lower()\
    \ function.\n    -- Hint: Use string.format() function.\n    -- Hint: Use string.dump()\
    \ function.\n    -- Hint: Use string.rep() function.\n    -- Hint: Use string.len()\
    \ function.\n    -- Hint: Use string.sub() function.\n    -- Hint: Use string.find()\
    \ function.\n    -- Hint: Use string.byte() function.\n    -- Hint: Use string.char()\
    \ function.\n    -- Hint: Use string.gmatch() function.\n    -- Hint: Use string.gsub()\
    \ function.\n    -- Hint: Use string.match() function.\n    -- Hint: Use string.reverse()\
    \ function.\n    -- Hint: Use string.upper() function.\n    -- Hint: Use string.lower()\
    \ function.\n    -- Hint: Use string.format() function.\n    -- Hint: Use string.dump()\
    \ function.\n    -- Hint: Use string.rep() function.\n    -- Hint: Use string.len()\
    \ function.\n    -- Hint: Use string.sub() function.\n    -- Hint: Use string.find()\
    \ function.\n    -- Hint: Use string.byte() function.\n    -- Hint: Use string.char()\
    \ function.\n    -- Hint: Use string.gmatch() function.\n    -- Hint: Use string.gsub()\
    \ function.\n    -- Hint: Use string.match() function.\n    -- Hint: Use string.reverse()\
    \ function.\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgwnj3tm9.lua:71: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu4pad61.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvu4pad61.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement the function\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hpj13ts.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6hpj13ts.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match function to check\n    -- if the last\
    \ character is an alphabetical character.\n    -- You can use the string.find\
    \ function to check if the\n    -- last character is a part of a word.\n    --\
    \ You can use the string.sub function to get the last\n    -- character of a string.\n\
    \    -- You can use the string.len function to get the length\n    -- of a string.\n\
    \    -- You can use the string.byte function to get the ASCII\n    -- code of\
    \ a character.\n    -- You can use the string.char function to get the\n    --\
    \ character of a given ASCII code.\n    -- You can use the string.gsub function\
    \ to remove all\n    -- spaces from a string.\n    -- You can use the string.gmatch\
    \ function to iterate\n    -- through all characters of a string.\n    -- You\
    \ can use the string.find function to check if a\n    -- character is an alphabetical\
    \ character.\n    -- You can use the string.match function to check if a\n   \
    \ -- character is an alphabetical character.\n    -- You can use the string.sub\
    \ function to get a\n    -- substring of a string.\n    -- You can use the string.gsub\
    \ function to replace all\n    -- spaces with an empty string.\n    -- You can\
    \ use the string.gsub function to replace all\n    -- non-alphabetical characters\
    \ with an empty string.\n    -- You can use the string.gsub function to replace\
    \ all\n    -- alphabetical characters with an empty string.\n    -- You can use\
    \ the string.len function to get the length\n    -- of a string.\n    -- You can\
    \ use the string.sub function to get the last\n    -- character of a string.\n\
    \    -- You can use the string.find function to check if a\n    -- character is\
    \ a part of a word.\n    -- You can use the string.match function to check if\
    \ a\n    -- character is a part of a word.\n    -- You can use the string.sub\
    \ function to get the\n    -- substring of a string.\n    -- You can use the string.gsub\
    \ function to replace all\n    -- spaces with an empty string.\n    -- You can\
    \ use the string.g\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbfn3rlh3.lua:73: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- YOUR CODE HERE\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppmj48pj.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpppmj48pj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo7wy4lx.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpeo7wy4lx.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcq42xea.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmppcq42xea.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp987m8qhq.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp987m8qhq.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ytd0hgr.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp5ytd0hgr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dvdk3gp.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp7dvdk3gp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement the function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu38byhdk.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpu38byhdk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7x3oc4t.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpa7x3oc4t.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppygoh3k4.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppygoh3k4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp769ixg68.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp769ixg68.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.match() to find the last character.\n    -- Hint: Use\
    \ string.find() to check if the last character\n    -- is a part of a word.\n\
    \    -- Hint: Use string.find() to check if the last character\n    -- is an alphabetical\
    \ character.\n    -- Hint: Use string.find() to check if the last character\n\
    \    -- is a space.\n    -- Hint: Use string.find() to check if the last character\n\
    \    -- is a punctuation character.\n    -- Hint: Use string.find() to check if\
    \ the last character\n    -- is a digit.\n    -- Hint: Use string.find() to check\
    \ if the last character\n    -- is a symbol.\n    -- Hint: Use string.find() to\
    \ check if the last character\n    -- is a control character.\n    -- Hint: Use\
    \ string.find() to check if the last character\n    -- is a hexadecimal character.\n\
    \    -- Hint: Use string.find() to check if the last character\n    -- is a printable\
    \ character.\n    -- Hint: Use string.find() to check if the last character\n\
    \    -- is a space character.\n    -- Hint: Use string.find() to check if the\
    \ last character\n    -- is a line break character.\n    -- Hint: Use string.find()\
    \ to check if the last character\n    -- is a uppercase character.\n    -- Hint:\
    \ Use string.find() to check if the last character\n    -- is a lowercase character.\n\
    \    -- Hint: Use string.find() to check if the last character\n    -- is a titlecase\
    \ character.\n    -- Hint: Use string.find() to check if the last character\n\
    \    -- is a decimal digit character.\n    -- Hint: Use string.find() to check\
    \ if the last character\n    -- is a hexadecimal digit character.\n    -- Hint:\
    \ Use string.find() to check if the last character\n    -- is a letter character.\n\
    \    -- Hint: Use string.find() to check if the last character\n    -- is a mark\
    \ character.\n    -- Hint: Use string.find() to check if the last character\n\
    \    --\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc6w7do09.lua:71: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6u_tpzll.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6u_tpzll.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    if txt == '' then\n      \
    \  return false\n    end\n    local last_char = txt:sub(-1)\n    if last_char\
    \ == ' ' then\n        return false\n    end\n    return last_char:match('%a')\
    \ ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp3rcbl8.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwp3rcbl8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra68bgj9.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpra68bgj9.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovt0nc0k.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpovt0nc0k.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8bsun7o.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpo8bsun7o.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nipnnt5.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8nipnnt5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement the function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6378pw26.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6378pw26.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    if string.len(txt) == 0 then\n\
    \        return false\n    end\n    local last_char = string.sub(txt, -1)\n  \
    \  if string.match(last_char, '%a') and not string.match(last_char, '%w') then\n\
    \        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwme_mpnc.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwme_mpnc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcry_td2x.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcry_td2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulyn1ogp.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpulyn1ogp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa5yasof.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsa5yasof.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4u2ffh8e.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4u2ffh8e.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz5wcvk6.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkz5wcvk6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp740d4r4j.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp740d4r4j.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5q6xq9l.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpq5q6xq9l.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq84xdwzf.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq84xdwzf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3h3whya.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpt3h3whya.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6a9qrre.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpj6a9qrre.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr81q5xrr.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpr81q5xrr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln3bpw5c.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpln3bpw5c.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpco9ykn7v.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpco9ykn7v.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Write your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjn1x48e.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwjn1x48e.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljyejn5b.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpljyejn5b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymmnh3qe.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpymmnh3qe.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement the function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkge_c17.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwkge_c17.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz7gg11o.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppz7gg11o.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_869izd7.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_869izd7.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm1ldf1y.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmplm1ldf1y.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    local last_char_is_a_letter = last_char:match('%a')\n    local last_char_is_a_part_of_a_word\
    \ = txt:match('%a%s*$')\n    return last_char_is_a_letter and not last_char_is_a_part_of_a_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplg_6twby.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplg_6twby.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Write your code here\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuldyr_q0.lua:22:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpuldyr_q0.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u73v9t3.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0u73v9t3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    local last_char_is_letter = last_char:match('%a')\n    local last_char_is_not_part_of_word\
    \ = not txt:match('%a%s$')\n    return last_char_is_letter and last_char_is_not_part_of_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0n4yhu2.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj0n4yhu2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match() function to\n    -- check if the\
    \ last character is an alphabetical character.\n    -- You can use the string.find()\
    \ function to check if\n    -- the last character is a part of a word.\n    --\
    \ You can use the string.sub() function to get the last\n    -- character of a\
    \ string.\n    -- You can use the string.len() function to get the length\n  \
    \  -- of a string.\n    -- You can use the string.find() function to check if\n\
    \    -- the last character is a part of a word.\n    -- You can use the string.sub()\
    \ function to get the last\n    -- character of a string.\n    -- You can use\
    \ the string.len() function to get the length\n    -- of a string.\n    if txt\
    \ == '' then\n        return false\n    end\n    local last_char = string.sub(txt,\
    \ string.len(txt), string.len(txt))\n    if string.match(last_char, '%a') then\n\
    \        if string.find(txt, last_char, string.len(txt) - 1) then\n          \
    \  return false\n        else\n            return true\n        end\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes7yiiwm.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpes7yiiwm.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbbaaca_.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmptbbaaca_.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmag4rlg.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsmag4rlg.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25pabe1f.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp25pabe1f.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0eio96b.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_0eio96b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30a2i5ma.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp30a2i5ma.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match function.\n    -- Hint: You can use\
    \ the string.find function.\n    -- Hint: You can use the string.sub function.\n\
    \    -- Hint: You can use the string.len function.\n    -- Hint: You can use the\
    \ string.gmatch function.\n    -- Hint: You can use the string.gsub function.\n\
    \    -- Hint: You can use the string.reverse function.\n    -- Hint: You can use\
    \ the string.lower function.\n    -- Hint: You can use the string.upper function.\n\
    \    -- Hint: You can use the string.char function.\n    -- Hint: You can use\
    \ the string.byte function.\n    -- Hint: You can use the string.format function.\n\
    \    -- Hint: You can use the string.rep function.\n    -- Hint: You can use the\
    \ string.dump function.\n    -- Hint: You can use the string.find function.\n\
    \    -- Hint: You can use the string.match function.\n    -- Hint: You can use\
    \ the string.gmatch function.\n    -- Hint: You can use the string.gsub function.\n\
    \    -- Hint: You can use the string.len function.\n    -- Hint: You can use the\
    \ string.lower function.\n    -- Hint: You can use the string.reverse function.\n\
    \    -- Hint: You can use the string.sub function.\n    -- Hint: You can use the\
    \ string.upper function.\n    -- Hint: You can use the string.char function.\n\
    \    -- Hint: You can use the string.byte function.\n    -- Hint: You can use\
    \ the string.format function.\n    -- Hint: You can use the string.rep function.\n\
    \    -- Hint: You can use the string.dump function.\n    -- Hint: You can use\
    \ the string.find function.\n    -- Hint: You can use the string.match function.\n\
    \    -- Hint: You can use the string.gmatch function.\n    -- Hint: You can use\
    \ the string.gsub function.\n    -- Hint: You can use the string.len function.\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp01slshg4.lua:66: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.find() to find the last character.\n    -- Hint: Use\
    \ string.match() to check if the last character\n    -- is an alphabetical character.\n\
    \    -- Hint: Use string.sub() to get the last character.\n    -- Hint: Use string.len()\
    \ to get the length of the string.\n    -- Hint: Use string.find() to check if\
    \ the last character\n    -- is a part of a word.\n    -- Hint: Use string.find()\
    \ to find the last character.\n    -- Hint: Use string.match() to check if the\
    \ last character\n    -- is an alphabetical character.\n    -- Hint: Use string.sub()\
    \ to get the last character.\n    -- Hint: Use string.len() to get the length\
    \ of the string.\n    -- Hint: Use string.find() to check if the last character\n\
    \    -- is a part of a word.\n    -- Hint: Use string.find() to find the last\
    \ character.\n    -- Hint: Use string.match() to check if the last character\n\
    \    -- is an alphabetical character.\n    -- Hint: Use string.sub() to get the\
    \ last character.\n    -- Hint: Use string.len() to get the length of the string.\n\
    \    -- Hint: Use string.find() to check if the last character\n    -- is a part\
    \ of a word.\n    -- Hint: Use string.find() to find the last character.\n   \
    \ -- Hint: Use string.match() to check if the last character\n    -- is an alphabetical\
    \ character.\n    -- Hint: Use string.sub() to get the last character.\n    --\
    \ Hint: Use string.len() to get the length of the string.\n    -- Hint: Use string.find()\
    \ to check if the last character\n    -- is a part of a word.\n    -- Hint: Use\
    \ string.find() to find the last character.\n    -- Hint: Use string.match() to\
    \ check if the last character\n    -- is an alphabetical character.\n    -- Hint:\
    \ Use string.sub() to get the last character.\n    -- Hint: Use string.len() to\
    \ get the length of the string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3p6jfnjx.lua:65: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_225zf0.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6_225zf0.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.find() function to find\n    -- the last\
    \ character in a string.\n    -- Hint: You can use the string.match() function\
    \ to\n    -- check if the last character is an alphabetical character.\n    --\
    \ Hint: You can use the string.sub() function to\n    -- get the last character\
    \ in a string.\n    -- Hint: You can use the string.len() function to\n    --\
    \ get the length of a string.\n    -- Hint: You can use the string.match() function\
    \ to\n    -- check if the last character is a part of a word.\n    -- Hint: You\
    \ can use the string.match() function to\n    -- check if the last character is\
    \ a space.\n    -- Hint: You can use the string.match() function to\n    -- check\
    \ if the last character is a punctuation character.\n    -- Hint: You can use\
    \ the string.match() function to\n    -- check if the last character is a symbol\
    \ character.\n    -- Hint: You can use the string.match() function to\n    --\
    \ check if the last character is a number character.\n    -- Hint: You can use\
    \ the string.match() function to\n    -- check if the last character is a control\
    \ character.\n    -- Hint: You can use the string.match() function to\n    --\
    \ check if the last character is a hexadecimal character.\n    -- Hint: You can\
    \ use the string.match() function to\n    -- check if the last character is a\
    \ printable character.\n    -- Hint: You can use the string.match() function to\n\
    \    -- check if the last character is a space character.\n    -- Hint: You can\
    \ use the string.match() function to\n    -- check if the last character is a\
    \ line break character.\n    -- Hint: You can use the string.match() function\
    \ to\n    -- check if the last character is a uppercase character.\n    -- Hint:\
    \ You can use the string.match() function to\n    -- check if the last character\
    \ is a lowercase character.\n    -- Hint: You can use the string.match() function\
    \ to\n    -- check if the last character is a titlecase character.\n    -- H\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ro22te6.lua:67: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzc33h6k.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwzc33h6k.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7l57r_0i.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp7l57r_0i.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- YOUR CODE HERE\n    local\
    \ last_char = string.sub(txt, -1)\n    if string.match(last_char, \"%a\") and\
    \ not string.match(last_char, \"%w\") then\n        return true\n    else\n  \
    \      return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxeig0br4.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxeig0br4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppityn0np.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppityn0np.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvzbipwf.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnvzbipwf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlbvtmh1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpzlbvtmh1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  if txt == '' then\n    return\
    \ false\n  end\n  local len = string.len(txt)\n  local last_char = string.sub(txt,\
    \ len, len)\n  if string.match(last_char, '%a') then\n    if string.match(last_char,\
    \ '%s') then\n      return false\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr82khbtd.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr82khbtd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf99fe_y7.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpf99fe_y7.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpby42cs.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpvpby42cs.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55ct8myb.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp55ct8myb.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r930j27.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_r930j27.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsqd842b.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpcsqd842b.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use the string.find function.\n    -- Hint: Use the string.match\
    \ function.\n    -- Hint: Use the string.sub function.\n    -- Hint: Use the string.len\
    \ function.\n    -- Hint: Use the string.gmatch function.\n    -- Hint: Use the\
    \ string.gsub function.\n    -- Hint: Use the string.reverse function.\n    --\
    \ Hint: Use the string.upper function.\n    -- Hint: Use the string.lower function.\n\
    \    -- Hint: Use the string.char function.\n    -- Hint: Use the string.byte\
    \ function.\n    -- Hint: Use the string.format function.\n    -- Hint: Use the\
    \ string.rep function.\n    -- Hint: Use the string.gfind function.\n    -- Hint:\
    \ Use the string.dump function.\n    -- Hint: Use the string.len function.\n \
    \   -- Hint: Use the string.find function.\n    -- Hint: Use the string.match\
    \ function.\n    -- Hint: Use the string.sub function.\n    -- Hint: Use the string.gmatch\
    \ function.\n    -- Hint: Use the string.gsub function.\n    -- Hint: Use the\
    \ string.reverse function.\n    -- Hint: Use the string.upper function.\n    --\
    \ Hint: Use the string.lower function.\n    -- Hint: Use the string.char function.\n\
    \    -- Hint: Use the string.byte function.\n    -- Hint: Use the string.format\
    \ function.\n    -- Hint: Use the string.rep function.\n    -- Hint: Use the string.gfind\
    \ function.\n    -- Hint: Use the string.dump function.\n    -- Hint: Use the\
    \ string.len function.\n    -- Hint: Use the string.find function.\n    -- Hint:\
    \ Use the string.match function.\n    -- Hint: Use the string.sub function.\n\
    \    -- Hint: Use the string.gmatch function.\n    -- Hint: Use the string.gsub\
    \ function.\n    -- Hint: Use the string.reverse function.\n    -- Hint: Use the\
    \ string.upper function.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmoa97z7d.lua:70: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleh5pjo9.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpleh5pjo9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgdxzdyw.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpxgdxzdyw.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ckwzep1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6ckwzep1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnshub2ko.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnshub2ko.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_z9vk7q.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpq_z9vk7q.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qsdsi2d.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3qsdsi2d.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    if txt == '' then\n      \
    \  return false\n    end\n    local last_char = txt:sub(-1)\n    if last_char:match('%a')\
    \ and not last_char:match('%w') then\n        return true\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wl930dn.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1wl930dn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gi1wpmm.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3gi1wpmm.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m8psgz2.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6m8psgz2.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95y90czm.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp95y90czm.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj3z7qvt.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfj3z7qvt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zjfax4h.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_zjfax4h.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y9fjljf.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp1y9fjljf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') and not last_char:match('%w') then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp_kasog.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnp_kasog.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa212q43s.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpa212q43s.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52kpqd_w.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp52kpqd_w.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamnp38bk.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpamnp38bk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement the function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6rorval.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpc6rorval.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6z3p4gzj.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6z3p4gzj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojfy359m.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpojfy359m.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2hujzcp.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpw2hujzcp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.match and string.sub\n    -- Hint: Use string.match and\
    \ string.sub\n    local last_char = string.sub(txt, -1)\n    local last_char_is_a_letter\
    \ = string.match(last_char, '%a')\n    local last_char_is_a_space = string.match(last_char,\
    \ '%s')\n    if last_char_is_a_letter and not last_char_is_a_space then\n    \
    \    return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9388q0c_.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9388q0c_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    if txt == '' then\n        return false\n    end\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') then\n        local last_char_index = txt:len()\n\
    \        local last_char_is_a_letter = true\n        for i = 1, last_char_index\
    \ do\n            local char = txt:sub(i, i)\n            if char == ' ' then\n\
    \                last_char_is_a_letter = true\n            elseif char:match('%a')\
    \ then\n                last_char_is_a_letter = false\n            end\n     \
    \   end\n        return last_char_is_a_letter\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0m2v51i7.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0m2v51i7.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    return last_char:match('%a') and not last_char:match('%w')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99uyibpp.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp99uyibpp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq03uhy4.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpoq03uhy4.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qd5fh8e.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp9qd5fh8e.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Write your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvz4s4uw.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgvz4s4uw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use string.find() to find a character in a string.\n   \
    \ -- Hint: You can use string.match() to find a pattern in a string.\n    -- Hint:\
    \ You can use string.sub() to get a substring of a string.\n    -- Hint: You can\
    \ use string.len() to get the length of a string.\n    -- Hint: You can use string.byte()\
    \ to get the ASCII code of a character.\n    -- Hint: You can use string.char()\
    \ to get the character of an ASCII code.\n    -- Hint: You can use string.gmatch()\
    \ to iterate over all characters in a string.\n    -- Hint: You can use string.gsub()\
    \ to replace a pattern in a string.\n    -- Hint: You can use string.format()\
    \ to format a string.\n    -- Hint: You can use string.lower() to convert a string\
    \ to lowercase.\n    -- Hint: You can use string.upper() to convert a string to\
    \ uppercase.\n    -- Hint: You can use string.reverse() to reverse a string.\n\
    \    -- Hint: You can use string.rep() to repeat a string.\n    -- Hint: You can\
    \ use string.pack() to pack values into a string.\n    -- Hint: You can use string.unpack()\
    \ to unpack values from a string.\n    -- Hint: You can use string.dump() to dump\
    \ a function as a string.\n    -- Hint: You can use string.find() to find a pattern\
    \ in a string.\n    -- Hint: You can use string.match() to find a pattern in a\
    \ string.\n    -- Hint: You can use string.sub() to get a substring of a string.\n\
    \    -- Hint: You can use string.len() to get the length of a string.\n    --\
    \ Hint: You can use string.byte() to get the ASCII code of a character.\n    --\
    \ Hint: You can use string.char() to get the character of an ASCII code.\n   \
    \ -- Hint: You can use string.gmatch() to iterate over all characters in a string.\n\
    \    -- Hint: You can use string.gsub()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppfp0t2cw.lua:56: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnplz50e2.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnplz50e2.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wyyn82p.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp5wyyn82p.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  local last_char = txt:sub(-1)\n\
    \  return last_char:match('%a') and not txt:sub(-2):match('%a')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyqb6nrq.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvyqb6nrq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You may find string.match() useful.\n    -- Hint: You may find string.sub()\
    \ useful.\n    -- Hint: You may find string.len() useful.\n    -- Hint: You may\
    \ find string.find() useful.\n    -- Hint: You may find string.gmatch() useful.\n\
    \    -- Hint: You may find string.gsub() useful.\n    -- Hint: You may find string.byte()\
    \ useful.\n    -- Hint: You may find string.char() useful.\n    -- Hint: You may\
    \ find string.format() useful.\n    -- Hint: You may find string.rep() useful.\n\
    \    -- Hint: You may find string.reverse() useful.\n    -- Hint: You may find\
    \ string.lower() useful.\n    -- Hint: You may find string.upper() useful.\n \
    \   -- Hint: You may find string.dump() useful.\n    -- Hint: You may find string.pack()\
    \ useful.\n    -- Hint: You may find string.packsize() useful.\n    -- Hint: You\
    \ may find string.unpack() useful.\n    -- Hint: You may find string.len() useful.\n\
    \    -- Hint: You may find string.packsize() useful.\n    -- Hint: You may find\
    \ string.packsize() useful.\n    -- Hint: You may find string.packsize() useful.\n\
    \    -- Hint: You may find string.packsize() useful.\n    -- Hint: You may find\
    \ string.packsize() useful.\n    -- Hint: You may find string.packsize() useful.\n\
    \    -- Hint: You may find string.packsize() useful.\n    -- Hint: You may find\
    \ string.packsize() useful.\n    -- Hint: You may find string.packsize() useful.\n\
    \    -- Hint: You may find string.packsize() useful.\n    -- Hint: You may find\
    \ string.packsize() useful.\n    -- Hint: You may find string.packsize() useful.\n\
    \    -- Hint: You may find string.packsize() useful.\n    -- Hint: You may find\
    \ string.packsize() useful.\n    -- H\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbhm1662i.lua:65: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6omp2dt.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpt6omp2dt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91b792uv.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp91b792uv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt56qhr26.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt56qhr26.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- YOUR CODE HERE\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip2rr6tf.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpip2rr6tf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0hgwpgi.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpv0hgwpgi.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Write your code here\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcg0vjnv.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkcg0vjnv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9_r1mlw.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpo9_r1mlw.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- YOUR CODE HERE\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmwpvx5p.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnmwpvx5p.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu6yjk5l.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpxu6yjk5l.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use string.match() function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use string.find() function to find\n    --\
    \ the last character of a string.\n    -- Hint: You can use string.sub() function\
    \ to find\n    -- the last character of a string.\n    -- Hint: You can use string.len()\
    \ function to find\n    -- the last character of a string.\n    -- Hint: You can\
    \ use string.byte() function to find\n    -- the last character of a string.\n\
    \    -- Hint: You can use string.char() function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use string.reverse() function to find\n \
    \   -- the last character of a string.\n    -- Hint: You can use string.gmatch()\
    \ function to find\n    -- the last character of a string.\n    -- Hint: You can\
    \ use string.gsub() function to find\n    -- the last character of a string.\n\
    \    -- Hint: You can use string.format() function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use string.dump() function to find\n    --\
    \ the last character of a string.\n    -- Hint: You can use string.rep() function\
    \ to find\n    -- the last character of a string.\n    -- Hint: You can use string.lower()\
    \ function to find\n    -- the last character of a string.\n    -- Hint: You can\
    \ use string.upper() function to find\n    -- the last character of a string.\n\
    \    -- Hint: You can use string.pack() function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use string.packsize() function to find\n\
    \    -- the last character of a string.\n    -- Hint: You can use string.unpack()\
    \ function to find\n    -- the last character of a string.\n    -- Hint: You can\
    \ use string.unpack() function to find\n    -- the last character of a string.\n\
    \    -- Hint: You can use string.pack() function to find\n    -- the last character\
    \ of a string.\n    --\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfvu27h23.lua:71: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnriizt70.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnriizt70.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: Use string.match() and string.sub()\n    -- Hint: Use string.find()\
    \ to find the last space\n    -- Hint: Use string.sub() to get the last character\n\
    \    -- Hint: Use string.match() to check if the last character is an alphabetical\
    \ character\n    -- Hint: Use string.match() to check if the last character is\
    \ a part of a word\n    -- Hint: Use string.sub() to get the last word\n    --\
    \ Hint: Use string.match() to check if the last word contains the last character\n\
    \    -- Hint: Use string.len() to get the length of the last word\n    -- Hint:\
    \ Use string.sub() to get the last character of the last word\n    -- Hint: Use\
    \ string.sub() to get the last character of the given string\n    -- Hint: Use\
    \ string.sub() to get the last word of the given string\n    -- Hint: Use string.sub()\
    \ to get the last character of the last word of the given string\n    -- Hint:\
    \ Use string.sub() to get the last character of the given string\n    -- Hint:\
    \ Use string.sub() to get the last word of the given string\n    -- Hint: Use\
    \ string.sub() to get the last character of the last word of the given string\n\
    \    -- Hint: Use string.sub() to get the last character of the given string\n\
    \    -- Hint: Use string.sub() to get the last word of the given string\n    --\
    \ Hint: Use string.sub() to get the last character of the last word of the given\
    \ string\n    -- Hint: Use string.sub() to get the last character of the given\
    \ string\n    -- Hint: Use string.sub() to get the last word of the given string\n\
    \    -- Hint: Use string.sub() to get the last character of the last word of the\
    \ given string\n    -- Hint: Use string.sub() to get the last character of the\
    \ given string\n    -- Hint: Use string.sub() to get the last word of the given\
    \ string\n    -- Hint: Use string.sub() to get the last character of the last\
    \ word of the given string\n    -- Hint: Use string.sub() to get\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph94_ekqu.lua:57: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa45lglcq.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpa45lglcq.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaiohmksk.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpaiohmksk.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement the function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyre8vr68.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpyre8vr68.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lrjovhl.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6lrjovhl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprivq0udr.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmprivq0udr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmua0ubga.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmua0ubga.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw38c8cvp.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpw38c8cvp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y3bg1hm.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp1y3bg1hm.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ma5z24u.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8ma5z24u.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.find function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use the string.match function to check\n\
    \    -- if the last character is an alphabetical character.\n    -- Hint: You\
    \ can use the string.sub function to get the\n    -- last character of a string.\n\
    \    -- Hint: You can use the string.len function to get the\n    -- length of\
    \ a string.\n    -- Hint: You can use the string.find function to find\n    --\
    \ the last space character of a string.\n    -- Hint: You can use the string.sub\
    \ function to get the\n    -- last character of a string.\n    -- Hint: You can\
    \ use the string.len function to get the\n    -- length of a string.\n    -- Hint:\
    \ You can use the string.sub function to get the\n    -- last character of a string.\n\
    \    -- Hint: You can use the string.len function to get the\n    -- length of\
    \ a string.\n    -- Hint: You can use the string.sub function to get the\n   \
    \ -- last character of a string.\n    -- Hint: You can use the string.len function\
    \ to get the\n    -- length of a string.\n    -- Hint: You can use the string.sub\
    \ function to get the\n    -- last character of a string.\n    -- Hint: You can\
    \ use the string.len function to get the\n    -- length of a string.\n    -- Hint:\
    \ You can use the string.sub function to get the\n    -- last character of a string.\n\
    \    -- Hint: You can use the string.len function to get the\n    -- length of\
    \ a string.\n    -- Hint: You can use the string.sub function to get the\n   \
    \ -- last character of a string.\n    -- Hint: You can use the string.len function\
    \ to get the\n    -- length of a string.\n    -- Hint: You can use the string.sub\
    \ function to get the\n    -- last character of a string.\n    -- Hint: You can\
    \ use the string.len function to get the\n    -- length of a string.\n    -- Hint:\
    \ You can use the string.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0mcdl2mz.lua:71: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5za_206.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpm5za_206.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3incflmh.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3incflmh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    if last_char:match('%a') then\n        local last_char_index = txt:len()\n\
    \        local next_char_index = last_char_index + 1\n        local next_char\
    \ = txt:sub(next_char_index, next_char_index)\n        if next_char == ' ' then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi288np25.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi288np25.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = string.sub(txt,\
    \ -1)\n    local last_char_is_a_letter = string.match(last_char, '%a')\n    local\
    \ last_char_is_a_part_of_a_word = string.match(txt, '%a%s$')\n    return last_char_is_a_letter\
    \ and not last_char_is_a_part_of_a_word\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgyu6f8h.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxgyu6f8h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjvh2laj.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsjvh2laj.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3paml_x.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpp3paml_x.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnteek64.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmnteek64.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zdv347o.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp7zdv347o.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsluiymhu.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsluiymhu.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgirj6evg.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpgirj6evg.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtrqo3gs.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwtrqo3gs.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match function to find\n    -- the last character\
    \ of a string.\n    -- Hint: You can use the string.find function to check\n \
    \   -- if a character is an alphabetical character.\n    -- Hint: You can use\
    \ the string.sub function to get\n    -- the last character of a string.\n   \
    \ -- Hint: You can use the string.len function to get\n    -- the length of a\
    \ string.\n    -- Hint: You can use the string.find function to check\n    --\
    \ if a character is a part of a word.\n    -- Hint: You can use the string.sub\
    \ function to get\n    -- the last character of a string.\n    -- Hint: You can\
    \ use the string.len function to get\n    -- the length of a string.\n    -- Hint:\
    \ You can use the string.find function to check\n    -- if a character is a part\
    \ of a word.\n    -- Hint: You can use the string.sub function to get\n    --\
    \ the last character of a string.\n    -- Hint: You can use the string.len function\
    \ to get\n    -- the length of a string.\n    -- Hint: You can use the string.find\
    \ function to check\n    -- if a character is a part of a word.\n    -- Hint:\
    \ You can use the string.sub function to get\n    -- the last character of a string.\n\
    \    -- Hint: You can use the string.len function to get\n    -- the length of\
    \ a string.\n    -- Hint: You can use the string.find function to check\n    --\
    \ if a character is a part of a word.\n    -- Hint: You can use the string.sub\
    \ function to get\n    -- the last character of a string.\n    -- Hint: You can\
    \ use the string.len function to get\n    -- the length of a string.\n    -- Hint:\
    \ You can use the string.find function to check\n    -- if a character is a part\
    \ of a word.\n    -- Hint: You can use the string.sub function to get\n    --\
    \ the last character of a string.\n    -- Hint: You can use the string.len function\
    \ to get\n    -- the length of\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq_1bijy0.lua:70: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement the function\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a68smg5.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp9a68smg5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1a2xnpo.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpu1a2xnpo.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    return last_char:match('%a') and not txt:match('%a%s$')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9axsnqyk.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9axsnqyk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Write your code here\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ex2gbmb.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ex2gbmb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswergufz.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpswergufz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    return last_char:match('%a') and not txt:match('%s' .. last_char .. '$')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlq0o43o.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxlq0o43o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl54dt9g9.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpl54dt9g9.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbicsp3ve.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpbicsp3ve.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh82ebru.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmphh82ebru.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjyk7q3e.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpgjyk7q3e.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match function.\n    -- Hint: You can use\
    \ the string.sub function.\n    -- Hint: You can use the string.len function.\n\
    \    -- Hint: You can use the string.find function.\n    -- Hint: You can use\
    \ the string.gmatch function.\n    -- Hint: You can use the string.gsub function.\n\
    \    -- Hint: You can use the string.format function.\n    -- Hint: You can use\
    \ the string.char function.\n    -- Hint: You can use the string.byte function.\n\
    \    -- Hint: You can use the string.reverse function.\n    -- Hint: You can use\
    \ the string.lower function.\n    -- Hint: You can use the string.upper function.\n\
    \    -- Hint: You can use the string.rep function.\n    -- Hint: You can use the\
    \ string.gfind function.\n    -- Hint: You can use the string.dump function.\n\
    \    -- Hint: You can use the string.find function.\n    -- Hint: You can use\
    \ the string.match function.\n    -- Hint: You can use the string.gsub function.\n\
    \    -- Hint: You can use the string.sub function.\n    -- Hint: You can use the\
    \ string.len function.\n    -- Hint: You can use the string.find function.\n \
    \   -- Hint: You can use the string.gmatch function.\n    -- Hint: You can use\
    \ the string.gsub function.\n    -- Hint: You can use the string.format function.\n\
    \    -- Hint: You can use the string.char function.\n    -- Hint: You can use\
    \ the string.byte function.\n    -- Hint: You can use the string.reverse function.\n\
    \    -- Hint: You can use the string.lower function.\n    -- Hint: You can use\
    \ the string.upper function.\n    -- Hint: You can use the string.rep function.\n\
    \    -- Hint: You can use the string.gfind function.\n    -- Hint: You can use\
    \ the string.dump function.\n    -- Hint: You can use the string.find function.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp52qi2999.lua:65: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio618gio.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpio618gio.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- TODO: Implement this function.\n\
    \    -- Hint: You can use the string.match function.\n    -- Hint: You can use\
    \ the string.find function.\n    -- Hint: You can use the string.sub function.\n\
    \    -- Hint: You can use the string.len function.\n    -- Hint: You can use the\
    \ string.gmatch function.\n    -- Hint: You can use the string.gsub function.\n\
    \    -- Hint: You can use the string.reverse function.\n    -- Hint: You can use\
    \ the string.format function.\n    -- Hint: You can use the string.char function.\n\
    \    -- Hint: You can use the string.byte function.\n    -- Hint: You can use\
    \ the string.rep function.\n    -- Hint: You can use the string.upper function.\n\
    \    -- Hint: You can use the string.lower function.\n    -- Hint: You can use\
    \ the string.dump function.\n    -- Hint: You can use the string.gfind function.\n\
    \    -- Hint: You can use the string.match function.\n    -- Hint: You can use\
    \ the string.gsub function.\n    -- Hint: You can use the string.find function.\n\
    \    -- Hint: You can use the string.len function.\n    -- Hint: You can use the\
    \ string.sub function.\n    -- Hint: You can use the string.reverse function.\n\
    \    -- Hint: You can use the string.format function.\n    -- Hint: You can use\
    \ the string.char function.\n    -- Hint: You can use the string.byte function.\n\
    \    -- Hint: You can use the string.rep function.\n    -- Hint: You can use the\
    \ string.upper function.\n    -- Hint: You can use the string.lower function.\n\
    \    -- Hint: You can use the string.dump function.\n    -- Hint: You can use\
    \ the string.gfind function.\n    -- Hint: You can use the string.gmatch function.\n\
    \    -- Hint: You can use the string.gsub function.\n    -- Hint: You can use\
    \ the string.find function.\n    -- Hint: You can use the string.len function.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpur3k60dl.lua:65: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
