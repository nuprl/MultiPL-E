---
name: HumanEval_154_cycpattern_check
language: lua
results:
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobxkc0on.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobxkc0on.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local s = b .. b
        return s:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjfn9ef1.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjjfn9ef1.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_first_char = b:sub(1, 1)
        local b_last_char = b:sub(len_b, len_b)
        local b_first_char_pos = a:find(b_first_char)
        local b_last_char_pos = a:find(b_last_char)
        if b_first_char_pos == nil or b_last_char_pos == nil then
            return false
        end
        local b_first_char_pos_in_a = b_first_char_pos
        local b_last_char_pos_in_a = b_last_char_pos
        while true do
            local b_first_char_pos_in_a_next = b_first_char_pos_in_a + 1
            if b_first_char_pos_in_a_next > len_a then
                b_first_char_pos_in_a_next = 1
            end
            if b_first_char_pos_in_a_next == b_last_char_pos_in_a then
                break
            end
            b_first_char_pos_in_a = b_first_char_pos_in_a_next
        end
        local b_last_char_pos_in_a_next = b_last_char_pos_in_a + 1
        if b_last_char_pos_in_a_next > len_a then
            b_last_char_pos_in_a_next = 1
        end
        if b_last_char_pos_in_a_next == b_first_char_pos_in_a then
            return false
        end
        local a_sub_str = a:sub(b_first_char_pos_in_a, b_last_char_pos_in_a)
        if a_sub_str == b then
            return true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zqxmzgr.lua:57:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8zqxmzgr.lua:57: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b_rotated = b
        for i = 1, len do
            if string.find(a, b_rotated) then
                return true
            end
            b_rotated = string.sub(b_rotated, 2) .. string.sub(b_rotated, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local n = #a
      local m = #b
      if n < m then return false end
      local b_ = b .. b
      return b_:find(a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyzaning.lua:26:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsyzaning.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b..b
      for i = 1, len do
        if b:sub(i, i+len-1) == a then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna8wkho7.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpna8wkho7.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local i = 1
        while i <= len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcms_ks1c.lua:32:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcms_ks1c.lua:32: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      if #a < #b then return false end
      local b_len = #b
      local a_len = #a
      local b_hash = hash(b)
      local a_hash = hash(a:sub(1, b_len))
      local a_hash_prev = a_hash
      for i = 1, a_len - b_len do
        a_hash = hash(a:sub(i + 1, i + b_len), a_hash_prev, a:sub(i, i))
        if a_hash == b_hash then
          return true
        end
        a_hash_prev = a_hash
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4tgb8erh.lua:18:
    attempt to call a nil value (global 'hash')\nstack traceback:\n\t/tmp/tmp4tgb8erh.lua:18:
    in local 'candidate'\n\t/tmp/tmp4tgb8erh.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        for i = 1, len do
            if string.find(a, b:sub(i, i + len - 1)) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42xcz2cm.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp42xcz2cm.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local b_len = #b
      local a_len = #a
      if b_len > a_len then
        return false
      end
      local b_first = b:sub(1, 1)
      local b_last = b:sub(b_len, b_len)
      local b_first_idx = a:find(b_first)
      local b_last_idx = a:find(b_last)
      if b_first_idx == nil or b_last_idx == nil then
        return false
      end
      if b_first_idx > b_last_idx then
        return false
      end
      local a_sub = a:sub(b_first_idx, b_last_idx)
      local a_sub_len = #a_sub
      if a_sub_len < b_len then
        return false
      end
      local a_sub_rot = a_sub:sub(b_len - a_sub_len + 1, a_sub_len)
      if a_sub_rot == b then
        return true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatcubzji.lua:46:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpatcubzji.lua:46: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        local a_len = #a
        local a_sub = a:sub(1, b_len)
        if a_sub == b then
            return true
        end
        for i = 1, a_len - b_len do
            a_sub = a_sub:sub(2) .. a:sub(i + b_len, i + b_len)
            if a_sub == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zslvs5k.lua:36:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3zslvs5k.lua:36: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        return b:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6zjqahb.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm6zjqahb.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local a_len = #a
      local b_len = #b
      if a_len < b_len then
        return false
      end
      local a_idx = 1
      local b_idx = 1
      while a_idx <= a_len do
        if a:sub(a_idx, a_idx + b_len - 1) == b then
          return true
        end
        a_idx = a_idx + 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdj9g_rd.lua:37:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmprdj9g_rd.lua:37: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len_a = #a
      local len_b = #b
      if len_a < len_b then
        return false
      end
      local b_first = b:sub(1, 1)
      local b_last = b:sub(len_b, len_b)
      local b_first_pos = a:find(b_first)
      local b_last_pos = a:find(b_last)
      if b_first_pos == nil or b_last_pos == nil then
        return false
      end
      if b_first_pos > b_last_pos then
        return false
      end
      local a_sub = a:sub(b_first_pos, b_last_pos)
      local a_sub_len = #a_sub
      if a_sub_len < len_b then
        return false
      end
      local a_sub_first = a_sub:sub(1, 1)
      local a_sub_last = a_sub:sub(a_sub_len, a_sub_len)
      if a_sub_first ~= b_first or a_sub_last ~= b_last then
        return false
      end
      local a_sub_mid = a_sub:sub(2, a_sub_len - 1)
      local b_mid = b:sub(2, len_b - 1)
      return a_sub_mid:find(b_mid) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbuxco65.lua:48:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmphbuxco65.lua:48: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_v4us6t.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg_v4us6t.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        for i = 1, len do
            if b:sub(i, i + len - 1) == a then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbedar8jq.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbedar8jq.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local function check(s)
        return string.find(a, s)
      end
      for i = 1, len do
        if check(b) then return true end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local bb = b .. b
      return bb:find(a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9yq2sy7.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx9yq2sy7.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      for i = 1, len do
        if b:sub(i, i + len - 1) == a then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qyclvhq.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5qyclvhq.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b..b
      local i = 1
      while i <= len do
        if string.find(a, b:sub(i, i+len-1)) then
          return true
        end
        i = i + 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      return b:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr2knlwz.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmphr2knlwz.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local bb = b..b
      return bb:find(a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoivqrm8g.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoivqrm8g.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local c = b .. b
        return c:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo6ao96t.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbo6ao96t.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local bb = b .. b
      local i = 1
      while i <= len do
        local j = 1
        local k = i
        while j <= len and bb:sub(k, k) == b:sub(j, j) do
          j = j + 1
          k = k + 1
        end
        if j > len then
          return true
        end
        i = i + 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_iqqro7.lua:36:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_iqqro7.lua:36: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_rot = b
        for i = 1, len_b do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
            if string.find(a, c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if #a < #b then
            return false
        end
        local b_len = #b
        for i = 1, #a - b_len + 1 do
            if a:sub(i, i + b_len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43e_shk3.lua:33:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp43e_shk3.lua:33: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local function rotate(s)
        return s:sub(2, len) .. s:sub(1, 1)
      end
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = rotate(b)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local a_len = #a
        local b_len = #b
        if a_len < b_len then
            return false
        end
        local a_hash = 0
        local b_hash = 0
        local hash_base = 256
        local hash_mod = 2^32 - 1
        local hash_pow = 1
        for i = 1, b_len do
            a_hash = (a_hash * hash_base + a:byte(i)) % hash_mod
            b_hash = (b_hash * hash_base + b:byte(i)) % hash_mod
            hash_pow = (hash_pow * hash_base) % hash_mod
        end
        for i = 1, a_len - b_len + 1 do
            if a_hash == b_hash then
                local j = 1
                while j <= b_len and a:byte(i + j - 1) == b:byte(j) do
                    j = j + 1
                end
                if j > b_len then
                    return true
                end
            end
            if i < a_len - b_len + 1 then
                a_hash = (a_hash * hash_base - a:byte(i) * hash_pow + a:byte(i + b_len)) % hash_mod
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs4m0gfk.lua:53:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmphs4m0gfk.lua:53: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local i = 1
        while i <= len do
            if string.find(a, b) then
                return true
            end
            b = string.sub(b, 2) .. string.sub(b, 1, 1)
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local function rotate(s)
        return s:sub(2) .. s:sub(1, 1)
      end
      local function is_substring(a, b)
        return a:find(b) ~= nil
      end
      local function is_rotation(a, b)
        return is_substring(a, b)
      end
      local function is_any_rotation(a, b)
        local r = b
        for i = 1, #b do
          if is_rotation(a, r) then
            return true
          end
          r = rotate(r)
        end
        return false
      end
      return is_any_rotation(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        for i = 1, len do
            if b:sub(i, i + len - 1) == a then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp547fb353.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp547fb353.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local function rotate(a)
        return a:sub(2) .. a:sub(1, 1)
      end
      local function is_substring(a, b)
        return a:find(b) ~= nil
      end
      local function is_rotation(a, b)
        return is_substring(a, b) or is_substring(a, rotate(b))
      end
      return is_rotation(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlvczagq.lua:33:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqlvczagq.lua:33: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_p8o99n.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9_p8o99n.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local function is_substring(a, b)
        local function is_prefix(a, b)
          return string.sub(a, 1, string.len(b)) == b
        end
        return is_prefix(a, b) or is_substring(string.sub(a, 2), b)
      end
      local function rotate(a)
        return string.sub(a, 2) .. string.sub(a, 1, 1)
      end
      local function is_rotation(a, b)
        return is_substring(a, b) or is_rotation(rotate(a), b)
      end
      return is_rotation(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwobi4faq.lua:17:
    stack overflow\nstack traceback:\n\t/tmp/tmpwobi4faq.lua:17: in local 'is_prefix'\n\t/tmp/tmpwobi4faq.lua:19:
    in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19: in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19:
    in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19: in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19:
    in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19: in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19:
    in upvalue 'is_substring'\n\t/tmp/tmpwobi4faq.lua:19: in upvalue 'is_substring'\n\t...\n\t/tmp/tmpwobi4faq.lua:25:
    in function </tmp/tmpwobi4faq.lua:24>\n\t(...tail calls...)\n\t/tmp/tmpwobi4faq.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.160 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local function rotate(str)
        return string.sub(str, 2) .. string.sub(str, 1, 1)
      end
      local function is_substring(a, b)
        return string.find(a, b) ~= nil
      end
      local function is_rotation(a, b)
        if #a ~= #b then
          return false
        end
        for i = 1, #a do
          if is_substring(a, b) then
            return true
          end
          b = rotate(b)
        end
        return false
      end
      return is_rotation(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujeawin4.lua:40:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpujeawin4.lua:40: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = string.len(b)
        local b = b .. b
        return string.find(a, b) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9u0oorh9.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9u0oorh9.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if string.sub(a, i, i + len - 1) == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqub_pl02.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqub_pl02.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local a_len = #a
      local b_len = #b
      local b_rot = b
      for i = 1, len do
        if string.find(a, b_rot) then
          return true
        end
        b_rot = string.sub(b_rot, 2, b_len) .. string.sub(b_rot, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local a_len = #a
      if len > a_len then
        return false
      end
      local a_sub = a:sub(1, len)
      if a_sub == b then
        return true
      end
      local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1, 1)
      return cycpattern_check(a:sub(2), b) or cycpattern_check(a:sub(2), a_sub_rot)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxmb27rn.lua:34:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcxmb27rn.lua:34: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, 1, len) == b then
                return true
            end
            b = string.sub(b, 2) .. string.sub(b, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujirgo2u.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpujirgo2u.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        return b:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuapt1wiw.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuapt1wiw.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        local a_len = #a
        local a_sub = a:sub(1, b_len)
        local a_sub_len = #a_sub
        local a_sub_rot = a_sub:sub(a_sub_len, a_sub_len) .. a_sub:sub(1, a_sub_len - 1)
        local a_sub_rot_len = #a_sub_rot
        local a_sub_rot_sub = a_sub_rot:sub(1, b_len)
        local a_sub_rot_sub_len = #a_sub_rot_sub
        local a_sub_rot_sub_rot = a_sub_rot_sub:sub(a_sub_rot_sub_len, a_sub_rot_sub_len) .. a_sub_rot_sub:sub(1, a_sub_rot_sub_len - 1)
        local a_sub_rot_sub_rot_len = #a_sub_rot_sub_rot
        local a_sub_rot_sub_rot_sub = a_sub_rot_sub_rot:sub(1, b_len)
        local a_sub_rot_sub_rot_sub_len = #a_sub_rot_sub_rot_sub
        local a_sub_rot_sub_rot_sub_rot = a_sub_rot_sub_rot_sub:sub(a_sub_rot_sub_rot_sub_len, a_sub_rot_sub_rot_sub_len) .. a_sub_rot_sub_rot_sub:sub(1, a_sub_rot_sub_rot_sub_len - 1)
        local a_sub_rot_sub_rot_sub_rot_len = #a_sub_rot_sub_rot_sub_rot
        local a_sub_rot_sub_rot_sub_rot_sub = a_sub_rot_sub_rot_sub_rot:sub(1, b_len)
        local a_sub_rot_sub_rot_sub_rot_sub_len = #a_sub_rot_sub_rot_sub_rot_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmprmu3igfd.lua:43: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, 1, len) == b then
                return true
            end
            b = string.sub(b, 2) .. string.sub(b, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79bbllfa.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp79bbllfa.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydpwunuj.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpydpwunuj.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        local c = b .. b
        local i = 1
        while i <= len_a do
            local j = 1
            while j <= len_b do
                if a:sub(i, i + j - 1) == c:sub(j, j + j - 1) then
                    return true
                end
                j = j + 1
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyblujjz.lua:35:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsyblujjz.lua:35: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local s = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(s) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local s = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(s) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if string.sub(a, 1, len) == b then
          return true
        end
        b = string.sub(b, 2) .. string.sub(b, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxew9_dt6.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxew9_dt6.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b_rot = b
        for i = 1, len do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if string.sub(a, i, i + len - 1) == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f4vcbwt.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3f4vcbwt.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len_a = #a
      local len_b = #b
      if len_a < len_b then
        return false
      end
      local b_rot = b
      for i = 1, len_b do
        if string.find(a, b_rot) then
          return true
        end
        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local a_len = #a
      if len > a_len then
        return false
      end
      local a_sub = a:sub(1, len)
      local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1, 1)
      if a_sub == b then
        return true
      end
      local i = 1
      while i < a_len do
        if a_sub_rot == b then
          return true
        end
        i = i + 1
        a_sub_rot = a_sub_rot:sub(2) .. a_sub_rot:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77q1n2en.lua:40:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp77q1n2en.lua:40: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b_rot = b
      for i = 1, len do
        b_rot = b_rot:sub(2) .. b_rot:sub(1, 1)
        if a:find(b_rot) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local a_len = #a
      if len > a_len then
        return false
      end
      local a_sub = a:sub(1, len)
      if a_sub == b then
        return true
      end
      local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1, 1)
      return cycpattern_check(a:sub(2), b) or cycpattern_check(a_sub_rot .. a:sub(len + 1), b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90svrbh7.lua:20:
    stack overflow\nstack traceback:\n\t/tmp/tmp90svrbh7.lua:20: in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25: in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25: in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25: in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmp90svrbh7.lua:25: in upvalue 'cycpattern_check'\n\t...\n\t/tmp/tmp90svrbh7.lua:25:
    in local 'candidate'\n\t/tmp/tmp90svrbh7.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.140 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local first = b:sub(1, 1)
        local last = b:sub(len, len)
        local new_b = last .. b:sub(1, len - 1)
        if a:find(new_b) then
            return true
        end
        return cycpattern_check(a, new_b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b, 1, true) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if #a < #b then
            return false
        end
        local b_len = #b
        local b_first = b:sub(1, 1)
        local b_last = b:sub(b_len, b_len)
        local b_first_idx = a:find(b_first)
        local b_last_idx = a:find(b_last)
        if b_first_idx == nil or b_last_idx == nil then
            return false
        end
        local a_len = #a
        local a_first = a:sub(1, 1)
        local a_last = a:sub(a_len, a_len)
        local a_first_idx = b:find(a_first)
        local a_last_idx = b:find(a_last)
        if a_first_idx == nil or a_last_idx == nil then
            return false
        end
        if b_first_idx < b_last_idx then
            if a_first_idx < a_last_idx then
                return a:find(b) ~= nil
            else
                return a:find(b:sub(a_last_idx, b_len) .. b:sub(1, a_first_idx - 1)) ~= nil
            end
        else
            if a_first_idx < a_last_idx then
                return a:find(b:sub(b_last_idx, b_len) .. b:sub(1, b_first_idx - 1)) ~= nil
            else
                return a:find(b) ~= nil
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj90pa9se.lua:53:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj90pa9se.lua:53: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local function is_substring(a, b)
            return a:find(b) ~= nil
        end
        local function rotate(a)
            return a:sub(2) .. a:sub(1, 1)
        end
        local function rotate_n(a, n)
            for i = 1, n do
                a = rotate(a)
            end
            return a
        end
        local function rotate_until(a, b)
            local n = 0
            while not is_substring(a, b) do
                a = rotate(a)
                n = n + 1
            end
            return n
        end
        local function rotate_until_substring(a, b)
            local n = 0
            while not is_substring(a, b) do
                a = rotate(a)
                n = n + 1
            end
            return n, a
        end
        local function rotate_until_substring_or_end(a, b)
            local n = 0
            while not is_substring(a, b) and n < #a do
                a = rotate(a)
                n = n + 1
            end
            return n, a
        end
        local function rotate_until_substring_or_end_or_substring(a, b)
            local n = 0
            while not is_substring(a, b) and n < #a do
                a = rotate(a)
                n = n + 1
            end
            return n, a
        end
        local function rotate_until_substring_or_end_or_substring_or_end(a, b)
            local n = 0
            while not is_substring(a, b) and n < #a do
                a = rotate(a)
                n = n + 1
            end
            return n, a
        end
        local function rotate_until_substring_or_end_or_substring_or_end_or_substring(a, b)
            local n = 0
            while not is_substring(a, b) and n < #a do
                a = rotate(a)
                n =
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_ex1jtox.lua:72: unexpected symbol near ''=''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local bb = b .. b
        return bb:find(a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd90gayqp.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd90gayqp.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if string.sub(a, i, i + len - 1) == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2evrz57.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw2evrz57.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if #a < #b then
            return false
        end
        local b_len = #b
        local b_first = b:sub(1, 1)
        local b_last = b:sub(b_len, b_len)
        local b_first_pos = a:find(b_first)
        local b_last_pos = a:find(b_last)
        if b_first_pos == nil or b_last_pos == nil then
            return false
        end
        if b_first_pos > b_last_pos then
            local b_first_pos_1 = a:find(b_first, b_last_pos)
            if b_first_pos_1 == nil then
                return false
            end
            b_first_pos = b_first_pos_1
        end
        local a_sub = a:sub(b_first_pos, b_last_pos)
        if a_sub == b then
            return true
        end
        local a_sub_len = #a_sub
        local a_sub_first = a_sub:sub(1, 1)
        local a_sub_last = a_sub:sub(a_sub_len, a_sub_len)
        local a_sub_first_pos = b:find(a_sub_first)
        local a_sub_last_pos = b:find(a_sub_last)
        if a_sub_first_pos == nil or a_sub_last_pos == nil then
            return false
        end
        if a_sub_first_pos > a_sub_last_pos then
            local a_sub_first_pos_1 = b:find(a_sub_first, a_sub_last_pos)
            if a_sub_first_pos_1 == nil then
                return false
            end
            a_sub_first_pos = a_sub_first_pos_1
        end
        local b_sub = b:sub(a_sub_first_pos, a_sub_last_pos)
        if b_sub == a_sub then
            return true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fj3p6my.lua:65:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5fj3p6my.lua:65: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local a_len = #a
        if len > a_len then
            return false
        end
        local b_first = b:sub(1, 1)
        local b_last = b:sub(len, len)
        local a_first = a:sub(1, 1)
        local a_last = a:sub(a_len, a_len)
        if b_first == a_first and b_last == a_last then
            local a_sub = a:sub(2, a_len - 1)
            local b_sub = b:sub(2, len - 1)
            if a_sub:find(b_sub) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxyuxvmx.lua:37:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmphxyuxvmx.lua:37: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      for i = 1, len do
        if string.find(a, string.sub(b, i, i + len - 1)) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      for i = 1, len do
        if string.find(a, string.sub(b, i, i + len - 1)) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq30wgk6f.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq30wgk6f.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local i = 1
        while i <= len_a do
            local j = 1
            while j <= len_b do
                if a:sub(i, i) ~= b:sub(j, j) then
                    break
                end
                i = i + 1
                j = j + 1
                if i > len_a then
                    i = 1
                end
                if j > len_b then
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        for i = 1, b_len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local sub = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
            if string.find(a, sub) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local a = a:sub(1, len)
      if a == b then
        return true
      end
      for i = 1, len do
        a = a:sub(2) .. a:sub(1, 1)
        if a == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzokjqw9_.lua:33:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzokjqw9_.lua:33: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = string.len(b)
        local b = b .. b
        return string.find(a, b) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3a3t1za.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq3a3t1za.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local l = #b
        for i = 1, l do
            if string.sub(a, i, i + l - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6v8ifr5.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf6v8ifr5.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len_a = #a
      local len_b = #b
      if len_a < len_b then
        return false
      end
      local b_first = b:sub(1, 1)
      local b_last = b:sub(len_b, len_b)
      local b_middle = b:sub(2, len_b - 1)
      local b_first_idx = a:find(b_first)
      if b_first_idx == nil then
        return false
      end
      local b_last_idx = a:find(b_last, b_first_idx + 1)
      if b_last_idx == nil then
        return false
      end
      local b_middle_idx = a:find(b_middle, b_first_idx + 1)
      if b_middle_idx == nil then
        return false
      end
      if b_middle_idx < b_last_idx then
        return true
      end
      local b_first_idx_2 = a:find(b_first, b_last_idx + 1)
      if b_first_idx_2 == nil then
        return false
      end
      local b_last_idx_2 = a:find(b_last, b_first_idx_2 + 1)
      if b_last_idx_2 == nil then
        return false
      end
      local b_middle_idx_2 = a:find(b_middle, b_first_idx_2 + 1)
      if b_middle_idx_2 == nil then
        return false
      end
      if b_middle_idx_2 < b_last_idx_2 then
        return true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzw2_cfh.lua:59:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvzw2_cfh.lua:59: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        local a_len = #a
        if b_len > a_len then
            return false
        end
        local a_sub = a:sub(1, b_len)
        if a_sub == b then
            return true
        end
        local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1, 1)
        return cycpattern_check(a:sub(2), b) or cycpattern_check(a_sub_rot .. a:sub(b_len + 1), b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfn0b7dxt.lua:20:
    stack overflow\nstack traceback:\n\t/tmp/tmpfn0b7dxt.lua:20: in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25: in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25: in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25: in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25:
    in upvalue 'cycpattern_check'\n\t/tmp/tmpfn0b7dxt.lua:25: in upvalue 'cycpattern_check'\n\t...\n\t/tmp/tmpfn0b7dxt.lua:25:
    in local 'candidate'\n\t/tmp/tmpfn0b7dxt.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.140 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_rot = b
        for i = 1, len_b do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      return b:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tcpsebr.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0tcpsebr.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
            if string.find(a, c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = string.len(b)
        local b = b .. b
        return string.find(a, b) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ttom1q1.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0ttom1q1.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if string.sub(a, 1, len) == b then
          return true
        end
        b = string.sub(b, 2) .. string.sub(b, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehvr33g6.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpehvr33g6.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local m, n = #a, #b
        if m < n then return false end
        local function rotate(s)
            return s:sub(2) .. s:sub(1, 1)
        end
        for i = 1, n do
            if a:find(b) then return true end
            b = rotate(b)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local function rotate(str)
            return str:sub(2) .. str:sub(1, 1)
        end
        local function is_substring(a, b)
            return a:find(b) ~= nil
        end
        local function is_rotation(a, b)
            local rotated = b
            for i = 1, #b do
                if is_substring(a, rotated) then
                    return true
                end
                rotated = rotate(rotated)
            end
            return false
        end
        return is_rotation(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        local b_rot = b
        for i = 1, b_len do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if #a < #b then
            return false
        end
        for i = 1, #a do
            if a:sub(i, i + #b - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaon8wcip.lua:32:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaon8wcip.lua:32: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len_a = #a
      local len_b = #b
      if len_a < len_b then
        return false
      end
      local b_first = b:sub(1, 1)
      local b_last = b:sub(len_b, len_b)
      local b_first_pos = a:find(b_first)
      local b_last_pos = a:find(b_last)
      if b_first_pos == nil or b_last_pos == nil then
        return false
      end
      if b_first_pos > b_last_pos then
        return false
      end
      local a_sub = a:sub(b_first_pos, b_last_pos)
      if len_a - len_b > 0 then
        a_sub = a_sub .. a:sub(1, len_a - len_b)
      end
      return a_sub:find(b) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf3ror2g.lua:41:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbf3ror2g.lua:41: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        return b:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55_wx7ww.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp55_wx7ww.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
            if string.find(a, c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        for i = 1, b_len do
            local b_rot = b:sub(i, b_len) .. b:sub(1, i - 1)
            if a:find(b_rot) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      for i = 1, len do
        if b:sub(i, i + len - 1) == a then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs4b5238.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmprs4b5238.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len_a = #a
      local len_b = #b
      if len_a < len_b then
        return false
      end
      local b_first = b:sub(1, 1)
      local b_last = b:sub(len_b, len_b)
      local b_first_pos = a:find(b_first)
      local b_last_pos = a:find(b_last)
      if b_first_pos == nil or b_last_pos == nil then
        return false
      end
      local b_first_pos_next = b_first_pos + 1
      local b_last_pos_next = b_last_pos + 1
      if b_first_pos_next > len_a then
        b_first_pos_next = 1
      end
      if b_last_pos_next > len_a then
        b_last_pos_next = 1
      end
      local a_sub = a:sub(b_first_pos_next, b_last_pos_next)
      if a_sub == b then
        return true
      end
      return cycpattern_check(a, b:sub(2, len_b) .. b:sub(1, 1))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      for i = 1, len do
        if b:sub(i, i + len - 1) == a then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzln33vf.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxzln33vf.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b..b
        for i = 1, len do
            if b:sub(i, i+len-1) == a then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rezigr4.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9rezigr4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local first = b:sub(1, 1)
      local last = b:sub(len, len)
      local b_rot = b:sub(2, len) .. first
      local b_rot_2 = b:sub(len - 1, len) .. b:sub(1, len - 2)
      local b_rot_3 = b:sub(len - 2, len) .. b:sub(1, len - 3)
      local b_rot_4 = b:sub(len - 3, len) .. b:sub(1, len - 4)
      local b_rot_5 = b:sub(len - 4, len) .. b:sub(1, len - 5)
      local b_rot_6 = b:sub(len - 5, len) .. b:sub(1, len - 6)
      local b_rot_7 = b:sub(len - 6, len) .. b:sub(1, len - 7)
      local b_rot_8 = b:sub(len - 7, len) .. b:sub(1, len - 8)
      local b_rot_9 = b:sub(len - 8, len) .. b:sub(1, len - 9)
      local b_rot_10 = b:sub(len - 9, len) .. b:sub(1, len - 10)
      local b_rot_11 = b:sub(len - 10, len) .. b:sub(1, len - 11)
      local b_rot_12 = b:sub(len - 11, len) .. b:sub(1, len - 12)
      local b_rot_13 = b:sub(len - 12, len) .. b:sub(1, len - 13)
      local b_rot_14 = b:sub(len - 13, len) .. b:sub(1, len - 14)
      local b_rot_15 = b:sub(len - 14, len) .. b:sub(1, len - 15)
      local b_rot_16 = b:sub(len - 15, len) .. b:sub(1, len - 16)
      local b_rot_17 = b:sub
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpki_p115l.lua:35: function arguments expected near ''lu''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b_rot = b
      for i = 1, len do
        b_rot = b_rot:sub(2) .. b_rot:sub(1, 1)
        if a:find(b_rot) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local function rotate(str)
        return str:sub(2) .. str:sub(1, 1)
      end
      if a:find(b) then
        return true
      else
        local rotated = rotate(b)
        while rotated ~= b do
          if a:find(rotated) then
            return true
          end
          rotated = rotate(rotated)
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local i = 1
        while i <= len_a do
            local j = 1
            while j <= len_b do
                if a:sub(i, i) ~= b:sub(j, j) then
                    break
                end
                i = i + 1
                j = j + 1
                if i > len_a then
                    i = 1
                end
                if j > len_b then
                    return true
                end
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        for i = 1, len_a do
            if a:sub(i, i + len_b - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzhbfm2u.lua:34:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmprzhbfm2u.lua:34: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if #a < #b then
            return false
        end
        local b_len = #b
        local a_len = #a
        local b_start = 1
        local b_end = b_len
        local a_start = 1
        local a_end = a_len
        local b_rot = b
        while b_end <= a_len do
            if string.sub(a, a_start, a_end) == b_rot then
                return true
            end
            b_start = b_start + 1
            b_end = b_end + 1
            a_start = a_start + 1
            a_end = a_end + 1
            b_rot = string.sub(b, b_start, b_end) .. string.sub(b, 1, b_start - 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d7zxyla.lua:42:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8d7zxyla.lua:42: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local b_len = #b
      local a_len = #a
      if b_len > a_len then
        return false
      end
      for i = 1, a_len do
        local sub = a:sub(i, i + b_len - 1)
        if sub == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6mpolpq.lua:35:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc6mpolpq.lua:35: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local s = b .. b
        return s:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7l5tyie_.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7l5tyie_.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local n = #a
        local m = #b
        local i = 1
        local j = 1
        local k = 1
        local l = 1
        local flag = 0
        while i <= n do
            if a:sub(i, i) == b:sub(j, j) then
                j = j + 1
                i = i + 1
                if j == m + 1 then
                    return true
                end
            else
                i = i + 1
                j = 1
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ngpyorb.lua:43:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7ngpyorb.lua:43: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local function check(a, b)
        local function check_substr(a, b)
          local function check_char(a, b)
            local function check_char_substr(a, b)
              if #b == 0 then
                return true
              elseif #a == 0 then
                return false
              elseif a:sub(1, 1) == b:sub(1, 1) then
                return check_char_substr(a:sub(2), b:sub(2))
              else
                return check_char_substr(a:sub(2), b)
              end
            end
            return check_char_substr(a, b)
          end
          if #b == 0 then
            return true
          elseif #a == 0 then
            return false
          elseif check_char(a, b:sub(1, 1)) then
            return check_substr(a, b:sub(2))
          else
            return check_substr(a, b)
          end
        end
        return check_substr(a, b)
      end
      if #a < #b then
        return false
      elseif check(a, b) then
        return true
      else
        return cycpattern_check(a:sub(2), b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94j90pto.lua:55:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp94j90pto.lua:55: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local a_len = #a
        local b_len = #b
        if a_len < b_len then
            return false
        end
        local b_first_char = b:sub(1, 1)
        local b_last_char = b:sub(b_len, b_len)
        local b_first_char_idx = a:find(b_first_char)
        local b_last_char_idx = a:find(b_last_char)
        if b_first_char_idx == nil or b_last_char_idx == nil then
            return false
        end
        local b_first_char_idx_end = b_first_char_idx + b_len - 1
        local b_last_char_idx_end = b_last_char_idx + b_len - 1
        if b_first_char_idx_end > a_len then
            b_first_char_idx_end = b_first_char_idx_end - a_len
        end
        if b_last_char_idx_end > a_len then
            b_last_char_idx_end = b_last_char_idx_end - a_len
        end
        local b_first_char_idx_end_str = a:sub(b_first_char_idx, b_first_char_idx_end)
        local b_last_char_idx_end_str = a:sub(b_last_char_idx, b_last_char_idx_end)
        if b_first_char_idx_end_str == b or b_last_char_idx_end_str == b then
            return true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprb3_i7si.lua:49:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmprb3_i7si.lua:49: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbg2mvsp3.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbg2mvsp3.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b = b .. b
      return b:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt7c_5by.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjt7c_5by.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if a:len() < b:len() then
            return false
        end
        local b_len = b:len()
        local a_len = a:len()
        local a_sub = a:sub(1, b_len)
        local a_sub_len = a_sub:len()
        local a_sub_rot = a_sub:sub(2, a_sub_len) .. a_sub:sub(1, 1)
        if a_sub == b or a_sub_rot == b then
            return true
        end
        for i = 2, a_len - b_len do
            a_sub = a_sub:sub(2, a_sub_len) .. a:sub(i + b_len - 1, i + b_len - 1)
            a_sub_rot = a_sub:sub(2, a_sub_len) .. a_sub:sub(1, 1)
            if a_sub == b or a_sub_rot == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rds9lcc.lua:44:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6rds9lcc.lua:44: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local a = a:lower()
        local b = b:lower()
        for i = 1, len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local a_len = #a
      local a_sub = a:sub(1, len)
      if a_sub == b then
        return true
      end
      for i = 1, a_len - len do
        a_sub = a_sub:sub(2) .. a:sub(i + len, i + len)
        if a_sub == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw7cbd54.lua:36:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsw7cbd54.lua:36: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_rot = b
        for i = 1, len_b do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if c == a then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp954ozmmm.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp954ozmmm.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_rot = b
        for i = 1, len_b do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local i = 1
        while i <= len_a do
            if a:sub(i, i + len_b - 1) == b then
                return true
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq7tu4qy.lua:36:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdq7tu4qy.lua:36: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local bb = b .. b
      return bb:find(a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpti_awpd9.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpti_awpd9.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b, 1, true) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local a_len = #a
        if len > a_len then
            return false
        end
        local b_first = b:sub(1, 1)
        local b_last = b:sub(len, len)
        local a_first = a:sub(1, 1)
        local a_last = a:sub(a_len, a_len)
        if b_first == a_first and b_last == a_last then
            local b_first_pos = a:find(b_first)
            local b_last_pos = a:find(b_last)
            if b_first_pos < b_last_pos then
                local b_sub = a:sub(b_first_pos, b_last_pos)
                if b_sub == b then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg256e9l.lua:41:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxg256e9l.lua:41: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local b_len = #b
      local a_len = #a
      local b_rot = b
      for i = 1, b_len do
        if string.find(a, b_rot) then
          return true
        end
        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b_rot = b
        for i = 1, len do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local a_len = #a
        local b_len = #b
        local b_first = b:sub(1, 1)
        local b_last = b:sub(b_len, b_len)
        local b_middle = b:sub(2, b_len - 1)
        if a_len < b_len then
            return false
        end
        if a:find(b) then
            return true
        end
        for i = 1, a_len do
            local a_first = a:sub(i, i)
            if a_first == b_first then
                local a_middle = a:sub(i + 1, i + b_len - 1)
                local a_last = a:sub(i + b_len, i + b_len)
                if a_middle == b_middle and a_last == b_last then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6x1lhwj.lua:46:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk6x1lhwj.lua:46: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        if #a < #b then
            return false
        end
        local bb = b .. b
        return string.find(bb, a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgosv4cuj.lua:26:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgosv4cuj.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if a:find(b) then
          return true
        end
        b = b:sub(2) .. b:sub(1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local l = string.len(b)
      local s = string.sub(b, 2, l) .. string.sub(b, 1, 1)
      while s ~= b do
        if string.find(a, s) then
          return true
        end
        s = string.sub(s, 2, l) .. string.sub(s, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj9bo8pi.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgj9bo8pi.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local n = #a
        local m = #b
        if n < m then
            return false
        end
        local i = 1
        while i <= n do
            if a:sub(i, i + m - 1) == b then
                return true
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp782vrows.lua:36:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp782vrows.lua:36: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b_rot = b
        for i = 1, len do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local function rotate(str)
            return str:sub(2) .. str:sub(1, 1)
        end
        local function is_substring(str, substr)
            return str:find(substr) ~= nil
        end
        local function is_substring_rotated(str, substr)
            local rotated = rotate(substr)
            while rotated ~= substr do
                if is_substring(str, rotated) then
                    return true
                end
                rotated = rotate(rotated)
            end
            return false
        end
        return is_substring_rotated(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekpn0ln1.lua:38:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpekpn0ln1.lua:38: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local bb = b .. b
      return bb:find(a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt__5cklg.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt__5cklg.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local a = a..a
        for i = 1, len do
            local sub = string.sub(b, i, i+len-1)
            if string.find(a, sub) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdjv5h3p.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmphdjv5h3p.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b = b .. b
        for i = 1, len do
            if string.find(a, b:sub(i, i + len - 1)) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local c = b .. b
        return c:find(a) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49826wfz.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp49826wfz.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local b_rot = b
      for i = 1, len do
        if string.find(a, b_rot) then
          return true
        end
        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local a_len = #a
      local b_len = #b
      if a_len < b_len then
        return false
      end
      local b_first = b:sub(1, 1)
      local b_last = b:sub(b_len, b_len)
      local b_first_idx = a:find(b_first)
      local b_last_idx = a:find(b_last)
      if b_first_idx == nil or b_last_idx == nil then
        return false
      end
      local a_sub = a:sub(b_first_idx, b_last_idx)
      if a_sub == b then
        return true
      end
      local a_sub_len = #a_sub
      if a_sub_len < b_len then
        return false
      end
      local a_sub_first = a_sub:sub(1, 1)
      local a_sub_last = a_sub:sub(a_sub_len, a_sub_len)
      local a_sub_first_idx = a_sub:find(a_sub_first)
      local a_sub_last_idx = a_sub:find(a_sub_last)
      if a_sub_first_idx == nil or a_sub_last_idx == nil then
        return false
      end
      local a_sub_sub = a_sub:sub(a_sub_first_idx, a_sub_last_idx)
      if a_sub_sub == b then
        return true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdm2aldv.lua:53:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqdm2aldv.lua:53: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local n = #a
      local m = #b
      if n ~= m then return false end
      local i = 1
      while i <= n do
        if a:sub(i, i+m-1) == b then return true end
        i = i + 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnehy0h45.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnehy0h45.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, i, i + len - 1) == b then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposqwqasd.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmposqwqasd.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = string.len(b)
        local b = b .. b
        for i = 1, len do
            if string.find(a, string.sub(b, i, i + len - 1)) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        local b_rot = b
        for i = 1, len do
            if string.find(a, b_rot) then
                return true
            end
            b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local function rotate(str)
            return str:sub(2) .. str:sub(1, 1)
        end
        local function is_substring(a, b)
            return a:find(b) ~= nil
        end
        local function is_rotation(a, b)
            local rotated = b
            for i = 1, #b do
                if is_substring(a, rotated) then
                    return true
                end
                rotated = rotate(rotated)
            end
            return false
        end
        return is_rotation(a, b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if string.sub(a, 1, len) == b then
                return true
            end
            b = string.sub(b, 2) .. string.sub(b, 1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_ghj1xv.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc_ghj1xv.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            if a:find(b) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_i = 1
        for i = 1, len_a do
            if a:sub(i, i) == b:sub(b_i, b_i) then
                b_i = b_i + 1
                if b_i > len_b then
                    return true
                end
            else
                b_i = 1
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kp95vm1.lua:40:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_kp95vm1.lua:40: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      if len == 0 then return true end
      local bb = b .. b
      return string.find(bb, a, 1, true) ~= nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w2kcx3c.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2w2kcx3c.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local n = #a
        local m = #b
        local i = 1
        local j = 1
        while i <= n and j <= m do
            if a:sub(i, i) == b:sub(j, j) then
                i = i + 1
                j = j + 1
            else
                i = i - j + 2
                j = 1
            end
        end
        if j > m then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xtlid9f.lua:41:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3xtlid9f.lua:41: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len_a = #a
        local len_b = #b
        if len_a < len_b then
            return false
        end
        local b_first = string.sub(b, 1, 1)
        local b_last = string.sub(b, len_b, len_b)
        local b_first_pos = string.find(a, b_first)
        local b_last_pos = string.find(a, b_last)
        if b_first_pos == nil or b_last_pos == nil then
            return false
        end
        local b_first_pos_end = b_first_pos + len_b - 1
        local b_last_pos_end = b_last_pos + len_b - 1
        if b_first_pos_end > len_a then
            b_first_pos_end = b_first_pos_end - len_a
        end
        if b_last_pos_end > len_a then
            b_last_pos_end = b_last_pos_end - len_a
        end
        local b_first_sub = string.sub(a, b_first_pos, b_first_pos_end)
        local b_last_sub = string.sub(a, b_last_pos, b_last_pos_end)
        if b_first_sub == b or b_last_sub == b then
            return true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhdj9wy8.lua:49:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkhdj9wy8.lua:49: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local b_len = #b
        for i = 1, b_len do
            if a:find(b) then
                return true
            end
            b = b:sub(2) .. b:sub(1, 1)
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
        local len = #b
        for i = 1, len do
            local c = b:sub(i, len) .. b:sub(1, i - 1)
            if a:find(c) then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      local aa = a .. a
      for i = 1, len do
        if aa:sub(i, i + len - 1) == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqbc9g4h.lua:31:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyqbc9g4h.lua:31: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = b:sub(i, len) .. b:sub(1, i - 1)
        if a:find(c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        local c = string.sub(b, i, len) .. string.sub(b, 1, i - 1)
        if string.find(a, c) then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    -- >>> cycpattern_check('abcd', 'abd')
    -- false
    -- >>> cycpattern_check('hello', 'ell')
    -- true
    -- >>> cycpattern_check('whassup', 'psus')
    -- false
    -- >>> cycpattern_check('abab', 'baa')
    -- true
    -- >>> cycpattern_check('efef', 'eeff')
    -- false
    -- >>> cycpattern_check('himenss', 'simen')
    -- true
    local function cycpattern_check(a, b)
      local len = #b
      for i = 1, len do
        if string.sub(a, i, i + len - 1) == b then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = cycpattern_check
        lu.assertEquals(candidate('xyzw', 'xyw'), false)
        lu.assertEquals(candidate('yello', 'ell'), true)
        lu.assertEquals(candidate('whattup', 'ptut'), false)
        lu.assertEquals(candidate('efef', 'fee'), true)
        lu.assertEquals(candidate('abab', 'aabb'), false)
        lu.assertEquals(candidate('winemtt', 'tinem'), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62_2h3l3.lua:30:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp62_2h3l3.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
