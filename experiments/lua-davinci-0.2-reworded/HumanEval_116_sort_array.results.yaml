---
name: HumanEval_116_sort_array
language: lua
results:
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsitat40.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpxsitat40.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local c = 0
        while n > 0 do
          c = c + n % 2
          n = math.floor(n / 2)
        end
        return c
      end
      table.sort(arr, function(a, b)
        local oa, ob = count_ones(a), count_ones(b)
        if oa == ob then
          return a < b
        else
          return oa < ob
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07v8q9cm.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp07v8q9cm.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph67se11t.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmph67se11t.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv11j75k.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpqv11j75k.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0hpl9pr.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpv0hpl9pr.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmb3m07k.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpxmb3m07k.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2l_n74l.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmph2l_n74l.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6zk96m_.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpf6zk96m_.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip7fsq58.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpip7fsq58.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iq112ng.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp1iq112ng.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yf3wquh.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp0yf3wquh.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d4qmvo5.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp8d4qmvo5.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + n % 2
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5fnq5ew.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpq5fnq5ew.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2h6xyux_.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp2h6xyux_.lua:13:
    in function </tmp/tmp2h6xyux_.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp2h6xyux_.lua:21:
    in local 'candidate'\n\t/tmp/tmp2h6xyux_.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxus76by.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpzxus76by.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps39sfhjl.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmps39sfhjl.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs220lqa.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpfs220lqa.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpuvgoqm.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpvpuvgoqm.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl12pkxkq.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpl12pkxkq.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('[^1]', ''):len()
        local b_ones = b:gsub('[^1]', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local t = {}
        while n > 0 do
          table.insert(t, n % 2)
          n = math.floor(n / 2)
        end
        return table.concat(t):reverse()
      end
      local t = {}
      for i = 1, #arr do
        t[i] = to_binary(arr[i])
      end
      table.sort(t, cmp)
      for i = 1, #t do
        t[i] = tonumber(t[i], 2)
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_0yhqj0.lua:43:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpz_0yhqj0.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqum9qufg.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpqum9qufg.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local bin = {}
        while n > 0 do
          table.insert(bin, n % 2)
          n = math.floor(n / 2)
        end
        return table.concat(bin):reverse()
      end
      local function to_decimal(bin)
        local n = 0
        for i = 1, bin:len() do
          n = n + (2 ^ (i - 1)) * bin:sub(i, i)
        end
        return n
      end
      local bin_arr = {}
      for i = 1, #arr do
        bin_arr[i] = to_binary(arr[i])
      end
      table.sort(bin_arr, cmp)
      for i = 1, #bin_arr do
        arr[i] = to_decimal(bin_arr[i])
      end
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx27u9of.lua:50:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 1, 1, 5, 3}\nstack traceback:\n\t/tmp/tmpvx27u9of.lua:50:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jy0240v.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp2jy0240v.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ggegvlq.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp4ggegvlq.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp3upn37.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmphp3upn37.lua:13:
    in function </tmp/tmphp3upn37.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmphp3upn37.lua:12:
    in local 'candidate'\n\t/tmp/tmphp3upn37.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a1 = a:count('1')
        local b1 = b:count('1')
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end
      local function to_bin(n)
        local t = {}
        while n > 0 do
          table.insert(t, n % 2)
          n = math.floor(n / 2)
        end
        return table.concat(t):reverse()
      end
      local function to_dec(s)
        local n = 0
        for i = 1, #s do
          n = n * 2 + (s:sub(i, i) == '1' and 1 or 0)
        end
        return n
      end
      local t = {}
      for i = 1, #arr do
        table.insert(t, to_bin(arr[i]))
      end
      table.sort(t, cmp)
      for i = 1, #t do
        t[i] = to_dec(t[i])
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_r0ck8k.lua:13:
    attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmpv_r0ck8k.lua:13:
    in function </tmp/tmpv_r0ck8k.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpv_r0ck8k.lua:40:
    in local 'candidate'\n\t/tmp/tmpv_r0ck8k.lua:50: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local bin = ''
        while n > 0 do
          local r = n % 2
          bin = r .. bin
          n = (n - r) / 2
        end
        return bin
      end
      local function to_decimal(bin)
        local n = 0
        for i = 1, bin:len() do
          n = n + bin:sub(i, i) * 2 ^ (bin:len() - i)
        end
        return n
      end
      local function sort(arr)
        local bin_arr = {}
        for i = 1, #arr do
          bin_arr[i] = to_binary(arr[i])
        end
        table.sort(bin_arr, compare)
        for i = 1, #arr do
          arr[i] = to_decimal(bin_arr[i])
        end
        return arr
      end
      return sort(arr)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp45yh5er.lua:33:
    attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpp45yh5er.lua:33:
    in upvalue 'to_decimal'\n\t/tmp/tmpp45yh5er.lua:44: in function </tmp/tmpp45yh5er.lua:37>\n\t(...tail
    calls...)\n\t/tmp/tmpp45yh5er.lua:54: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3whvk39h.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp3whvk39h.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local c = 0
        while n > 0 do
          c = c + n % 2
          n = math.floor(n / 2)
        end
        return c
      end
      table.sort(arr, function(a, b)
        local a1, b1 = count_ones(a), count_ones(b)
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzwcwojj.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpxzwcwojj.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5oiocth.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpp5oiocth.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(x)
        local n = 0
        while x > 0 do
          n = n + (x % 2)
          x = math.floor(x / 2)
        end
        return n
      end
      table.sort(arr, function(a, b)
        local a1, b1 = ones(a), ones(b)
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_4d3ut2.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpu_4d3ut2.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekhh_yeb.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpekhh_yeb.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a1, b1 = a:count('1'), b:count('1')
        if a1 == b1 then return a < b end
        return a1 < b1
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1i2s_kb.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpz1i2s_kb.lua:13:
    in function </tmp/tmpz1i2s_kb.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz1i2s_kb.lua:17:
    in local 'candidate'\n\t/tmp/tmpz1i2s_kb.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu8uhwfig.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpu8uhwfig.lua:13:
    in function </tmp/tmpu8uhwfig.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpu8uhwfig.lua:12:
    in local 'candidate'\n\t/tmp/tmpu8uhwfig.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:to_binary():count('1')
        local b_ones = b:to_binary():count('1')
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54tj6zfd.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp54tj6zfd.lua:13:
    in function </tmp/tmp54tj6zfd.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp54tj6zfd.lua:12:
    in local 'candidate'\n\t/tmp/tmp54tj6zfd.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9okvg473.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp9okvg473.lua:13:
    in function </tmp/tmp9okvg473.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp9okvg473.lua:21:
    in local 'candidate'\n\t/tmp/tmp9okvg473.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskd6g6k6.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpskd6g6k6.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4whwhbzg.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp4whwhbzg.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:count_ones()
        local b_ones = b:count_ones()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvz86crxt.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpvz86crxt.lua:13:
    in function </tmp/tmpvz86crxt.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpvz86crxt.lua:21:
    in local 'candidate'\n\t/tmp/tmpvz86crxt.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a1, b1 = a:count_ones(), b:count_ones()
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp273c2scf.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp273c2scf.lua:13:
    in function </tmp/tmp273c2scf.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp273c2scf.lua:12:
    in local 'candidate'\n\t/tmp/tmp273c2scf.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06yuipw1.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp06yuipw1.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6e_dntz0.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp6e_dntz0.lua:13:
    in function </tmp/tmp6e_dntz0.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp6e_dntz0.lua:21:
    in local 'candidate'\n\t/tmp/tmp6e_dntz0.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8dcej24z.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp8dcej24z.lua:13:
    in function </tmp/tmp8dcej24z.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp8dcej24z.lua:21:
    in local 'candidate'\n\t/tmp/tmp8dcej24z.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local ones = 0
        while n > 0 do
          if n % 2 == 1 then
            ones = ones + 1
          end
          n = math.floor(n / 2)
        end
        return ones
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9xjjltu.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmph9xjjltu.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplczr1mhw.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmplczr1mhw.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk9n6lwo.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpdk9n6lwo.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr7a822t.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpbr7a822t.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6ypv6fb.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpw6ypv6fb.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24a_snb0.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp24a_snb0.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuvzm_li.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpjuvzm_li.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:count('1')
        local b_ones = b:count('1')
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        return n:to_binary()
      end
      local function to_number(s)
        return s:to_number()
      end
      return arr:map(to_binary):sort(compare):map(to_number)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40sua983.lua:27:
    attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp40sua983.lua:27:
    in local 'candidate'\n\t/tmp/tmp40sua983.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a9hsac_.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp9a9hsac_.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp216rg6ul.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp216rg6ul.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5x9m1oh.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpk5x9m1oh.lua:13:
    in function </tmp/tmpk5x9m1oh.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpk5x9m1oh.lua:21:
    in local 'candidate'\n\t/tmp/tmpk5x9m1oh.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqr8oiau2.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpqr8oiau2.lua:13:
    in function </tmp/tmpqr8oiau2.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpqr8oiau2.lua:21:
    in local 'candidate'\n\t/tmp/tmpqr8oiau2.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq4latmd.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpuq4latmd.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('[^1]', ''):len()
        local b_ones = b:gsub('[^1]', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn64_u34b.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpn64_u34b.lua:13:
    in function </tmp/tmpn64_u34b.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpn64_u34b.lua:12:
    in local 'candidate'\n\t/tmp/tmpn64_u34b.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymoharzx.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpymoharzx.lua:13:
    in function </tmp/tmpymoharzx.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpymoharzx.lua:12:
    in local 'candidate'\n\t/tmp/tmpymoharzx.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local ones = 0
        while n > 0 do
          ones = ones + (n % 2)
          n = math.floor(n / 2)
        end
        return ones
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qke9k19.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp_qke9k19.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local ones_a = a:gsub('0', ''):len()
        local ones_b = b:gsub('0', ''):len()
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvlw0fzp.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpcvlw0fzp.lua:13:
    in function </tmp/tmpcvlw0fzp.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpcvlw0fzp.lua:21:
    in local 'candidate'\n\t/tmp/tmpcvlw0fzp.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllg9_sar.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpllg9_sar.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydkww7tj.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpydkww7tj.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg157tcfl.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpg157tcfl.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp937317sx.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp937317sx.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj1700ca.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpaj1700ca.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc4aw26u.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpxc4aw26u.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjh7jhqr.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpbjh7jhqr.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a1, b1 = ones(a), ones(b)
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw009h_5n.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpw009h_5n.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54lznf1w.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp54lznf1w.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjyh_on_.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpvjyh_on_.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzm3vkqmx.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpzm3vkqmx.lua:13:
    in function </tmp/tmpzm3vkqmx.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpzm3vkqmx.lua:12:
    in local 'candidate'\n\t/tmp/tmpzm3vkqmx.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('[^1]', ''):len()
        local b_ones = b:gsub('[^1]', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsztbd_jx.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpsztbd_jx.lua:13:
    in function </tmp/tmpsztbd_jx.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsztbd_jx.lua:21:
    in local 'candidate'\n\t/tmp/tmpsztbd_jx.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbabdn0s6.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpbabdn0s6.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9h9up5b.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpu9h9up5b.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60wfj9at.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp60wfj9at.lua:13:
    in function </tmp/tmp60wfj9at.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp60wfj9at.lua:12:
    in local 'candidate'\n\t/tmp/tmp60wfj9at.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppev5i8hn.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmppev5i8hn.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + n % 2
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxcrzsma.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpzxcrzsma.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw9gz3bv.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpiw9gz3bv.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyec8927u.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpyec8927u.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6cfjjgx.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpf6cfjjgx.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0c8fby3.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpv0c8fby3.lua:13:
    in function </tmp/tmpv0c8fby3.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpv0c8fby3.lua:21:
    in local 'candidate'\n\t/tmp/tmpv0c8fby3.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rzsfd9s.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp3rzsfd9s.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5q_he1go.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp5q_he1go.lua:13:
    in function </tmp/tmp5q_he1go.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp5q_he1go.lua:12:
    in local 'candidate'\n\t/tmp/tmp5q_he1go.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local count_a = count_ones(a)
        local count_b = count_ones(b)
        if count_a == count_b then
          return a < b
        else
          return count_a < count_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gxt_qcs.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp8gxt_qcs.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function sort_by_ones(a, b)
        local ones_a = a:gsub('0', ''):len()
        local ones_b = b:gsub('0', ''):len()
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, sort_by_ones)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwi35qhnh.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpwi35qhnh.lua:13:
    in function </tmp/tmpwi35qhnh.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpwi35qhnh.lua:21:
    in local 'candidate'\n\t/tmp/tmpwi35qhnh.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a1, b1 = ones(a), ones(b)
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9ktn6iu.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmps9ktn6iu.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
        local function count_ones(n)
            local count = 0
            while n > 0 do
                if n % 2 == 1 then
                    count = count + 1
                end
                n = math.floor(n / 2)
            end
            return count
        end
        table.sort(arr, function(a, b)
            local a_ones = count_ones(a)
            local b_ones = count_ones(b)
            if a_ones == b_ones then
                return a < b
            else
                return a_ones < b_ones
            end
        end)
        return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t8d85j1.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp9t8d85j1.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi6s89gc.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpqi6s89gc.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_bin(n)
        local bin = {}
        while n > 0 do
          table.insert(bin, n % 2)
          n = math.floor(n / 2)
        end
        return table.concat(bin):reverse()
      end
      local bin_arr = {}
      for _, n in ipairs(arr) do
        table.insert(bin_arr, to_bin(n))
      end
      table.sort(bin_arr, cmp)
      local res = {}
      for _, bin in ipairs(bin_arr) do
        table.insert(res, tonumber(bin, 2))
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mis5y55.lua:44:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmp9mis5y55.lua:44:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploth7n72.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmploth7n72.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      local function cmp(a, b)
        local ones_a, ones_b = count_ones(a), count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rd_6igh.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp9rd_6igh.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(x)
        local count = 0
        while x > 0 do
          count = count + (x % 2)
          x = math.floor(x / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc27riluz.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpc27riluz.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi7pln7e.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmphi7pln7e.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaenv6kz.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmplaenv6kz.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local c = 0
        while n > 0 do
          c = c + (n % 2)
          n = math.floor(n / 2)
        end
        return c
      end
      table.sort(arr, function(a, b)
        local c_a, c_b = count_ones(a), count_ones(b)
        if c_a == c_b then
          return a < b
        else
          return c_a < c_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3vip72y.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpm3vip72y.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local ones = 0
        while n > 0 do
          ones = ones + (n % 2)
          n = math.floor(n / 2)
        end
        return ones
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1leiczus.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp1leiczus.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7_q62q7.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpu7_q62q7.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq1r6utv.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpwq1r6utv.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqtj1yui.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpnqtj1yui.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpub0g9y9d.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpub0g9y9d.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_cz4fm9.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp4_cz4fm9.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav860y9m.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpav860y9m.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(x)
        local n = 0
        while x > 0 do
          n = n + (x % 2)
          x = math.floor(x / 2)
        end
        return n
      end
      local function cmp(a, b)
        local na, nb = count_ones(a), count_ones(b)
        if na == nb then
          return a < b
        else
          return na < nb
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdtep2yh.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpcdtep2yh.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr8uz7t4.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpjr8uz7t4.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local c = 0
        while n > 0 do
          c = c + n % 2
          n = math.floor(n / 2)
        end
        return c
      end
      table.sort(arr, function(a, b)
        local oa, ob = ones(a), ones(b)
        if oa == ob then
          return a < b
        else
          return oa < ob
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b5ay9us.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp6b5ay9us.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a1 = ones(a)
        local b1 = ones(b)
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1ng1vth.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmph1ng1vth.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88__xb8x.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp88__xb8x.lua:13:
    in function </tmp/tmp88__xb8x.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp88__xb8x.lua:21:
    in local 'candidate'\n\t/tmp/tmp88__xb8x.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptje1o5qh.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmptje1o5qh.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd_zvkah.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpmd_zvkah.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hkkbd86.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp1hkkbd86.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(num)
        local count = 0
        while num > 0 do
          count = count + (num % 2)
          num = math.floor(num / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhp90n_9.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpdhp90n_9.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(num)
        local count = 0
        while num > 0 do
          count = count + (num % 2)
          num = math.floor(num / 2)
        end
        return count
      end
      local function sort_by_ones(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, sort_by_ones)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqiajolj.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpjqiajolj.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      local function cmp(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73a4r047.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp73a4r047.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:count('1')
        local b_ones = b:count('1')
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxuhvzdb.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpsxuhvzdb.lua:13:
    in function </tmp/tmpsxuhvzdb.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsxuhvzdb.lua:21:
    in local 'candidate'\n\t/tmp/tmpsxuhvzdb.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9td0p0_k.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp9td0p0_k.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw4udv9c.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpuw4udv9c.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(x)
        local n = 0
        while x > 0 do
          n = n + (x % 2)
          x = math.floor(x / 2)
        end
        return n
      end
      table.sort(arr, function(a, b)
        local na, nb = count_ones(a), count_ones(b)
        if na == nb then
          return a < b
        else
          return na < nb
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf94g3jd0.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpf94g3jd0.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7p1f69g.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpa7p1f69g.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4naksj8.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpq4naksj8.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptblsk4nh.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmptblsk4nh.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a1, b1 = ones(a), ones(b)
        if a1 == b1 then
          return a < b
        else
          return a1 < b1
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasqnfdox.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpasqnfdox.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32e4fr6a.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp32e4fr6a.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos0k1ssv.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpos0k1ssv.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zel2z5z.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp8zel2z5z.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = ones(a)
        local ones_b = ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpredqc0hw.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpredqc0hw.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal3lmar3.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpal3lmar3.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      local function cmp(a, b)
        local ones_a = ones(a)
        local ones_b = ones(b)
        if ones_a ~= ones_b then
          return ones_a < ones_b
        else
          return a < b
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjoe8sqkf.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpjoe8sqkf.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ftdn56a.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp6ftdn56a.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8lrh8sy.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpz8lrh8sy.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:to_bits():count(1)
        local b_ones = b:to_bits():count(1)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo73kkbh.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmppo73kkbh.lua:13:
    in function </tmp/tmppo73kkbh.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppo73kkbh.lua:12:
    in local 'candidate'\n\t/tmp/tmppo73kkbh.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22d04bo2.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp22d04bo2.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptm2crsia.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmptm2crsia.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function bitcount(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = bitcount(a)
        local b_ones = bitcount(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv04i18o.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmprv04i18o.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojy6viy_.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpojy6viy_.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local c = 0
        while n > 0 do
          c = c + (n % 2)
          n = math.floor(n / 2)
        end
        return c
      end
      table.sort(arr, function(a, b)
        local oa, ob = ones(a), ones(b)
        if oa == ob then
          return a < b
        else
          return oa < ob
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa25in59f.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpa25in59f.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhumd79f.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpnhumd79f.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmeprjhkt.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpmeprjhkt.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local bin = ''
        while n > 0 do
          bin = tostring(n % 2) .. bin
          n = math.floor(n / 2)
        end
        return bin
      end
      local bin_arr = {}
      for i, v in ipairs(arr) do
        bin_arr[i] = to_binary(v)
      end
      table.sort(bin_arr, compare)
      for i, v in ipairs(bin_arr) do
        bin_arr[i] = tonumber(v, 2)
      end
      return bin_arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh2n2492.lua:43:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpjh2n2492.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuo6zvkw.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpuuo6zvkw.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibyr1lyp.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpibyr1lyp.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhjso0pd.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpqhjso0pd.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + n % 2
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqywb2ed.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpmqywb2ed.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('[^1]', ''):len()
        local b_ones = b:gsub('[^1]', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local bin = ''
        while n > 0 do
          local rest = n % 2
          bin = rest .. bin
          n = (n - rest) / 2
        end
        return bin
      end
      local function sort_by_binary(arr)
        local sorted = {}
        for i = 1, #arr do
          local bin = to_binary(arr[i])
          table.insert(sorted, bin)
        end
        table.sort(sorted, compare)
        return sorted
      end
      local function to_decimal(bin)
        local n = 0
        for i = 1, #bin do
          n = n + 2 ^ (i - 1) * tonumber(bin:sub(i, i))
        end
        return n
      end
      local function sort_by_decimal(arr)
        local sorted = {}
        for i = 1, #arr do
          local dec = to_decimal(arr[i])
          table.insert(sorted, dec)
        end
        return sorted
      end
      return sort_by_decimal(sort_by_binary(arr))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdvcug1a0.lua:42:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdvcug1a0.lua:42:
    in upvalue 'to_decimal'\n\t/tmp/tmpdvcug1a0.lua:49: in function </tmp/tmpdvcug1a0.lua:46>\n\t(...tail
    calls...)\n\t/tmp/tmpdvcug1a0.lua:60: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8s3e2io.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpx8s3e2io.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg11uo5h0.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpg11uo5h0.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82_sqpw2.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp82_sqpw2.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpisqmx363.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpisqmx363.lua:13:
    in function </tmp/tmpisqmx363.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpisqmx363.lua:12:
    in local 'candidate'\n\t/tmp/tmpisqmx363.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(num)
        local count = 0
        while num > 0 do
          count = count + (num % 2)
          num = math.floor(num / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphse66cg2.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmphse66cg2.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwbh_2y3.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpiwbh_2y3.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(a)
        local res = {}
        while a > 0 do
          res[#res + 1] = a % 2
          a = math.floor(a / 2)
        end
        return table.concat(res):reverse()
      end
      local function to_decimal(a)
        local res = 0
        for i = 1, #a do
          res = res + a:sub(i, i) * 2 ^ (i - 1)
        end
        return res
      end
      local function sort(arr)
        local res = {}
        for i = 1, #arr do
          res[i] = to_binary(arr[i])
        end
        table.sort(res, compare)
        for i = 1, #res do
          res[i] = to_decimal(res[i])
        end
        return res
      end
      return sort(arr)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54e6kkck.lua:53:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 1, 1, 5, 3}\nstack traceback:\n\t/tmp/tmp54e6kkck.lua:53:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local bin = ''
        while n > 0 do
          bin = tostring(n % 2) .. bin
          n = math.floor(n / 2)
        end
        return bin
      end
      local function to_decimal(n)
        local dec = 0
        for i = 1, n:len() do
          dec = dec + n:sub(i, i) * 2 ^ (n:len() - i)
        end
        return dec
      end
      table.sort(arr, function(a, b)
        return cmp(to_binary(a), to_binary(b))
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31gzu8cy.lua:45:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmp31gzu8cy.lua:45:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:count_ones()
        local b_ones = b:count_ones()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfhsn65ka.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpfhsn65ka.lua:13:
    in function </tmp/tmpfhsn65ka.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpfhsn65ka.lua:12:
    in local 'candidate'\n\t/tmp/tmpfhsn65ka.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq02034w.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpkq02034w.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = ones(a)
        local b_ones = ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2s0rh06.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp_2s0rh06.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeexcw3na.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpeexcw3na.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnx313xv.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpbnx313xv.lua:13:
    in function </tmp/tmpbnx313xv.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpbnx313xv.lua:21:
    in local 'candidate'\n\t/tmp/tmpbnx313xv.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local bin_arr = {}
      for _, v in ipairs(arr) do
        table.insert(bin_arr, string.format('%b', v))
      end
      table.sort(bin_arr, cmp)
      for i, v in ipairs(bin_arr) do
        bin_arr[i] = tonumber(v, 2)
      end
      return bin_arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuaho7_vt.lua:23:
    invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpuaho7_vt.lua:23:
    in local 'candidate'\n\t/tmp/tmpuaho7_vt.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlmgpwtm.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpwlmgpwtm.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsinqczm.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmprsinqczm.lua:13:
    in function </tmp/tmprsinqczm.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmprsinqczm.lua:12:
    in local 'candidate'\n\t/tmp/tmprsinqczm.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function get_ones(n)
        local ones = 0
        while n > 0 do
          ones = ones + (n % 2)
          n = math.floor(n / 2)
        end
        return ones
      end
      table.sort(arr, function(a, b)
        local ones_a, ones_b = get_ones(a), get_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj573oek5.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpj573oek5.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = ones(a)
        local ones_b = ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7kp3cbi.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpf7kp3cbi.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd7j1pwp.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpvd7j1pwp.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(num)
        local count = 0
        while num > 0 do
          if num % 2 == 1 then
            count = count + 1
          end
          num = math.floor(num / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_io1bpg.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp4_io1bpg.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local result = ''
        while n > 0 do
          result = (n % 2) .. result
          n = math.floor(n / 2)
        end
        return result
      end
      local function to_decimal(s)
        local result = 0
        for i = 1, s:len() do
          result = result + s:sub(i, i) * 2 ^ (s:len() - i)
        end
        return result
      end
      table.sort(arr, function(a, b)
        return compare(to_binary(a), to_binary(b))
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7fdn3ho.lua:45:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpu7fdn3ho.lua:45:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxefo7bo.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmppxefo7bo.lua:13:
    in function </tmp/tmppxefo7bo.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppxefo7bo.lua:21:
    in local 'candidate'\n\t/tmp/tmppxefo7bo.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr7xbv7x.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpwr7xbv7x.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgkq6zsbb.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpgkq6zsbb.lua:13:
    in function </tmp/tmpgkq6zsbb.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpgkq6zsbb.lua:21:
    in local 'candidate'\n\t/tmp/tmpgkq6zsbb.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local ones_a = a:gsub('0', ''):len()
        local ones_b = b:gsub('0', ''):len()
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      local function to_binary(n)
        local bin = ''
        while n > 0 do
          bin = tostring(n % 2) .. bin
          n = math.floor(n / 2)
        end
        return bin
      end
      local function to_decimal(bin)
        local n = 0
        for i = 1, bin:len() do
          n = n + 2 ^ (bin:len() - i) * tonumber(bin:sub(i, i))
        end
        return n
      end
      local function sort(arr)
        local bin_arr = {}
        for i = 1, #arr do
          bin_arr[i] = to_binary(arr[i])
        end
        table.sort(bin_arr, compare)
        for i = 1, #arr do
          arr[i] = to_decimal(bin_arr[i])
        end
        return arr
      end
      return sort(arr)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7x0tdbh.lua:53:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpy7x0tdbh.lua:53:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaz5weq0.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpbaz5weq0.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm25al1o0.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpm25al1o0.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0qhjvin.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpz0qhjvin.lua:13:
    in function </tmp/tmpz0qhjvin.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz0qhjvin.lua:21:
    in local 'candidate'\n\t/tmp/tmpz0qhjvin.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdhups4pf.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpdhups4pf.lua:13:
    in function </tmp/tmpdhups4pf.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpdhups4pf.lua:12:
    in local 'candidate'\n\t/tmp/tmpdhups4pf.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          n = n & (n - 1)
          count = count + 1
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28jsc3li.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp28jsc3li.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local c = 0
        while n > 0 do
          c = c + n % 2
          n = math.floor(n / 2)
        end
        return c
      end
      table.sort(arr, function(a, b)
        local c = count_ones(a) - count_ones(b)
        if c == 0 then
          return a < b
        else
          return c < 0
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72qvwcnf.lua:35:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp72qvwcnf.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = ones(a)
        local ones_b = ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0nk8m6z.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpi0nk8m6z.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2a4fiqa.lua:39:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpv2a4fiqa.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1brciuuc.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp1brciuuc.lua:13:
    in function </tmp/tmp1brciuuc.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp1brciuuc.lua:21:
    in local 'candidate'\n\t/tmp/tmp1brciuuc.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      local function compare(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmhkpjyy.lua:37:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmphmhkpjyy.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4oje7ux.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpp4oje7ux.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkppl3qyi.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpkppl3qyi.lua:13:
    in function </tmp/tmpkppl3qyi.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpkppl3qyi.lua:12:
    in local 'candidate'\n\t/tmp/tmpkppl3qyi.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + n % 2
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwge6zgz.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpqwge6zgz.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoo5qlghg.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpoo5qlghg.lua:13:
    in function </tmp/tmpoo5qlghg.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpoo5qlghg.lua:21:
    in local 'candidate'\n\t/tmp/tmpoo5qlghg.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local bin = ''
        while n > 0 do
          bin = tostring(n % 2) .. bin
          n = math.floor(n / 2)
        end
        return bin
      end
      table.sort(arr, function(a, b)
        return compare(to_binary(a), to_binary(b))
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocnwbi_3.lua:38:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpocnwbi_3.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + n % 2
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj29jlqq.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpjj29jlqq.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9n7t8odb.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp9n7t8odb.lua:13:
    in function </tmp/tmp9n7t8odb.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp9n7t8odb.lua:21:
    in local 'candidate'\n\t/tmp/tmp9n7t8odb.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1qm9a4u.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpe1qm9a4u.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrw5q01u.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpvrw5q01u.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0rua3tz.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpa0rua3tz.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeano7d4d.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpeano7d4d.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_0mh42y.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpi_0mh42y.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      local function to_binary(n)
        local res = ''
        while n > 0 do
          res = (n % 2) .. res
          n = math.floor(n / 2)
        end
        return res
      end
      local sorted = {}
      for _, n in ipairs(arr) do
        table.insert(sorted, to_binary(n))
      end
      table.sort(sorted, cmp)
      for i, n in ipairs(sorted) do
        sorted[i] = tonumber(n, 2)
      end
      return sorted
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw690711k.lua:43:
    expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 4, 5, 3}\nstack traceback:\n\t/tmp/tmpw690711k.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      table.sort(arr, function(a, b)
        local a_ones = a:gsub('0', ''):len()
        local b_ones = b:gsub('0', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnoks71nr.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpnoks71nr.lua:13:
    in function </tmp/tmpnoks71nr.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpnoks71nr.lua:12:
    in local 'candidate'\n\t/tmp/tmpnoks71nr.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local a_ones = a:count_ones()
        local b_ones = b:count_ones()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5ig3s7n.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpm5ig3s7n.lua:13:
    in function </tmp/tmpm5ig3s7n.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpm5ig3s7n.lua:21:
    in local 'candidate'\n\t/tmp/tmpm5ig3s7n.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxvynbpz.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpnxvynbpz.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
        local function count_ones(n)
            local count = 0
            while n > 0 do
                count = count + (n % 2)
                n = math.floor(n / 2)
            end
            return count
        end
        table.sort(arr, function(a, b)
            local ones_a = count_ones(a)
            local ones_b = count_ones(b)
            if ones_a == ones_b then
                return a < b
            else
                return ones_a < ones_b
            end
        end)
        return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis7tdjuu.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpis7tdjuu.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + n % 2
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsox6sg21.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpsox6sg21.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          if n % 2 == 1 then
            count = count + 1
          end
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local a_ones = count_ones(a)
        local b_ones = count_ones(b)
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ft6qh7z.lua:38:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmp0ft6qh7z.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function compare(a, b)
        local a_ones = a:gsub('[^1]', ''):len()
        local b_ones = b:gsub('[^1]', ''):len()
        if a_ones == b_ones then
          return a < b
        else
          return a_ones < b_ones
        end
      end
      table.sort(arr, compare)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1x8yjwu2.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp1x8yjwu2.lua:13:
    in function </tmp/tmp1x8yjwu2.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp1x8yjwu2.lua:21:
    in local 'candidate'\n\t/tmp/tmp1x8yjwu2.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function count_ones(n)
        local count = 0
        while n > 0 do
          count = count + (n % 2)
          n = math.floor(n / 2)
        end
        return count
      end
      table.sort(arr, function(a, b)
        local ones_a = count_ones(a)
        local ones_b = count_ones(b)
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmb5rd2d.lua:36:
    expected: {-4, -2, -6, -5, -3}\nactual: {-6, -5, -4, -3, -2}\nstack traceback:\n\t/tmp/tmpsmb5rd2d.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- In this Kata, you have to sort a table of non-negative integers according to
    -- number of ones in their binary representation in ascending order.
    -- For similar number of ones, sort based on decimal value.
    -- It must be implemented like this:
    -- >>> sort_array({1, 5, 2, 3, 4})
    -- {1, 2, 3, 4, 5}
    -- >>> sort_array({-2, -3, -4, -5, -6})
    -- {-6, -5, -4, -3, -2}
    -- >>> sort_array({1, 0, 2, 3, 4})
    -- {0, 1, 2, 3, 4}
    local function sort_array(arr)
      local function cmp(a, b)
        local ones_a = a:gsub('0', ''):len()
        local ones_b = b:gsub('0', ''):len()
        if ones_a == ones_b then
          return a < b
        else
          return ones_a < ones_b
        end
      end
      table.sort(arr, cmp)
      return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = sort_array
        lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
        lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
        lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
        lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
        lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbef2msez.lua:13:
    attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpbef2msez.lua:13:
    in function </tmp/tmpbef2msez.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpbef2msez.lua:21:
    in local 'candidate'\n\t/tmp/tmpbef2msez.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
