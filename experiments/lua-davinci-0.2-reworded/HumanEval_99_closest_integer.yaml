---
name: HumanEval_99_closest_integer
language: lua
prompt: |
  -- Create a function that takes a value (string) representing a number
  -- and returns the closest integer to it. If the number is equidistant
  -- from two integers, round it away from zero.
  -- Examples
  -- >>> closest_integer('10')
  -- 10
  -- >>> closest_integer('15.3')
  -- 15
  -- Note:
  -- Rounding away from zero means that if the given number is equidistant
  -- from two integers, the one you should return is the one that is the
  -- farthest from zero. For example closest_integer("14.5") should
  -- return 15 and closest_integer("-14.5") should return -15.
  local function closest_integer(value)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = closest_integer
      lu.assertEquals(candidate('10'), 10)
      lu.assertEquals(candidate('14.5'), 15)
      lu.assertEquals(candidate('-15.5'), -16)
      lu.assertEquals(candidate('15.3'), 15)
      lu.assertEquals(candidate('0'), 0)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      local frac = num - int
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num == nil then
      return nil
    end
    local int = math.floor(num)
    if num - int >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
      local number = tonumber(value)
      if number > 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
    local number = tonumber(value)
    if number > 0 then
      return math.floor(number + 0.5)
    else
      return math.ceil(number - 0.5)
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local int, frac = math.modf(number)
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number == math.floor(number) then
          return number
      end
      local floor = math.floor(number)
      local ceil = math.ceil(number)
      if number - floor < ceil - number then
          return floor
      else
          return ceil
      end
  end
- |2-
    local number = tonumber(value)
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num > 0 then
      return math.floor(num + 0.5)
    else
      return math.ceil(num - 0.5)
    end
  end
- |2-
      local num = tonumber(value)
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num then
      return math.floor(num + 0.5)
    end
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          integer = integer + 1
      end
      return integer
  end
- |2-
    local num = tonumber(value)
    if num == nil then
      return nil
    end
    local int = math.floor(num)
    if num - int >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      if number >= 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
    local num = tonumber(value)
    local int = math.floor(num)
    if num - int >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer > 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      local int = math.floor(num)
      local frac = num - int
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int > 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local num = tonumber(value)
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
      local number = tonumber(value)
      if number < 0 then
          return math.ceil(number)
      else
          return math.floor(number)
      end
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number > 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local decimal = number - math.floor(number)
    if decimal < 0.5 then
      return math.floor(number)
    else
      return math.ceil(number)
    end
  end
- |2-
    local number = tonumber(value)
    local integer = math.floor(number)
    local decimal = number - integer
    if decimal >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    local int, frac = math.modf(tonumber(value))
    if frac >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local int_value = tonumber(value)
      if int_value == nil then
          return nil
      end
      local int_part = math.floor(int_value)
      local decimal_part = int_value - int_part
      if decimal_part >= 0.5 then
          return int_part + 1
      else
          return int_part
      end
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer < 0.5 then
      return integer
    else
      return integer + 1
    end
  end
- |2-
    local number = tonumber(value)
    if number > 0 then
      return math.floor(number + 0.5)
    else
      return math.ceil(number - 0.5)
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num > 0 then
      return math.floor(num + 0.5)
    else
      return math.ceil(num - 0.5)
    end
  end
- |2-
    local num = tonumber(value)
    if num > 0 then
      return math.floor(num + 0.5)
    else
      return math.ceil(num - 0.5)
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int < 0.5 then
          return int
      else
          return int + 1
      end
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      local decimal = number - integer
      if decimal >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      local decimal = number - integer
      if decimal >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      local frac = num - int
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local num = tonumber(value)
      local int = math.floor(num)
      local dec = num - int
      if dec >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num == math.floor(num) then
      return num
    else
      local int = math.floor(num)
      local dec = num - int
      if dec >= 0.5 then
        return int + 1
      else
        return int
      end
    end
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      local fraction = number - integer
      if fraction >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
    local number = tonumber(value)
    local integer = math.floor(number)
    local decimal = number - integer
    if decimal >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    if number > 0 then
      return math.floor(number + 0.5)
    else
      return math.ceil(number - 0.5)
    end
  end
- |2-
    local num = tonumber(value)
    if num > 0 then
      return math.floor(num + 0.5)
    else
      return math.ceil(num - 0.5)
    end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    local fraction = number - integer
    if fraction >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      local number = tonumber(value)
      local int, frac = math.modf(number)
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number > 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local number = tonumber(value)
      if number < 0 then
          return math.ceil(number)
      else
          return math.floor(number)
      end
  end
- |2-
    local num = tonumber(value)
    if num == nil then
      return nil
    end
    local int = math.floor(num)
    if num - int >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      local decimal = number - integer
      if decimal >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local floor = math.floor(number)
    local ceil = math.ceil(number)
    if number - floor < ceil - number then
      return floor
    else
      return ceil
    end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local num = tonumber(value)
      if num == math.floor(num) then
          return num
      else
          local int = math.floor(num)
          local dec = num - int
          if dec >= 0.5 then
              return int + 1
          else
              return int
          end
      end
  end
- |2-
    local num = tonumber(value)
    if num == nil then
      return nil
    end
    local int = math.floor(num)
    if num - int >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      if number > 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    local num = tonumber(value)
    local int = math.floor(num)
    local frac = num - int
    if frac >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int, frac = math.modf(num)
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          integer = integer + 1
      end
      return integer
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local number = tonumber(value)
      return number % 1 >= 0.5 and math.ceil(number) or math.floor(number)
  end
- |2-
    local number = tonumber(value)
    local integer = math.floor(number)
    local decimal = number - integer
    if decimal >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    local num = tonumber(value)
    if num > 0 then
      return math.floor(num + 0.5)
    else
      return math.ceil(num - 0.5)
    end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local floor = math.floor(number)
    local ceil = math.ceil(number)
    if number - floor < ceil - number then
      return floor
    else
      return ceil
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int, frac = math.modf(num)
      if frac >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
    -- TODO: Implement me!
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local int = math.floor(number)
      if number - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      local int = math.floor(num)
      if num - int >= 0.5 then
          return int + 1
      else
          return int
      end
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer < 0.5 then
          return integer
      else
          return integer + 1
      end
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    local fraction = number - integer
    if fraction >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
    local number = tonumber(value)
    return number % 1 >= 0.5 and math.ceil(number) or math.floor(number)
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          integer = integer + 1
      end
      return integer
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num - math.floor(num) >= 0.5 then
          return math.ceil(num)
      else
          return math.floor(num)
      end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num > 0 then
      return math.floor(num + 0.5)
    else
      return math.ceil(num - 0.5)
    end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    local num = tonumber(value)
    if num == nil then
      return nil
    end
    local int, frac = math.modf(num)
    if frac >= 0.5 then
      return int + 1
    else
      return int
    end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    return math.floor(number + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == math.floor(num) then
          return num
      else
          local floor = math.floor(num)
          local ceil = math.ceil(num)
          if num - floor > ceil - num then
              return ceil
          else
              return floor
          end
      end
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          integer = integer + 1
      end
      return integer
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
    -- TODO: Implement me!
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    -- your code here
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(value + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      -- TODO: implement
  end
- |2-
      local num = tonumber(value)
      if num % 1 >= 0.5 then
          return math.ceil(num)
      else
          return math.floor(num)
      end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number > 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    -- your code here
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer < 0.5 then
      return integer
    else
      return integer + 1
    end
  end
- |2-
      return math.floor(tonumber(value) + 0.5)
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number < 0 then
          return math.ceil(number)
      else
          return math.floor(number)
      end
  end
- |2-
      -- TODO: Implement the function here
  end
- |2-
      local number = tonumber(value)
      if number == nil then
          return nil
      end
      local integer = math.floor(number)
      if number - integer >= 0.5 then
          integer = integer + 1
      end
      return integer
  end
- |2-
    return math.floor(value + 0.5)
  end
- |2-
      local number = tonumber(value)
      if number > 0 then
          return math.floor(number + 0.5)
      else
          return math.ceil(number - 0.5)
      end
  end
- |2-
    local number = tonumber(value)
    if number == nil then
      return nil
    end
    local integer = math.floor(number)
    if number - integer >= 0.5 then
      return integer + 1
    else
      return integer
    end
  end
- |2-
    return math.floor(tonumber(value) + 0.5)
  end
- |2-
      local number = tonumber(value)
      local integer = math.floor(number)
      local decimal = number - integer
      if decimal >= 0.5 then
          return integer + 1
      else
          return integer
      end
  end
- |2-
      -- your code here
      return math.floor(value + 0.5)
  end
- |2-
      local num = tonumber(value)
      if num == nil then
          return nil
      end
      if num > 0 then
          return math.floor(num + 0.5)
      else
          return math.ceil(num - 0.5)
      end
  end
- |2-
      local number = tonumber(value)
      if number < 0 then
          return math.ceil(number)
      else
          return math.floor(number)
      end
  end
- |2-
      local n = tonumber(value)
      if n == math.floor(n) then
          return n
      else
          local floor = math.floor(n)
          local ceil = math.ceil(n)
          if n - floor > ceil - n then
              return ceil
          else
              return floor
          end
      end
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
