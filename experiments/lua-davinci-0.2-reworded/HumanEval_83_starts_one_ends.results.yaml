---
name: HumanEval_83_starts_one_ends
language: lua
results:
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65btzxe5.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmp65btzxe5.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf0s4azq.lua:13:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkf0s4azq.lua:13: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54rtpwnu.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp54rtpwnu.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local d = 10 ^ (n - 1)
      local a = starts_one_ends(n - 1)
      local b = starts_one_ends(n - 2)
      return a + b * (d - 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc76723h.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpcc76723h.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        local dp = {[1] = 2, [2] = 4}
        for i = 3, n do
            dp[i] = dp[i - 1] + dp[i - 2]
        end
        return dp[n]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdmcxjbn.lua:20:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzdmcxjbn.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc617hey7.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpc617hey7.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + 9 * 10 ^ (i - 1)
      end
      count = count + 10 ^ (n - 1)
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v2ld5f7.lua:18:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8v2ld5f7.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      local a, b = 2, 4
      for i = 3, n do
        local c = a + b
        a, b = b, c
      end
      return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0v42dmu.lua:21:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0v42dmu.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local total = 0
        for i = 1, n - 1 do
            total = total + 9 * 10 ^ (i - 1)
        end
        return total * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23x2u01.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb23x2u01.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsoltcwzl.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpsoltcwzl.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepbp2liw.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpepbp2liw.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 2, n do
        count = count + 9 * 10 ^ (i - 2)
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zs6c484.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_zs6c484.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q48ae10.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmp3q48ae10.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local d = 10 ^ (n - 1)
        local count = 0
        for i = 1, 9 do
            count = count + starts_one_ends(n - 1)
        end
        count = count + 9 * (d - 1)
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehgjsbf1.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpehgjsbf1.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdp3mhxu_.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdp3mhxu_.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s7yoyov.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9s7yoyov.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * 10 ^ (i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yv5tcui.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1yv5tcui.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4ui4mwc.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpj4ui4mwc.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 9
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg7h_q4r.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphg7h_q4r.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * (10 ^ (i - 1))
        end
        return 2 * count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy3jqzhh.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyy3jqzhh.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        local dp = {}
        for i = 1, n do
            dp[i] = {}
        end
        dp[1][1] = 2
        dp[1][2] = 2
        dp[2][1] = 4
        dp[2][2] = 4
        for i = 3, n do
            dp[i][1] = dp[i - 1][1] + dp[i - 1][2]
            dp[i][2] = dp[i - 1][1] + dp[i - 1][2]
        end
        return dp[n][1] + dp[n][2]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg8wk13m.lua:28:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgg8wk13m.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5may4xsg.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5may4xsg.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdc9_0zt.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxdc9_0zt.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {}
      for i = 1, n do
        dp[i] = {}
        for j = 1, 9 do
          dp[i][j] = 0
        end
      end
      for i = 1, 9 do
        dp[1][i] = 1
      end
      for i = 2, n do
        for j = 1, 9 do
          if j == 1 then
            dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1]
          elseif j == 9 then
            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]
          else
            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j + 1]
          end
        end
      end
      local sum = 0
      for i = 1, 9 do
        sum = sum + dp[n][i]
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hb_72bf.lua:38:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hb_72bf.lua:38: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {0, 1, 1}
      for i = 3, n do
        dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61sjiimm.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp61sjiimm.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2xc4skr.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpe2xc4skr.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 2, n do
            count = count * 10
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7f2qzc0.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpp7f2qzc0.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local dp = {1, 1}
        for i = 3, n do
            dp[i] = dp[i - 1] + dp[i - 2]
        end
        return dp[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzuliws1.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkzuliws1.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ff6rqx.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmp71ff6rqx.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 10
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76k9eclf.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp76k9eclf.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprka9r7s9.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprka9r7s9.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 1, n - 1 do
            count = count * 10
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi807333e.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpi807333e.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 1
      end
      local count = 0
      for i = 1, 9 do
        count = count + starts_one_ends(n - 1)
      end
      count = count + starts_one_ends(n - 1)
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3p5_dvox.lua:19:
    expected: 18, actual: 10\nstack traceback:\n\t/tmp/tmp3p5_dvox.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitve51x7.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpitve51x7.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * 10 ^ (i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cqo2mvs.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6cqo2mvs.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {}
      dp[0] = 0
      dp[1] = 1
      for i = 2, n do
        dp[i] = dp[i - 1] * 9 + dp[i - 2] * 9
      end
      return dp[n]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqi76i6p.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvqi76i6p.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vgdx9b8.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_vgdx9b8.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n do
        count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ljf_fbj.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9ljf_fbj.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n do
        count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt06jg1x.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbt06jg1x.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra_to06z.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpra_to06z.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 1, n - 1 do
            count = count * 10
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp629uzn6a.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp629uzn6a.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local a = 1
      local b = 1
      for i = 2, n do
        local c = a + b
        a = b
        b = c
      end
      return b + a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64nuz22n.lua:20:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp64nuz22n.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik03hq2u.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpik03hq2u.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32qz3gup.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmp32qz3gup.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {0, 1, 1}
      for i = 3, n do
        dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7orukvu1.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7orukvu1.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5iuqczs.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5iuqczs.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local a, b = 1, 1
        for i = 2, n do
            a, b = a + b, a
        end
        return a + b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8jo9g9q.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpt8jo9g9q.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0w3icn0.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk0w3icn0.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * 10 ^ (i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlsygnuu.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxlsygnuu.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_vayznx.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpt_vayznx.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local dp = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1}
      for i = 2, n do
        dp[i] = dp[i - 1] * 10 - dp[i - 2]
      end
      return dp[n]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70pdqvrc.lua:14:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp70pdqvrc.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      local i = 1
      while i <= n do
        count = count + 9 * (10 ^ (i - 1))
        i = i + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fk9hsgz.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9fk9hsgz.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpyu4em.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpfhpyu4em.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxso60cm.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpaxso60cm.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeugu631.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgeugu631.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc_e4hda.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmptc_e4hda.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, 9 do
        count = count + starts_one_ends(n - 1)
      end
      count = count + starts_one_ends(n - 1)
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_zqh_93.lua:18:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4_zqh_93.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 9
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyxzxjw3.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnyxzxjw3.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_4j3mja.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_4j3mja.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        local dp = {0, 2, 4}
        for i = 3, n do
            dp[i] = dp[i - 1] + dp[i - 2]
        end
        return dp[n]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_esy1xgp.lua:20:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_esy1xgp.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      local i = 1
      while i <= n do
        count = count + math.pow(10, i - 1)
        i = i + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl24q9bz.lua:17:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmptl24q9bz.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg5jejov.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzg5jejov.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiimck6_j.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpiimck6_j.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * math.pow(10, i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8rgu7gx.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8rgu7gx.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      local start = 10^(n-1)
      local end_ = 10^n - 1
      for i = start, end_ do
        if tostring(i):match("^1") or tostring(i):match("1$") then
          count = count + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwcwm7_j.lua:19:
    expected: 18, actual: 10\nstack traceback:\n\t/tmp/tmpdwcwm7_j.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9j08qbr.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9j08qbr.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local sum = 1
        for i = 1, n - 1 do
            sum = sum + 9 * 9 ^ (i - 1)
        end
        return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtfqqtmm.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphtfqqtmm.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprujm816f.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprujm816f.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetkyr9bw.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpetkyr9bw.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v5grgvm.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5v5grgvm.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg2pdrhh.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpcg2pdrhh.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qskgvv9.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmp3qskgvv9.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiquf739w.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpiquf739w.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr80cmwn5.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr80cmwn5.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 10
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaibdkiu8.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpaibdkiu8.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        local count = 0
        local digits = {}
        for i = 1, n do
            digits[i] = 0
        end
        while true do
            if digits[1] == 1 or digits[n] == 1 then
                count = count + 1
            end
            local i = n
            while i > 0 and digits[i] == 9 do
                digits[i] = 0
                i = i - 1
            end
            if i == 0 then
                break
            end
            digits[i] = digits[i] + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps84c0n1y.lua:30:
    expected: 18, actual: 19\nstack traceback:\n\t/tmp/tmps84c0n1y.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 2, n do
            count = count * 10
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgypsvu0.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqgypsvu0.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * 10 ^ (i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gz3lcks.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_gz3lcks.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 9
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjkshk_f.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppjkshk_f.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local dp = {0, 1, 1}
        for i = 3, n do
            dp[i] = dp[i - 1] + dp[i - 2]
        end
        return dp[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunkr4m0m.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpunkr4m0m.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_5d8d_k.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv_5d8d_k.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1nbokja.lua:13:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpo1nbokja.lua:13: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        local i = 1
        while i <= n do
            count = count + 9 * 10 ^ (i - 1)
            i = i + 1
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl6rs_ai.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyl6rs_ai.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 10^(i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0ipppem.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpw0ipppem.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71qil8qh.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmp71qil8qh.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4vysupc.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_4vysupc.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      local first_digit = 1
      local last_digit = 1
      local digits = n - 2
      while digits > 0 do
        count = count + first_digit * last_digit * 9 * math.pow(10, digits - 1)
        digits = digits - 1
      end
      count = count + first_digit + last_digit
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ogqt0r2.lua:22:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9ogqt0r2.lua:22: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 9
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8874irc0.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8874irc0.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        local count = 0
        for i = 1, n do
            count = count + 10^(i - 1)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv7of5rp.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpjv7of5rp.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {0, 1, 1}
      for i = 3, n do
        dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf73c48n.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgf73c48n.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {0, 1, 1}
      for i = 3, n do
        dp[i] = dp[i - 1] + dp[i - 2]
      end
      return dp[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r5a5zte.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2r5a5zte.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizv8wst9.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpizv8wst9.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      local digits = {}
      for i = 1, n do
        digits[i] = 0
      end
      digits[1] = 1
      while true do
        count = count + 1
        digits[n] = digits[n] + 1
        for i = n, 2, -1 do
          if digits[i] == 10 then
            digits[i] = 0
            digits[i - 1] = digits[i - 1] + 1
          end
        end
        if digits[1] == 2 then
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdewir7ej.lua:32:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdewir7ej.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o3d0g_q.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7o3d0g_q.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        local dp = {}
        dp[1] = 2
        dp[2] = 4
        for i = 3, n do
            dp[i] = dp[i - 1] + dp[i - 2]
        end
        return dp[n]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4wvqhn.lua:22:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9q4wvqhn.lua:22: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local function count(n)
        if n == 1 then
          return 2
        else
          return 10 * count(n - 1) - count(n - 2)
        end
      end
      return count(n)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp995bknwe.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp995bknwe.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyr93gpl.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgyr93gpl.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqk4iv0k.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpiqk4iv0k.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6snarwe.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_6snarwe.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm976oq56.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm976oq56.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnf5lus2.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgnf5lus2.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgooprqz.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpcgooprqz.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + 9 * 10 ^ (i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg__m9r49.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg__m9r49.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskuqr6k0.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpskuqr6k0.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36_n1mng.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp36_n1mng.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiqn3_pf.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsiqn3_pf.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj991i3hr.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpj991i3hr.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n do
        count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxy_8hcy.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsxy_8hcy.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local dp = {[1] = 2}
      for i = 2, n do
        dp[i] = dp[i - 1] + 9 * math.pow(10, i - 2)
      end
      return dp[n]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfzdz8to.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmfzdz8to.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8dhhfki.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpb8dhhfki.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 10^(i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfxpmf2e.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpcfxpmf2e.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gphlnym.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_gphlnym.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhd4_pcr.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfhd4_pcr.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1225d9r.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpa1225d9r.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1nah941.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpt1nah941.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kqudzdd.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5kqudzdd.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 3
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7b1emds.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq7b1emds.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpha03o879.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpha03o879.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xxxrhmb.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9xxxrhmb.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq96bzkji.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpq96bzkji.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb26bil0.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqb26bil0.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local function count(n, start_one, end_one)
        if n == 0 then
          return 1
        end
        local c = 0
        if start_one then
          c = c + count(n - 1, true, true)
        end
        if end_one then
          c = c + count(n - 1, false, true)
        end
        return c
      end
      return count(n, true, false)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw6sxvzn.lua:24:
    expected: 18, actual: 2\nstack traceback:\n\t/tmp/tmpsw6sxvzn.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsishb5wi.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpsishb5wi.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj81arj3b.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmpj81arj3b.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 10 ^ (i - 1)
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fnd34dh.lua:14:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0fnd34dh.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuzm8gj0.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmptuzm8gj0.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      local a = 2
      local b = 4
      for i = 3, n do
        local c = a + b
        a = b
        b = c
      end
      return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptoyax3as.lua:23:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmptoyax3as.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 9
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5wpfd73.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpa5wpfd73.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n do
        count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok5ehuwc.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpok5ehuwc.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafsvzgif.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpafsvzgif.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        return starts_one_ends(n - 1) + 9 * (n - 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyrpiom_.lua:13:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmplyrpiom_.lua:13: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 3
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrabdhx7.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqrabdhx7.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxa1b76n.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpvxa1b76n.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98etqhyu.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp98etqhyu.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q4_zimr.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmp4q4_zimr.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9glsuvp.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpw9glsuvp.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local x = 10^(n-1)
      local y = 10^(n-2)
      return x + 9*y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4dcrttt.lua:15:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpn4dcrttt.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * 10 ^ (i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouwo1lpv.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpouwo1lpv.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + math.pow(10, i - 1)
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07zu_fe1.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp07zu_fe1.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        local i = 1
        while i <= n do
            count = count + 9 * 10 ^ (i - 1)
            i = i + 1
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_vqpenh.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5_vqpenh.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqk1si0w.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzqk1si0w.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkun43xz.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpmkun43xz.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 1, n - 1 do
            count = count * 9
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4140sp_.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps4140sp_.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51ny_f86.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp51ny_f86.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local a, b = 2, 9
        for i = 2, n - 1 do
            a, b = a + b, b * 9
        end
        return a + b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0c6y3j0o.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0c6y3j0o.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        local start = 1
        local end_ = 1
        for i = 2, n do
            start = start * 10
            end_ = end_ * 10 + 1
        end
        count = count + start
        count = count + end_
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnq4zexk.lua:22:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqnq4zexk.lua:22: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1vn2bw6.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpk1vn2bw6.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj2f90_6.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoj2f90_6.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local sum = 0
      for i = 1, n - 1 do
        sum = sum + starts_one_ends(i) * (10 ^ (n - i - 1))
      end
      return sum + 10 ^ (n - 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd1efoyp.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzd1efoyp.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
       if n == 1 then
          return 2
       else
          return starts_one_ends(n-1) + 9 * count_nines(n-1)
       end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifrt8hug.lua:14:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpifrt8hug.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local a, b = 1, 1
        for i = 2, n do
            a, b = a + b, a
        end
        return a + b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wq910gu.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9wq910gu.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + 9 * 10 ^ (i - 1)
      end
      count = count + 10 ^ (n - 1)
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvw178cn.lua:18:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmvw178cn.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + 9 * (10 ^ (i - 1))
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2w1uhzk.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb2w1uhzk.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      local base = 10
      for i = 2, n do
        count = count + base
        base = base * 10
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmf1ndqo.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdmf1ndqo.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjsmoutd.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppjsmoutd.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsky8hg8.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxsky8hg8.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp146iqwul.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmp146iqwul.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 1, n - 1 do
            count = count * 9
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uz7hhmy.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4uz7hhmy.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        local function starts_one(n)
            if n == 1 then
                return 1
            end
            return 9 * starts_one(n - 1)
        end
        local function ends_one(n)
            if n == 1 then
                return 1
            end
            return 10 * ends_one(n - 1)
        end
        return starts_one(n) + ends_one(n)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkerhjzmt.lua:22:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkerhjzmt.lua:22: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        local count = 4
        for i = 3, n do
            count = count + 9 * (10 ^ (i - 2))
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5qxu3l2.lua:20:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpu5qxu3l2.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 9 * 10 ^ (i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqpviph8.lua:14:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpbqpviph8.lua:14: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local a = 1
      local b = 1
      for i = 2, n do
        a, b = b, a + b
      end
      return a + b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqsnjwo2.lua:18:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwqsnjwo2.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zqedp9m.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2zqedp9m.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local f = {0, 1, 1}
        for i = 3, n do
            f[i] = f[i - 1] + f[i - 2]
        end
        return f[n] * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49gmjcjx.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp49gmjcjx.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + 10^(i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdmbh73q.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmptdmbh73q.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      local count = 0
      for i = 1, n do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ecc8ixl.lua:20:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_ecc8ixl.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jxszl31.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3jxszl31.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i)
        end
        return count + 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2d9znc7.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps2d9znc7.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdnf1vnt.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmdnf1vnt.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlb9tow9.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzlb9tow9.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1hyi9gg.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk1hyi9gg.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop8v0ok8.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpop8v0ok8.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 10
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1as0ioj.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr1as0ioj.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82yxuir8.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp82yxuir8.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local sum = 0
      for i = 1, n - 1 do
        sum = sum + 9 * (10 ^ (i - 1))
      end
      return sum * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzo559m8.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnzo559m8.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy36auj2.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyy36auj2.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs48f02a.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgs48f02a.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local sum = 0
        for i = 1, n - 1 do
            sum = sum + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkiacc49n.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkiacc49n.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya24k19y.lua:13:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpya24k19y.lua:13: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7x_k0uq.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg7x_k0uq.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local total = 0
        for i = 1, n do
            total = total + math.pow(9, i)
        end
        return total * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyexzbltr.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyexzbltr.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      for i = 1, n - 1 do
        count = count * 10
      end
      return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr248q9d.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxr248q9d.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 4
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzf2sqps.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqzf2sqps.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n - 1 do
            count = count + starts_one_ends(i) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6surkse.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpl6surkse.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local a, b = 1, 1
      for i = 2, n do
        a, b = b, a + b
      end
      return a + b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_uzd9vc.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb_uzd9vc.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuff1dof9.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpuff1dof9.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 1, n - 1 do
            count = count * 10
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8018qe1.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpn8018qe1.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        if n == 3 then
            return 10
        end
        if n == 4 then
            return 20
        end
        if n == 5 then
            return 35
        end
        if n == 6 then
            return 56
        end
        if n == 7 then
            return 84
        end
        if n == 8 then
            return 120
        end
        if n == 9 then
            return 165
        end
        if n == 10 then
            return 220
        end
        if n == 11 then
            return 286
        end
        if n == 12 then
            return 364
        end
        if n == 13 then
            return 455
        end
        if n == 14 then
            return 560
        end
        if n == 15 then
            return 680
        end
        if n == 16 then
            return 816
        end
        if n == 17 then
            return 969
        end
        if n == 18 then
            return 1140
        end
        if n == 19 then
            return 1330
        end
        if n == 20 then
            return 1540
        end
        if n == 21 then
            return 1771
        end
        if n == 22 then
            return 2024
        end
        if n == 23 then
            return 2300
        end
        if n == 24 then
            return 2600
        end
        if n == 25 then
            return 2925
        end
        if n == 26 then
            return 3276
        end
        if n == 27 then
            return 3654
        end
        if n == 28 then
            return 4060
        end
        if n == 29 then
            return 4495
        end
        if n == 30 then
            return 4960
        end
        if n == 31 then
            return 5456
        end
        if n == 32 then
            return 5980
        end
        if n == 33 then
            return 6535
        end
        if n == 34 then
            return 7120
        end
        if n == 35 then
            return 7736
        end
        if n
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpaw7yoy_2.lua:110: ''then'' expected near ''lu''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 1
      local base = 10
      for i = 2, n do
        count = count + base
        base = base * 10
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0pfa8vz.lua:19:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb0pfa8vz.lua:19: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70dhwz6f.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp70dhwz6f.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local count = 0
      for i = 1, n - 1 do
        count = count + starts_one_ends(i)
      end
      return count + 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuimoaagr.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpuimoaagr.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local a, b = 1, 1
        for i = 2, n do
            a, b = b, a + b
        end
        return a + b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkldc0nkf.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkldc0nkf.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v5ie4vz.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7v5ie4vz.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      local sum = 0
      for i = 1, n - 1 do
        sum = sum + starts_one_ends(i) * starts_one_ends(n - i)
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uf7embs.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9uf7embs.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      if n == 1 then
        return 2
      end
      if n == 2 then
        return 3
      end
      return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24y0ky5x.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp24y0ky5x.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 0
        for i = 1, n do
            count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3djpwlmg.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3djpwlmg.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        if n == 2 then
            return 4
        end
        return starts_one_ends(n - 1) + starts_one_ends(n - 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil7ljn68.lua:16:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpil7ljn68.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local digits = {}
      for i = 1, n do
        digits[i] = 1
      end
      local count = 0
      while true do
        count = count + 1
        if digits[n] == 9 then
          local i = n - 1
          while i > 0 and digits[i] == 9 do
            i = i - 1
          end
          if i == 0 then
            break
          end
          digits[i] = digits[i] + 1
          for j = i + 1, n do
            digits[j] = 1
          end
        else
          digits[n] = digits[n] + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t4jm7uq.lua:33:
    expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmp_t4jm7uq.lua:33: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
        if n == 1 then
            return 2
        end
        local count = 1
        for i = 1, n - 1 do
            count = count * 9
        end
        return count * 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta20ao3r.lua:17:
    expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpta20ao3r.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer n, return the count of the numbers of n-digit
    -- positive integers that start or end with 1.
    local function starts_one_ends(n)
      local count = 0
      for i = 1, n do
        count = count + math.pow(10, i - 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = starts_one_ends
        lu.assertEquals(candidate(1), 1)
        lu.assertEquals(candidate(2), 18)
        lu.assertEquals(candidate(3), 180)
        lu.assertEquals(candidate(4), 1800)
        lu.assertEquals(candidate(5), 18000)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnvvy7hk.lua:15:
    expected: 18, actual: 11\nstack traceback:\n\t/tmp/tmptnvvy7hk.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
