---
name: HumanEval_159_eat
language: lua
prompt: |
  -- You're a hungry rabbit, and you already have eaten a certain number of carrots,
  -- but now you need to eat more carrots to complete the day's meals.
  -- you should return a table of [ total number of eaten carrots after your meals,
  -- the number of carrots left after your meals ]
  -- if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
  -- Example:
  -- >>> eat(5, 6, 10)
  -- {11, 4}
  -- >>> eat(4, 8, 9)
  -- {12, 1}
  -- >>> eat(1, 10, 10)
  -- {11, 0}
  -- >>> eat(2, 11, 5)
  -- {7, 0}
  -- Variables:
  -- @number : integer
  -- the number of carrots that you have eaten.
  -- @need : integer
  -- the number of carrots that you need to eat.
  -- @remaining : integer
  -- the number of remaining carrots thet exist in stock
  -- Constrain:
  -- * 0 <= number <= 1000
  -- * 0 <= need <= 1000
  -- * 0 <= remaining <= 1000
  -- Have fun :)
  local function eat(number, need, remaining)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = eat
      lu.assertEquals(candidate(5, 6, 10), {11, 4})
      lu.assertEquals(candidate(4, 8, 9), {12, 1})
      lu.assertEquals(candidate(1, 10, 10), {11, 0})
      lu.assertEquals(candidate(2, 11, 5), {7, 0})
      lu.assertEquals(candidate(4, 5, 7), {9, 2})
      lu.assertEquals(candidate(4, 5, 1), {5, 0})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
      local total = number + need
      local left = remaining - need
      if left < 0 then
          left = 0
      end
      return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      total = total + left
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    return {number + math.min(need, remaining), math.max(remaining - need, 0)}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    if number + need <= remaining then
      return {number + need, remaining - (number + need)}
    else
      return {number + remaining, 0}
    end
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    return {number + need, remaining - need}
  end
- |2-
      if number + need > remaining then
          return {remaining, 0}
      else
          return {number + need, remaining - (number + need)}
      end
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      total = total + left
      left = 0
    end
    return {total, left}
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
      local total = number + need
      local left = remaining - need
      if left < 0 then
          left = 0
      end
      return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
      local total = number + need
      local left = remaining - need
      if left < 0 then
          left = 0
      end
      return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
      local total = number + need
      local left = remaining - need
      if left < 0 then
          left = 0
      end
      return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      total = total + left
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local number = number
    local need = need
    local remaining = remaining
    local total = number + need
    local left = remaining - need
    if remaining < need then
      total = number + remaining
      left = 0
    end
    return {total, left}
  end
- |2-
    return {number + need, remaining - need}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
      -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      local total = number + need
      local left = remaining - need
      if left < 0 then
          total = total + left
          left = 0
      end
      return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local eaten = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {eaten, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    if remaining < need then
      return {number + remaining, 0}
    else
      return {number + need, remaining - need}
    end
  end
- |2-
    -- your code here
  end
- |2-
    if number + need <= remaining then
      return {number + need, remaining - (number + need)}
    else
      return {number + remaining, 0}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
    return {number + need, remaining - need}
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
      -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if total > remaining then
      total = remaining
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if total > remaining then
      total = remaining
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      total = total + left
      left = 0
    end
    return {total, left}
  end
- |2-
    if number + need > remaining then
      return {remaining, 0}
    else
      return {number + need, remaining - (number + need)}
    end
  end
- |2-
    -- your code here
    local eaten = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {eaten, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if total > remaining then
      total = remaining
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      total = total + left
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
      local total = number + need
      local left = remaining - need
      if left < 0 then
          left = 0
      end
      return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
      -- Write your code here
  end
- |2-
    -- your code here
    if number + need > remaining then
      return {remaining, 0}
    else
      return {number + need, remaining - (number + need)}
    end
  end
- |2-
    -- your code here
  end
- |2-
    local eaten = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {eaten, left}
  end
- |2-
    -- your code here
  end
- |2-
    if remaining >= need then
      return {number + need, remaining - need}
    else
      return {number + remaining, 0}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
    if remaining >= need then
      return {number + need, remaining - need}
    else
      return {number + remaining, 0}
    end
  end
- |2-
    local carrots = number + need
    if carrots > remaining then
      return {remaining, 0}
    else
      return {carrots, remaining - carrots}
    end
  end
- |2-
    -- your code here
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    local total = number + need
    local left = remaining - need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, left}
    end
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    if remaining >= need then
      return {number + need, remaining - need}
    else
      return {number + remaining, 0}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    return {number + math.min(need, remaining), math.max(remaining - need, 0)}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    return {number + need, remaining - need}
  end
- |2-
    -- your code here
    local total = number + need
    local left = remaining - need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, left}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if total > remaining then
      total = remaining
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      total = total + left
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    if total > remaining then
      return {remaining, 0}
    else
      return {total, remaining - total}
    end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
      if need <= remaining then
          return {number + need, remaining - need}
      else
          return {number + remaining, 0}
      end
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local total = number + need
    local left = remaining - need
    if left < 0 then
      left = 0
    end
    return {total, left}
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
