name: HumanEval_159_eat
language: lua
prompt: "-- You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
  -- you should return a table of [ total number of eaten carrots after your meals,\n\
  -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
  -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
  \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
  \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
  -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
  \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
  \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
  local function eat(number, need, remaining)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
  \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
  \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
  \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
  \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- your code here\nend", "  -- your code here\nend", "    -- your\
    \ code here\n    local total = number + need\n    local left = remaining - need\n\
    \    if left < 0 then\n        left = 0\n    end\n    return {total, left}\nend",
  "  -- your code here\nend", "  local total = number + need\n  local left = remaining\
    \ - need\n  if left < 0 then\n    total = total + left\n    left = 0\n  end\n\
    \  return {total, left}\nend", "  -- your code here\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  local total = number + need\n  local left\
    \ = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {total,\
    \ left}\nend", "  return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "  -- your code here\nend", "  -- your code here\nend", " \
    \ -- your code here\nend", "  -- your code here\nend", "  local total = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \  end\n  return {total, left}\nend", "  -- your code here\nend", "  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend", "  -- your code here\nend", "  if\
    \ number + need <= remaining then\n    return {number + need, remaining - (number\
    \ + need)}\n  else\n    return {number + remaining, 0}\n  end\nend", "  -- your\
    \ code here\nend", "    -- your code here\nend", "  -- your code here\nend", " \
    \ local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  return {number + need,\
    \ remaining - need}\nend", "    if number + need > remaining then\n        return\
    \ {remaining, 0}\n    else\n        return {number + need, remaining - (number\
    \ + need)}\n    end\nend", "  local total = number + need\n  local left = remaining\
    \ - need\n  if left < 0 then\n    total = total + left\n    left = 0\n  end\n\
    \  return {total, left}\nend", "  local total = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {total,\
    \ left}\nend", "  local total = number + need\n  if total > remaining then\n \
    \   return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "  local total = number + need\n  local left = remaining - need\n\
    \  if left < 0 then\n    left = 0\n  end\n  return {total, left}\nend", "    local\
    \ total = number + need\n    local left = remaining - need\n    if left < 0 then\n\
    \        left = 0\n    end\n    return {total, left}\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "    -- your code here\n\
    \    local total = number + need\n    local left = remaining - need\n    if left\
    \ < 0 then\n        left = 0\n    end\n    return {total, left}\nend", "  -- your\
    \ code here\nend", "    -- your code here\n    local total = number + need\n \
    \   local left = remaining - need\n    if left < 0 then\n        left = 0\n  \
    \  end\n    return {total, left}\nend", "  -- your code here\nend", "  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    total = total\
    \ + left\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  local number = number\n  local need\
    \ = need\n  local remaining = remaining\n  local total = number + need\n  local\
    \ left = remaining - need\n  if remaining < need then\n    total = number + remaining\n\
    \    left = 0\n  end\n  return {total, left}\nend", "  return {number + need,\
    \ remaining - need}\nend", "  -- your code here\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  local total =\
    \ number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "    -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "    local total = number + need\n    local left = remaining - need\n\
    \    if left < 0 then\n        total = total + left\n        left = 0\n    end\n\
    \    return {total, left}\nend", "  -- your code here\nend", "  -- your code here\n\
    end", "  local total = number + need\n  local left = remaining - need\n  if left\
    \ < 0 then\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code\
    \ here\nend", "  local total = number + need\n  if total > remaining then\n  \
    \  return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\nend", "  local total = number + need\n  if total >\
    \ remaining then\n    return {remaining, 0}\n  else\n    return {total, remaining\
    \ - total}\n  end\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  -- your code\
    \ here\n  local total = number + need\n  local left = remaining - need\n  if left\
    \ < 0 then\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "  local\
    \ eaten = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {eaten, left}\nend", "  -- your code here\nend",
  "  -- your code here\n  local total = number + need\n  local left = remaining -\
    \ need\n  if left < 0 then\n    left = 0\n  end\n  return {total, left}\nend",
  "  -- your code here\nend", "  if remaining < need then\n    return {number + remaining,\
    \ 0}\n  else\n    return {number + need, remaining - need}\n  end\nend", "  --\
    \ your code here\nend", "  if number + need <= remaining then\n    return {number\
    \ + need, remaining - (number + need)}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend", "  -- your code here\nend", "  -- your code here\nend", " \
    \ -- your code here\nend", "    -- your code here\nend", "  -- your code here\n\
    end", "  -- your code here\n  return {number + need, remaining - need}\nend",
  "  -- your code here\nend", "  local total = number + need\n  local left = remaining\
    \ - need\n  if left < 0 then\n    left = 0\n  end\n  return {total, left}\nend",
  "    -- your code here\nend", "  -- your code here\nend", "  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend", "  -- your code here\nend",
  "  local total = number + need\n  local left = remaining - need\n  if total > remaining\
    \ then\n    total = remaining\n    left = 0\n  end\n  return {total, left}\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  local total = number\
    \ + need\n  local left = remaining - need\n  if total > remaining then\n    total\
    \ = remaining\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "  -- your\
    \ code here\nend", "  local total = number + need\n  local left = remaining -\
    \ need\n  if left < 0 then\n    left = 0\n  end\n  return {total, left}\nend",
  "  local total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    total = total + left\n    left = 0\n  end\n  return {total, left}\nend",
  "  if number + need > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {number + need, remaining - (number + need)}\n  end\nend", "  -- your code here\n\
    \  local eaten = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n  end\n  return {eaten, left}\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "    -- your code here\nend", "  -- your code\
    \ here\nend", "  local total = number + need\n  local left = remaining - need\n\
    \  if total > remaining then\n    total = remaining\n    left = 0\n  end\n  return\
    \ {total, left}\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  local total = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    total = total\
    \ + left\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\n\
    end", "    local total = number + need\n    local left = remaining - need\n  \
    \  if left < 0 then\n        left = 0\n    end\n    return {total, left}\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend", "  -- your code here\nend",
  "    -- Write your code here\nend", "  -- your code here\n  if number + need > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {number + need, remaining\
    \ - (number + need)}\n  end\nend", "  -- your code here\nend", "  local eaten\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {eaten, left}\nend", "  -- your code here\nend", "  if\
    \ remaining >= need then\n    return {number + need, remaining - need}\n  else\n\
    \    return {number + remaining, 0}\n  end\nend", "  -- your code here\nend",
  "  -- your code here\n  if remaining >= need then\n    return {number + need, remaining\
    \ - need}\n  else\n    return {number + remaining, 0}\n  end\nend", "  local carrots\
    \ = number + need\n  if carrots > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {carrots, remaining - carrots}\n  end\nend", "  -- your code\
    \ here\n  local total = number + need\n  local left = remaining - need\n  if left\
    \ < 0 then\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\nend",
  "  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  local total\
    \ = number + need\n  local left = remaining - need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, left}\n  end\nend", " \
    \ local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\n\
    end", "  if remaining >= need then\n    return {number + need, remaining - need}\n\
    \  else\n    return {number + remaining, 0}\n  end\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "  return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "  -- your code here\nend", "  -- your code here\nend", " \
    \ return {number + need, remaining - need}\nend", "  -- your code here\n  local\
    \ total = number + need\n  local left = remaining - need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, left}\n  end\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  local total = number + need\n  local left = remaining\
    \ - need\n  if total > remaining then\n    total = remaining\n    left = 0\n \
    \ end\n  return {total, left}\nend", "  -- your code here\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "    -- your code here\nend", "  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    total = total + left\n    left = 0\n  end\n  return {total, left}\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "    if\
    \ need <= remaining then\n        return {number + need, remaining - need}\n \
    \   else\n        return {number + remaining, 0}\n    end\nend", "  -- your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
