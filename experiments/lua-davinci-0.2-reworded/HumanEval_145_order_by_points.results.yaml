---
name: HumanEval_145_order_by_points
language: lua
results:
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpxjaf_os9.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmps_ob9yex.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpq_l59t32.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        -- your code here
        local sum = {}
        for i, v in ipairs(nums) do
            local s = 0
            for j = 1, #tostring(v) do
                s = s + tonumber(tostring(v):sub(j, j))
            end
            sum[i] = s
        end
        local t = {}
        for i, v in ipairs(sum) do
            t[i] = {v, i}
        end
        table.sort(t, function(a, b)
            if a[1] == b[1] then
                return a[2] < b[2]
            else
                return a[1] < b[1]
            end
        end)
        local res = {}
        for i, v in ipairs(t) do
            res[i] = nums[v[2]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpecx6osew.lua:16:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpecx6osew.lua:16:
    in local 'candidate'\n\t/tmp/tmpecx6osew.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpewmrqskx.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpwt5y77xs.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpr_lkn6o9.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
        local sum = 0
        for j = 1, #tostring(v) do
          sum = sum + tonumber(tostring(v):sub(j, j))
        end
        sum_of_digits[i] = sum
      end
      local sorted = {}
      for i = 1, #nums do
        local min = math.min(unpack(sum_of_digits))
        local index = table.index_of(sum_of_digits, min)
        table.insert(sorted, nums[index])
        table.remove(sum_of_digits, index)
        table.remove(nums, index)
      end
      return sorted
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfui0rj9.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzfui0rj9.lua:15:
    in local 'candidate'\n\t/tmp/tmpzfui0rj9.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpez240zjq.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpyzhf_j98.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpa0gibyz5.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpt_e7gdf7.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + (n % 10)
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpz_6m69js.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp6svbpgdm.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpyt19pti7.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnj26y6ib.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpi49m_6vt.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp96snpgel.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp80wuhi05.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmplvbogoj2.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpcj91pmzo.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpo0lsh4nw.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpko53swc_.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpq3vskt5b.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local points = {}
      for i, num in ipairs(nums) do
        local sum = 0
        for digit in tostring(num):gmatch("%d") do
          sum = sum + tonumber(digit)
        end
        points[i] = sum
      end
      local sorted = {}
      for i, num in ipairs(nums) do
        local min = math.min(unpack(points))
        local min_index = table.indexof(points, min)
        table.insert(sorted, nums[min_index])
        table.remove(points, min_index)
        table.remove(nums, min_index)
      end
      return sorted
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiej8y_rs.lua:21:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpiej8y_rs.lua:21:
    in local 'candidate'\n\t/tmp/tmpiej8y_rs.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, v in ipairs(nums) do
            local sum = 0
            for digit in tostring(v):gmatch("%d") do
                sum = sum + tonumber(digit)
            end
            sum_of_digits[i] = sum
        end
        table.sort(nums, function(a, b)
            if sum_of_digits[a] == sum_of_digits[b] then
                return a < b
            else
                return sum_of_digits[a] < sum_of_digits[b]
            end
        end)
        return nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6x7trm4.lua:23:
    attempt to compare nil with number\nstack traceback:\n\t/tmp/tmps6x7trm4.lua:23:
    in function </tmp/tmps6x7trm4.lua:19>\n\t[C]: in function 'table.sort'\n\t/tmp/tmps6x7trm4.lua:19:
    in local 'candidate'\n\t/tmp/tmps6x7trm4.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpk9rt2qis.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpq01n6xla.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpi8503d89.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpphpy1rpq.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpzyuk99x5.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5upt600r.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        -- your code here
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpideen2rt.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        -- TODO: implement the function here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kohvtkd.lua:17:
    expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp5kohvtkd.lua:17:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpeiha7u84.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp570qs1ar.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpxy7g55mn.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_r4wl_1h.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2kencmb2.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp365k97vx.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpdrehb286.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmplh41sw91.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp8tbmnpy6.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp95vsefj1.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpg25rv4fs.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + (n % 10)
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp8zz1wkim.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp1fmvnelj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpaen5advi.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2y6zgoa0.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnd9pjp57.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpl1ndxitr.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function get_sum(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2mnbj_qb.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjcn9id0v.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpe5ik3jcg.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5au28dbu.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpud797aak.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_table = {}
        local result = {}
        for i, v in ipairs(nums) do
            local sum = 0
            while v ~= 0 do
                sum = sum + v % 10
                v = math.floor(v / 10)
            end
            sum_table[i] = sum
        end
        local index = 1
        while #nums > 0 do
            local min_sum = math.huge
            local min_index = 0
            for i, v in ipairs(sum_table) do
                if v < min_sum then
                    min_sum = v
                    min_index = i
                end
            end
            result[index] = nums[min_index]
            table.remove(nums, min_index)
            table.remove(sum_table, min_index)
            index = index + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnh9te1i1.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpl5ptjqly.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local s = 0
            while n > 0 do
                s = s + n % 10
                n = math.floor(n / 10)
            end
            return s
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp3yqxrlyp.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local sums = {}
      for i, n in ipairs(nums) do
        sums[i] = sum_of_digits(n)
      end
      table.sort(sums)
      local result = {}
      for _, s in ipairs(sums) do
        for i, n in ipairs(nums) do
          if sum_of_digits(n) == s then
            table.insert(result, n)
            table.remove(nums, i)
            break
          end
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdrla1wy.lua:13:
    attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpwdrla1wy.lua:13:
    in local 'candidate'\n\t/tmp/tmpwdrla1wy.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmptn1z6vsz.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2bipiaf1.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpbbtp371h.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpce868gms.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp98cip0z6.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpul4hxn5n.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpwejdy8qj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_t_tqxe0.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmph_8mzfci.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, v in ipairs(nums) do
            local sum = 0
            for j = 1, #tostring(v) do
                sum = sum + tonumber(tostring(v):sub(j, j))
            end
            sum_of_digits[i] = sum
        end
        local sorted_nums = {}
        for i, v in ipairs(sum_of_digits) do
            local min = math.min(unpack(sum_of_digits))
            local index = table.index_of(sum_of_digits, min)
            table.insert(sorted_nums, nums[index])
            sum_of_digits[index] = math.max(unpack(sum_of_digits))
        end
        return sorted_nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybx9qm_k.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpybx9qm_k.lua:15:
    in local 'candidate'\n\t/tmp/tmpybx9qm_k.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmppvnm10tt.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpp6ju04f6.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpr5jujjok.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5og8ta0i.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + (n % 10)
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpmmtjc2is.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function get_sum(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp85djzju8.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpyzxhw46_.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpq54jgvrj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local result = {}
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
        local sum = 0
        for d in tostring(v):gmatch("%d") do
          sum = sum + tonumber(d)
        end
        sum_of_digits[i] = sum
      end
      table.sort(sum_of_digits)
      for i, v in ipairs(sum_of_digits) do
        for j, w in ipairs(nums) do
          local sum = 0
          for d in tostring(w):gmatch("%d") do
            sum = sum + tonumber(d)
          end
          if sum == v then
            result[i] = w
            nums[j] = nil
            break
          end
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegrg81rf.lua:40:
    expected: {-1, -11, 1, -12, 11}\nactual: {1}\nstack traceback:\n\t/tmp/tmpegrg81rf.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmparkrz5a8.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpow4052xi.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp40cgx51k.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function get_sum(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpz2ndws21.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpfowwc2ph.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, v in ipairs(nums) do
            sum_of_digits[i] = {v, sum_digits(v)}
        end
        table.sort(sum_of_digits, function(a, b)
            if a[2] == b[2] then
                return a[1] < b[1]
            else
                return a[2] < b[2]
            end
        end)
        local result = {}
        for i, v in ipairs(sum_of_digits) do
            result[i] = v[1]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg3zkdtg9.lua:13:
    attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpg3zkdtg9.lua:13:
    in local 'candidate'\n\t/tmp/tmpg3zkdtg9.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5yefnjrw.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpreqwp2dd.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjzxdv72e.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpb3x8hi8h.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp8_l59flr.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp3ifyb671.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2ck9av4k.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpra8fqlab.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + (n % 10)
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpkhwo83i6.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpcdyca62c.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpmsu5mwuj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpahitvk44.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local s = 0
            while n > 0 do
                s = s + n % 10
                n = math.floor(n / 10)
            end
            return s
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp6bjpd5jd.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpm2lz4n8e.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpqxtxllqm.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local t = {}
        for i, v in ipairs(nums) do
            t[i] = {v, v % 10 + math.floor(v / 10)}
        end
        table.sort(t, function(a, b)
            if a[2] == b[2] then
                return a[1] < b[1]
            else
                return a[2] < b[2]
            end
        end)
        for i, v in ipairs(t) do
            t[i] = v[1]
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgx0vf1f.lua:31:
    expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\t/tmp/tmpmgx0vf1f.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_rjvycvn.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpz4f_gyzj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        for digit in tostring(num):gmatch('%d') do
          sum = sum + tonumber(digit)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpl5t49nho.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpdr5vhdom.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpmhsk406n.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnirqp62f.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp8v5vuoay.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpy0w2_fsi.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, v in ipairs(nums) do
            local sum = 0
            for j = 1, #tostring(v) do
                sum = sum + tonumber(tostring(v):sub(j, j))
            end
            sum_of_digits[i] = sum
        end
        local function compare(a, b)
            if sum_of_digits[a] == sum_of_digits[b] then
                return a < b
            else
                return sum_of_digits[a] < sum_of_digits[b]
            end
        end
        local sorted_index = {}
        for i, v in ipairs(nums) do
            sorted_index[i] = i
        end
        table.sort(sorted_index, compare)
        local sorted_nums = {}
        for i, v in ipairs(sorted_index) do
            sorted_nums[i] = nums[v]
        end
        return sorted_nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30fhw9_8.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp30fhw9_8.lua:15:
    in local 'candidate'\n\t/tmp/tmp30fhw9_8.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum = {}
        for i, v in ipairs(nums) do
            local s = 0
            for c in tostring(v):gmatch(".") do
                s = s + tonumber(c)
            end
            sum[i] = s
        end
        table.sort(nums, function(a, b)
            return sum[a] < sum[b]
        end)
        return nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_2664t3.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmps_2664t3.lua:15:
    in local 'candidate'\n\t/tmp/tmps_2664t3.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpm0_3gpmg.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, v in ipairs(nums) do
            local sum = 0
            for j = 1, #tostring(v) do
                sum = sum + tonumber(tostring(v):sub(j, j))
            end
            sum_of_digits[i] = sum
        end
        local sorted_nums = {}
        for i, v in ipairs(sum_of_digits) do
            local min_index = i
            for j = i + 1, #sum_of_digits do
                if sum_of_digits[j] < sum_of_digits[min_index] then
                    min_index = j
                end
            end
            sum_of_digits[i], sum_of_digits[min_index] = sum_of_digits[min_index], sum_of_digits[i]
            sorted_nums[i] = nums[min_index]
        end
        return sorted_nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnt3iyjai.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpnt3iyjai.lua:15:
    in local 'candidate'\n\t/tmp/tmpnt3iyjai.lua:36: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpgdjrhkv4.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpb8lmm2uf.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpdo9iibt6.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjuh6529t.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, v in ipairs(nums) do
            local sum = 0
            for j = 1, #tostring(v) do
                sum = sum + tonumber(tostring(v):sub(j, j))
            end
            sum_of_digits[i] = sum
        end
        local sorted_nums = {}
        for i, v in ipairs(sum_of_digits) do
            local min = math.min(unpack(sum_of_digits))
            local min_index = 0
            for j, v2 in ipairs(sum_of_digits) do
                if v2 == min then
                    min_index = j
                    break
                end
            end
            table.insert(sorted_nums, nums[min_index])
            table.remove(sum_of_digits, min_index)
            table.remove(nums, min_index)
        end
        return sorted_nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5agsz8h.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpm5agsz8h.lua:15:
    in local 'candidate'\n\t/tmp/tmpm5agsz8h.lua:39: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp1ea8eig4.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp614ejrnq.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpoex6pyg2.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpkpmzcy28.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_table = {}
        local sum_table_index = {}
        local sum_table_index_index = 1
        for i, v in ipairs(nums) do
            local sum = 0
            for j = 1, #tostring(v) do
                sum = sum + tonumber(tostring(v):sub(j, j))
            end
            if sum_table[sum] == nil then
                sum_table[sum] = {}
                sum_table_index[sum_table_index_index] = sum
                sum_table_index_index = sum_table_index_index + 1
            end
            table.insert(sum_table[sum], v)
        end
        table.sort(sum_table_index)
        local result = {}
        for i, v in ipairs(sum_table_index) do
            for j, k in ipairs(sum_table[v]) do
                table.insert(result, k)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm78z3hd.lua:17:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpsm78z3hd.lua:17:
    in local 'candidate'\n\t/tmp/tmpsm78z3hd.lua:39: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5kku623u.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp63agggtc.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2zdsq_bh.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp6coow7ih.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmphawaux7n.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp57pclj3a.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5zydp1o0.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpgq0ksh2c.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpe15cxydk.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpop21j5b_.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function compare(a, b)
            local sum_a = 0
            local sum_b = 0
            for i = 1, #tostring(a) do
                sum_a = sum_a + tonumber(tostring(a):sub(i, i))
            end
            for i = 1, #tostring(b) do
                sum_b = sum_b + tonumber(tostring(b):sub(i, i))
            end
            if sum_a == sum_b then
                return a < b
            else
                return sum_a < sum_b
            end
        end
        table.sort(nums, compare)
        return nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqllyn3su.lua:15:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpqllyn3su.lua:15:
    in function </tmp/tmpqllyn3su.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpqllyn3su.lua:26:
    in local 'candidate'\n\t/tmp/tmpqllyn3su.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpdyu806ec.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_qoj15_c.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpwu2dd9pl.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpq7ig36oe.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp8q28q_py.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpeuyfjcmo.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpe7537akn.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpn1r0c17e.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmplmx9307j.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpldtnbwgj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp8c0lg66f.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp9ekgzgvc.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjll6cz5q.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjn2073dd.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_e8maz8t.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp3s5yti5r.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp65hqe9jv.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp2p2va2hy.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpqmm4n29h.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp55yp99hn.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum = {}
        for i, v in ipairs(nums) do
            local s = 0
            while v > 0 do
                s = s + v % 10
                v = math.floor(v / 10)
            end
            sum[i] = s
        end
        local function cmp(i, j)
            return sum[i] < sum[j] or (sum[i] == sum[j] and i < j)
        end
        local t = {}
        for i, v in ipairs(nums) do
            t[i] = i
        end
        table.sort(t, cmp)
        local ret = {}
        for i, v in ipairs(t) do
            ret[i] = nums[v]
        end
        return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8xbc8pn.lua:38:
    expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\t/tmp/tmpu8xbc8pn.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum = {}
        for i, v in ipairs(nums) do
            local s = 0
            for d in tostring(v):gmatch("%d") do
                s = s + tonumber(d)
            end
            sum[i] = s
        end
        table.sort(nums, function(a, b)
            return sum[a] < sum[b]
        end)
        return nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf_se4vb.lua:20:
    attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplf_se4vb.lua:20:
    in function </tmp/tmplf_se4vb.lua:19>\n\t[C]: in function 'table.sort'\n\t/tmp/tmplf_se4vb.lua:19:
    in local 'candidate'\n\t/tmp/tmplf_se4vb.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpbax1a6nc.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp9etswjk8.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpamil66qt.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_5h_xs6m.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpi2dvsfxa.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpnnpmqv9y.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpyx637xx8.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp70x2o1gj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpjd7jojr0.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local nums_with_points = {}
        for i, num in ipairs(nums) do
            local points = 0
            for digit in tostring(num):gmatch("%d") do
                points = points + tonumber(digit)
            end
            nums_with_points[i] = {num, points}
        end
        table.sort(nums_with_points, function(a, b)
            if a[2] == b[2] then
                return a[1] < b[1]
            else
                return a[2] < b[2]
            end
        end)
        local result = {}
        for i, num_with_points in ipairs(nums_with_points) do
            result[i] = num_with_points[1]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9bvgvrc.lua:36:
    expected: {-1, -11, 1, -12, 11}\nactual: {-1, 1, -11, 11, -12}\nstack traceback:\n\t/tmp/tmpd9bvgvrc.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpc2w4up6b.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmppkszs5pm.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpifzivfdb.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmprhg46_56.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpg_zw3ht3.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp58t8g2_n.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpd8md4d0c.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmppi0kmjoi.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpfic8x1dd.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sum_of_digits = {}
        for i, num in ipairs(nums) do
            local sum = 0
            for digit in tostring(num):gmatch("%d") do
                sum = sum + tonumber(digit)
            end
            sum_of_digits[i] = sum
        end
        table.sort(nums, function(a, b)
            if sum_of_digits[a] == sum_of_digits[b] then
                return a < b
            else
                return sum_of_digits[a] < sum_of_digits[b]
            end
        end)
        return nums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1zn0aov.lua:23:
    attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_1zn0aov.lua:23:
    in function </tmp/tmp_1zn0aov.lua:19>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp_1zn0aov.lua:19:
    in local 'candidate'\n\t/tmp/tmp_1zn0aov.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + (n % 10)
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpgaf1o43r.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmphh_idojt.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpmhh06h1i.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sums = {}
        for i, num in ipairs(nums) do
            sums[i] = num
        end
        table.sort(sums, function(a, b)
            local sum_a = 0
            local sum_b = 0
            for i = 1, #tostring(a) do
                sum_a = sum_a + tonumber(tostring(a):sub(i, i))
            end
            for i = 1, #tostring(b) do
                sum_b = sum_b + tonumber(tostring(b):sub(i, i))
            end
            if sum_a == sum_b then
                return a < b
            end
            return sum_a < sum_b
        end)
        return sums
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1zgtk35.lua:19:
    attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpf1zgtk35.lua:19:
    in function </tmp/tmpf1zgtk35.lua:15>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpf1zgtk35.lua:15:
    in local 'candidate'\n\t/tmp/tmpf1zgtk35.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(n)
            local sum = 0
            while n > 0 do
                sum = sum + n % 10
                n = math.floor(n / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpa1z4lstf.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpwrzle3z5.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpe34tyjdc.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local sum_of_digits = {}
      for i, v in ipairs(nums) do
        local sum = 0
        for digit in tostring(v):gmatch("%d") do
          sum = sum + tonumber(digit)
        end
        sum_of_digits[i] = sum
      end
      table.sort(sum_of_digits)
      local result = {}
      for i, v in ipairs(sum_of_digits) do
        for j, k in ipairs(nums) do
          local sum = 0
          for digit in tostring(k):gmatch("%d") do
            sum = sum + tonumber(digit)
          end
          if sum == v then
            result[i] = k
            table.remove(nums, j)
            break
          end
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8imfp_yj.lua:40:
    expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\t/tmp/tmp8imfp_yj.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpzm_ybuy7.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpowxpejxc.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp3ljm_y60.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_gsaheqb.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_c6g_8p9.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local sums = {}
        for i, num in ipairs(nums) do
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            sums[i] = sum
        end
        table.sort(sums)
        local result = {}
        for i, sum in ipairs(sums) do
            for j, num in ipairs(nums) do
                local sum2 = 0
                while num > 0 do
                    sum2 = sum2 + num % 10
                    num = math.floor(num / 10)
                end
                if sum2 == sum then
                    result[i] = nums[j]
                    table.remove(nums, j)
                    break
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yyw_9xp.lua:42:
    expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\t/tmp/tmp3yyw_9xp.lua:42:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_jl8d6s2.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_of_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp39690_wr.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmphe7ob4qd.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_1fuufuo.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_digits(n)
        local sum = 0
        while n > 0 do
          sum = sum + n % 10
          n = math.floor(n / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpu82kndn7.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpxzl2765i.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        local function sum_of_digits(num)
            local sum = 0
            while num > 0 do
                sum = sum + num % 10
                num = math.floor(num / 10)
            end
            return sum
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_kzk2ctm.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
      local function sum_of_digits(num)
        local sum = 0
        while num > 0 do
          sum = sum + num % 10
          num = math.floor(num / 10)
        end
        return sum
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpo3taz0qj.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function which sorts the given table of integers
    -- in ascending order according to the sum of their digits.
    -- Note: if there are several items with similar sum of their digits,
    -- order them based on their index in original table.
    -- For example:
    -- >>> order_by_points({1, 11, -1, -11, -12})
    -- {-1, -11, 1, -12, 11}
    -- >>> order_by_points({})
    -- {}
    local function order_by_points(nums)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = order_by_points
        lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})
        lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})
        lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})
        lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0r3cgthf.lua:17:
    expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp0r3cgthf.lua:17:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
