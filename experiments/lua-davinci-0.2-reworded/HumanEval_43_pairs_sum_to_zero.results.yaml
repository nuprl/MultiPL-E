---
name: HumanEval_43_pairs_sum_to_zero
language: lua
results:
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- YOUR CODE HERE
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: use the table.sort function
        -- Hint: use the table.concat function
        -- Hint: use the table.insert function
        -- Hint: use the table.remove function
        -- Hint: use the table.unpack function
        -- Hint: use the table.pack function
        -- Hint: use the table.move function
        -- Hint: use the table.maxn function
        -- Hint: use the table.foreach function
        -- Hint: use the table.foreachi function
        -- Hint: use the table.getn function
        -- Hint: use the table.setn function
        -- Hint: use the table.sort function
        -- Hint: use the table.concat function
        -- Hint: use the table.insert function
        -- Hint: use the table.remove function
        -- Hint: use the table.unpack function
        -- Hint: use the table.pack function
        -- Hint: use the table.move function
        -- Hint: use the table.maxn function
        -- Hint: use the table.foreach function
        -- Hint: use the table.foreachi function
        -- Hint: use the table.getn function
        -- Hint: use the table.setn function
        -- Hint: use the table.sort function
        -- Hint: use the table.concat function
        -- Hint: use the table.insert function
        -- Hint: use the table.remove function
        -- Hint: use the table.unpack function
        -- Hint: use the table.pack function
        -- Hint: use the table.move function
        -- Hint: use the table.maxn function
        -- Hint: use the table.foreach function
        -- Hint: use the table.foreachi function
        -- Hint: use the table.getn function
        -- Hint: use the table.setn function
        -- Hint: use the table.sort function
        -- Hint: use the table.concat function
        -- Hint: use the table.insert function
        -- Hint: use the table.remove function

    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpqo68o15u.lua:72: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        --[[
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
        ]]
        local hash = {}
        for i = 1, #l do
            if hash[-l[i]] then
                return true
            end
            hash[l[i]] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local h = {}
        for _, v in ipairs(l) do
            if h[-v] then
                return true
            end
            h[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- your code here
      local s = {}
      for i, v in ipairs(l) do
        if s[v] then
          return true
        else
          s[-v] = true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- your code here
      local set = {}
      for _, v in ipairs(l) do
        if set[-v] then
          return true
        end
        set[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u5hzoar.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1u5hzoar.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt16ar2ai.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt16ar2ai.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local s = {}
      for _, v in ipairs(l) do
        if s[-v] then
          return true
        end
        s[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local zero_set = {}
        for _, v in ipairs(l) do
            if zero_set[-v] then
                return true
            end
            zero_set[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local h = {}
      for i = 1, #l do
        if h[l[i]] then
          return true
        end
        h[-l[i]] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        for i = 1, #l do
            for j = i+1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local zero_set = {}
        for _, v in ipairs(l) do
            if zero_set[-v] then
                return true
            end
            zero_set[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg47iuffa.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg47iuffa.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- your code here
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: you may want to use the helper function `contains`
        -- which is defined above.
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local n = #l
        for i = 1, n do
            for j = i + 1, n do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2w3agsj.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc2w3agsj.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: use a nested loop
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local s = {}
      for _, v in ipairs(l) do
        if s[-v] then
          return true
        end
        s[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the table.sort function
      local sorted = {}
      for k, v in pairs(l) do
        table.insert(sorted, v)
      end
      table.sort(sorted)
      local i = 1
      local j = #sorted
      while i < j do
        if sorted[i] + sorted[j] == 0 then
          return true
        elseif sorted[i] + sorted[j] < 0 then
          i = i + 1
        else
          j = j - 1
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local set = {}
      for _, v in ipairs(l) do
        if set[-v] then
          return true
        end
        set[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use a nested loop.
      -- Hint: use the table.sort function.
      -- Hint: use the table.concat function.
      -- Hint: use the table.insert function.
      -- Hint: use the table.remove function.
      -- Hint: use the table.unpack function.
      -- Hint: use the string.format function.
      -- Hint: use the string.sub function.
      -- Hint: use the string.gsub function.
      -- Hint: use the string.match function.
      -- Hint: use the string.gmatch function.
      -- Hint: use the string.find function.
      -- Hint: use the string.reverse function.
      -- Hint: use the string.len function.
      -- Hint: use the string.char function.
      -- Hint: use the string.byte function.
      -- Hint: use the string.rep function.
      -- Hint: use the string.lower function.
      -- Hint: use the string.upper function.
      -- Hint: use the string.dump function.
      -- Hint: use the string.gsub function.
      -- Hint: use the string.match function.
      -- Hint: use the string.gmatch function.
      -- Hint: use the string.find function.
      -- Hint: use the string.reverse function.
      -- Hint: use the string.len function.
      -- Hint: use the string.char function.
      -- Hint: use the string.byte function.
      -- Hint: use the string.rep function.
      -- Hint: use the string.lower function.
      -- Hint: use the string.upper function.
      -- Hint: use the string.dump function.
      -- Hint: use the string.gsub function.
      -- Hint: use the string.match function.
      -- Hint: use the string.gmatch function.
      -- Hint: use the string.find function.
      -- Hint: use the string.reverse function.
      -- Hint: use the string.len function.
      --
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpts8vb7ov.lua:70: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local found = {}
        for _, v in ipairs(l) do
            if found[-v] then
                return true
            end
            found[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                if i ~= j and v + w == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local set = {}
        for _, v in ipairs(l) do
            if set[-v] then
                return true
            end
            set[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0db6unl.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0db6unl.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the table.sort function
      local sorted = table.sort(l)
      for i = 1, #sorted do
        for j = i+1, #sorted do
          if sorted[i] + sorted[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoh8ksmm6.lua:18:
    attempt to get length of a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmpoh8ksmm6.lua:18:
    in local 'candidate'\n\t/tmp/tmpoh8ksmm6.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: you can use the table.sort function
        -- Hint: you can use the table.insert function
        -- Hint: you can use the table.remove function
        -- Hint: you can use the table.concat function
        -- Hint: you can use the table.unpack function
        -- Hint: you can use the table.pack function
        -- Hint: you can use the table.move function
        -- Hint: you can use the table.maxn function
        -- Hint: you can use the table.foreach function
        -- Hint: you can use the table.foreachi function
        -- Hint: you can use the table.getn function
        -- Hint: you can use the table.setn function
        -- Hint: you can use the table.sort function
        -- Hint: you can use the table.insert function
        -- Hint: you can use the table.remove function
        -- Hint: you can use the table.concat function
        -- Hint: you can use the table.unpack function
        -- Hint: you can use the table.pack function
        -- Hint: you can use the table.move function
        -- Hint: you can use the table.maxn function
        -- Hint: you can use the table.foreach function
        -- Hint: you can use the table.foreachi function
        -- Hint: you can use the table.getn function
        -- Hint: you can use the table.setn function
        -- Hint: you can use the table.sort function
        -- Hint: you can use the table.insert function
        -- Hint: you can use the table.remove function
        -- Hint: you can use the table.concat function
        -- Hint: you can use the table.unpack function
        -- Hint: you can use the table.pack function
        -- Hint: you can use the table.move function
        -- Hint: you can use the table.maxn function
        -- Hint: you can use the table.foreach function
        -- Hint: you can use the table.foreachi function
        -- Hint: you can
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpcfqd5zvl.lua:66: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local s = {}
      for i, v in ipairs(l) do
        if s[v] then
          return true
        end
        s[-v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadevia7j.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpadevia7j.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      local t = {}
      for i, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4v7pndv.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy4v7pndv.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: you can use the table.sort function to sort a table
      -- in-place.
      -- Hint: you can use the table.concat function to concatenate
      -- two tables.
      -- Hint: you can use the table.insert function to insert an
      -- element into a table.
      -- Hint: you can use the table.remove function to remove an
      -- element from a table.
      -- Hint: you can use the # operator to get the length of a table.
      -- Hint: you can use the pairs function to iterate over the
      -- elements of a table.
      -- Hint: you can use the ipairs function to iterate over the
      -- elements of a table in order.
      -- Hint: you can use the math.abs function to get the absolute
      -- value of a number.
      -- Hint: you can use the math.max function to get the maximum
      -- of two numbers.
      -- Hint: you can use the math.min function to get the minimum
      -- of two numbers.
      -- Hint: you can use the math.random function to get a random
      -- number.
      -- Hint: you can use the math.randomseed function to set the
      -- random seed.
      -- Hint: you can use the string.format function to format a
      -- string.
      -- Hint: you can use the string.gsub function to replace
      -- substrings in a string.
      -- Hint: you can use the string.len function to get the length
      -- of a string.
      -- Hint: you can use the string.lower function to convert a
      -- string to lowercase.
      -- Hint: you can use the string.match function to match a
      -- regular expression.
      -- Hint: you can use the string.reverse function to reverse a
      -- string.
      -- Hint: you can use the string.sub function to get a substring
      -- of a string.
      -- Hint: you can use the string.upper function to convert a
      -- string to uppercase.
      -- Hint: you can use the table.
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmph8f8tgka.lua:71: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- your code here
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- YOUR CODE HERE
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      local sum = 0
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          if i ~= j then
            sum = v + w
            if sum == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt81p2r7.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdt81p2r7.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- your code here
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                if i ~= j and v + w == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local function pairs_sum_to_zero_helper(l, i, j)
            if i == #l then
                return false
            elseif j == #l then
                return pairs_sum_to_zero_helper(l, i + 1, i + 2)
            elseif l[i] + l[j] == 0 then
                return true
            else
                return pairs_sum_to_zero_helper(l, i, j + 1)
            end
        end
        return pairs_sum_to_zero_helper(l, 1, 2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvk6rs4_.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuvk6rs4_.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanhs6rtt.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpanhs6rtt.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsb7ssj.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxzsb7ssj.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i = 1, #l do
            if t[l[i]] then
                return true
            end
            t[-l[i]] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local set = {}
        for _, v in ipairs(l) do
            if set[-v] then
                return true
            end
            set[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the table.sort function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the # operator
      -- Hint: use the pairs function
      -- Hint: use the ipairs function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- H
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp7wat1o8e.lua:73: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5b8xcu10.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5b8xcu10.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.getn function
      -- Hint: use the pairs function
      -- Hint: use the ipairs function
      -- Hint: use the tostring function
      -- Hint: use the tonumber function
      -- Hint: use the type function
      -- Hint: use the print function
      -- Hint: use the error function
      -- Hint: use the assert function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.maxn function
      -- Hint: use the table.move function
      -- Hint: use the table.new function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.getn function
      -- Hint: use the pairs function
      -- Hint: use the ipairs function
      -- Hint: use the tostring function
      -- Hint: use the tonumber function
      -- Hint: use the type function
      -- Hint: use the print function
      -- Hint: use the error function
      -- Hint: use the assert function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.maxn function
      -- Hint: use the table.move function
      -- Hint: use the table.new function
      -- Hint: use the table.remove function
      -- Hint: use the table.insert function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.getn function
      -- Hint: use the pairs function
      -- Hint: use the ipairs function
      -- Hint:
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpirt4bfcp.lua:75: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- YOUR CODE HERE
        local sum = 0
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- your code here
      local t = {}
      for i,v in ipairs(l) do
        if t[v] ~= nil then
          return true
        else
          t[-v] = true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68n6m64p.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp68n6m64p.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local n = #l
        for i = 1, n do
            for j = i + 1, n do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7ixc9kd.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj7ixc9kd.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local hash = {}
        for _, v in ipairs(l) do
            if hash[-v] then
                return true
            end
            hash[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ncjqwp4.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ncjqwp4.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- your code here
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local s = {}
      for _, v in ipairs(l) do
        if s[-v] then
          return true
        end
        s[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprise3kc7.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmprise3kc7.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw34092i4.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw34092i4.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local h = {}
        for _, v in ipairs(l) do
            if h[-v] then
                return true
            end
            h[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- YOUR CODE HERE
        for i, v in ipairs(l) do
            for j, k in ipairs(l) do
                if v + k == 0 and i ~= j then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: write this function
        -- Hint: you can use the function `contains` from above
        -- to check if a table contains a value.
        -- Hint: you can use the function `pairs` to iterate
        -- over the elements of a table.
        -- Hint: you can use the function `unpack` to get the
        -- elements of a table as a list of arguments.
        -- Hint: you can use the function `table.insert` to
        -- add an element to a table.
        -- Hint: you can use the function `table.remove` to
        -- remove an element from a table.
        -- Hint: you can use the function `table.concat` to
        -- concatenate the elements of a table into a string.
        -- Hint: you can use the function `table.sort` to
        -- sort the elements of a table.
        -- Hint: you can use the function `table.pack` to
        -- create a table from a list of arguments.
        -- Hint: you can use the function `table.unpack` to
        -- get the elements of a table as a list of arguments.
        -- Hint: you can use the function `table.maxn` to
        -- get the number of elements in a table.
        -- Hint: you can use the function `table.getn` to
        -- get the number of elements in a table.
        -- Hint: you can use the function `table.setn` to
        -- set the number of elements in a table.
        -- Hint: you can use the function `table.foreach` to
        -- iterate over the elements of a table.
        -- Hint: you can use the function `table.foreachi` to
        -- iterate over the elements of a table.
        -- Hint: you can use the function `table.getn` to
        -- get the number of elements in a table.
        -- Hint: you can use the function `table.insert` to
        -- insert an element into a table.
        -- Hint: you can use the function `table.remove` to
        -- remove an element from a table.
        -- Hint
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp1ikjium5.lua:66: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78yopodd.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp78yopodd.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0fz01td.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0fz01td.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: you can use the table.sort function to sort a table
      -- in-place.
      -- Hint: you can use the table.concat function to concatenate
      -- two tables.
      -- Hint: you can use the table.insert function to insert an
      -- element into a table.
      -- Hint: you can use the table.remove function to remove an
      -- element from a table.
      -- Hint: you can use the # operator to get the length of a table.
      -- Hint: you can use the == operator to compare two tables.
      -- Hint: you can use the == operator to compare two numbers.
      -- Hint: you can use the < operator to compare two numbers.
      -- Hint: you can use the > operator to compare two numbers.
      -- Hint: you can use the <= operator to compare two numbers.
      -- Hint: you can use the >= operator to compare two numbers.
      -- Hint: you can use the ~= operator to compare two numbers.
      -- Hint: you can use the ~= operator to compare two tables.
      -- Hint: you can use the and operator to combine two boolean
      -- values.
      -- Hint: you can use the or operator to combine two boolean
      -- values.
      -- Hint: you can use the not operator to negate a boolean value.
      -- Hint: you can use the if-then-else statement to conditionally
      -- execute code.
      -- Hint: you can use the while statement to repeatedly execute
      -- code.
      -- Hint: you can use the for statement to repeatedly execute code.
      -- Hint: you can use the break statement to break out of a loop.
      -- Hint: you can use the return statement to return a value.
      -- Hint: you can use the do-end statement to group statements.
      -- Hint: you can use the do-end statement to group statements.
      -- Hint: you can use the do-end statement to group statements.
      -- Hint: you can use the do-end statement to group statements.
      -- Hint: you can use the do-end statement to
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp03x60jyf.lua:65: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for i, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local nums = {}
        for _, v in ipairs(l) do
            if nums[v] then
                return true
            end
            nums[-v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      local t = {}
      for i, v in ipairs(l) do
        if t[v] then
          return true
        else
          t[-v] = true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r5so4je.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8r5so4je.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz97pl1n.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdz97pl1n.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      local table = {}
      for i,v in ipairs(l) do
        table[v] = true
      end
      for i,v in ipairs(l) do
        if table[-v] then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8hxd6oa.lua:31:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq8hxd6oa.lua:31: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- your code here
        local sum = 0
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local set = {}
        for _, v in ipairs(l) do
            if set[-v] then
                return true
            end
            set[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local hash = {}
        for i = 1, #l do
            if hash[-l[i]] then
                return true
            end
            hash[l[i]] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      local flag = false
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            flag = true
          end
        end
      end
      return flag
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb660e_24.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb660e_24.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6u98rhwz.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6u98rhwz.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1i8pvo3.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmps1i8pvo3.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- YOUR CODE HERE
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the table.sort function
      table.sort(l)
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5ylrcov.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk5ylrcov.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- your code here
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4x6o3ygf.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4x6o3ygf.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          if i ~= j and v + w == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh4f5pbr.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoh4f5pbr.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgef4kuf7.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgef4kuf7.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, x in ipairs(l) do
        if seen[-x] then
          return true
        end
        seen[x] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h5dqb8u.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0h5dqb8u.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local s = {}
      for _, v in ipairs(l) do
        if s[-v] then
          return true
        end
        s[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            if t[-v] then
                return true
            end
            t[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for i = 1, #l do
            if seen[-l[i]] then
                return true
            end
            seen[l[i]] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogm2bnd6.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpogm2bnd6.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local s = {}
        for _, v in ipairs(l) do
            if s[-v] then
                return true
            end
            s[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: you can use the table.sort function to sort a table
        -- of integers.
        -- table.sort(l)
        -- for i = 1, #l do
        --     for j = i + 1, #l do
        --         if l[i] + l[j] == 0 then
        --             return true
        --         end
        --     end
        -- end
        -- return false
        table.sort(l)
        local i = 1
        local j = #l
        while i < j do
            if l[i] + l[j] == 0 then
                return true
            elseif l[i] + l[j] < 0 then
                i = i + 1
            else
                j = j - 1
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local t = {}
        for i = 1, #l do
            if t[-l[i]] then
                return true
            end
            t[l[i]] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip5e120w.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpip5e120w.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local seen = {}
      for _, v in ipairs(l) do
        if seen[-v] then
          return true
        end
        seen[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the table.sort function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.concat function
      -- Hint: use the tostring function
      -- Hint: use the tonumber function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.move function
      -- Hint: use the table.maxn function
      -- Hint: use the table.getn function
      -- Hint: use the table.foreach function
      -- Hint: use the table.foreachi function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.move function
      -- Hint: use the table.maxn function
      -- Hint: use the table.getn function
      -- Hint: use the table.foreach function
      -- Hint: use the table.foreachi function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.move function
      -- Hint: use the table.maxn function
      -- Hint: use the table.getn function
      -- Hint: use the table.foreach function
      -- Hint: use the table.foreachi function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.unpack function
      -- Hint
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp05yhx9go.lua:72: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local s = {}
      for _, v in ipairs(l) do
        if s[-v] then
          return true
        end
        s[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: you can use the table.sort function to sort a table.
        -- Hint: you can use the table.insert function to insert an element
        -- into a table.
        -- Hint: you can use the table.remove function to remove an element
        -- from a table.
        -- Hint: you can use the # operator to get the length of a table.
        -- Hint: you can use the pairs function to iterate over the elements
        -- of a table.
        -- Hint: you can use the ipairs function to iterate over the elements
        -- of a table.
        -- Hint: you can use the table.concat function to concatenate two
        -- tables.
        -- Hint: you can use the table.unpack function to unpack a table.
        -- Hint: you can use the table.pack function to pack a list of values
        -- into a table.
        -- Hint: you can use the table.remove function to remove an element
        -- from a table.
        -- Hint: you can use the table.insert function to insert an element
        -- into a table.
        -- Hint: you can use the table.sort function to sort a table.
        -- Hint: you can use the table.concat function to concatenate two
        -- tables.
        -- Hint: you can use the table.unpack function to unpack a table.
        -- Hint: you can use the table.pack function to pack a list of values
        -- into a table.
        -- Hint: you can use the table.remove function to remove an element
        -- from a table.
        -- Hint: you can use the table.insert function to insert an element
        -- into a table.
        -- Hint: you can use the table.sort function to sort a table.
        -- Hint: you can use the table.concat function to concatenate two
        -- tables.
        -- Hint: you can use the table.unpack function to unpack a table.
        -- Hint: you can use the table.pack function to pack a list of values
        -- into a table.
        -- Hint:
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp5op08euh.lua:67: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local map = {}
      for _, v in ipairs(l) do
        map[v] = true
      end
      for _, v in ipairs(l) do
        if map[-v] then
          return true
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexvs0bt6.lua:30:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpexvs0bt6.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh54bito.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeh54bito.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- your code here
      local n = #l
      if n == 1 then
        return false
      end
      for i = 1, n do
        for j = i + 1, n do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpd_jeh0.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkpd_jeh0.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8pfq5lw.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt8pfq5lw.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.concat function
      -- Hint: you can use the table.insert function
      -- Hint: you can use the table.remove function
      -- Hint: you can use the table.unpack function
      -- Hint: you can use the table.pack function
      -- Hint: you can use the table.move function
      -- Hint: you can use the table.maxn function
      -- Hint: you can use the table.getn function
      -- Hint: you can use the table.foreach function
      -- Hint: you can use the table.foreachi function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.sort function
      -- Hint: you
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpgm47bgl4.lua:67: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- your code here
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec67r200.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpec67r200.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5_yaev8.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr5_yaev8.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdti7oza.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjdti7oza.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for i = 1, #l do
        if t[l[i]] then
          return true
        end
        t[-l[i]] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        local seen = {}
        for _, v in ipairs(l) do
            if seen[-v] then
                return true
            end
            seen[v] = true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- your code here
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7p25kf.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsc7p25kf.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        if t[-v] then
          return true
        end
        t[v] = true
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x71vxje.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2x71vxje.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjntdudq7.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjntdudq7.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
      local sum = 0
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == 0 then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52kjlbwe.lua:25:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp52kjlbwe.lua:25: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- pairs_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are two distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> pairs_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> pairs_sum_to_zero({1, 3, -2, 1})
    -- false
    -- >>> pairs_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
    -- true
    -- >>> pairs_sum_to_zero({1})
    -- false
    local function pairs_sum_to_zero(l)
        -- TODO: implement this function
        for i = 1, #l do
            for j = i + 1, #l do
                if l[i] + l[j] == 0 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = pairs_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), false)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
        lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
        lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
