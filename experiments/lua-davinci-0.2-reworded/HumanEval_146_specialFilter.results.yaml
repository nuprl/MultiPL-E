name: HumanEval_146_specialFilter
language: lua
results:
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9emkjf8h.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9emkjf8h.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtp32cve.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmprtp32cve.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6x1274z.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpc6x1274z.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxm5adfl.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbxm5adfl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ge25lv5.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp3ge25lv5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusx4hubo.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpusx4hubo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuo8n276r.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpuo8n276r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and num %\
    \ 2 == 1 and math.floor(num / 10) % 2 == 1 then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8cnebj5.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpt8cnebj5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt56ahq4.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpzt56ahq4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lrt3xjk.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0lrt3xjk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquu6i7t3.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpquu6i7t3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num // 10) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7np6ep82.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7np6ep82.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q7434li.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0q7434li.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkdyviof.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmprkdyviof.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1kdqe__.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq1kdqe__.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgayn4jt9.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgayn4jt9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9os2o_8f.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9os2o_8f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for k, v in pairs(nums) do\n        if v > 10 and v % 2 == 1 and math.floor(v\
    \ / 10) % 2 == 1 and v % 10 % 2 == 1 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysqqagla.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpysqqagla.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi_q8_oe.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppi_q8_oe.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wabz1ic.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp4wabz1ic.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_bazcgu.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5_bazcgu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2k0ch7m.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpl2k0ch7m.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptojqvyf6.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmptojqvyf6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfktw4_ua.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpfktw4_ua.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaq1ntb58.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaq1ntb58.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaarnflp2.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaarnflp2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and num\
    \ // 10 % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6_hzr1j.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb6_hzr1j.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2915ilc.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn2915ilc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and num // 10 % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprb5mnk4o.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprb5mnk4o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjby3wnnt.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjby3wnnt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge4_yri4.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpge4_yri4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad91391b.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad91391b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvxihocf.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyvxihocf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6198f2j.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy6198f2j.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and (num % 2 ==\
    \ 1) and (math.floor(num / 10) % 2 == 1) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lqqydns.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_lqqydns.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsczau11.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpgsczau11.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfwewo4k.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpqfwewo4k.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num % 10 % 2 == 1 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw5r5f6y.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmprw5r5f6y.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56ghhuyd.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp56ghhuyd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and isOdd(num %\
    \ 10) and isOdd(num // 10) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9ewbqq3.lua:12:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpf9ewbqq3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpf9ewbqq3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj86thona.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpj86thona.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfgw9mhq.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplfgw9mhq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mbeu01y.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6mbeu01y.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3rx_bui.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd3rx_bui.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxp7vw0f.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsxp7vw0f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and (num % 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp892rnrgb.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp892rnrgb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and v % 2 == 1 and math.floor(v\
    \ / 10) % 2 == 1 and v % 10 % 2 == 1 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2emrp867.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2emrp867.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jfikamk.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp8jfikamk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e7zwrww.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8e7zwrww.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhqcesam.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnhqcesam.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p1y3nw7.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp0p1y3nw7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n\tlocal count =\
    \ 0\n\tfor i = 1, #nums do\n\t\tlocal num = nums[i]\n\t\tif num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h234sbf.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp2h234sbf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num // 10 % 10 % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes6tgs0r.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpes6tgs0r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ math.floor(nums[i] / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf7nuz8f.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppf7nuz8f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y7rvvp6.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5y7rvvp6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiasyljr.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdiasyljr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num % 10) % 2 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbw8uwkob.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpbw8uwkob.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsca1ft47.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpsca1ft47.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and num // 10 % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuwod9bv.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmuwod9bv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaha40fkv.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaha40fkv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n         \
    \   local first = num % 10\n            local last = num // 10\n            if\
    \ first % 2 == 1 and last % 2 == 1 then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3981bhu_.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3981bhu_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wedt505.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9wedt505.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and (num % 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbljwpsz7.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpbljwpsz7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg91o815.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjg91o815.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and (num\
    \ % 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecvnw2rb.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpecvnw2rb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplywt6ilh.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplywt6ilh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ nums[i] % 10 % 2 == 1 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrgkkmmu.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmprrgkkmmu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and num // 10 % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kreb3x0.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_kreb3x0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad7uilx7.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad7uilx7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx948ab19.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx948ab19.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsqruzen.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptsqruzen.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtxk7q0p.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdtxk7q0p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num // 10) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6sbzb8k.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn6sbzb8k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num // 10) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3ilwene.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp3ilwene.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and v % 2 == 1 and math.floor(v\
    \ / 10) % 2 == 1 and v % 10 % 2 == 1 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g3fsj7a.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5g3fsj7a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrpoa47f.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplrpoa47f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nipx76x.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp7nipx76x.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9dgf6c7.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv9dgf6c7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_3ucf99.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd_3ucf99.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1tylq1u.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpt1tylq1u.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ nums[i] % 10 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h8r3tai.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6h8r3tai.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiysh6_0y.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpiysh6_0y.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_nniswg.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpo_nniswg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_dsqt2a.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpq_dsqt2a.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3w34tjv.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb3w34tjv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5gdbq9j.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpb5gdbq9j.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbw9tx5h.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvbw9tx5h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4g6k1cc.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpf4g6k1cc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num % 10 % 2 == 1 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24tp9u93.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp24tp9u93.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3d_9650.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm3d_9650.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_nxsrh1.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpy_nxsrh1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num % 10) % 2 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq0j_89m.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpmq0j_89m.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjur8f57a.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjur8f57a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cqg2a37.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_cqg2a37.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp045p8c6u.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp045p8c6u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hzei17v.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9hzei17v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xdeawq7.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8xdeawq7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmap4rgh4.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmap4rgh4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ppn6p7d.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5ppn6p7d.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yoi3xho.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1yoi3xho.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoiq6xhv.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpeoiq6xhv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynv6obg9.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpynv6obg9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse66bhko.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpse66bhko.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglmhxoir.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpglmhxoir.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn85px4b.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpxn85px4b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbey541ue.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpbey541ue.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5fxdy0l.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd5fxdy0l.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoslqx3x.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuoslqx3x.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0eh3y1ba.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0eh3y1ba.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3i2qrf9.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpo3i2qrf9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeybwt4jc.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpeybwt4jc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowapwaft.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpowapwaft.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7on0dja.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm7on0dja.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg867aclm.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpg867aclm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhd73tug.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpyhd73tug.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpwzfg42.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpgpwzfg42.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgouhhgmo.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgouhhgmo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jd0697d.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jd0697d.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplebhavd2.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplebhavd2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdpp1mj4.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmptdpp1mj4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_xgkuyx.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp0_xgkuyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and num %\
    \ 2 == 1 and math.floor(num / 10) % 2 == 1 then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4v6r7vv.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpo4v6r7vv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4rb671_.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpo4rb671_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqpy2mzz.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptqpy2mzz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucy_0492.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpucy_0492.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h5xhr_e.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3h5xhr_e.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrnpy7e6.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbrnpy7e6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl89n3tca.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpl89n3tca.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiglgmim8.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiglgmim8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzycqzqq0.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpzycqzqq0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgun062tx.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgun062tx.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig55tv4o.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpig55tv4o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n\tlocal count =\
    \ 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp48ypf2.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmp48ypf2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcb4ucw0.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmptcb4ucw0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfy_z1n0d.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfy_z1n0d.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for k, v in pairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rxnxd5z.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7rxnxd5z.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5x1jz7o.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpe5x1jz7o.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uofrddc.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6uofrddc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num % 10) % 2 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9eqma5ea.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp9eqma5ea.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qhf_9q8.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3qhf_9q8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe2mshut.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwe2mshut.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk0x9xpc.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvk0x9xpc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd6y_ux2.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqd6y_ux2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and num %\
    \ 2 == 1 and math.floor(num / 10) % 2 == 1 then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4ov47kk.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpa4ov47kk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsom06b54.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpsom06b54.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbt0evjf.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwbt0evjf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprivnrery.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprivnrery.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgscl86u2.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgscl86u2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41vrwcj6.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp41vrwcj6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpribabtce.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpribabtce.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fjcy434.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3fjcy434.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    if nums[i] > 10 and math.abs(nums[i]) % 2 == 1\
    \ and math.abs(nums[i] % 10) % 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hg5zb6h.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp2hg5zb6h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, v in ipairs(nums) do\n    if v > 10 and math.abs(v) % 10 % 2 ==\
    \ 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp65ju2j2.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp65ju2j2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpakj8kr.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbpakj8kr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy66am0hn.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy66am0hn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and isOdd(num %\
    \ 10) and isOdd(num // 10) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdoecnti.lua:12:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpwdoecnti.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwdoecnti.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef39tom_.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpef39tom_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and isFirstAndLastDigitsOdd(num)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgcppdjh0.lua:12:\
    \ attempt to call a nil value (global 'isFirstAndLastDigitsOdd')\nstack traceback:\n\
    \t/tmp/tmpgcppdjh0.lua:12: in local 'candidate'\n\t/tmp/tmpgcppdjh0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5odnen3.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv5odnen3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp140_j7dq.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp140_j7dq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num % 10 % 2 == 1 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb77zo90.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpfb77zo90.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv979rp32.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv979rp32.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o8it0ue.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2o8it0ue.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8spqh6r.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr8spqh6r.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10\
    \ % 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwim0ug4f.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwim0ug4f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i, num in ipairs(nums) do\n        if num > 10 and isOdd(num) and\
    \ isOdd(num % 10) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1c37gch.lua:12:\
    \ attempt to call a nil value (global 'isOdd')\nstack traceback:\n\t/tmp/tmpv1c37gch.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpv1c37gch.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num % 10 % 2 == 1 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl_bg7ws.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpxl_bg7ws.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplss8azpu.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmplss8azpu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o3kqs_b.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6o3kqs_b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgn77xas.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphgn77xas.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrnjohc3.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwrnjohc3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn638lgn.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpcn638lgn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and num // 10 % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0qyuxsi.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpl0qyuxsi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num // 10 % 10 % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibdn0pko.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpibdn0pko.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3gmglt_.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpb3gmglt_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozxtstzn.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpozxtstzn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9q2mh5g.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpb9q2mh5g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local n = nums[i]\n        if n > 10 and\
    \ n % 2 == 1 and (n % 10) % 2 == 1 then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuq0bcz7.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpjuq0bcz7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptemxb8s7.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptemxb8s7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and (num % 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ni469s2.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp7ni469s2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16e4on8g.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp16e4on8g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvanktzl.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprvanktzl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num % 10) % 2 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj696nruz.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpj696nruz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7jp6849.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr7jp6849.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and math.fmod(nums[i],\
    \ 2) == 1 and math.fmod(math.floor(nums[i] / 10), 2) == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1crwfd7j.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1crwfd7j.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ogbofvs.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8ogbofvs.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 == 1 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtzqfxro.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgtzqfxro.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi23zdh5.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphi23zdh5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb02e7myu.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb02e7myu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zksscbl.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1zksscbl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and math.floor(math.abs(num) / 10) % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9215uy8h.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9215uy8h.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num // 10) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwvfbkti.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkwvfbkti.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyqr3ww8.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmppyqr3ww8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ nums[i] % 10 % 2 == 1 then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox31k4ys.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpox31k4ys.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and (num // 10) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4zvw_06.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_4zvw_06.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and math.abs(num) % 10 % 2 == 1 and num % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5imco59h.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5imco59h.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph22m739j.lua:25:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmph22m739j.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1\
    \ and num // 10 % 2 == 1 then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptm00r2bc.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptm00r2bc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ math.floor(nums[i] / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesbo8kur.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpesbo8kur.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a table of numbers as input and returns\
    \ \n-- the number of elements in the table that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and num % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio9vxehk.lua:24:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpio9vxehk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
