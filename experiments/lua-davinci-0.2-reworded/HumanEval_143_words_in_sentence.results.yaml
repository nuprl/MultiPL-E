---
language: lua
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuasbhs7r.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuasbhs7r.lua:22:
    in local 'candidate'\n\t/tmp/tmpuasbhs7r.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_le170h.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpl_le170h.lua:22:
    in local 'candidate'\n\t/tmp/tmpl_le170h.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz5ak867.lua:39:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkz5ak867.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7wl0f4c.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_7wl0f4c.lua:22:
    in local 'candidate'\n\t/tmp/tmp_7wl0f4c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        local result = {}
        local function is_prime(n)
            if n < 2 then
                return false
            end
            if primes[n] ~= nil then
                return primes[n]
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    primes[n] = false
                    return false
                end
            end
            primes[n] = true
            return true
        end
        for word in sentence:gmatch('%S+') do
            table.insert(words, word)
        end
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ll4m2r.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpq7ll4m2r.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local function is_prime(n)
        if n == 1 then return false end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then return false end
        end
        return true
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, index in ipairs(primes) do
            table.insert(result, words[index])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd0l5mum.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpmd0l5mum.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:
    in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39cild0o.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp39cild0o.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%S+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6tx1wkd8.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6tx1wkd8.lua:22:
    in local 'candidate'\n\t/tmp/tmp6tx1wkd8.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local result = {}
        for i = 1, #words do
            local word = words[i]
            local is_prime = true
            for j = 2, #word - 1 do
                if word:sub(j, j) == word:sub(1, 1) then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                result[#result + 1] = word
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hdy6n4b.lua:40:
    expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp0hdy6n4b.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                primes[#primes + 1] = i
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    result[#result + 1] = word
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i = 1, #words do
            local word = words[i]
            local is_prime = true
            for j = 2, #word do
                if word:len() % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_q8zxb5.lua:40:
    expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpb_q8zxb5.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh_5n_50.lua:40:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkh_5n_50.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}
        local words = {}
        for word in sentence:gmatch('%w+') do
            local len = #word
            for _, prime in ipairs(primes) do
                if len == prime then
                    table.insert(words, word)
                    break
                end
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    table.insert(result, word)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:
    in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local result = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8cvh2p9.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpq8cvh2p9.lua:22:
    in local 'candidate'\n\t/tmp/tmpq8cvh2p9.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh_5n_50.lua:40:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkh_5n_50.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    table.insert(result, word)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        local result = {}
        local is_prime = true
        local word = ''
        local sentence_length = string.len(sentence)
        local sentence_index = 1
        local word_index = 1
        local word_length = 0
        local prime_index = 1
        local prime_length = 0
        local result_index = 1
        local result_length = 0
        local result_word = ''
        local result_word_index = 1
        local result_word_length = 0
        local result_word_char = ''
        local result_word_char_index = 1
        local result_word_char_length = 0
        local result_word_char_code = 0
        local result_word_char_code_index = 1
        local result_word_char_code_length = 0
        local result_word_char_code_char = ''
        local result_word_char_code_char_index = 1
        local result_word_char_code_char_length = 0
        local result_word_char_code_char_code = 0
        local result_word_char_code_char_code_index = 1
        local result_word_char_code_char_code_length = 0
        local result_word_char_code_char_code_char = ''
        local result_word_char_code_char_code_char_index = 1
        local result_word_char_code_char_code_char_length = 0
        local result_word_char_code_char_code_char_code = 0
        local result_word_char_code_char_code_char_code_index = 1
        local result_word_char_code_char_code_char_code_length = 0
        local result_word_char_code_char_code_char_code_char = ''
        local result_word_char_code_char_code_char_code_char_index = 1
        local result_word_char_code_char_code_char_code_char_length = 0
        local result_word_char_code_char_code_char_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: 'lua: /tmp/tmp8fncgvk2.lua:67: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 2, 100 do
        local is_prime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, i)
        end
      end
      local result = {}
      for _, word in ipairs(words) do
        for _, prime in ipairs(primes) do
          if #word == prime then
            table.insert(result, word)
            break
          end
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        for i = 1, #words do
            local word = words[i]
            local is_prime = true
            for j = 2, #word do
                if word % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_pkegh1b.lua:25:
    attempt to perform arithmetic on a string value (local 'word')\nstack traceback:\n\t/tmp/tmp_pkegh1b.lua:25:
    in local 'candidate'\n\t/tmp/tmp_pkegh1b.lua:40: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 2, #words do
        local is_prime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                primes[#primes + 1] = i
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    result[#result + 1] = word
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      local primes = {}
      local result = {}
      local function is_prime(num)
        if num == 1 then return false end
        for i = 2, num - 1 do
          if num % i == 0 then return false end
        end
        return true
      end
      for i = 1, #sentence do
        if sentence:sub(i, i) == ' ' then
          table.insert(words, sentence:sub(1, i - 1))
          sentence = sentence:sub(i + 1)
          i = 0
        end
      end
      table.insert(words, sentence)
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueswb3d7.lua:45:
    expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpueswb3d7.lua:45: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:
    in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, index in ipairs(primes) do
            table.insert(result, words[index])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%S+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjue04g2.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpbjue04g2.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, index in ipairs(primes) do
            table.insert(result, words[index])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local result = {}
        for w in sentence:gmatch('%w+') do
            table.insert(words, w)
        end
        for _, w in ipairs(words) do
            if is_prime(#w) then
                table.insert(result, w)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp86eq0yxq.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp86eq0yxq.lua:22:
    in local 'candidate'\n\t/tmp/tmp86eq0yxq.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local result = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        for i = 1, #words do
            local word = words[i]
            local length = #word
            local is_prime = true
            for j = 2, length - 1 do
                if length % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                result[#result + 1] = word
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprarc5wea.lua:41:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmprarc5wea.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    table.insert(result, word)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        words[#words + 1] = word
      end
      local result = {}
      for i = 1, #words do
        local word = words[i]
        local is_prime = true
        for j = 2, #word - 1 do
          if word:len() % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          result[#result + 1] = word
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxt_rmtq.lua:40:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpqxt_rmtq.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 2, #words do
        local is_prime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        local result = {}
        local function is_prime(n)
            if n < 2 then
                return false
            end
            if primes[n] ~= nil then
                return primes[n]
            end
            for i = 2, math.floor(math.sqrt(n)) do
                if n % i == 0 then
                    primes[n] = false
                    return false
                end
            end
            primes[n] = true
            return true
        end
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:
    in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, index in ipairs(primes) do
            table.insert(result, words[index])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        words[#words + 1] = word
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          result[#result + 1] = word
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbptw0mu.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvbptw0mu.lua:22:
    in local 'candidate'\n\t/tmp/tmpvbptw0mu.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    table.insert(result, word)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:
    in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local primes = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                primes[#primes + 1] = word
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_r_2zrn2.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_r_2zrn2.lua:22:
    in local 'candidate'\n\t/tmp/tmp_r_2zrn2.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local function is_prime(n)
        if n < 2 then
          return false
        end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then
            return false
          end
        end
        return true
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n <= 1 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = sentence:split(' ')
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjhcva5d.lua:16:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxjhcva5d.lua:16:
    in local 'candidate'\n\t/tmp/tmpxjhcva5d.lua:29: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local result = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        for i = 1, #words do
            local word = words[i]
            local is_prime = true
            for j = 2, word:len() - 1 do
                if word:len() % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                result[#result + 1] = word
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ynf93i0.lua:40:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2ynf93i0.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                primes[#primes + 1] = words[i]
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27s4rdnv.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp27s4rdnv.lua:22:
    in local 'candidate'\n\t/tmp/tmp27s4rdnv.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        local result = {}
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(primes, word)
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpapaenhxk.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpapaenhxk.lua:22:
    in local 'candidate'\n\t/tmp/tmpapaenhxk.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:
    in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(primes, word)
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpapaenhxk.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpapaenhxk.lua:22:
    in local 'candidate'\n\t/tmp/tmpapaenhxk.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%S+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9coy2r1z.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9coy2r1z.lua:22:
    in local 'candidate'\n\t/tmp/tmp9coy2r1z.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9xtdj73.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpj9xtdj73.lua:22:
    in local 'candidate'\n\t/tmp/tmpj9xtdj73.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local function word_length_is_prime(word)
            return is_prime(#word)
        end
        local prime_words = {}
        for _, word in ipairs(words) do
            if word_length_is_prime(word) then
                table.insert(prime_words, word)
            end
        end
        return table.concat(prime_words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnyugd0m.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpcnyugd0m.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        words[#words + 1] = word
      end
      local primes = {}
      for i = 2, #words do
        local is_prime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          primes[#primes + 1] = i
        end
      end
      local result = {}
      for _, index in ipairs(primes) do
        result[#result + 1] = words[index]
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uvtibrm.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp_uvtibrm.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local function is_prime(n)
        if n < 2 then
          return false
        end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then
            return false
          end
        end
        return true
      end
      local words = {}
      for word in sentence:gmatch('%w+') do
        if is_prime(#word) then
          table.insert(words, word)
        end
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local result = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        for i = 1, #words do
            local word = words[i]
            local is_prime = true
            for j = 2, word:len() - 1 do
                if word:len() % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                result[#result + 1] = word
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ynf93i0.lua:40:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2ynf93i0.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:
    in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                primes[#primes + 1] = i
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            result[#result + 1] = words[i]
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x4dtsc_.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp1x4dtsc_.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:
    in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:
    in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%S+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local res = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(res, word)
            end
        end
        return table.concat(res, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptolepl3j.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptolepl3j.lua:22:
    in local 'candidate'\n\t/tmp/tmptolepl3j.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:
    in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for i = 1, #words do
            local word = words[i]
            local len = #word
            local is_prime = true
            for j = 2, len - 1 do
                if len % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqljefm82.lua:41:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpqljefm82.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 2, #words do
        local is_prime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.floor(math.sqrt(n)) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, index in ipairs(primes) do
            table.insert(result, words[index])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    result[#result + 1] = word
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:
    in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        words[#words + 1] = word
      end
      local result = {}
      for i = 1, #words do
        local word = words[i]
        local is_prime = true
        for j = 2, #word - 1 do
          if word:sub(j, j) == word:sub(1, 1) then
            is_prime = false
            break
          end
        end
        if is_prime then
          result[#result + 1] = word
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt26l70mq.lua:40:
    expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpt26l70mq.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        if is_prime(#word) then
          table.insert(words, word)
        end
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvev9kdv5.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvev9kdv5.lua:18:
    in local 'candidate'\n\t/tmp/tmpvev9kdv5.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:
    in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%S+') do
        if is_prime(#word) then
          table.insert(words, word)
        end
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmt_4zwy.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgmt_4zwy.lua:18:
    in local 'candidate'\n\t/tmp/tmpgmt_4zwy.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local function is_prime(n)
        if n < 2 then
          return false
        end
        for i = 2, math.floor(math.sqrt(n)) do
          if n % i == 0 then
            return false
          end
        end
        return true
      end
      local words = {}
      for word in sentence:gmatch('%w+') do
        if is_prime(#word) then
          table.insert(words, word)
        end
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local function is_prime(n)
            if n < 2 then
                return false
            end
            for i = 2, math.sqrt(n) do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz5ak867.lua:39:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkz5ak867.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        local result = {}
        for i = 1, #words do
            local word = words[i]
            local length = #word
            local is_prime = true
            for j = 2, length - 1 do
                if length % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                result[#result + 1] = word
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j6phxnj.lua:41:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp_j6phxnj.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:
    in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:
    in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local result = {}
        local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}
        for word in sentence:gmatch('%w+') do
            words[#words + 1] = word
        end
        for i = 1, #words do
            for j = 1, #primes do
                if #words[i] == primes[j] then
                    result[#result + 1] = words[i]
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        for i = 1, #sentence do
            if sentence:sub(i, i) == ' ' then
                table.insert(words, sentence:sub(1, i - 1))
                sentence = sentence:sub(i + 1)
                i = 0
            end
        end
        table.insert(words, sentence)
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mrbxexx.lua:44:
    expected: \"is\"\nactual: \"is a test\"\nstack traceback:\n\t/tmp/tmp7mrbxexx.lua:44:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, 100 do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, word in ipairs(words) do
            for _, prime in ipairs(primes) do
                if #word == prime then
                    table.insert(result, word)
                    break
                end
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local primes = {}
        local result = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        for i = 1, #words do
            local length = #words[i]
            local is_prime = true
            for j = 2, length - 1 do
                if length % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47vuuja_.lua:41:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp47vuuja_.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local function is_prime(n)
        if n < 2 then
          return false
        end
        for i = 2, math.floor(math.sqrt(n)) do
          if n % i == 0 then
            return false
          end
        end
        return true
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            local is_prime = true
            for j = 2, i - 1 do
                if i % j == 0 then
                    is_prime = false
                    break
                end
            end
            if is_prime then
                table.insert(primes, i)
            end
        end
        local result = {}
        for _, i in ipairs(primes) do
            table.insert(result, words[i])
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local function is_prime(n)
        if n < 2 then
          return false
        end
        for i = 2, math.sqrt(n) do
          if n % i == 0 then
            return false
          end
        end
        return true
      end
      local result = {}
      for _, word in ipairs(words) do
        if is_prime(#word) then
          table.insert(result, word)
        end
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 1, #words do
        if is_prime(#words[i]) then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:
    in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:
    in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(primes, word)
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:
    in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
      local words = {}
      for word in sentence:gmatch('%w+') do
        table.insert(words, word)
      end
      local primes = {}
      for i = 2, #words do
        local is_prime = true
        for j = 2, i - 1 do
          if i % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, words[i])
        end
      end
      return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:
    expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 1, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:
    in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            if is_prime(#word) then
                table.insert(result, word)
            end
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:
    in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        for word in sentence:gmatch('%w+') do
            table.insert(words, word)
        end
        local primes = {}
        for i = 2, #words do
            if is_prime(#words[i]) then
                table.insert(primes, words[i])
            end
        end
        return table.concat(primes, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:
    in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- You are given a string representing a sentence,
    -- the sentence contains some words separated by a space,
    -- and you have to return a string that contains the words from the original sentence,
    -- whose lengths are prime numbers,
    -- the order of the words in the new string should be the same as the original one.
    -- Example 1:
    -- >>> words_in_sentence('This is a test')
    -- 'is'
    -- Example 2:
    -- >>> words_in_sentence('lets go for swimming')
    -- 'go for'
    -- Constraints:
    -- * 1 <= len(sentence) <= 100
    -- * sentence contains only letters
    local function words_in_sentence(sentence)
        local words = {}
        local function is_prime(n)
            if n == 1 then
                return false
            end
            for i = 2, n - 1 do
                if n % i == 0 then
                    return false
                end
            end
            return true
        end
        for word in sentence:gmatch('%w+') do
            if is_prime(#word) then
                table.insert(words, word)
            end
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = words_in_sentence
        lu.assertEquals(candidate('This is a test'), 'is')
        lu.assertEquals(candidate('lets go for swimming'), 'go for')
        lu.assertEquals(candidate('there is no place available here'), 'there is no place')
        lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')
        lu.assertEquals(candidate('go for it'), 'go for it')
        lu.assertEquals(candidate('here'), '')
        lu.assertEquals(candidate('here is'), 'is')
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
